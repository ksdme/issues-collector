{
    "vfaronov/httpolice": {
        "all": [],
        "suitable": []
    },
    "myint/autoflake": {
        "all": [
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 13,
                "title": "Add --only-remove-pass",
                "labels": [],
                "description": "It would be nice to have it configurable what is done. Due to Issue #7 I currently don't use this program but would like to remove all unnecessary pass statements.\n\nA integration into autopep8 might also be nice. Every case of this could get an own identifier (e.g. W1234) - so that things are unified and one doesn't need to learn a lot of different options for each tool.\n"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 8,
                "title": "Handle multiline import-from statements",
                "labels": [
                    "enhancement"
                ],
                "description": "consider\n\n```\n11:03 AM noon \u2208 meh.py>cat meh.py \nfrom math import (\n        sqrt,\n        log\n    )\n\nprint(log(2))\n11:03 AM noon \u2208 meh.py>autoflake --remove-all-unused-imports meh.py \n```\n\n:(\n\n```\n11:03 AM noon \u2208 meh.py>autoflake --version\nautoflake 0.6.6\n```\n"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 9,
                "title": "Add option to keep the useless passes",
                "labels": [],
                "description": "Adds a `--keep-useless-pass` argument to the CLI.\n\nAlso had to change the behavior that replaces a removed import with `pass` to return None instead and filter out Nones\n"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 26,
                "title": "Add `populate_all` feature",
                "labels": [],
                "description": "This add `--populate-all` optional argument to populate (append if exist or create it) `__all__` variables with unused modules found in the code.\r\n\r\nCloses https://github.com/myint/autoflake/issues/16"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 35,
                "title": "Don't remove imports from __init__.py",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "A typical way to set up a project is to have the modules specify `__all__` variables and then have the `__init__.py` `from .module_name import *`.  This causes autoflake to remove all of the imports.\r\n\r\nPlease consider leaving the imports in `__init__.py`."
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 31,
                "title": "More comprehensive star-import fixer thing.",
                "labels": [],
                "description": "Basically the title. \r\n\r\nThis basically implements https://github.com/myint/autoflake/issues/30"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 37,
                "title": "Add STDIN and STDOUT support",
                "labels": [],
                "description": "If '-' is passed as a filename, read STDIN. If -s/--stdout is passed as a flag,\nprint formatted source to STDOUT. Useful for text editor integration.\n\nSee related pull request: https://github.com/myint/unify/pull/7"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 16,
                "title": "Populate __all__ to avoid unused name errors",
                "labels": [
                    "enhancement"
                ],
                "description": "When a module imports many names from sub-modules, and does not include any code except for those imports, the module is obviously intended to hold names.\r\n\r\nThose names should be put into `__all__`.\r\n\r\ne.g. the following causes pyflakes errors, as Foo and Bar are unused:\r\n\r\n```\r\nfrom a.b import Foo\r\nfrom a.c import Bar\r\n```\r\n\r\nTo avoid this,\r\n\r\n\r\n```\r\nfrom a.b import Bar\r\nfrom a.c import Foo\r\n\r\n__all__ = ('Bar', 'Foo')\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 30,
                "title": "Expand *all* star imports?",
                "labels": [],
                "description": "I'm somewhat curious what the current limitations on star-import expansion are due to.\r\n\r\nI haven't looked at the code in any depth, but it seems it'd be pretty straight-forward (if not simple) to fully qualify all components imported via star imports. Get the `ast` of the relevant code file, walk the tree, find items where the code-string doesn't reflect the actual path, and replace.\r\n\r\nThis, of course, does require building the AST of the source file, which is being processed, which seems more complex then what pyflakes does, so I'm not sure if this is out of scope for what autoflake is trying to do."
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 12,
                "title": "Add stdin and stdout options",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Currently `autoflake` reads from a file by taking a filename, and outputs a diff with a patch to make. This works well for some command line usage, but doesn't integrate so well with replacing a buffer in Vim. This could be improved by offering an option to read the file from stdin, and an option for outputting the entire file contents, with the patch applied, to stdout. stdin support could either by via flag, or by reading a special filename `-`. Supposing there was a flag for stdout support, then `autoflake` could automatically remove unused imports in Vim with both flags like so.\n\n``` vim\nsilent 0,$!autoflake --stdin --output-file\n```\n\nThat command would take the contents of the current buffer, pass it to `autoflake` via stdin, get the new file after applying the patch back out again, and replace the current buffer with that text.\n\nAt the moment, I shall have to save my current buffer to a file, run `autoflake` on that temporary file and save the diff to another temporary file, and then use the `:diffpatch` command to apply the patch to the current buffer, in order to integrate `autoflake` with Vim.\n"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 24,
                "title": "Support type hints for Python 2.7 and straddling code",
                "labels": [],
                "description": "```py\r\nfrom typing import List\r\n\r\ndef hello(): # type: () -> None\r\n    print 'hello'\r\n\r\nclass Example:\r\n    def method(self, lst, opt=0, *args, **kwargs):\r\n        # type: (List[str], int, *str, **bool) -> int\r\n        print(\"Do stuff\")\r\n```\r\nRunning `autoflake --remove-all-unused-imports ` would remove `from typing import List`. This should not be the case as `List` import is used for defining the type.\r\n\r\n* https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code\r\n* mypy is a static type checker for Python and uses type annotation in comments for supporting python2.7 code. http://mypy.readthedocs.io/en/latest/python2.html\r\n* http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 10,
                "title": "Add an option to not filter useless pass statements",
                "labels": [],
                "description": "In [`fix_code`](https://github.com/myint/autoflake/blob/d98cffe094/autoflake.py#L386), `filter_useless_pass` is always called.\n\nBut, it would be nice to be able to remove unused import statements without modifying pass statements, and to control removal of pass statements separately.\n"
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 40,
                "title": "Handle imports for type annotations",
                "labels": [
                    "enhancement"
                ],
                "description": "Currently, import from type annotations are removed.\r\nE.g.\r\n``` py\r\nfrom typing import Any\r\n\r\na = None    # type: Any\r\n```\r\nbecomes\r\n```py\r\na = None    # type: Any\r\n```"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 35,
                "title": "Don't remove imports from __init__.py",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "A typical way to set up a project is to have the modules specify `__all__` variables and then have the `__init__.py` `from .module_name import *`.  This causes autoflake to remove all of the imports.\r\n\r\nPlease consider leaving the imports in `__init__.py`."
            },
            {
                "repo_url": "https://github.com/myint/autoflake",
                "id": 12,
                "title": "Add stdin and stdout options",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Currently `autoflake` reads from a file by taking a filename, and outputs a diff with a patch to make. This works well for some command line usage, but doesn't integrate so well with replacing a buffer in Vim. This could be improved by offering an option to read the file from stdin, and an option for outputting the entire file contents, with the patch applied, to stdout. stdin support could either by via flag, or by reading a special filename `-`. Supposing there was a flag for stdout support, then `autoflake` could automatically remove unused imports in Vim with both flags like so.\n\n``` vim\nsilent 0,$!autoflake --stdin --output-file\n```\n\nThat command would take the contents of the current buffer, pass it to `autoflake` via stdin, get the new file after applying the patch back out again, and replace the current buffer with that text.\n\nAt the moment, I shall have to save my current buffer to a file, run `autoflake` on that temporary file and save the diff to another temporary file, and then use the `:diffpatch` command to apply the patch to the current buffer, in order to integrate `autoflake` with Vim.\n"
            }
        ]
    },
    "hhatto/autopep8": {
        "all": [
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 281,
                "title": "Long line break on slice notation",
                "labels": [],
                "description": "In this concrete example it is a line break in middle of accessing an dictionary member,like general: `dict_object[key]` turns into `dict_object[\\nkey]`\r\n1. not related\r\n2. autopep8 2.0a0\r\n3. 2.0.0\r\n4. Python 2.7.6\r\n5. Linux xxx 3.19.0-71-generic #79~14.04.1-Ubuntu SMP Sat Oct 8 20:07:15 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n6. Exmaple input:\r\n```python\r\nGYakymOSMW=1\r\nGYakymOSME=1\r\nGYakymOSMJ=1\r\nGYakymOSMA=1\r\nGYakymOSMr=1\r\nGYakymOSMw=1\r\nGYakymOSMU=1\r\nGYakymOSMq=1\r\nGYakymOSMH=1\r\nGYakymOSMl=1\r\nGYakymOSMz=GYakymOSME\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,filterAirlines=GYakymOSME)\r\n```\r\n7. `--select=E501`\r\n8. Expected output: any candidate but the first one:\r\n```\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw[\r\n                      'abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,\r\n                      GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,\r\n                      GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(\r\n    GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],\r\n                      GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,\r\n                      GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,\r\n                      GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,\r\n                      GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,\r\n                      GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,\r\n                      svygreNveyvarf=GYakymOSME)\r\n-------------------------------------------------------------------------------\r\nGYakymOSMc=GYakymOSMW(GYakymOSMJ,GYakymOSMA,GYakymOSMr,GYakymOSMw['abc'],GYakymOSMU,GYakymOSMq,GYakymOSMH,GYakymOSMl,svygreNveyvarf=GYakymOSME)\r\n```\r\nPersonally I would prefer the even length distributed parameter  solution (nr. 6), but not nr.4 - just saying. Anyway this is just an opinion . But the first selection is a no-go. Maybe an option for an preferred user strategie would be a good idea - but hard. At least a prevention of the shown break. Nice would be something like \"filLinesfromBeginning\" because as shown the order prefers \"fillLinesAtTheEnd\".\r\n9. yes\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 393,
                "title": "Parameter \u201c--max-line-length\u201d does not take effect.",
                "labels": [],
                "description": "I want to limit the length of each line to less than 80\uff0cBut parameter \u201c--max-line-length 79\u201d does not take effect."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 364,
                "title": "E702 fixes code incorrectly",
                "labels": [
                    "bug"
                ],
                "description": "autopep8 version 1.3.3\r\nWith following code:\r\n```\r\nfor i in range(3):\r\n    if i == 1: print i;continue\r\n    print i\r\n```\r\n\r\noutput is:\r\n0\r\n1\r\n2\r\n\r\nafter running\r\nautopep8 -i --select=E702\r\n\r\ncode will be\r\n\r\n```\r\nfor i in range(3):\r\n    if i == 1: print i\r\n    continue\r\n    print i\r\n```\r\n\r\nand output is\r\n1\r\n\r\ncorrect is\r\n\r\n```\r\nfor i in range(3):\r\n    if i == 1: print i\r\n        continue\r\n    print i\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 406,
                "title": "Selecting issue does nothing unless `--aggressive` is used",
                "labels": [
                    "enhancement"
                ],
                "description": "I wanted to fix W601, but `autopep8 --select w601 <file>` did nothing. I figured I might as well pass `--aggressive` just to see, and it worked. This is counter-intuitive, when I explicitly select an issue to fix, I clearly want to fix that, I shouldn't have to specify `--aggressive` as well, it should be implied."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 287,
                "title": "E301 has been further split into E305, E306",
                "labels": [],
                "description": "@myint \r\nContinuing https://github.com/hhatto/autopep8/pull/283"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 360,
                "title": "Replacing apply breaks when apply is global",
                "labels": [],
                "description": "Consider this code:\r\n\r\n```\r\n$ cat > test-issue.py\r\ndef apply(a, b):\r\n  return a\r\n\r\napply('x', 'b')\r\n$ autopep8 -i --aggressive ./test-issue.py\r\n$ cat test-issue.py                       \r\ndef apply(a, b):\r\n    return a\r\n\r\n\r\n('x')(*'b')\r\n```\r\n\r\nThe edited code is now broken.\r\n\r\nI suggest autopep8 shouldn't be replacing calls to apply if apply doesn't resolve from builtins."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 401,
                "title": "Incorrect code created by not adding whitespace by -a",
                "labels": [],
                "description": "`autopep8 -a` outputs\r\n`'x' in dor e`\r\nfrom\r\n`d.has_key('x')or e`\r\n\r\nBe aggressive, but still grant some space, please. :-)\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 175,
                "title": "Line range not indenting correctly",
                "labels": [
                    "bug"
                ],
                "description": "Promoting [this](https://github.com/hhatto/autopep8/pull/172#issuecomment-59611739) to an issue.\n\n``` shell\n$ /Users/myint/projects/autopep8/autopep8.py --max-line-length=79 --ignore= /opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py --aggressive --aggressive --aggressive --aggressive --range 550 610 -d\n```\n\n``` diff\n--- original//opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py\n+++ fixed//opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py\n@@ -547,56 +547,63 @@\n     filename = os.path.basename(path)\n     suffixes = [(-len(suffix), suffix, mode, mtype)\n                     for suffix, mode, mtype in imp.get_suffixes()]\n-    suffixes.sort() # try longest suffixes first, in case they overlap\n+    suffixes.sort()  # try longest suffixes first, in case they overlap\n     for neglen, suffix, mode, mtype in suffixes:\n         if filename[neglen:] == suffix:\n             return ModuleInfo(filename[:neglen], suffix, mode, mtype)\n+\n\n def getmodulename(path):\n     \"\"\"Return the module name for a given file, or None.\"\"\"\n     fname = os.path.basename(path)\n     # Check for paths that look like an actual module file\n-    suffixes = [(-len(suffix), suffix)\n-                    for suffix in importlib.machinery.all_suffixes()]\n-    suffixes.sort() # try longest suffixes first, in case they overlap\n+    suffixes = sorted([(-len(suffix), suffix)\n+                       for suffix in importlib.machinery.all_suffixes()])\n     for neglen, suffix in suffixes:\n         if fname.endswith(suffix):\n             return fname[:neglen]\n     return None\n\n+\n def getsourcefile(object):\n     \"\"\"Return the filename that can be used to locate an object's source.\n     Return None if no way can be identified to get the source.\n-    \"\"\"\n-    filename = getfile(object)\n+        \"\"\"\n+        filename = getfile(object)\n     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\n     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\n     if any(filename.endswith(s) for s in all_bytecode_suffixes):\n         filename = (os.path.splitext(filename)[0] +\n                     importlib.machinery.SOURCE_SUFFIXES[0])\n-    elif any(filename.endswith(s) for s in\n+        elif any(filename.endswith(s) for s in\n                  importlib.machinery.EXTENSION_SUFFIXES):\n-        return None\n+            return None\n     if os.path.exists(filename):\n         return filename\n     # only return a non-existent filename if the module has a PEP 302 loader\n-    if getattr(getmodule(object, filename), '__loader__', None) is not None:\n+        if getattr(\n+                getmodule(\n+                    object,\n+                    filename),\n+                '__loader__',\n+                None) is not None:\n         return filename\n     # or it is in the linecache\n-    if filename in linecache.cache:\n+        if filename in linecache.cache:\n         return filename\n+\n\n def getabsfile(object, _filename=None):\n     \"\"\"Return an absolute path to the source or compiled file for an object.\n\n     The idea is for each object to have a unique origin, so this routine\n-    normalizes the result as much as possible.\"\"\"\n-    if _filename is None:\n-        _filename = getsourcefile(object) or getfile(object)\n+        normalizes the result as much as possible.\"\"\"\n+        if _filename is None:\n+            _filename = getsourcefile(object) or getfile(object)\n     return os.path.normcase(os.path.abspath(_filename))\n-\n-modulesbyfile = {}\n+    lesbyfile = {}\n _filesbymodname = {}\n+\n\n def getmodule(object, _filename=None):\n     \"\"\"Return the module an object was defined in, or None if not found.\"\"\"\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 440,
                "title": "Multiline if statements that have a . cause a repeat of the rest of the statement in v1.4.1",
                "labels": [],
                "description": "autopep8 version:\r\n```\r\n$ autopep8 --version\r\nautopep8 1.4.1 (pycodestyle: 2.4.0)\r\n```\r\nPython version:\r\n```\r\n$ python --version\r\nPython 3.6.0\r\n```\r\nHost info:\r\n```\r\n$ uname -a\r\nLinux xxxx 4.4.0-75-generic #96-Ubuntu SMP Thu Apr 20 09:56:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nExample testcase:\r\n```\r\nif(\r\n    foo.bar and\r\n    baz\r\n):\r\n    print('whomp')\r\n\r\nif(\r\n    foo.bar or\r\n    baz\r\n):\r\n    print('whomp')\r\n```\r\n\r\nExpected result:\r\n```\r\nif(\r\n    foo.bar and\r\n    baz\r\n):\r\n    print('whomp')\r\n\r\nif(\r\n    foo.bar or\r\n    baz\r\n):\r\n    print('whomp')\r\n```\r\n(Essentially a noop)\r\n\r\nActual result:\r\n```\r\n$ autopep8 example.py\r\nif(\r\n    foobar and\r\n    bar and\r\n    . baz\r\n):\r\n    print('whomp')\r\n\r\nif(\r\n    foobar or\r\n    bar or\r\n    . baz\r\n):\r\n    print('whomp')\r\n```\r\n\r\n1.4.1 should be the most recent version as of this post\r\n\r\nReverting to 1.4 seems to work"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 381,
                "title": "Does not add whitespace around ** operator",
                "labels": [],
                "description": "Before autopep8 (aggressive mode)\r\n```python\r\n1+2-3*4/5//6%7**8\r\n```\r\nAfter:\r\n```python\r\n1 + 2 - 3 * 4 / 5 // 6 % 7**8\r\n```\r\nExpected outcome:\r\n```python\r\n1 + 2 - 3 * 4 / 5 // 6 % 7 ** 8\r\n```\r\n\r\npython v3.6.4\r\npycodestyle v2.3.1\r\nautopep8 v1.3.4"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 409,
                "title": "setup.cfg documentation? support?",
                "labels": [],
                "description": "Hi there! Love the project!\r\n\r\nIt's not clear to me after #129 was closed, does autopep8 support setup.cfg at this point, via #167? Is there an example of it anywhere?\r\n\r\nThe reason why setup.cfg would be used / documented is there's a basis to rerun autopep8 across teams.\r\n\r\nIf it exists, I can't find the documentation. If it's documented, could you point me in the right direction?\r\n\r\nNot something inferred / a separate config file (because the point of setup.cfg is the centralize the python configs). I'm looking for something like:\r\n\r\nA *setup.cfg* file:\r\n\r\n```\r\n[autopep8]\r\nselect=E1,W1\r\n```\r\n\r\nIf it's not documented, this issue can serve as the basis for a pull request to document it. If it doesn't exist, let this be a request for a setup.cfg style support, since other plugins (e.g pytest, flake8) are adopting this pattern."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 344,
                "title": "Wrong function arguments indentation",
                "labels": [],
                "description": "```python\r\n# Before\r\nfunc(asdfasdfa=(1, 1), basdfsadf=(1, 1), casdfasdf=(1, 1), kcasdfasdf=(1, 1), dcasdfasdf=(1, 1))\r\n\r\n# After autopep8 file.py\r\n# strange newline position: casdfasdf=(\\n\r\nfunc(asdfasdfa=(1, 1), basdfsadf=(1, 1), casdfasdf=(\r\n    1, 1), kcasdfasdf=(1, 1), dcasdfasdf=(1, 1))\r\n\r\n# After autopep8 -a -a file.py\r\n# very strange newline position: argument=(\\n multiple times\r\nfunc(\r\n    asdfasdfa=(\r\n        1, 1), basdfsadf=(\r\n            1, 1), casdfasdf=(\r\n                1, 1), kcasdfasdf=(\r\n                    1, 1), dcasdfasdf=(\r\n                        1, 1))\r\n\r\n```\r\n```python\r\n# Before\r\nif True:\r\n    name0 = BarBarBarBarB(pool_size=(2, 2), strides=(2, 2), padding=\"food\")(Food)\r\n\r\n# After autopep8 -a -a file.py\r\nif True:\r\n    name0 = BarBarBarBarB(\r\n        pool_size=(\r\n            2, 2), strides=(\r\n            2, 2), padding=\"food\")(Food)\r\n#          ^-- here must be 4 extra spaces\r\n```\r\n\r\nPosition of newline symbols looks a bit strange. Furthermore in the second situation amount of spaces is not correct."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 431,
                "title": "Allow disabling extended blank lines check",
                "labels": [],
                "description": "It would be nice to have an option to disable all of the features where `autopep8` goes beyond what `pycodestyle` requires.  This is useful for avoiding spurious diffs when operating on existing codebases which don't necessarily follow those rules.  Right now, they can only be disabled by disabling *all* the `E301`/`E303` fixes, which is unfortunate."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 359,
                "title": "feature request: twisted-style formatting",
                "labels": [],
                "description": "Twisted's style guide is quite similar to PEP 8, except in a few places where it encodes a bit more information into the coding standard.\r\n\r\nOne place where it diverges is inter-function/inter-method vertical space separation.  Python's guideline is 2-1-1: 2 lines between top-level suites, 1 line between functions, 1 line at your discretion to space out the implementation.  Twisted's standard is 3-2-1: 3 between top-level suites, 2 between methods, 1 line between inner functions and at the user's discretion.  This makes it a bit easier to visually scan for method endings, especially when methods often contain lots of callback functions.\r\n\r\nWould it be possible to add a customization option to autopep8 to allow for these different blank-lines rules?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 227,
                "title": "Create diff for a specific pep8 issue",
                "labels": [],
                "description": "I'm trying to use autopep8 to automate a few things. This is my workflow:\n- I want to run pep8 on a code base and list all the results.\n- Then I want the user to specify specific issues he wants fixed\n- Then autopep8 should only fix these issues.\n\nI notice with `--select` I can choose which errors autopep8 fixes, how do I specify a specific issue (I guess this is characterized by line, column, issue code) to fix ?\n\nCould you help me on how to do this ?\n\nExample:\nI have a file with the line `print( sys.path, ( 2))` This raises \n\n```\ntest.py:1:7: E201 whitespace after '('\ntest.py:1:19: E201 whitespace after '('\n```\n\nSo, I run `autopep8 test.py --select=E201 --range 1 1 --diff` but this fixes both errors.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 426,
                "title": "Is it possible to customise the way the code is formatted",
                "labels": [],
                "description": "For example, dictionaries are currently converted from this:\r\n\r\n```\r\nreturn {\r\n    'v2': {'type': 'some_type', 'path_definitions': path.to.some.Module},\r\n    'raw': {'type': 'raw'},\r\n}\r\n```\r\n\r\nto this:\r\n\r\n```\r\nreturn {\r\n    'v2: {\r\n        'type': 'some_type',\r\n        'path_definitions': path.to.some.Module},\r\n    'raw': {\r\n        'type': 'raw'},\r\n}\r\n```\r\n\r\nCan I somehow change the way `autopep8` converts the code so that I have the closing brackets of the inner dictionaries on a new line rather than on the same line?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 348,
                "title": "autopep8 on .rst documentation files",
                "labels": [],
                "description": "Thanks for autopep8, it really helps getting some code to a almost readable style when getting legacy code. \r\n\r\nI'm currently working on documentation which is in restructured text (.rst), and part of that has been converted from latex with latex2rst, so a lot of fixing needs to be done. I am dreaming about doing autopep8 -i *.rst as I sometimes to with .py files. \r\n\r\nAny chance of getting such a feature with autopep8 ? Do you know of any projects that could do this ? I'm going to ask https://github.com/myint/docformatter too if there is place for .rst transformation there..."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 152,
                "title": "Have '--range' accept more than one range pair",
                "labels": [
                    "enhancement"
                ],
                "description": "It could be useful to have '--range' take a list of ranges instead of just one range. This way someone who modified a file and wants to run autopep8 on only the changes she made doesn't have to run autopep8 multiple times, one for each region that was changed.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 433,
                "title": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)",
                "labels": [],
                "description": "I use autopep8 as pre-commit hook for subversion.  I'm trying check if the input file content is fit for PEP8 by trying to fix it and compare the original file content.( I don't know is there better method)\r\nThe python source file contains Chinese utf-8 comments.\r\n\r\npre-commit code(use python to write):\r\n```\r\n193     def is_invalid_pep8(fname):\r\n194         \"\"\"check is pep8\"\"\"\r\n195         org_contents = file_contents(fname, look_cmd)\r\n196         with open(\"/tmp/autopep8.debug.py\", \"wb\") as f:\r\n197             f.write(org_contents)\r\n198         new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n199         # sys.stderr.write(\"org size=%d new_size=%d u(org)size=%d\\n\" % (\r\n200         #         #    len(org_contents), len(new_contents),\r\n201         #         len(unicode(org_contents,\"utf-8\"))))\r\n202         return unicode(org_contents, \"utf-8\") != new_contents\r\n```\r\nHere is the error message\r\n```\r\nERROR from SVN:\r\nA repository hook failed: Commit blocked by pre-commit hook (exit code 1) with output:\r\nTraceback (most recent call last):\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 243, in <module>\r\n    sys.exit(main())\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 233, in main\r\n    errors += check_py(look_cmd, filelist)\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 205, in check_py\r\n    is_invalid_pep8(ff)]\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 198, in is_invalid_pep8\r\n    new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n  File \"/lib/python2.7/site-packages/autopep8.py\", line 3177, in fix_code\r\n    source = source.decode(encoding or get_encoding())\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)\r\nW: e2851c1a8e477a3b636c8ad7232bc2977cd5d5fa and refs/remotes/git-svn differ, using rebase:\r\n\r\n```"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 337,
                "title": "Long line breaking with operators",
                "labels": [
                    "enhancement"
                ],
                "description": "When there is a long line, autopep8 breaks it like this:\r\n```\r\n1 = (-sp.sqrt(15.0) / 180.0) * self.K + \\\r\n            (1.0 / 18.0) * self.L\r\n```\r\nHowever, PEP 8 suggests breaking it before the operator to get a more readable code:\r\n```\r\n1 = (-sp.sqrt(15.0) / 180.0) * self.K \\\r\n       + (1.0 / 18.0) * self.L\r\n```\r\nMaybe, this can be improved?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 343,
                "title": "Document `options` parameter in `fix_code()`",
                "labels": [
                    "enhancement"
                ],
                "description": "The documentation lists options for the CLI side of `autopep8`, but not for using it as a module. It's logical therefore to assume that all CLI options that make sense as module options would also be module options, but that does not seem to be the case.\r\n\r\nMy code:\r\n```\r\ndata.write(autopep8.fix_code(output, options={'aggressive': 3, 'max-line-length': 70}))\r\n```\r\nThe result:\r\n```\r\nTraceback (most recent call last):\r\n  File \"dbsync.py\", line 172, in <module>\r\n    main()\r\n  File \"dbsync.py\", line 169, in main\r\n    'max-line-length': 79}))\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3015, in fix_code\r\n    options = _get_options(options, apply_config)\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3033, in _get_options\r\n    raise ValueError(\"No such option '{}'\".format(name))\r\nValueError: No such option 'max-line-length'\r\n```\r\n\r\nIf the options for `fix_code()` are divergent from the CLI, that should be noted in the documentation."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 441,
                "title": "Lots of (wrong) code added",
                "labels": [],
                "description": "Very simple example:\r\n\r\n```python\r\nif True:\r\n    if True:\r\n        if (\r\n                link.is_wheel and\r\n                isinstance(link.comes_from, HTMLPage) and\r\n                link.comes_from.url.startswith(index_url)\r\n        ):\r\n            _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n```diff\r\n--- original/t.py\r\n+++ fixed/t.py\r\n@@ -1,8 +1,24 @@\r\n if True:\r\n     if True:\r\n         if (\r\n-                link.is_wheel and\r\n-                isinstance(link.comes_from, HTMLPage) and\r\n-                link.comes_from.url.startswith(index_url)\r\n+                linkis_wheel and\r\n+            is_wheel and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            . (., ) link.comes_from.url.startswith(index_url)\r\n         ):\r\n             _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n\r\n1.4 seems fine though -- I'll revert"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 413,
                "title": "Look for the configuration files of pycodestyle and flake8",
                "labels": [],
                "description": "autopep8 is only looking for the configuration files of pep8, it should also look for the configuration files of pycodestyle and flake8. Like `.flake8` or `.config/flake8`.\r\n\r\nIt currently only looks for the sections of pycodestyle and flake8, but not the files, which means it will only find them in `setup.cfg`.\r\n\r\nThis behavior should also be documented clearly."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 342,
                "title": "Not breaking / reflowing multi line comments",
                "labels": [],
                "description": "autopep8 doesn't break the first comment line in the following:\r\n\r\n```\r\nclass Foo:\r\n    # The rain in Spain stays mainly on the plain.  This is not code, but rather an English\r\n    # sentence.\r\n    pass\r\n```\r\n\r\nIt does if you make it a single line comment though."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 335,
                "title": "Powers treated differently to other operators regarding whitespace correction",
                "labels": [],
                "description": "I am new to git and programming and got a bit confused by the PEP 8 style guide, so sorry if this is incorrect.\r\n\r\nUsing autopep8, it appears that powers are treated a bit differently to other operators, particularly if there is no whitespace.\r\n\r\nIn this example, I will use a hyphen to indicate a space, as multiple spaces are removed on here.\r\n\r\nBoth `2*2` and `2---*---2` will be corrected to `2-*-2`\r\nHowever, `2**2` will not be corrected at all, whereas `2---**---2` will be corrected to `2-**-2`\r\n\r\nIs this intentional? It seems a bit inconsistent that for other operators the whitespace will be set to one space regardless of how much whitespace was added, whereas for powers the whitespace will only be set to one space if there was any whitespace added beforehand.\r\n\r\nThank you very much for your help"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 289,
                "title": "Question: autopep8 output",
                "labels": [],
                "description": "Is there a way for get ``` autopep8 --in-place``` to  pycodestyle-ish output like ```optparse.py:69:11: E401 multiple imports on one line```, so that you can see what errors were found/fixed?\r\n\r\nIf not, would a Pull Request for this functionality be welcome?\r\n\r\nThanks!\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 292,
                "title": "Add option to allow to pass multiple ranges at once",
                "labels": [],
                "description": "That's far from perfect, and if would be nice to have a syntax to do that as well when using multiple files.\r\nIt at least avoid multiple invocation which is super slow. \r\n\r\nI'm using a syntax like `4-8,15,16-23,42` as this seem to be an usual way to list multiple ranges, but I'm open to variations.\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 315,
                "title": "'autopep8' module not fixing 'E226' when 'ignore' is passed in 'options'.",
                "labels": [],
                "description": "1. `pycodestyle` by default ignores `E226`, hence works fine.\r\n2. `autopep8 --version`: `autopep8 1.2.4`\r\n3. `pycodestyle --version`: `2.3.1`\r\n4. `python --version`: `Python 3.5.3 :: Continuum Analytics, Inc.`\r\n5. `uname -a`: `Linux PC-name 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`\r\n6. Input: `add.py`\r\n```python\r\ndef add(a,b):\r\n  return a+b\r\n```\r\n7. Error occurs while using `autopep8` as python module. When the following script is run:\r\n```python\r\nimport autopep8\r\n\r\nfilename = 'add.py'\r\nfile = open(filename, 'r')\r\ncorrected = autopep8.fix_code(file.read())\r\n\r\nprint(corrected)\r\n```\r\nthe output is:\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n```\r\nHowever, when the function call is changed to:\r\n```python\r\ncorrected = autopep8.fix_code(file.read(), options={'ignore': []})\r\n```\r\nor\r\n```python\r\ncorrected = autopep8.fix_code(file.read(), options={'ignore': ['']})\r\n```\r\nthe output is:\r\n ```python\r\ndef add(a, b):\r\n    return a+b\r\n```\r\n8. Expected output:\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n```\r\n9. Bug is persistent in the latest version `autopep8 1.3 (pycodestyle: 2.3.1)`."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 318,
                "title": "Taking too much memory and time when long line is found",
                "labels": [],
                "description": "hi, thank you for creating autopep8, it is a great tool to generate clean scripts and compliant to PEP8. I think i found room for improvement. i stumbled upon a limitation that could be related to bad memory usages or leaks. If in the code there is a long (indeed really long line e.g. a list of data) then the program takes a humongous space in memory (my 8Gb of ram could not handle them) and needless to say a lot of time too, it couldn't even finish the file after 30 minutes and i had to stop the program after a lot of effort to stabilize my pc.\r\n\r\nHere is the compressed file, demonstrating this... In fact, the line could not fit in here.\r\n[test_autopep8_long_line.zip](https://github.com/hhatto/autopep8/files/848091/test_autopep8_long_line.zip)\r\n\r\nit generates\r\n--->  Applying global fix for W602\r\n--->  Applying global fix for E265\r\n--->  2 issue(s) to fix {'W391': {8}, 'E501': {7}}\r\n--->  1 issue(s) to fix {'E501': {7}}\r\n\r\nOnce again, much appreciated for this great tool, hope this can help improving it even more.\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 135,
                "title": "Closing brackets on new lines",
                "labels": [
                    "enhancement"
                ],
                "description": "Thanks for a great script! I'm using it with a PyDev shortcut and it's extremely useful! I tried adapting it to run directly inside PyDev's Jython environment, but unfortunately it is Jython 2.2 and after rewriting a hundred lines of code and seeing that essential external libraries were missing, I gave up.\n\nAnyways, here's a script that calls autopep8 though os.system to format the code directly inside the Eclipse editor. It's really so damn useful :dancers: \n\nhttps://gist.github.com/benjaoming/9911641\n\nBut now for the issue... it's about line optional breaks before closing brackets, as the examples show here:\n\nhttp://legacy.python.org/dev/peps/pep-0008/#id11\n\n...there are a couple of acceptable ways to do indentation inside brackets. I personally prefer this style:\n\n```\nmy_list = [\n    1, 2, 3,\n    4, 5, 6,\n]\nresult = some_function_that_takes_arguments(\n    'a', 'b', 'c',\n    'd', 'e', 'f',\n)\n```\n\nIt's appreciated that autopep8 will not touch the above formatting (because it's already valid). However, it would be nice if there was an option. For instance.\n\n**Input**\n\n```\nresult = some_function_that_takes_arguments('arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'arg6', 'arg7', 'arg8')\n```\n\n**Output**\n\n```\nresult = some_function_that_takes_arguments(\n    'arg1',\n    'arg2',\n    'arg3',\n    'arg4',\n    'arg5',\n    'arg6',\n    'arg7',\n    'arg8')\n```\n\n**My idiosyncratic preferred output**\n\n```\nresult = some_function_that_takes_arguments(\n    'arg1',\n    'arg2',\n    'arg3',\n    'arg4',\n    'arg5',\n    'arg6',\n    'arg7',\n    'arg8',\n)\n```\n\nNotice: The added line break before the bracket, and the added comma. I like this pattern, because I write django and there are often chained calls with QuerySets that become quite long.\n\nHere is a more complex example:\n\n```\nmodels.Membership.objects.filter(account__in=owner, active=True, created__lte='2014-01-01').select_related('user').distinct().order_by('id')\n```\n\n...which using `autopep8 --aggressive` becomes:\n\n```\nmodels.Membership.objects.filter(\n    account__in=owner,\n    active=True,\n    created__lte='2014-01-01').select_related('user').distinct().order_by('id')\n```\n\nBut I would much prefer:\n\n```\nmodels.Membership.objects.filter(\n    account__in=owner,\n    active=True,\n    created__lte='2014-01-01',\n).select_related('user').distinct().order_by('id')\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 324,
                "title": "indentation of lists in function arguments",
                "labels": [],
                "description": "autopep8 seems to turn this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n    ],\r\n    a=1,\r\n    b=2,\r\n    )\r\n```\r\n\r\ninto this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n],\r\n    a=1,\r\n    b=2,\r\n)\r\n```\r\n\r\n...even though neither pep8 nor pycodestyle seem to detect the original indentation as problematic. While not wrong syntactically, it certainly looks odd, and the main thing is that neither pep8 nor pycodestyle themselves report the original code as problematic.\r\n\r\nWhere is autopep8 getting this from if not pycodestyle, and can it be suppressed?\r\n\r\nIndentation and pep8/pycodestyle/autopep8 agree if the list opening bracket is moved to the next line.\r\n\r\n```\r\n$ ~/pyutils/bin/autopep8 --version\r\nautopep8 1.3.1 (pycodestyle: 2.3.1)\r\n$ ~/pyutils/bin/pycodestyle --version\r\n2.3.1\r\n$ ~/pyutils/bin/python --version\r\nPython 2.7.13\r\n$ uname -a\r\nLinux flyingv.net.ic.ac.uk 4.10.10-200.fc25.x86_64 #1 SMP Thu Apr 13 01:11:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nHave confirmed this occurs with latest autopep8"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 417,
                "title": "It seems autopep8 isn't ignoring W191 (tab) errors",
                "labels": [],
                "description": "Hi, I tried using `--ignore=W191` but that doesn't seem to do anything... I tried with other codes and the ignore parameter seems to work...\r\n\r\nIs this on purpose or is it a bug? \r\n\r\nIs there a work around?\r\n\r\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\r\nDoes the pycodestyle tool behave correctly? `yes`\r\nautopep8 --version `autopep8 1.3.5 (pycodestyle: 2.4.0)`\r\npycodestyle --version `2.4.0`\r\npython --version `3.7.0`\r\n\r\n[sampleCode.py.txt](https://github.com/hhatto/autopep8/files/2307808/sampleCode.py.txt)"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 383,
                "title": "Long ines containing both code and comments don't change",
                "labels": [],
                "description": "If we have a line containing code and comments and that line is longer than **max-line-length**, that line does not get fixed by **autopep8**.\r\n\r\nExample:\r\n\r\n```\r\n    def func1():  # this function is supposed to do something very useful and important and this comment is supposed to be long\r\n        return \"something important\"\r\n```\r\n\r\nThe long line doesn't get fixed and stays long even after ```--in-place --aggressive```"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 325,
                "title": "Fixing use of explicit type comparison to use of isinstance is not reported in verbose output",
                "labels": [],
                "description": "When using `-a`, `type(a) == foo` is fixed to `isinstance(a, foo)`, but this action is not reported in `-vvvvv` output.\r\nAs a result, I don't what know what E or W number to use to turn this behavior off."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 273,
                "title": "--ignore is not evaluated when --select is given",
                "labels": [],
                "description": "In the folloging example E266 is fixed while it shouldn't:\r\n```autopep8.py --ignore E266 --select E2,E3,E4 -i -- $files```"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 369,
                "title": "E712 - Prefer `except Exception:` to `except BaseException:`",
                "labels": [],
                "description": "From https://github.com/PyCQA/flake8-bugbear\r\n```\r\nB001: Do not use bare except:, it also catches unexpected events like memory errors, interrupts, system exit, and so on. Prefer except Exception:. If you're sure what you're doing, be explicit and write except BaseException:. Disable E722 to avoid duplicate warnings.\r\n```"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 365,
                "title": "Annotated variable names that begin with class emit bad code",
                "labels": [
                    "needs patch in pycodestyle"
                ],
                "description": "This is related to https://github.com/PyCQA/pycodestyle/issues/716\r\n\r\n```\r\nclass Foo:\r\n    classification: int\r\n    definition: int\r\n    _def: int\r\n    _class: int\r\n\r\n\r\ndef foo():\r\n    class_foo: int\r\n    def_value: int\r\n```\r\n\r\nresults in \r\n```\r\nclass Foo:\r\n    classification:\r\n        int\r\n    definition: int\r\n    _def: int\r\n    _class: int\r\n\r\n\r\ndef foo():\r\n    class_foo:\r\n        int\r\n    def_value: int\r\n```\r\n\r\n\r\nWeird that `def` isn't affected."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 422,
                "title": "Proposal: Removing --aggressive and --experimental option",
                "labels": [],
                "description": "## Why?\r\nThe current `-a`, `-aa`, `-aaa`, `--experimental` option is confusing and becomes a factor to increase the maintenance cost. Delete these options and change them to control all operations with `--select` or `--ignore`.\r\n\r\n## migration plan\r\nIf you used `-a` option or `--experimental` option on the next minor release version of autopep8, it outputs a warning.\r\nAnd remove the option with the next major update (v2.0).\r\n\r\nI would like to hear your opinion.\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 268,
                "title": "Enhance E721",
                "labels": [],
                "description": "The type(...) could be replaced by it's real type when changing type(x) == y into isinstance().\n\n```\nif type(value) == type([]):\nif type(value) == type(''):\nif type(value) == type(\"\"):\nif type(value) == type(()):\nif type(value) == type((,)):\nif type(value) == type({}):\n```\n\n\u2026\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 380,
                "title": "autopep8 refuses to break long line",
                "labels": [
                    "needs patch"
                ],
                "description": "I found a line of code at work that autopep8 won't format.\r\n\r\nHere's a minimal example of this:\r\n```Python\r\n#!/usr/bin/env python3\r\n\r\n\r\nclass Foo(object):\r\n    def a(self):\r\n        (return_value1, return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n\r\n    def b_with_somewhat_long_name(self, bar):\r\n        return (1, 1)\r\n```\r\n\r\nThis is what I run:\r\n```\r\n$ autopep8 --max-line-length=80 -i -aaaaaaaaa --experimental -v -v -v -v foo.py\r\n[file:foo.py]\r\n--->  Applying global fix for E265\r\n--->  Applying global fix for W602\r\n--->  1 issue(s) to fix {'E501': set([6])}\r\n-------------------------------------------------------------------------------\r\n        (return_value1, return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (return_value1, return_value2) = self.b_with_somewhat_long_name(\r\n            'past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (return_value1,\r\n     return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (return_value1,\r\n         return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (\r\n            return_value1, return_value2) = self.b_with_somewhat_long_name(\r\n            'past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (\r\n    return_value1,\r\n     return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (\r\n    return_value1, return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n        (\r\n            return_value1, return_value2) = self.b_with_somewhat_long_name('past_80_chars')\r\n-------------------------------------------------------------------------------\r\n\r\n--->  Not fixing E501 on line 6\r\n```\r\n\r\nIs autopep8 confused here because it has too many options to choose from? I would have expected it to pick the first option there. I.e. not the original line, but the one after it:\r\n```Python\r\n        (return_value1, return_value2) = self.b_with_somewhat_long_name(\r\n            'past_80_chars')\r\n```\r\n\r\nMore details:\r\n```\r\n$ autopep8 --version\r\nautopep8 1.3.2 (pycodestyle: 2.3.1)\r\n$ python3 --version\r\nPython 3.4.2\r\n$ python --version\r\nPython 2.7.9\r\n$ uname -a\r\nLinux dev-builder 4.9.53 #2 SMP PREEMPT Thu Dec 7 15:05:31 PST 2017 x86_64 GNU/Linux\r\n```\r\n\r\nI don't have enough control over this box to install the latest version (or pip for that matter). I can give it a try later this weekend on a different machine."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 270,
                "title": "autopep8 against patches",
                "labels": [],
                "description": "Are you aware of a method to apply autopep8 against paches/diff files? Or is there maybe a git merge driver which can apply autopep8 prior to merging so that one doesn't need to rebase changes by hand?\n\nIf so, README.md could contain a hint about this.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 375,
                "title": "Not sufficient modification to long lines and comments",
                "labels": [],
                "description": "I have a block of comments like this:\r\n```\r\n#classname: GameField()\r\n#the class of Game Field, draw the game field,\r\n#operation of moving(upward, downward, left, right) or merge, add new number for each step\r\n#evaluate the situation (if the player win or lose)\r\n```\r\nafter modifying it with autopep8:\r\n```\r\n$ autopep8 --in-place --max-line-length 80 file.py\r\n```\r\nthe above comment block becomes:\r\n```\r\n#classname: GameField()\r\n# the class of Game Field, draw the game field,\r\n# operation of moving(upward, downward, left, right) or merge, add new number for each step\r\n# evaluate the situation (if the player win or lose)\r\n```\r\nNone space is added to the first comment line after the sign \"#\", and the third line is so long that it should be wrapped, but autopep8 just let it stand there untouched. Do you have features to fix this?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 269,
                "title": "enhance reindention if statements fits into line",
                "labels": [],
                "description": "```\nfoo(bar, baz, blah,\n                              \"asdfasdfasdfs\")\n```\n\nWould also fit into one line, and looks better as:\n\n```\nfoo(bar, baz, blah, \"asdfasdfasdfs\")\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 256,
                "title": "E261 ignores tab/space mix",
                "labels": [
                    "needs patch in pycodestyle"
                ],
                "description": "Actual result:\n\n```\n$ printf 'foo = bar \\t# comment' | autopep8 -aaaaaaa --select E261 -\nfoo = bar       # comment\n```\n\nExpected result:\n\n```\n$ printf 'foo = bar \\t# comment' | autopep8 -aaaaaaa --select E261 -\nfoo = bar  # comment\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 366,
                "title": "Inconsistencies in code E101 / E121 compared to pycodestyle",
                "labels": [],
                "description": "Hi,\r\nI just noticed that the following description/fixes differ between autopep8 & pep8:\r\nFrom autopep8:\r\nE101 - Reindent all lines.\r\nE111 (Does not appear in the readme but can be selected)\r\nE121 - Fix indentation to be a multiple of four.\r\n\r\nFrom pep8 (https://media.readthedocs.org/pdf/pep8/1.7.0/pep8.pdf):\r\nE101 indentation contains mixed spaces and tabs\r\nE111 indentation is not a multiple of four\r\nE121 continuation line under-indented for hanging indent\r\n\r\npycodestyle findings are consistent with pep8 but autopep8 fixes are different.\r\nIn fact, if you consider the following code:\r\n```\r\ndef foo():\r\n     print 'indented with 5 spaces'   # E111 according to pycodestyle\r\n\tprint 'indented with 1 tab'      # E101  & E113 according to pycodestyle\r\n\t print 'indented with 1 tab + 1 space'    # E101  & E111 according to pycodestyle\r\n```\r\nRunning any of the following will fix the 3 lines\r\nautopep8 --select=E101 my_file.py -d\r\nautopep8 --select=E111 my_file.py -d\r\n\r\nAnd running the following won't fix anything:\r\nautopep8 --select=E121 my_file.py -d\r\n\r\nSo there seems to be multiple issues:\r\n1) E111 does not appear in the list of fixes that can be selected in the autopep8/readme (fixes seems to be strictly similar to what E101 does though)\r\n2) autopep8's E121 definition is wrong\r\n3) E101 is fixing more than what it should\r\n\r\nPersonally I don't have any problem with autopep8's E101 fixing more than strictly pep8's E101 but I was wondering if that was the intended behavior. Let me know your thoughts."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 259,
                "title": "Describe W690 better",
                "labels": [
                    "enhancement"
                ],
                "description": "I saw that autopep8 converts some things which might have side effects. I guess these changes are caused by W690 (not sure) but they aren't really documented and no reason is explained. This would be nice. The concrete things are:\n- Changing StandardError in Exception\n\n```\nexcept StandardError:\n    pass\n```\n- Changing long's into int's\n\n```\nfoo = 0L\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 257,
                "title": "Remove duplicated tab indent",
                "labels": [],
                "description": "I have the following python file [test.py](https://github.com/hhatto/autopep8/files/550545/test.txt):\n\n```\nfoo = { \n\u00bb   'foo': foo(\n\u00bb   \u00bb   \u00bb   foo=1,\n\u00bb   \u00bb   \u00bb   bar=2,\n\u00bb   \u00bb   \u00bb   baz=3,\n\u00bb   ),\n\u00bb   'bar': foo(\n\u00bb   \u00bb   \u00bb   foo=1,\n\u00bb   \u00bb   \u00bb   bar=2,\n\u00bb   \u00bb   \u00bb   baz=3,\n\u00bb   ),\n}\n```\n\nThe \"\u00bb\" is a tabulator.\n\n$ md5sum test.py \n1142155a8b2954e1dc4a2a00bfa92c12  test.py\n$ autopep8 --ignore=E501,E101,W191,E126,E128 test.py  | md5sum\n1142155a8b2954e1dc4a2a00bfa92c12  -\n\nIt would be nice if the duplicated tabs would be removed so that the output is:\n\n```\nfoo = {\n\u00bb   'foo': foo(\n\u00bb   \u00bb   foo=1,\n\u00bb   \u00bb   bar=2,\n\u00bb   \u00bb   baz=3,\n\u00bb   ),\n\u00bb   'bar': foo(\n\u00bb   \u00bb   foo=1,\n\u00bb   \u00bb   bar=2,\n\u00bb   \u00bb   baz=3,\n\u00bb   ),\n}\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 254,
                "title": "Add settings for applying line shortening via a hanging indent with a de-dented closing parenthesis",
                "labels": [],
                "description": "`autopep8` fixes most problems with syntax quite well, apart from one issue really irks me. Suppose you have the following Python code.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\", \"here is another one\", \"and a third one\")\n```\n\nWhen I see these lines, I prefer to handle the long line like so.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\n    \"here is a very long string literal\", \n    \"here is another one\", \n    \"and a third one\",\n)\n```\n\nWhen I apply `autopep8` to the file, I instead get this.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\",\n                   \"here is another one\", \"and a third one\")\n```\n\nBoth results are valid according to PEP8, but I find the latter, which is the output of `autopep8` much harder to read. It also doesn't play nearly as nicely with diffs, say when you change the function name, or add another argument.\n\nI wonder, would it be possible to add two settings to `autopep8` which can be passed either via the command line or set up in a `setup.cfg` file which solve long lines by using \"hanging indent\" style, with the closing parenthesis on the same level of indentation as the first line with the opening parenthesis? This would also conform to PEP8 standards, but in a manner in which some individuals, like myself, will find it more pleasing to the eye.\n\nAdding a trailing comma would be nice to have, but not totally essential.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 403,
                "title": "Multiline string occurs error because of fix_w605",
                "labels": [
                    "needs patch in pycodestyle"
                ],
                "description": "```python\r\nfoo('hello '\r\n    '\\world')\r\n```\r\n\r\n```python\r\n>>> code = \"foo('hello '\\n    '\\world')\\n\"\r\n>>> autopep8.fix_code(code, options={'aggressive':1})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 3158, in fix_code\r\n    return fix_lines(sio.readlines(), options=options)\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 3233, in fix_lines\r\n    fixed_source = fix.fix()\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 572, in fix\r\n    aggressive=self.options.aggressive))\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 514, in _fix_source\r\n    modified_lines = fix(result)\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 1214, in fix_w605\r\n    tokens = list(generate_tokens(target))\r\n  File \"/home/bumblebee/envs/autopep8-dev/lib/python3.6/site-packages/autopep8-1.4a1-py3.6.egg/autopep8.py\", line 3993, in generate_tokens\r\n    tokenize.generate_tokens(string_io.readline)\r\n  File \"/usr/lib/python3.6/tokenize.py\", line 595, in _tokenize\r\n    raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\r\ntokenize.TokenError: ('EOF in multi-line statement', (2, 0))\r\n```\r\nMultiline strings like the above occurs error because of `fix_w605`\r\n\r\npython: 3.6.5\r\nautopep8: 1.4a1 (latest version)\r\npycodestyle: 2.4.0"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 248,
                "title": "wrong continued indentation",
                "labels": [],
                "description": "``` python\nfor name in ['A_NORMAL',\n             'A_STANDOUT',\n             'A_UNDERLINE',\n             ]: # X\n    pass\n```\n\nThis code is idempotent under autopep8, but pylint complains about the line marked with `X` having a wrong continued indentation. This is fixed when decreasing the indentation with one space. Is pylint wrong here, or is autopep8 formatting wrongly?\n\n``` python\nfor name in [\n        'A_NORMAL',\n    'A_STANDOUT',\n    'A_UNDERLINE',\n]:\n    pass\n\n```\n\nThis code is idempotent as well. I think it is clear what is wrong here.\n\nMy autopep8 version is 1.2.4.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 416,
                "title": "object.function(very, long, args) is smashed down to one arg per line; longfunction(sameargs) is not",
                "labels": [],
                "description": "``\r\nagfn((comma123123123hello1, fredblogshello2, hello3, hello4, hello5, hello1, hello2, hello3, hello4, hello5)\r\n``\r\nautopep8 -a -a -a --experimental x.py\r\n\r\n```\r\nagfn((comma123123123hello1, fredblogshello2, hello3, hello4,\r\n      hello5, hello1, hello2, hello3, hello4, hello5))\r\n```\r\n\r\nwhereas\r\n\r\n``\r\na.fn((comma123123123hello1, fredblogshello2, hello3, hello4, hello5, hello1, hello2, hello3, hello4, hello5)\r\n``\r\nautopep8 -a -a -a --experimental x.py\r\n\r\n```\r\na.fn(\r\n    (comma123123123hello1,\r\n     fredblogshello2,\r\n     hello3,\r\n     hello4,\r\n     hello5,\r\n     hello1,\r\n     hello2,\r\n     hello3,\r\n     hello4,\r\n     hello5))\r\n```\r\n\r\nwhich is quite annoying (and completely unnecessary).  having difficulty tracking down precisely where this is occurring.  the code-path in Container.reflow is identifying that the \"thing\" - a.fn - is not an \"Atom\", and consequently goes into a different code-path:\r\n\r\n```\r\nclass Container:\r\n   ...\r\n   ...\r\n            else:  # isinstance(item, Container)\r\n                print (\"reflow container found\", break_after_open_bracket)\r\n                reflowed_lines.add(item, len(continued_indent),\r\n                                   break_after_open_bracket)\r\n                last_was_container = not isinstance(item, (ListComprehension,\r\n                                                           IfExpression))\r\n```\r\n\r\nthis is where it goes \"wrong\".  the indentation level passed in where it is just a function is the exact amount required to ensure that the tuple goes onto two lines.\r\n\r\nhowever when the object's name \"a.fn\" plus the bracket goes beyond four characters in length, the tuple is split down into single-lines, which is completely unnecessary to do.\r\n\r\nif the object's name is \"a.a\", that actually fits into below four tabs, and the unnecessary splitting of arguments in the tuple onto separate lines is NOT CARRIED OUT.\r\n\r\nso the fault appears to be that the indentation level is not properly passed through to the new item.  unfortunately, the code is not well-documented and is heavily recursive so i am having difficulty understanding what is going on, otherwise i would fix it.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 282,
                "title": "Describe --experimental option",
                "labels": [],
                "description": "The README should describe what \"--experimental\" actually does.\r\nDoes it change the way things are indented? Or does it just add some more fixers/codes?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 253,
                "title": "E128 causes E501 problems",
                "labels": [
                    "enhancement"
                ],
                "description": "When I ran `autopep8` on a file that had an instance of E128 (visual indent issue), `autopep8` fixed the visual indent issue but caused the line length to be too long, creating an instance of E501 (line length - 82 chars instead of 79).\n\nThis shouldn't occur - if there's a conflict and both changes cannot be fixed, E501 (line length) should take precedence over smaller visual issues like E128.\n\nExample of this happening: (after visual indent)\n\n```\nquery_this_month = query.phorms(start, end,\n                                qoeivtjdidje[spid_start:spid_end])\nbait_last_years = (bringee_and_deploy(query_last_month,\n                                      db=testtest.NEWERSS_DB)).kkoikfme()\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 275,
                "title": "-aaa and --select conflicting",
                "labels": [],
                "description": "If I run \"autopep8 --select W503\" there is no notification that \"-aaa\" needs to be given, and nothing is done.\r\nThis should be improved somehow. Either by printing \"ignored W503, please use -aaa\" to stderr or by doing every selected code even if no -aaa is given."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 249,
                "title": "Operate on the same files that pep8/pycodestyle would",
                "labels": [],
                "description": "With `pep8`/`pycodestyle`, it isn't necessary to specify a file target or `-r somedirectories`. It basically looks recursively for `*.py` automatically.\n\nThis is nice, because I can set my `exclude` option in one of the supported config files, and then\n- I don't have to specify files/directories when invoking the command manually.\n- I can also invoke it from places like `make` targets and the same `excludes` will apply. I don't have to maintain a list of files/directories in the command executed in the `Makefile` or other places.\n\nflake8 works exactly the same way. Thus I can get _reports_ of violations in a way that's nicely consistent between the two tools, but to _fix_ them `autopep8` requires me to separately configure and maintain lists.\n\nIt'd be great if `autopep8`'s behavior was the same as `pycodestyle` and `flake8` in this regard.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 241,
                "title": "Indentation not fixed with range",
                "labels": [],
                "description": "From https://github.com/hhatto/autopep8/issues/133 and https://github.com/hhatto/autopep8/pull/134 it seems that this should be working.\n\nExample:\n\n``` bash\n$ cat sandbox/foo.py\ndef Hello():\n  return 1\n\n$ cat sandbox/foo.py | autopep8 - --line-range 1 3\ndef Hello():\n  return 1\n```\n\nIs this intended behaviour, or should it be indented correctly?\n\n``` bash\n$ autopep8 --version\nautopep8 1.2.2\n\n$ python3 --version\nPython 3.5.0\n\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 246,
                "title": "Precedence of excluding vs. including files",
                "labels": [
                    "needs patch"
                ],
                "description": "In trying to help answer someone's question on Stack Overflow, I came across what may be a bug, or perhaps just something that's unclear to me.\n\nThe full details are [here](http://stackoverflow.com/a/37758122/149428) on SO, but I've copied below for your convenience.\n\nAlso here are the details requested in the contributor guidelines:\n\n```\n$ autopep8 --version\nautopep8 1.2.4\n\n$ pep8 --version\n1.7.0\n\n$ python --version\nPython 2.7.11\n\n$ uname -a\nDarwin <my machine name> 15.4.0 Darwin Kernel Version 15.4.0: Fri Feb 26 22:08:05 PST 2016; root:xnu-3248.40.184~3/RELEASE_X86_64 x86_64\n```\n\nTo create this setup, I simply ran `mktmpenv` followed by `pip install autopep8`.\n\nThis style to avoid specific files works for me (using either single or double quotes):\n\n```\nautopep8 --diff --recursive --exclude=\"*.styl\" .\n```\n\nThis also works:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *.py\n```\n\nHowever this does not exclude .styl files:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *\n```\n\nIn my opinion, it appears [OP has] identified a bug in autopep8.\n\nHowever, perhaps it's not a bug, but rather an opinionated decision that star inclusion should take precedence over star exclusion.\n\nIn other words, is running this command intended to process (a) all files, or (b) no files?\n\n```\nautopep8 --diff --exclude=\"*\" *\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 242,
                "title": "Unable to retain tabs indentation (no override?)",
                "labels": [],
                "description": "pep8 recommends spaces as the preferred format but for those misguided souls like mine who believe in tab indentation (which is permissible via pep8 configuration) autopep8 seems to be forcing it into space based indentation.\n\nSince pep8 allows for tabs (even if it discourages the same), autopep8 should also be configurable to allow for it?\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 220,
                "title": "Formatting over maximum line length with -aa or --experimental",
                "labels": [],
                "description": "I am on Windows 7.\nOther version info:\nautopep8 1.2.1\npep8 1.6.2\nPython 3.5.0 (64-bit)\n\nThe following code formatted with the specified autopep8 version will result in code that is longer than the maximum line length. I would expect the following code not to be changed or changed in a manner that E501 is respected.\n\n``` Python\nclass Version(object):\n    def __init__(self, version_string, splitter='.'):\n        super(Version, self).__init__()\n\n        self._version_string = version_string\n        self._splitter = splitter\n        filtered_split = filter(\n            lambda x: len(x) > 0, str(version_string).split(splitter))\n        self._version_parts = list(\n            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n                '_' in str(x) else str(x)), filtered_split))\n```\n\nThe diff from autopep8 looks like this (regardless of -aa or --experimental):\n`autopep8 -d --experimental util.py`\n\n``` Diff\n--- original/util.py\n+++ fixed/util.py\n@@ -32,9 +32,8 @@\n         self._splitter = splitter\n         filtered_split = filter(\n             lambda x: len(x) > 0, str(version_string).split(splitter))\n-        self._version_parts = list(\n-            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n-                '_' in str(x) else str(x)), filtered_split))\n+        self._version_parts = list(map(lambda x: int(x) if str(x).isnumeric() else (\n+            Version(x, '_') if '_' in str(x) else str(x)), filtered_split))\n\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 235,
                "title": "Plugins?",
                "labels": [],
                "description": "Has it even been planned to have a plugin system?\n\nSome projects have their own idioms on top of pep8, so making autopep8 pluggable, they could auto-fix their code without having to add options on upstream autopep8 that are not meant to be there anyway.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 195,
                "title": "Awkward reindents",
                "labels": [],
                "description": "```\nprint(\"this is a very very very very very very very very very very very very long string\")\n\n\nx = (a_very_long_function_name(a_very_long_argument_name, another_long_argument_name) if hasattr(long_argument, long_attribute) else a_very_long_function_name(a_very_long_argument_name, another_long_argument_name))\n```\n\nget reindented as\n\n```\nprint(\n    \"this is a very very very very very very very very very very very very long string\")\n\n\nx = (a_very_long_function_name(a_very_long_argument_name, another_long_argument_name) if hasattr(\n    long_argument, long_attribute) else a_very_long_function_name(a_very_long_argument_name, another_long_argument_name))\n```\n\nI guess there are two separate issues here, namely 1. whether to break long string literals at whitespace and 2. give a break at before (or after, depending on your style) `if` and `else` higher priority than a break at a function call.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 188,
                "title": "Way to specify visual indentation as preferred style",
                "labels": [
                    "enhancement"
                ],
                "description": "I really prefer visual indentation and would love it if there was a way to make autopep8 do that instead of its current default style.  Also, breaking long string literals up instead of just trying to put them on a new line would be great too.\n\nIn an ideal (for me) world, the example you have on PyPI would have `example1` become:\n\n``` python\ndef example1():\n    # This is a long comment. This should be wrapped to fit within 72\n    # characters.\n    some_tuple = (1, 2, 3, 'a')\n    some_variable = {'long': ('Long code lines should be wrapped within 79 '\n                              'characters.'),\n                     'other': [math.pi, 100, 200, 300, 9876543210, \n                               'This is a long string that goes on'],\n                     'more': {'inner': ('This whole logical line should be '\n                                        'wrapped.'),\n                              some_tuple: [1, 20, 300, 40000, 500000000,\n                                           60000000000000000]}}\n    return (some_tuple, some_variable)\n```\n\nIf there is already some mechanism for doing this that I have not discovered, I apologize.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 430,
                "title": "[fix] Reading utf8 encoded source code from windows stdin will throw UnicodeEncodeError",
                "labels": [],
                "description": "The old version of the fix_code function uses stdin.encoding as the default input encoding, which is not the encoding of the input file. For example, you are editing a utf8 encoded file in vim on windows, and then output the contents of the vim buffer to autopep8 through the pipeline. At this time, since the stdin.encoding on windows(gb2312 as default) is different from the encoding of the buffered content of vim, UnicodeEncodeError exception will be thrown.\r\nThe fix for this problem is that stdin is only used as a byte input pipeline. autopep8 reads the source code that needs to be formatted by stdin as bytes, and then dynamically detects the encoding format."
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 227,
                "title": "Create diff for a specific pep8 issue",
                "labels": [],
                "description": "I'm trying to use autopep8 to automate a few things. This is my workflow:\n- I want to run pep8 on a code base and list all the results.\n- Then I want the user to specify specific issues he wants fixed\n- Then autopep8 should only fix these issues.\n\nI notice with `--select` I can choose which errors autopep8 fixes, how do I specify a specific issue (I guess this is characterized by line, column, issue code) to fix ?\n\nCould you help me on how to do this ?\n\nExample:\nI have a file with the line `print( sys.path, ( 2))` This raises \n\n```\ntest.py:1:7: E201 whitespace after '('\ntest.py:1:19: E201 whitespace after '('\n```\n\nSo, I run `autopep8 test.py --select=E201 --range 1 1 --diff` but this fixes both errors.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 348,
                "title": "autopep8 on .rst documentation files",
                "labels": [],
                "description": "Thanks for autopep8, it really helps getting some code to a almost readable style when getting legacy code. \r\n\r\nI'm currently working on documentation which is in restructured text (.rst), and part of that has been converted from latex with latex2rst, so a lot of fixing needs to be done. I am dreaming about doing autopep8 -i *.rst as I sometimes to with .py files. \r\n\r\nAny chance of getting such a feature with autopep8 ? Do you know of any projects that could do this ? I'm going to ask https://github.com/myint/docformatter too if there is place for .rst transformation there..."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 433,
                "title": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)",
                "labels": [],
                "description": "I use autopep8 as pre-commit hook for subversion.  I'm trying check if the input file content is fit for PEP8 by trying to fix it and compare the original file content.( I don't know is there better method)\r\nThe python source file contains Chinese utf-8 comments.\r\n\r\npre-commit code(use python to write):\r\n```\r\n193     def is_invalid_pep8(fname):\r\n194         \"\"\"check is pep8\"\"\"\r\n195         org_contents = file_contents(fname, look_cmd)\r\n196         with open(\"/tmp/autopep8.debug.py\", \"wb\") as f:\r\n197             f.write(org_contents)\r\n198         new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n199         # sys.stderr.write(\"org size=%d new_size=%d u(org)size=%d\\n\" % (\r\n200         #         #    len(org_contents), len(new_contents),\r\n201         #         len(unicode(org_contents,\"utf-8\"))))\r\n202         return unicode(org_contents, \"utf-8\") != new_contents\r\n```\r\nHere is the error message\r\n```\r\nERROR from SVN:\r\nA repository hook failed: Commit blocked by pre-commit hook (exit code 1) with output:\r\nTraceback (most recent call last):\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 243, in <module>\r\n    sys.exit(main())\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 233, in main\r\n    errors += check_py(look_cmd, filelist)\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 205, in check_py\r\n    is_invalid_pep8(ff)]\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 198, in is_invalid_pep8\r\n    new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n  File \"/lib/python2.7/site-packages/autopep8.py\", line 3177, in fix_code\r\n    source = source.decode(encoding or get_encoding())\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)\r\nW: e2851c1a8e477a3b636c8ad7232bc2977cd5d5fa and refs/remotes/git-svn differ, using rebase:\r\n\r\n```"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 343,
                "title": "Document `options` parameter in `fix_code()`",
                "labels": [
                    "enhancement"
                ],
                "description": "The documentation lists options for the CLI side of `autopep8`, but not for using it as a module. It's logical therefore to assume that all CLI options that make sense as module options would also be module options, but that does not seem to be the case.\r\n\r\nMy code:\r\n```\r\ndata.write(autopep8.fix_code(output, options={'aggressive': 3, 'max-line-length': 70}))\r\n```\r\nThe result:\r\n```\r\nTraceback (most recent call last):\r\n  File \"dbsync.py\", line 172, in <module>\r\n    main()\r\n  File \"dbsync.py\", line 169, in main\r\n    'max-line-length': 79}))\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3015, in fix_code\r\n    options = _get_options(options, apply_config)\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3033, in _get_options\r\n    raise ValueError(\"No such option '{}'\".format(name))\r\nValueError: No such option 'max-line-length'\r\n```\r\n\r\nIf the options for `fix_code()` are divergent from the CLI, that should be noted in the documentation."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 441,
                "title": "Lots of (wrong) code added",
                "labels": [],
                "description": "Very simple example:\r\n\r\n```python\r\nif True:\r\n    if True:\r\n        if (\r\n                link.is_wheel and\r\n                isinstance(link.comes_from, HTMLPage) and\r\n                link.comes_from.url.startswith(index_url)\r\n        ):\r\n            _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n```diff\r\n--- original/t.py\r\n+++ fixed/t.py\r\n@@ -1,8 +1,24 @@\r\n if True:\r\n     if True:\r\n         if (\r\n-                link.is_wheel and\r\n-                isinstance(link.comes_from, HTMLPage) and\r\n-                link.comes_from.url.startswith(index_url)\r\n+                linkis_wheel and\r\n+            is_wheel and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            . (., ) link.comes_from.url.startswith(index_url)\r\n         ):\r\n             _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n\r\n1.4 seems fine though -- I'll revert"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 324,
                "title": "indentation of lists in function arguments",
                "labels": [],
                "description": "autopep8 seems to turn this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n    ],\r\n    a=1,\r\n    b=2,\r\n    )\r\n```\r\n\r\ninto this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n],\r\n    a=1,\r\n    b=2,\r\n)\r\n```\r\n\r\n...even though neither pep8 nor pycodestyle seem to detect the original indentation as problematic. While not wrong syntactically, it certainly looks odd, and the main thing is that neither pep8 nor pycodestyle themselves report the original code as problematic.\r\n\r\nWhere is autopep8 getting this from if not pycodestyle, and can it be suppressed?\r\n\r\nIndentation and pep8/pycodestyle/autopep8 agree if the list opening bracket is moved to the next line.\r\n\r\n```\r\n$ ~/pyutils/bin/autopep8 --version\r\nautopep8 1.3.1 (pycodestyle: 2.3.1)\r\n$ ~/pyutils/bin/pycodestyle --version\r\n2.3.1\r\n$ ~/pyutils/bin/python --version\r\nPython 2.7.13\r\n$ uname -a\r\nLinux flyingv.net.ic.ac.uk 4.10.10-200.fc25.x86_64 #1 SMP Thu Apr 13 01:11:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nHave confirmed this occurs with latest autopep8"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 366,
                "title": "Inconsistencies in code E101 / E121 compared to pycodestyle",
                "labels": [],
                "description": "Hi,\r\nI just noticed that the following description/fixes differ between autopep8 & pep8:\r\nFrom autopep8:\r\nE101 - Reindent all lines.\r\nE111 (Does not appear in the readme but can be selected)\r\nE121 - Fix indentation to be a multiple of four.\r\n\r\nFrom pep8 (https://media.readthedocs.org/pdf/pep8/1.7.0/pep8.pdf):\r\nE101 indentation contains mixed spaces and tabs\r\nE111 indentation is not a multiple of four\r\nE121 continuation line under-indented for hanging indent\r\n\r\npycodestyle findings are consistent with pep8 but autopep8 fixes are different.\r\nIn fact, if you consider the following code:\r\n```\r\ndef foo():\r\n     print 'indented with 5 spaces'   # E111 according to pycodestyle\r\n\tprint 'indented with 1 tab'      # E101  & E113 according to pycodestyle\r\n\t print 'indented with 1 tab + 1 space'    # E101  & E111 according to pycodestyle\r\n```\r\nRunning any of the following will fix the 3 lines\r\nautopep8 --select=E101 my_file.py -d\r\nautopep8 --select=E111 my_file.py -d\r\n\r\nAnd running the following won't fix anything:\r\nautopep8 --select=E121 my_file.py -d\r\n\r\nSo there seems to be multiple issues:\r\n1) E111 does not appear in the list of fixes that can be selected in the autopep8/readme (fixes seems to be strictly similar to what E101 does though)\r\n2) autopep8's E121 definition is wrong\r\n3) E101 is fixing more than what it should\r\n\r\nPersonally I don't have any problem with autopep8's E101 fixing more than strictly pep8's E101 but I was wondering if that was the intended behavior. Let me know your thoughts."
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 254,
                "title": "Add settings for applying line shortening via a hanging indent with a de-dented closing parenthesis",
                "labels": [],
                "description": "`autopep8` fixes most problems with syntax quite well, apart from one issue really irks me. Suppose you have the following Python code.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\", \"here is another one\", \"and a third one\")\n```\n\nWhen I see these lines, I prefer to handle the long line like so.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\n    \"here is a very long string literal\", \n    \"here is another one\", \n    \"and a third one\",\n)\n```\n\nWhen I apply `autopep8` to the file, I instead get this.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\",\n                   \"here is another one\", \"and a third one\")\n```\n\nBoth results are valid according to PEP8, but I find the latter, which is the output of `autopep8` much harder to read. It also doesn't play nearly as nicely with diffs, say when you change the function name, or add another argument.\n\nI wonder, would it be possible to add two settings to `autopep8` which can be passed either via the command line or set up in a `setup.cfg` file which solve long lines by using \"hanging indent\" style, with the closing parenthesis on the same level of indentation as the first line with the opening parenthesis? This would also conform to PEP8 standards, but in a manner in which some individuals, like myself, will find it more pleasing to the eye.\n\nAdding a trailing comma would be nice to have, but not totally essential.\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 282,
                "title": "Describe --experimental option",
                "labels": [],
                "description": "The README should describe what \"--experimental\" actually does.\r\nDoes it change the way things are indented? Or does it just add some more fixers/codes?"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 246,
                "title": "Precedence of excluding vs. including files",
                "labels": [
                    "needs patch"
                ],
                "description": "In trying to help answer someone's question on Stack Overflow, I came across what may be a bug, or perhaps just something that's unclear to me.\n\nThe full details are [here](http://stackoverflow.com/a/37758122/149428) on SO, but I've copied below for your convenience.\n\nAlso here are the details requested in the contributor guidelines:\n\n```\n$ autopep8 --version\nautopep8 1.2.4\n\n$ pep8 --version\n1.7.0\n\n$ python --version\nPython 2.7.11\n\n$ uname -a\nDarwin <my machine name> 15.4.0 Darwin Kernel Version 15.4.0: Fri Feb 26 22:08:05 PST 2016; root:xnu-3248.40.184~3/RELEASE_X86_64 x86_64\n```\n\nTo create this setup, I simply ran `mktmpenv` followed by `pip install autopep8`.\n\nThis style to avoid specific files works for me (using either single or double quotes):\n\n```\nautopep8 --diff --recursive --exclude=\"*.styl\" .\n```\n\nThis also works:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *.py\n```\n\nHowever this does not exclude .styl files:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *\n```\n\nIn my opinion, it appears [OP has] identified a bug in autopep8.\n\nHowever, perhaps it's not a bug, but rather an opinionated decision that star inclusion should take precedence over star exclusion.\n\nIn other words, is running this command intended to process (a) all files, or (b) no files?\n\n```\nautopep8 --diff --exclude=\"*\" *\n```\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 242,
                "title": "Unable to retain tabs indentation (no override?)",
                "labels": [],
                "description": "pep8 recommends spaces as the preferred format but for those misguided souls like mine who believe in tab indentation (which is permissible via pep8 configuration) autopep8 seems to be forcing it into space based indentation.\n\nSince pep8 allows for tabs (even if it discourages the same), autopep8 should also be configurable to allow for it?\n"
            },
            {
                "repo_url": "https://github.com/hhatto/autopep8",
                "id": 220,
                "title": "Formatting over maximum line length with -aa or --experimental",
                "labels": [],
                "description": "I am on Windows 7.\nOther version info:\nautopep8 1.2.1\npep8 1.6.2\nPython 3.5.0 (64-bit)\n\nThe following code formatted with the specified autopep8 version will result in code that is longer than the maximum line length. I would expect the following code not to be changed or changed in a manner that E501 is respected.\n\n``` Python\nclass Version(object):\n    def __init__(self, version_string, splitter='.'):\n        super(Version, self).__init__()\n\n        self._version_string = version_string\n        self._splitter = splitter\n        filtered_split = filter(\n            lambda x: len(x) > 0, str(version_string).split(splitter))\n        self._version_parts = list(\n            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n                '_' in str(x) else str(x)), filtered_split))\n```\n\nThe diff from autopep8 looks like this (regardless of -aa or --experimental):\n`autopep8 -d --experimental util.py`\n\n``` Diff\n--- original/util.py\n+++ fixed/util.py\n@@ -32,9 +32,8 @@\n         self._splitter = splitter\n         filtered_split = filter(\n             lambda x: len(x) > 0, str(version_string).split(splitter))\n-        self._version_parts = list(\n-            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n-                '_' in str(x) else str(x)), filtered_split))\n+        self._version_parts = list(map(lambda x: int(x) if str(x).isnumeric() else (\n+            Version(x, '_') if '_' in str(x) else str(x)), filtered_split))\n\n```\n"
            }
        ]
    },
    "PyCQA/bandit": {
        "all": [
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 366,
                "title": "Not detecting un-used variables in case of nested try / except block.",
                "labels": [],
                "description": "**Describe the bug**\r\nBandit is not detecting un-used variable inside a nested try /except block\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nExample:\r\n ```\r\ntry: \r\n    print 'try1' \r\n    try:\r\n        print 'try2'\r\n    except Exception as ex:\r\n        print 'Got exception try2'\r\n  except Exception as e:\r\n      print 'Got exception try1'\r\n```\r\n\r\nBandit captures that **e** as unused variable but **not capturing ex**  \r\n**Expected behavior**\r\nUnused variable with-in nested try/except blocks should also be captured.\r\n\r\n**Bandit version**\r\nbandit                        1.4.0 [ Centos 7 ]\r\n\r\n```\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 345,
                "title": "Exclude file pattern in config file",
                "labels": [],
                "description": "Hey guys!\r\n\r\nI use your analyzer on my current project. It's a django applications, so tests written for each apps stored in apps folders, sometimes it's called `tests.py`, sometimes its has more complicated names and stores in `tests` folder.\r\n\r\nI think it's will be great to have opportunity to exclude this tests from analyzed scope. I was try to use `exclude` in config file, but it's doesn't help me.\r\n\r\nMaybe somebody has ideas or better ideas to do this?"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 356,
                "title": "New plugin to check for use of pyghmi",
                "labels": [
                    "hacktoberfest",
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nIPMI is known to be a non-secure protocol.  \r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA13-207A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pyghmi (python IPMI library).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 406,
                "title": "Missing documentation on the custom formatter",
                "labels": [],
                "description": "**Describe the bug**\r\nThe custom formatter added under commit https://github.com/PyCQA/bandit/commit/d159335700938f25ebd2606c066e3895e2a3d577 doesn't have anything documented in the docs here: https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n2. Notice a custom formatter is not listed\r\n\r\n**Expected behavior**\r\nShould have a link for custom\r\n\r\n**Bandit version**\r\nmaster\r\n\r\n**Additional context**\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 404,
                "title": "No recommendations for how to resolve warnings",
                "labels": [
                    "enhancement"
                ],
                "description": "Bandit reports a lot of \"problems\" without providing any direction for what kind of code to use instead. Bandit has no capability for detecting when sanitization is used, no whitelist of approved alternatives for the blacklisted methods.\r\n\r\nFor example, bandit excludes almost every known way to submit an HTTP request, such as the common urllib methods. Well, what should the programmer use instead, the requests package?"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 364,
                "title": "Specify output_file encoding as utf-8",
                "labels": [],
                "description": "Fixes #362 "
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 342,
                "title": "List all checks done by  this scanner",
                "labels": [
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWant to get a list of all checks along with description.\r\n\r\n**Describe the solution you'd like**\r\n\r\nList of checks that will list:\r\n\r\ntest_id\r\ntest_name\r\nissue_text\r\nissue_severity\r\n\r\n\r\n**Describe alternatives you've considered**\r\n\r\nTrying to get it, but didn't succeeded.\r\n\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 319,
                "title": "Consider removing PyCryptodome from blacklist",
                "labels": [
                    "enhancement"
                ],
                "description": "As the maintainer of PyCryptodome, I have reservations on the library being blacklisted (B414).\r\n\r\nCan you help me understand why you think it \"*has not fully addressed the issues inherent in PyCrypto*\"?\r\n\r\nIt shares none of the bugs, and it broke API compatibility with it by dropping the most dangerous ones (such as having ECB as the default cipher mode).\r\n\r\nYou can certainly shoot yourself in the foot with the low-level primitives, but the same can be achieved with `cryptography` (which is a great project, no doubts about it)."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 362,
                "title": "Reports that contain unicode will cause Bandit to crash",
                "labels": [
                    "bug"
                ],
                "description": "**Describe the bug**\r\nIf bandit output contains unicode characters, and the user attempts to create a report file, then Bandit will crash.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create the following python file, `test.py`:\r\n```python\r\nsecret = u'Don\\'t\ud83d\udc4fhard\ud83d\udc4fcode\ud83d\udc4fsecrets'\r\n```\r\n2. Run a Bandit scan on the file:\r\n```sh\r\nbandit -f txt -o report.txt test.py \r\n```\r\n3. Observe the resulting crash and traceback:\r\n```\r\n[main]  INFO    profile include tests: None\r\n[main]  INFO    profile exclude tests: None\r\n[main]  INFO    cli include tests: None\r\n[main]  INFO    cli exclude tests: None\r\n[main]  INFO    running on Python 3.6.5\r\n[node_visitor]  INFO    Unable to find qualified name for module: test.py\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\bandit\\core\\manager.py\", line 157, in output_results\r\n    conf_level=conf_level, lines=lines)\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\bandit\\formatters\\text.py\", line 161, in report\r\n    wrapped_file.write(utils.convert_file_contents(result))\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\encodings\\cp1252.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f44f' in position 135: character maps to <undefined>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\w107566\\AppData\\Local\\Programs\\Python\\Python36\\Scripts\\bandit.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\bandit\\cli\\main.py\", line 345, in main\r\n    args.output_format)\r\n  File \"c:\\users\\<username>\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\bandit\\core\\manager.py\", line 161, in output_results\r\n    \"%s\" % (output_format, str(e)))\r\nRuntimeError: Unable to output report using 'txt' formatter: 'charmap' codec can't encode character '\\U0001f44f' in position 135: character maps to <undefined>\r\n```\r\n\r\n**Expected behavior**\r\nI expect Bandit to successfully create the report, either by handing unicode encodings, or by removing the problematic unicode characters. \r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.4.0\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 355,
                "title": "New check plugin to detect use of SNMPv1 and SNMPv2",
                "labels": [
                    "hacktoberfest",
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nSNMPv1 and SNMPv2 are known to be non-secure protocols.  SNMPv3 can be secure if used properly with encryption and authentication.  But correct options must be chosen.\r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA17-156A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pysnmp (Python SNMP library) and use with SNMP version 1, 2, and 3 (with no auth, no priv).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 297,
                "title": "tools/openstack_coverage.py is no longer needed or used",
                "labels": [
                    "bug",
                    "good first issue"
                ],
                "description": "### Summary \r\nWe can remove tools/openstack_coverage.py since this project is no longer openstack specific.  Although, we still could use a coverage job of some kind.  So while removing this, we should also add a coverage job to travis CI/etc.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 402,
                "title": "B322 input listed as high severity, high confidence... when running python3",
                "labels": [],
                "description": "**Describe the bug**\r\nWhen running bandit under python 3, B322 'The input method in Python 2...' is listed as a high severity issue with high confidence.\r\n\r\nAt best, this should be lower confidence, but ideally it shouldn't complain on python 3 as (as it asserts itself) it's safe in python 3.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nWhile running in a python 3 virtualenv:\r\necho \"test = input('Say something')\" > test.py\r\nbandit test.py\r\n\r\n**Expected behavior**\r\nNo complaint about input is issued because this does not apply in python 3.\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.5.1\r\n  python version = 3.4.3 (default, Nov 28 2017, 16:41:13) [GCC 4.8.4]\r\n```\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 346,
                "title": "One-liner in bandit config to skip B101 assert_used in files matching a filter",
                "labels": [
                    "enhancement"
                ],
                "description": "Currently you can exclude a directory and you can skip certain tests across all scanned files. It would be very handy to be able to exclude test_* pytest files from the B101 assert test with a simple one liner in the .bandit config file.\r\n\r\nThis is a feature request for something like:\r\n\r\nIn .bandit\r\n```\r\n[bandit]\r\npytest_filter: test_* #excludes B101 in files matching test_*\r\n```\r\n\r\nExcluding all B101 is not a good solution, because I want to know about B101 in non-test modules.\r\n\r\nAlso, I'd like to be able to exclude on file filter like test_* rather than directory test/ because that filter works better across projects I have seen where test directory might not be named consistently, but all the pytests are generally named a special way e.g. test_*\r\n\r\nThis will allow a more general (across projects) config file to be set up.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 220,
                "title": "Jenkins plugin [enhancement]",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi\n\nThis is not a bug itself, its a enhancement on the tool. Im sorry if this is not the right place to raise this, but its the only point of contact i have with you\n\nIm building a tool in python, and im using Jenkins to automate all the testing etc... It would be a great addition to have a bandit plugin that you can use in jenkins to run this scan automatically, and also, have the ability to set a quality gate, as, for example, break the build if you have any critical vulnerability\n\nThanks"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 401,
                "title": "PEP-518 support: configure bandit via pyproject.toml",
                "labels": [],
                "description": "Thank you for cool lib.\r\n\r\nAdded support for configuring via [pyproject.toml](https://www.python.org/dev/peps/pep-0518/) (`tool.bandit` section). Closes #212, because now all projects moves from setup.cfg to pyproject.toml.\r\n\r\n1. Parse files ends with `.toml` as toml and get `tool.bandit` section.\r\n1. Tests included (just inherited from YAML config tests).\r\n1. Documentation updated, config example included into docs too."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 275,
                "title": "candidate issues feature doesn't work",
                "labels": [],
                "description": "Hi!\n\nCode comments in bandit describe a \"candidate issues\" feature, where if a baseline\nis used and a new issue is detected that matches another issue already in the baseline,\nboth issues will be displayed in the report:\n\n```\n    For example, let's say we find a new command injection issue in a file\n    which used to have two.  Bandit can't tell which of the command injection\n    issues in the file are new, so it will show all three.  The user should\n    be able to pick out the new one.\n```\n\nHowever, it looks like this feature never actually worked; what actually happens\nis any issue that evaluates equal to an issue already in the baseline will always\nbe ignored. (This if statement will never be true: https://github.com/openstack/bandit/blob/5fe2f01e5ba3ec5c2770492d735ffaf548e2ed4a/bandit/core/manager.py#L391)\n\nThat function was later \"simplified\" to code that has the same problem: https://github.com/openstack/bandit/blob/d159335700938f25ebd2606c066e3895e2a3d577/bandit/core/manager.py#L376\n\nFrom the code comments it sounds like the function was intended to do this:\n\n```\ndef _compare_baseline_results(baseline, results):\n    unmatched_issues = []\n    baseline_copy = copy.deepcopy(baseline)\n\n    for new_issue in results:\n        try:\n            baseline_copy.remove(new_issue)\n        except ValueError:\n            unmatched_issues.append(new_issue)\n\n    return unmatched_issues\n```\n\nThis makes bandit behave in the way described in the code comments: if the baseline contains\none issue, but a bandit run detects two issues, both issues will be displayed (as \"candidate\nissues\"). The current behavior is that neither issue would be displayed (the run would be clean),\nwhich sounds like a bug, unless this was the intent and the code comments are wrong."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 393,
                "title": "Replace use of _ast with ast",
                "labels": [],
                "description": "Bandit shouldn't be using the protected version of the AST (_ast).\r\nThis is likey to change and that's exactly what happened in Python\r\n3.8 as they have deprecated the ast classes such as ast.Num and\r\nremoved the _ast.Num.\r\n\r\nSigned-off-by: Eric Brown <browne@vmware.com>"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 280,
                "title": "B404-B603- Categorisation as warnings",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi\n\nIm running bandit against my python project (its a great tool, i love it!) but there are some things that could be improved\n\nIm using subprocess.call, but with shell set to False, so im not vulnerable to command injection there. However, i have two errors in my build. \n\n\nB404 - as im using subprocess\nB607 - as, despite not being vulnerable to command injection, i need to be careful\n\n\nThose recommendations are great, but in my opinion should be categorised as warnings rather than vulnerabilities. I have been reading and most of the people ignore those rules by default\n\nWould be possible to have this amended?\n\nThanks"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 394,
                "title": "Docs lack information on baseline function and how to use it",
                "labels": [
                    "hacktoberfest",
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nThe bandit baseline command and function is missing from the docs and README.  This can be a very useful feature and should be properly documented.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 293,
                "title": "Bandit code description",
                "labels": [
                    "enhancement"
                ],
                "description": "### Summary \r\nOn the original [commit  353634f](https://github.com/openstack/bandit/commit/51b1781a97a27b0c15309c6fc7d36d54d81bc7c7#diff-970ecf8bd8241cd988a58f21e2ccd970) was describe the rules as following:\r\n```\r\nIDs break down as follows:\r\n - B1xx - misc tests\r\n - B2xx - application/framework miss-configuration\r\n - B3xx - blacklists (calls)\r\n - B4xx - blacklists (imports)\r\n - B5xx - cryptography\r\n - B6xx - injection\r\n - B7xx - XSS\r\n```\r\nI think this could be in written on the README file.\r\nAlso I think could be usesful create a CVE for known \"CVE cases\".\r\n\r\nWhat do you thinkg about it?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 388,
                "title": "Properly handle nosec strings in code",
                "labels": [],
                "description": "The string \"# nosec\" has a chance (albeit remote) that it can be\r\npart of the code on the line not just within the comment. Bandit\r\ncurrently checks the entire line for that string.\r\n\r\nThis patch tokenizes the line of input to figure out what piece\r\nis a comment, then compares whether that comment contains \"# nosec\".\r\n\r\nFixes #383\r\n\r\nSigned-off-by: Eric Brown <browne@vmware.com>"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 294,
                "title": "Django XSS detection rule",
                "labels": [
                    "enhancement"
                ],
                "description": "### Summary \r\nThe rule [B308](https://github.com/PyCQA/bandit/blob/master/bandit/blacklists/calls.py#L388) only detect the function mark_safe ( According to [Django security](https://docs.djangoproject.com/en/dev/topics/security/#cross-site-scripting-xss-protection) ), whoever, XSS you could \"mark safe\" a strings with [SafeText](https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.safestring.SafeText), SafeUnicode, [SafeString](https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.safestring.SafeString) and SafeBytes.\r\n\r\n### Steps to reproduce the behavior\r\n```\r\nfrom django.utils import safestring\r\n\r\nsafestring.SafeText('<b>Hello World</b>')\r\nsafestring.SafeUnicode('<b>Hello World</b>')\r\nsafestring.SafeString('<b>Hello World</b>')\r\nsafestring.SafeBytes('<b>Hello World</b>')\r\n```\r\n### Expected behavior\r\nDetect the escape functions\r\n\r\n### Actual behavior\r\n[B308](https://github.com/PyCQA/bandit/blob/master/bandit/blacklists/calls.py#L388) do not detect this functions\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 397,
                "title": "Remove pycryptodome from import blacklist",
                "labels": [],
                "description": "pycryptodome appears to be actively maintained, as opposed to pycrypto.\r\n\r\nUnless there is a noted security issue with not using it, this removes\r\nthe blanket blacklist on the library. Any insecure hashes/ciphers/etc.\r\nthat the library provides will still be reported as per other libraries."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 322,
                "title": "change yaml.load id from b506 to b612",
                "labels": [],
                "description": "Resolves #306 \r\n\r\nI found the next unused number in the 6xx series which was 612 and basically did a find/replace of b506 to b612. Made sure to correct the ordering in the readme though."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 405,
                "title": "Add travis-CI testing of macOS",
                "labels": [
                    "enhancement"
                ],
                "description": "**Describe the bug**\r\nOur Python classifier states Bandit is supported on Linux and macOS, yet we only test on Linux.  Ubuntu Linux specifically.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Look at classifier in setup.cfg\r\n2. Notice macOS is listed\r\n3. Look at .travis.yml and notice only Linux is used as environment to test.\r\n\r\n**Expected behavior**\r\nI'd expect testing on the platforms claimed we support\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.5.1\r\n  python version = 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 12:01:12) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n```\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 341,
                "title": "Optionally output all issues regardless of configured levels",
                "labels": [],
                "description": "**Is your feature request related to a problem? Please describe.**\r\n\r\nYes. Currently, when running bandit at more strict levels, e.g., `bandit -lll -iii ...`, the pass/fail status of the run will be evaluated based on the results at the higher level and confidence, but issues at lower levels and confidences are effectively ignored outside of showing up in the count of run metrics. For example, I have a codebase that has one issue showing up at `-lll -iii` and 22 issues that only exist at `-l` \u2014I'd like to know about all of them, but only fail (return non-zero) on the ones at the level I've configured.\r\n\r\nI've briefly looked into writing a more verbose formatter, but it looks like details for issues are only kept if they're at the configured level, so I don't think I can just have it print out everything. Currently I'm thinking about running `bandit -lll -iii` and reporting our status on that and then also running `bandit -l -i` but ignoring the exit code just to get a full log.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIdeally a flag exists, or perhaps this is a utilization of the `--verbose` flag, that enables issues of all severities and confidences to be logged while continuing to only set an exit code of the cli based on the requested severity/confidence.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs mentioned before, I looked at writing a verbose formatter, but it doesn't look like that'd do the trick. It seems like perhaps a change would have to happen in the manager first before formatters could do something with the issue list to decide whether or not to log them."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 326,
                "title": "Functional tests are broken",
                "labels": [
                    "bug"
                ],
                "description": "**Describe the bug**\r\nNoticed functional tests are broken when working to add back a coverage job to the CI.\r\n\r\nhttps://travis-ci.org/PyCQA/bandit/jobs/396523603\r\n\r\n**To Reproduce**\r\n`tox -e cover`\r\n\r\n**Expected behavior**\r\nFunctional tests should always pass on the master build CI.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\n1.4.1\r\n```\r\n\r\n**Additional context**\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 340,
                "title": "Dynamics rules",
                "labels": [],
                "description": "Implementation for #214\r\nUsed rule for case #331 as example\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 352,
                "title": "Redo the design of functional tests",
                "labels": [
                    "enhancement"
                ],
                "description": "**Describe the bug**\r\nCurrently the functional tests just measure a count of the number of high, medium, low confidence and severity for a file.  This mostly works, but can hide false positives and isn't the best way to do an absolute test that a function gets a desired result.  It relies on counts and not whether an individual line caused an bandit error or warning.\r\n\r\n**To Reproduce**\r\nLook at functional tests and how they work.\r\n\r\n**Expected behavior**\r\nInstead of the current method, I think we need to devise a way that each line is checked rather than comparing a total count for a file.  Maybe we don't even need the files.   Maybe these just become better unit tests of each plugin.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.4.1\r\npython version = 2.7.10 (default, Oct 6 2017, 22:29:07) [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 324,
                "title": "Add coverage back to testing",
                "labels": [],
                "description": "This patch adds back coverage testing. When in the OpenStack\r\nframework, coverage was testing each patch set. But with GitHub\r\nand Travis CI, it's no longer occurring.\r\n\r\nThis PR also fixes up the broken functional tests.\r\n\r\nFixes Issue #297\r\nFixes Issue #326 "
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 400,
                "title": "How to check the exclude path works in the .bandit file ?",
                "labels": [],
                "description": "My .bandit file looks like below.\r\n-----------------------------------------\r\n```\r\n[bandit]\r\nexclude: \\static,\\templates\r\nskips: B413,B601,B501,B602,B605\r\n```\r\n-------------------------------------------\r\nCommand line output.\r\n```\r\nwus-macbook-pro:~ wuwei$ bandit -lll vmonic/git_repo/devops-online/ -r\r\n[main]\tINFO\tFound project level .bandit file: vmonic/git_repo/devops-online/.bandit\r\n[main]\tINFO\tUsing ini file for excluded paths\r\n[main]\tINFO\tUsing ini file for skipped tests\r\n[main]\tINFO\tUsing command line arg for selected targets\r\n[main]\tINFO\tprofile include tests: None\r\n[main]\tINFO\tprofile exclude tests: None\r\n[main]\tINFO\tcli include tests: None\r\n[main]\tINFO\tcli exclude tests: B413,B601,B501,B602,B605\r\n[main]\tINFO\trunning on Python 2.7.13\r\n66 [0.. 50.. ]\r\nRun started:2018-10-08 09:06:15.117350\r\n\r\nTest results:\r\n.......\r\n\r\nCode scanned:\r\n\tTotal lines of code: 16347\r\n\tTotal lines skipped (#nosec): 3\r\n\r\nRun metrics:\r\n\tTotal issues (by severity):\r\n\t\tUndefined: 0\r\n\t\tLow: 83\r\n\t\tMedium: 64\r\n\t\tHigh: 2\r\n\tTotal issues (by confidence):\r\n\t\tUndefined: 0\r\n\t\tLow: 23\r\n\t\tMedium: 7\r\n\t\tHigh: 119\r\nFiles skipped (0):\r\n```\r\n----------------\r\nMy question is , the total code line scanned is the same as before and after I write the .bandit file and the command line output do not give me clearly information that my config to exclude /templates folder works or not.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 403,
                "title": "Added snmp_security check plugin for various SNMP checks",
                "labels": [],
                "description": "This solves #355 by adding a single plugin that has two tests:\r\n\r\n1. Check if SNMP version 1 or 2c is in use\r\n2. If version 3 is in use, validate that noAuthNoPriv isn't being utilized. "
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 299,
                "title": "Create Bandit gitpages site",
                "labels": [
                    "enhancement"
                ],
                "description": "### Summary \r\n\r\nWould be nice to have a http://bandit.github.io up and have an overview, getting started etc. Could even have blog pages on using bandit, new features etc.\r\n\r\nIf no objections, I will put something together. \r\n\r\nWe can use logos from https://github.com/PyCQA/bandit/issues/287 and  @baranpirincal can hopefully resize / respin the logo for a header banner etc. \r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 306,
                "title": "yaml_load should not be B5xx cryptography group",
                "labels": [
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nThe yaml_load plugin has bandit ID B506.  The 5xx group according to [1] is defined as the group for cryptography.  This plugin would be more appropriate as a type of injection B6xx\r\n\r\n**To Reproduce**\r\nn/a\r\n\r\n**Expected behavior**\r\nn/a\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 309,
                "title": "Add an LDAP injection plugin",
                "labels": [
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nSimilar to other injection checks, add an LDAP injection.\r\n\r\n**Describe the solution you'd like**\r\nLike the other plugins that scan for injection in SQL, shell, etc, we could use one that checks for LDAP search injection.\r\n\r\nhttps://www.owasp.org/index.php/LDAP_Injection_Prevention_Cheat_Sheet\r\n\r\n**Describe alternatives you've considered**\r\nn/a\r\n\r\n**Additional context**\r\nn/a"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 313,
                "title": "RFE: stricter checking for anything containing \"password\"",
                "labels": [
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe following code snippet triggers only 1 issue (the last line). The rest is just fine by Bandit:\r\n\r\n```\r\nlog({\"server\": server, \"password\": password, \"user\": user})\r\n\r\nlog({\"server\": server, \"password\": 'pass', \"user\": user})\r\n\r\nlog(password='pass')\r\n```\r\n\r\n```\r\n$ bandit -r logme.py \r\n[main]\tINFO\tprofile include tests: None\r\n[main]\tINFO\tprofile exclude tests: None\r\n[main]\tINFO\tcli include tests: None\r\n[main]\tINFO\tcli exclude tests: None\r\n[main]\tINFO\trunning on Python 3.6.3\r\n[node_visitor]\tINFO\tUnable to find qualified name for module: logme.py\r\nRun started:2018-05-26 09:16:20.545727\r\n\r\nTest results:\r\n>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'pass'\r\n   Severity: Low   Confidence: Medium\r\n   Location: logme.py:6\r\n5\t\r\n6\tlog(password='pass')\r\n\r\n--------------------------------------------------\r\n\r\nCode scanned:\r\n\tTotal lines of code: 3\r\n\tTotal lines skipped (#nosec): 0\r\n\r\nRun metrics:\r\n\tTotal issues (by severity):\r\n\t\tUndefined: 0.0\r\n\t\tLow: 1.0\r\n\t\tMedium: 0.0\r\n\t\tHigh: 0.0\r\n\tTotal issues (by confidence):\r\n\t\tUndefined: 0.0\r\n\t\tLow: 0.0\r\n\t\tMedium: 1.0\r\n\t\tHigh: 0.0\r\nFiles skipped (0):\r\n```\r\n\r\nThe first 2 lines are taken from a recently backdoored package which was published on PyPI:\r\nhttps://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/\r\n\r\nand they were not detected by Bandit.\r\n\r\n\r\n**Describe the solution you'd like**\r\nIMO Bandit should flag anything which contains the string password in any form (function argument, dict key or value, variable name, etc). You can never be too careful when dealing with passwords.\r\n\r\n\r\nPlease comment on this. I can spend some time to work on a PR if we can agree on the general direction of this feature request."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 317,
                "title": "config file as described in README.rst does not work",
                "labels": [
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. create `.bandit` file with content:\r\n```\r\n[bandit]\r\ntests: B101,B102,B301\r\n\r\n```\r\n2. run `bandit -c .bandit -r module/`\r\n3. get error:\r\n`[main]\tERROR\t.bandit : Error parsing file.`\r\n\r\n**Expected behavior**\r\nworking as described in readme\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nDocs say it should be YAML and not INI. https://bandit.readthedocs.io/en/latest/config.html"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 216,
                "title": "Possible Bandit string format plugin",
                "labels": [
                    "enhancement"
                ],
                "description": "From the article: http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/  uncontrolled format strings can provide access to potentially sensitive data.\n\nIt may be worth creating a Bandit plugin to detect this."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 333,
                "title": "B603 false positive?",
                "labels": [],
                "description": "**Describe the bug**\r\nI don't understand how I should \"check for untrusted input.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nWith the code:\r\n\r\n```\r\nimport shlex\r\nimport subprocess\r\n\r\ndef foo():\r\n    args = shlex.split(\"git rev-parse HEAD\")\r\n    return str(subprocess.check_output(args, shell=False), \"utf-8\").strip()\r\n```\r\n\r\nGives ```Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input```.  I don't understand how this is shell equals true given that \"shell=False\" is passed, nor how this is untrusted input.\r\n\r\n**Expected behavior**\r\n\r\nThis line shouldn't be flagged as a warning\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit --version\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 212,
                "title": "Add config via setup.cfg",
                "labels": [],
                "description": "Hi,\n\nsince a lot of other linters support configuration via the setup.cfg file, it might be a good feature here to.\n\nI don't like to have a gazillion .files in my repo to setup all tests and linters.\n\nBTW: AWESOME tool.\n\nThanks,\nJoe"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 318,
                "title": "default config file name",
                "labels": [
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nThe doc say i should create a YAML config file, but not how to name it. https://bandit.readthedocs.io/en/latest/config.html\r\n\r\n**Describe the solution you'd like**\r\nPlease recommend a sane default name, so it is consistent in any project and can be found by CI etc.\r\n\r\nI recommend using `.bandit.yml` because it is hidden on Linux, UNIX and macOS and has an extension.\r\n\r\n**Describe alternatives you've considered**\r\nI don't see any alternatives. Leaving it as is leads to chaos!\r\n\r\n**Additional context**\r\nCodacy says: \"You can also use custom .bandit or bandit.yml config file.\"\r\nI have also seen `bandit.yaml` in earlier issues.\r\n\r\nFor a sane solution, i look what similar tools do.\r\n\r\nMost `.name` for INI-style config or `.name.yml` for YAML config.\r\n\r\n`pylintrc` or `.pylintrc`: https://pylint.readthedocs.io/en/latest/user_guide/run.html#command-line-options\r\n\r\n`.flake8`\r\n\r\n`.pycodestyle` or config in `setup.cfg` or `tox.ini`: http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\r\n\r\n`.pydocstyle`, `.pydocstyle.ini`, `.pydocstylerc`, `.pydocstylerc.ini`: http://www.pydocstyle.org/en/2.1.1/usage.html#configuration-files\r\n\r\n`.coveragerc`\r\n\r\n`.travis.yml`, `.circleci`, `.github`, `.appveyor.yml`\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 332,
                "title": ".bandit ignored for single files",
                "labels": [],
                "description": "When doing a single file, bandit doesn't use the .bandit file in the directory. If it's agreed that it should work like this, I'm happy to do a PR to fix it.\r\n\r\nWith a config file `tests/.bandit`, running\r\n\r\n```\r\nbandit -r tests/\r\n```\r\n\r\nhas different results than\r\n\r\n```\r\nbandit -r tests/test_cli.py\r\n```\r\n\r\n**Expected behavior**\r\nI would expect bandit to search each directory to root for a .bandit file and apply the first found to the test run.\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.4.0\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 176,
                "title": "Plugin crashes are not propagated / communicated",
                "labels": [],
                "description": "This applies mostly to development, but may affect real run in some way too. On a clean tree:\n\ntox -e py27\n# passes\nsed -i 's/bandit/hfuiahueiawu/' bandit/plugins/app_debug.py\ntox -e py27\n# fails with \"testtools.matchers._impl.MismatchError: 15 != 0\" - shouldn't \"plugin's completely broken, ImportError\" be visible instead?\n\nThis seems like some silent failures are possible."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 387,
                "title": "Password",
                "labels": [],
                "description": "Proposed solution for #386 with re"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 214,
                "title": "Allow custom plugins outside Bandit source/library paths",
                "labels": [
                    "enhancement"
                ],
                "description": "See https://twitter.com/presidentbeef/status/785270001250934784.\n\nMethod for adding custom Bandit plugins (https://github.com/openstack/bandit#extending-bandit) requires modification to Bandit source or library paths.\n\nCan we support loading of custom plugins from other locations?"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 217,
                "title": "Summary by test ID would be useful",
                "labels": [
                    "enhancement"
                ],
                "description": "It would be useful to have a breakdown at the end of a run by count of each test ID found.  This could be useful to triage by type of finding."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 156,
                "title": "No detection when passing keyword args to subprocess/shell functions",
                "labels": [],
                "description": "Multiple plugins in bandit/plugins/injection_shell.py assume that a command will be passed in as a positional argument. When keyword arguments are used, the plugins don't even report that a call occurred.\n\nThe only issue that Bandit reports against the below Python 2 code is the import of \"subprocess\":\n\n    import commands\n    commands.getoutput(cmd='ls')\n\n    import os\n    os.popen2(mode='r', cmd='ls')\n\n    import subprocess\n    subprocess.Popen(args='ls', shell=True)\n\nI think a solution for the shell injection plugins is to check for either args[0] *or* kwargs['cmd']/kwargs['args']/etc., depending on the function.\n\nNote: this quirk only applies to Python-defined functions. Built-in functions, like os.system() on Python 2, won't accept keyword arguments."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 377,
                "title": " Remove paramiko invoke_shell and fix example",
                "labels": [],
                "description": "Paramiko's invoke_shell function does not take a command argument\r\neven though the Bandit example implied that. It simply opens a stream\r\nfor communicating with a shell. Therefore, it should not be flagged\r\nas part of the Bandit scan.\r\n\r\nThe current example of paramiko command injection does not properly\r\ncreate an instance of the SSHClient before calling the functions\r\non the client. Instead it's calling the functions statically which\r\nis not proper syntax.\r\n\r\nThis patches updates the plugin and example. Bandit, however, is\r\nstill functioning properly to detect the improper use of exec_command().\r\n\r\nFixes Issue #375\r\n\r\nSigned-off-by: Eric Brown <browne@vmware.com>"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 386,
                "title": "password hardcode rule don't detect composed words nor upper strings",
                "labels": [],
                "description": "**Describe the bug**\r\nThe signature for password hardcode don't detect composed words nor upper strings\r\n\r\n**To Reproduce**\r\nRun bandit for the following code:\r\n```\r\nEMAIL_PASSWORD = \"secret\"\r\nemail_pwd = 'emails_secret'\r\n```\r\n\r\n**Expected behaviour**\r\nDetect the two lines a hit for B105\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.5.1\r\n  python version = 2.7.12 (default, Dec  4 2017, 14:50:18) [GCC 5.4.0 20160609]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 196,
                "title": "AST parsing hits recursion limit",
                "labels": [],
                "description": "The parsing of certain ASTs will hit Python's recursion limit. This happens if AST nodes are nested to a depth greater than \"sys.getrecursionlimit()\", which defaults to 1000 for me.\n\nA simple example:\n\n    python -c 'print (\"+\" * 1000) + \"1\"' > unary.py\n    bandit unary.py\n\nWhen this occurs, Bandit will report an exception:\n\n    Exception RuntimeError: RuntimeError('maximum recursion depth exceeded',) in <generator object iter_fields at 0x108ab2eb0> ignored\n    [manager]   ERROR   Exception occurred when executing tests against /Users/dwyde/test/unary.py. Run \"bandit --debug /Users/dwyde/test/unary.py\" to see the full traceback.\n\nThe start of the traceback with --debug:\n\n    [manager]       DEBUG     Exception string: maximum recursion depth exceeded while calling a Python object\n    [manager]       DEBUG     Exception traceback: Traceback (most recent call last):\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 259, in _parse_file\n        score = self._execute_ast_visitor(fname, data, nosec_lines)\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 290, in _execute_ast_visitor\n        score = res.process(data)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 278, in process\n        self.generic_visit(f_ast)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 242, in generic_visit\n        if self.pre_visit(item):\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 187, in pre_visit\n        LOG.debug(ast.dump(node))\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 110, in dump\n        return _format(node)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n\nFound when running Bandit against\nhttps://bitbucket.org/logilab/astroid/src/1.4.0/astroid/tests/testdata/python2/data/joined_strings.py"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 383,
                "title": "#nosec string outside of a comment is treated as a comment",
                "labels": [
                    "bug"
                ],
                "description": "From @ehooo in https://github.com/PyCQA/bandit/issues/211#issuecomment-390034850:\r\n\r\n> Hi I found a bug related with the way that \"nosec \" comment is checked.\r\n> For example `vulnerable_call(param=\"#nosec\")` this line will be scaped\r\n\r\nWhen fixing this, please do not introduce a regression that prevents use of in-line `# nosec` comments alongside other source code analyzers' line comment directives? Consider someone who uses Mypy notations, pyflakes, pylint, and bandit:\r\n\r\n`\u2026  # type: \u2026 # nosec # noqa: E501 ; pylint: disable=line-too-long`"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 373,
                "title": "Subprocess input data warning on literal command",
                "labels": [],
                "description": "**Describe the bug**\r\nBandit reports when user is trying to call subprocess, even when command is static.\r\n\r\n**To Reproduce**\r\nCreate `test.py`:\r\n```python\r\nimport subprocess\r\n\r\ndef f():\r\n    print(subprocess.check_output(['/usr/bin/ls']))\r\n```\r\n\r\nCall:\r\n```bash\r\n$ bandit test.py\r\n```\r\n\r\n**Expected behavior**\r\nBandit shouldn't report B603 on line 4, because there is no way untrusted input appear there.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.5.0\r\n  python version = 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 376,
                "title": "Fix PY2 ast.Arg AttributeError in general_hardcoded_password.py",
                "labels": [],
                "description": "Fix `ast.arg` should be `ast.arguments` in Python 2.\r\n\r\nThis error was raised during our first run by default `bandit -r src` under Python 2.7.15.\r\n```\r\n[tester]\tERROR\tBandit internal error running: hardcoded_password_default\r\non file something_py2.py at line 527: 'module' object has no attribute 'arg'\r\nTraceback (most recent call last):\r\n  File \"bandit/core/tester.py\", line 64, in run_tests\r\n    result = test(context)\r\n  File \"bandit/plugins/general_hardcoded_password.py\", line 212, in hardcoded_password_default\r\n    if isinstance(key, ast.Name) or isinstance(key, ast.arg):\r\nAttributeError: 'module' object has no attribute 'arg'\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 211,
                "title": "Add support for disabling individual test numbers",
                "labels": [
                    "enhancement"
                ],
                "description": "It would be nice to be able to disable specific bandit test numbers, like:\n\ndef mybadfunction(token='notreallyasecret'):  # no-sec-b900"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 375,
                "title": "Paramiko injection test not testing SSHClient.invoke_shell() properly",
                "labels": [
                    "bug"
                ],
                "description": "While working on #374, I noticed that the [paramiko injection test](https://github.com/PyCQA/bandit/blob/master/examples/paramiko_injection.py#L10) is not actually testing `SSHClient.invoke_shell()` because it can't resolve `SSHClient` and the function call is wrong.\r\n\r\nShould be:\r\n```\r\nimport paramiko\r\n\r\nssh_client = paramiko.client.SSHClient()\r\nssh_client.invoke_shell()\r\n```\r\n\r\nInstead of:\r\n```\r\nimport paramiko\r\n\r\nSSHClient.invoke_shell('something; bad; here\\n')\r\n```\r\n\r\n**Expected behavior**\r\nBandit should flag `SSHClient.invoke_shell()` correctly.\r\n\r\n**Bandit version**\r\n```\r\n1.5.0\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 215,
                "title": "HTML output should use absolute paths",
                "labels": [],
                "description": "Bandit's HTML reports generate links to files. These links are relative\nto Bandit's current working directory. If the output file is written\ninto a different directory, these links will be broken:\n\n    cd bandit/examples\n    bandit assert.py -f html -o ~/report.html\n    # The generated HTML links to \"assert.py\"\n\nIf the HTML reports are supposed to just be for filesystem access, then providing\nabsolute file:// URLs seems like a reasonable fix.  If the HTML reports are intended\nto live on a web server, then a different solution might be better."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 372,
                "title": "Updated titles for plugins b109 and b111 to fix #367",
                "labels": [],
                "description": "Updated the titles for plugins B109 and B111 to match the titles used for the other plugins. This resolves #367. "
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 208,
                "title": "Be more clever about repository path in baseline run",
                "labels": [],
                "description": "Git api can operate on a selected path (git.Repo('some/path')) rather than just current directory.\n\nBaseline can be easier to use if it detects the repository path at the destination instead of trying to use current directory."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 365,
                "title": "Fix README.rst",
                "labels": [],
                "description": "The current README.rst has references to configure bandit runs using a custom\r\n.INI-like file. In reality, that file should actually be a YAML file.\r\nUsing the INI example provided will result in:\r\n\r\n` [main] ERROR bandit.cfg : Error parsing file. `\r\n\r\nThis patch set updates the configuration so it is of proper YAML format so\r\nthe execution will not error out.\r\n\r\nSigned-off-by: Tin Lam <tinlam@gmail.com>"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 367,
                "title": "Docs plugin listing shows title instead of check name",
                "labels": [
                    "hacktoberfest",
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nIn the docs found here:\r\nhttps://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n\r\nB109 and B111 show a description instead of a plugin name.  This looks inconsistent since all the other plugin names are listed.  I believe this is a result of a recent change to remove these deprecated plugins.\r\n\r\n**To Reproduce**\r\n1) Navigate to https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n2) Notice B109 and B111 look different.\r\n\r\n**Expected behavior**\r\nI'd expect consistency in all the plugin names listed there.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nmaster\r\n```\r\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 356,
                "title": "New plugin to check for use of pyghmi",
                "labels": [
                    "hacktoberfest",
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nIPMI is known to be a non-secure protocol.  \r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA13-207A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pyghmi (python IPMI library).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 406,
                "title": "Missing documentation on the custom formatter",
                "labels": [],
                "description": "**Describe the bug**\r\nThe custom formatter added under commit https://github.com/PyCQA/bandit/commit/d159335700938f25ebd2606c066e3895e2a3d577 doesn't have anything documented in the docs here: https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n2. Notice a custom formatter is not listed\r\n\r\n**Expected behavior**\r\nShould have a link for custom\r\n\r\n**Bandit version**\r\nmaster\r\n\r\n**Additional context**\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 355,
                "title": "New check plugin to detect use of SNMPv1 and SNMPv2",
                "labels": [
                    "hacktoberfest",
                    "enhancement"
                ],
                "description": "**Is your feature request related to a problem? Please describe.**\r\nSNMPv1 and SNMPv2 are known to be non-secure protocols.  SNMPv3 can be secure if used properly with encryption and authentication.  But correct options must be chosen.\r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA17-156A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pysnmp (Python SNMP library) and use with SNMP version 1, 2, and 3 (with no auth, no priv).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 297,
                "title": "tools/openstack_coverage.py is no longer needed or used",
                "labels": [
                    "bug",
                    "good first issue"
                ],
                "description": "### Summary \r\nWe can remove tools/openstack_coverage.py since this project is no longer openstack specific.  Although, we still could use a coverage job of some kind.  So while removing this, we should also add a coverage job to travis CI/etc.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 346,
                "title": "One-liner in bandit config to skip B101 assert_used in files matching a filter",
                "labels": [
                    "enhancement"
                ],
                "description": "Currently you can exclude a directory and you can skip certain tests across all scanned files. It would be very handy to be able to exclude test_* pytest files from the B101 assert test with a simple one liner in the .bandit config file.\r\n\r\nThis is a feature request for something like:\r\n\r\nIn .bandit\r\n```\r\n[bandit]\r\npytest_filter: test_* #excludes B101 in files matching test_*\r\n```\r\n\r\nExcluding all B101 is not a good solution, because I want to know about B101 in non-test modules.\r\n\r\nAlso, I'd like to be able to exclude on file filter like test_* rather than directory test/ because that filter works better across projects I have seen where test directory might not be named consistently, but all the pytests are generally named a special way e.g. test_*\r\n\r\nThis will allow a more general (across projects) config file to be set up.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 401,
                "title": "PEP-518 support: configure bandit via pyproject.toml",
                "labels": [],
                "description": "Thank you for cool lib.\r\n\r\nAdded support for configuring via [pyproject.toml](https://www.python.org/dev/peps/pep-0518/) (`tool.bandit` section). Closes #212, because now all projects moves from setup.cfg to pyproject.toml.\r\n\r\n1. Parse files ends with `.toml` as toml and get `tool.bandit` section.\r\n1. Tests included (just inherited from YAML config tests).\r\n1. Documentation updated, config example included into docs too."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 394,
                "title": "Docs lack information on baseline function and how to use it",
                "labels": [
                    "hacktoberfest",
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nThe bandit baseline command and function is missing from the docs and README.  This can be a very useful feature and should be properly documented.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 293,
                "title": "Bandit code description",
                "labels": [
                    "enhancement"
                ],
                "description": "### Summary \r\nOn the original [commit  353634f](https://github.com/openstack/bandit/commit/51b1781a97a27b0c15309c6fc7d36d54d81bc7c7#diff-970ecf8bd8241cd988a58f21e2ccd970) was describe the rules as following:\r\n```\r\nIDs break down as follows:\r\n - B1xx - misc tests\r\n - B2xx - application/framework miss-configuration\r\n - B3xx - blacklists (calls)\r\n - B4xx - blacklists (imports)\r\n - B5xx - cryptography\r\n - B6xx - injection\r\n - B7xx - XSS\r\n```\r\nI think this could be in written on the README file.\r\nAlso I think could be usesful create a CVE for known \"CVE cases\".\r\n\r\nWhat do you thinkg about it?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 322,
                "title": "change yaml.load id from b506 to b612",
                "labels": [],
                "description": "Resolves #306 \r\n\r\nI found the next unused number in the 6xx series which was 612 and basically did a find/replace of b506 to b612. Made sure to correct the ordering in the readme though."
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 306,
                "title": "yaml_load should not be B5xx cryptography group",
                "labels": [
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nThe yaml_load plugin has bandit ID B506.  The 5xx group according to [1] is defined as the group for cryptography.  This plugin would be more appropriate as a type of injection B6xx\r\n\r\n**To Reproduce**\r\nn/a\r\n\r\n**Expected behavior**\r\nn/a\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 317,
                "title": "config file as described in README.rst does not work",
                "labels": [
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. create `.bandit` file with content:\r\n```\r\n[bandit]\r\ntests: B101,B102,B301\r\n\r\n```\r\n2. run `bandit -c .bandit -r module/`\r\n3. get error:\r\n`[main]\tERROR\t.bandit : Error parsing file.`\r\n\r\n**Expected behavior**\r\nworking as described in readme\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nDocs say it should be YAML and not INI. https://bandit.readthedocs.io/en/latest/config.html"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 196,
                "title": "AST parsing hits recursion limit",
                "labels": [],
                "description": "The parsing of certain ASTs will hit Python's recursion limit. This happens if AST nodes are nested to a depth greater than \"sys.getrecursionlimit()\", which defaults to 1000 for me.\n\nA simple example:\n\n    python -c 'print (\"+\" * 1000) + \"1\"' > unary.py\n    bandit unary.py\n\nWhen this occurs, Bandit will report an exception:\n\n    Exception RuntimeError: RuntimeError('maximum recursion depth exceeded',) in <generator object iter_fields at 0x108ab2eb0> ignored\n    [manager]   ERROR   Exception occurred when executing tests against /Users/dwyde/test/unary.py. Run \"bandit --debug /Users/dwyde/test/unary.py\" to see the full traceback.\n\nThe start of the traceback with --debug:\n\n    [manager]       DEBUG     Exception string: maximum recursion depth exceeded while calling a Python object\n    [manager]       DEBUG     Exception traceback: Traceback (most recent call last):\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 259, in _parse_file\n        score = self._execute_ast_visitor(fname, data, nosec_lines)\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 290, in _execute_ast_visitor\n        score = res.process(data)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 278, in process\n        self.generic_visit(f_ast)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 242, in generic_visit\n        if self.pre_visit(item):\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 187, in pre_visit\n        LOG.debug(ast.dump(node))\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 110, in dump\n        return _format(node)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n\nFound when running Bandit against\nhttps://bitbucket.org/logilab/astroid/src/1.4.0/astroid/tests/testdata/python2/data/joined_strings.py"
            },
            {
                "repo_url": "https://github.com/PyCQA/bandit",
                "id": 367,
                "title": "Docs plugin listing shows title instead of check name",
                "labels": [
                    "hacktoberfest",
                    "bug",
                    "good first issue"
                ],
                "description": "**Describe the bug**\r\nIn the docs found here:\r\nhttps://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n\r\nB109 and B111 show a description instead of a plugin name.  This looks inconsistent since all the other plugin names are listed.  I believe this is a result of a recent change to remove these deprecated plugins.\r\n\r\n**To Reproduce**\r\n1) Navigate to https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n2) Notice B109 and B111 look different.\r\n\r\n**Expected behavior**\r\nI'd expect consistency in all the plugin names listed there.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nmaster\r\n```\r\n"
            }
        ]
    },
    "myint/cppclean": {
        "all": [
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 78,
                "title": "cppclean thinks forward declaration is not used, but it is.",
                "labels": [],
                "description": "cppclean master reports:\n\n```\ncppclean_test2.h:4: 'Foo::Bar' not used\n```\n\nfor the following code snippet.  I think it may be getting tricked by the `using namespace` declaration into thinking that the `Bar` forward declaration is not required, when in fact it is.\n\n```\n// Forward declare Foo::Bar\nnamespace Foo\n{\nclass Bar;\n}\n\n// So we can reference Bar without qualification below.\nusing namespace Foo;\n\nclass A\n{\n  // The namespaced forward declaration is required for this line of code.\n  void f(Bar & bar);\n};\n```\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 115,
                "title": "A pointer to function is interpreted as a function",
                "labels": [],
                "description": "I can see if I declare only function pointers cppclean throws warnings ```declared but not defined```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 60,
                "title": "Cpp clean tells me I need to #include something that I can forward declare.",
                "labels": [],
                "description": "Consider the following:\n\n```\nclass Blah;\nclass Foo: public Bar{\npublic:\n    Foo();\n    virtual bool doSomething(Blah* blah);\n};\n```\n\nCppclean thinks that I need to #include \"blah.h\" even though I'm only using it in pointer form:\n\"Foo.h:1: 'Blah' forward declared, but needs to be #included\"\n\nThe code compiles fine with the forward declare.\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 114,
                "title": "Unused variable check only in declaration file",
                "labels": [],
                "description": "It gives warning when you declare a variable in header file but you this variable in another files only."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 120,
                "title": "Support Windows by using `setuptools` in `setup.py` instead of `distutils`",
                "labels": [
                    "help wanted"
                ],
                "description": "`pip --install cppclean` is not sufficient on my Computer.\r\n\r\nI'm unable to execute `py cppclean` after that.  \r\nI have to execute `py $AbsolutePathToCppclean`\r\nI don't work much with python."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 113,
                "title": "Crash in static_data.py",
                "labels": [],
                "description": "The crash stack:\r\n```\r\nTraceback (most recent call last):\r\n  File \"cppclean\", line 166, in <module>\r\n    sys.exit(main())\r\n  File \"cppclean\", line 159, in main\r\n    quiet=args.quiet):\r\n  File \"cppclean/cpp/static_data.py\", line 118, in run\r\n    _find_warnings(filename, lines, entire_ast, True) +\r\n  File \"cppclean/cpp/static_data.py\", line 64, in _find_warnings\r\n    print_warning(node)\r\n  File \"cppclean/cpp/static_data.py\", line 31, in print_warning\r\n    for name in node.name.split(','):\r\nAttributeError: 'NoneType' object has no attribute 'split'\r\n```\r\n\r\nIn static_data.py you must include `if node.name:` before line 31 to avoid the crash."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 125,
                "title": "Fails to parse try-function block",
                "labels": [],
                "description": "Given\r\n```cpp\r\nvoid foo() try {\r\n}\r\ncatch(...) {}\r\n```\r\n\r\nOutput: \"parsing error: unexpected token: Token(u'try', 11, 14)\""
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 122,
                "title": "Nested classes issue: does not need to be #included",
                "labels": [],
                "description": "The following code issues the `does not need to be #included` hint.\r\n\r\nnested.h\r\n```cpp\r\nclass Nest\r\n{\r\npublic:\r\n\tclass Nested\r\n\t{\r\n\tpublic:\r\n\t\tint x{0};\r\n\t};\r\n};\r\n```\r\n\r\ntest.h\r\n```cpp\r\n#include \"nested.h\"\r\n\r\nclass Test\r\n{\r\npublic:\r\n\tint foo(const Nest::Nested& Object);\r\n}\r\n```\r\n\r\nNested classes can't be forward declared though."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 124,
                "title": "Warns on local function definition",
                "labels": [],
                "description": "cppclean warns on local function that defined in implementation file: \"source.cpp:1: 'foo' not found in any directly #included header\"\r\n\r\n```cpp\r\n// source.cpp\r\nvoid foo() {}\r\nint main() { return 0; }\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 130,
                "title": "'NoneType' object has no attribute 'split'",
                "labels": [
                    "question"
                ],
                "description": "**Problem:**\r\nFile \"...\\cppclean\\cpp\\static_data.py\", line 31, in print_warning\r\n          for name in node.name.split(','):\r\nAttributeError: 'NoneType' object has no attribute 'split'\r\n\r\n**Possible solution:**\r\nAdditional check is needed.\r\n\r\n**Temporary fix**\r\nFor now I use \"try: except: pass\" around FOR loop"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 123,
                "title": "script exception: AttributeError: 'NoneType' object has no attribute 'split'",
                "labels": [],
                "description": "### The following code causes an exception in the script:\r\n\r\n```cpp\r\nFARPROC WINAPI DelayLoadHook(unsigned dliNotify, PDelayLoadInfo pdli);\r\n\r\nextern \"C\" decltype(__pfnDliNotifyHook2) __pfnDliNotifyHook2 = DelayLoadHook;\r\n\r\nFARPROC WINAPI DelayLoadHook(unsigned dliNotify, PDelayLoadInfo pdli)\r\n{\r\n\tswitch (dliNotify)\r\n\t{\r\n\t\tcase dliNotePreLoadLibrary:\r\n\t\t{\r\n\t\t}\r\n\t\tbreak;\r\n\r\n\t\tcase dliFailGetProc:\r\n\t\t{\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nBOOL WINAPI DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID)\r\n{\r\n\tswitch (ul_reason_for_call)\r\n\t{\r\n\t\tcase DLL_PROCESS_ATTACH:\r\n\t\t{\r\n\t\t\tDisableThreadLibraryCalls(hModule); // Disable DLL_THREAD_ATTACH and DLL_THREAD_DETACH messages\r\n\t\t}\r\n\t\tbreak;\r\n\r\n\t\tcase DLL_THREAD_ATTACH:\r\n\t\t{\r\n\t\t}\r\n\t\tbreak;\r\n\r\n\t\tcase DLL_THREAD_DETACH:\r\n\t\t{\r\n\t\t}\r\n\t\tbreak;\r\n\r\n\t\tcase DLL_PROCESS_DETACH:\r\n\t\t{\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\treturn TRUE;\r\n}\r\n```\r\n\r\n### it runs well without\r\n```cpp\r\nFARPROC WINAPI DelayLoadHook(unsigned dliNotify, PDelayLoadInfo pdli);\r\n\r\nextern \"C\" decltype(__pfnDliNotifyHook2) __pfnDliNotifyHook2 = DelayLoadHook;\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 119,
                "title": "AST Crash ",
                "labels": [],
                "description": "```\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/cppclean\", line 145, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/bin/cppclean\", line 138, in main\r\n    quiet=args.quiet):\r\n  File \"/usr/lib/python3.6/site-packages/cpp/static_data.py\", line 117, in run\r\n    _find_warnings(filename, lines, entire_ast, True) +\r\n  File \"/usr/lib/python3.6/site-packages/cpp/static_data.py\", line 67, in _find_warnings\r\n    find_static(node)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/static_data.py\", line 48, in find_static\r\n    ast.ASTBuilder(iter(tokens), filename).generate())\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 651, in generate\r\n    result = self._generate_one(token)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 726, in _generate_one\r\n    return self._get_method(temp_tokens, 0, None, False)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 1092, in _get_method\r\n    (token, return_type_and_name, parameters))\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 1569, in assert_parse\r\n    raise ParseError(message)\r\ncpp.ast.ParseError: (Token(',', 2622, 2623), [], [Token('\"color\"', 2614, 2621)])\r\n```\r\n\r\nTo reproduce: \r\n\r\n    git clone https://github.com/OSSIA/libossia -b master --depth=1\r\n    cppclean libossia/OSSIA/ossia/editor/dataspace/dataspace_visitors.cpp"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 137,
                "title": "types referred to in 'using' cause false positive unused include",
                "labels": [],
                "description": "helper.h:\r\n`class Helper {};`\r\n\r\nusing.h\r\n`#include \"helper.h`\r\n`using foo = Helper;`\r\n\r\nResults in a false positive about an unused include:\r\n`cppclean .\r\n./using.h:1: 'helper.h' does not need to be #included`\r\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 138,
                "title": "Types used in template class/method are considered unused",
                "labels": [],
                "description": "helper.h:\r\n````\r\nclass Helper {};\r\n````\r\n\r\ntemplate.h\r\n````\r\n#include \"helper.h\"\r\ntemplate <typename T>\r\nstruct Foo\r\n{\r\n        Helper helper;\r\n}\r\n````\r\n\r\nResults in\r\n````\r\n./template.h:1: 'helper.h' does not need to be #included\r\n````\r\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 99,
                "title": "Fails to parse constructors",
                "labels": [],
                "description": "constructors \nlike \nLiquidCrystal lcd(12, 11, 5, 4, 3, 2); are treated as functions and fails.\n[p11_CrystalBall.zip](https://github.com/myint/cppclean/files/336395/p11_CrystalBall.zip)\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 100,
                "title": "False alarms on \"does not need to be included; use a forward declaration instead\"",
                "labels": [],
                "description": "Seems CppClean doesn't recognize declaration (class, typedef and enum) inside a class, and complains about forward declare Foo is enough. \n\nFoo.h\n\n``` c\nclass Foo \n{\npublic: \n  class Dummy;\n  typedef int Type;\n  enum EnumType { Type1, Type2 };\n};\n```\n\nBar.h\n\n``` c\n#include \"Foo.h\"\n\nclass Bar : public Foo::Dummy\n{\npublic:\n  Bar(Foo::Type type, Foo::EnumType eType); \n};\n```\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 105,
                "title": "nameless node in AST ",
                "labels": [
                    "bug"
                ],
                "description": "Hello,\r\n\r\ncppclean crashes on a particular code. For some reasons, in the AST you end up with a node with \"None\" as name. \r\n\r\nYou can reproduce the bug easily:\r\n```\r\n>> wget https://raw.githubusercontent.com/victorprad/InfiniTAM/master/InfiniTAM/ITMLib/Engine/DeviceAgnostic/ITMVisualisationEngine.h\r\n\r\n>> cppclean ITMVisualisationEngine.h\r\n\r\n\r\nITMVisualisationEngine.h:5: unable to find '../../Utils/ITMLibDefines.h'\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/cppclean\", line 145, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/bin/cppclean\", line 138, in main\r\n    quiet=args.quiet):\r\n  File \"/usr/lib/python2.7/site-packages/cpp/static_data.py\", line 117, in run\r\n    _find_warnings(filename, lines, entire_ast, True) +\r\n  File \"/usr/lib/python2.7/site-packages/cpp/static_data.py\", line 64, in _find_warnings\r\n    print_warning(node)\r\n  File \"/usr/lib/python2.7/site-packages/cpp/static_data.py\", line 31, in print_warning\r\n    for name in node.name.split(','):\r\nAttributeError: 'NoneType' object has no attribute 'split'\r\n```\r\n\r\nCheers,\r\nBruno"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 95,
                "title": "TypeError: coercing to Unicode: need string or buffer, NoneType found",
                "labels": [],
                "description": "Just ran cppclean on a c++11 code base (normally compiled with gcc 4.8 on linux as well as windows using VS 2013+.\n\nI see  this stack trace:\n\n```\nTraceback (most recent call last):\n  File \"/usr/bin/cppclean\", line 145, in <module>\n    sys.exit(main())\n  File \"/usr/bin/cppclean\", line 138, in main\n    quiet=args.quiet):\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 565, in run\n    hunter.find_warnings()\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 124, in find_warnings\n    self._find_header_warnings()\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 437, in _find_header_warnings\n    self._find_unused_warnings(included_files, forward_declarations)\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 413, in _find_unused_warnings\n    forward_declarations)\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 401, in _determine_uses\n    _add_declaration(node.name, node.namespace)\n  File \"/usr/lib/python2.7/site-packages/cpp/find_warnings.py\", line 252, in _add_declaration\n    name = '::'.join(names) + '::' + name\nTypeError: coercing to Unicode: need string or buffer, NoneType found\n```\n\nUnfortunately I can't include the code which caused this error. Also, it doesn't actually tell me which line in the C++ file caused this so it could be any of 150+ lines.\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 134,
                "title": "Preprocessor macros in Ctor initializer list.",
                "labels": [],
                "description": "Skip the preprocessor tokens when parsing initializer lists instead of crashing.\r\nReworks the parsing loop with a single call to self._get_next_token() instead of self.get_name(), in order to detect preprocessor tokens."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 103,
                "title": "Default template argument not treated as reference to #include",
                "labels": [],
                "description": "Cppclean doesn't recognize default template arguments as references to included file.\r\nSee below example:\r\n\r\nA.h\r\n\r\n```\r\nclass A\r\n{ \r\n  \r\n};\r\n```\r\n\r\nB.h\r\n```\r\n#include \"A.h\"\r\n\r\ntemplate<typename T = A>\r\nvoid f()\r\n{\r\n}\r\n\r\n```\r\nCppclean prints \r\n`./B.h:1: 'A.h' does not need to be #included`\r\n\r\nWhen include is removed, g++ gives an error:\r\n```\r\nB.h:3:23: error: \u2018A\u2019 does not name a type\r\n template<typename T = A>\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 118,
                "title": "False warning for \"does not need to be #included\"",
                "labels": [],
                "description": "A included file has the same namespace as current file. Included file contains in namespace ```using namespace``` which is within the file:\r\nfile a.h:\r\n```\r\nnamespace A\r\n{\r\n    class T;\r\n}\r\n\r\nnamespace B\r\n{\r\n    using namespace A;\r\n}\r\n```\r\n\r\nfile b.h:\r\n```\r\nnamespace B\r\n{\r\n    void someFunction(A a);\r\n}\r\n```\r\n\r\n a warning ```does not need to be #included``` will be rised."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 108,
                "title": "Headers named '*.hxx' are ignored",
                "labels": [
                    "question"
                ],
                "description": "[This line][1] explicitly ignores headers ending in \".hxx\", even though they are included in the [list of header extensions][2]. Is this done on purpose? Forgive me if I'm being dim, but I had a look, and I couldn't find anything that explained why \".hxx\" files are skipped.\r\n\r\n\r\n[1]: https://github.com/myint/cppclean/blob/master/cpp/find_warnings.py#L180\r\n[2]: https://github.com/myint/cppclean/blob/master/cpp/find_warnings.py#L51"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 135,
                "title": "Export macros create false positives in function declarations",
                "labels": [],
                "description": "Code sample:\r\n```cpp\r\n#ifndef MEOW_H_ATIHVJ0Z\r\n#define MEOW_H_ATIHVJ0Z\r\n\r\n#define some_export_macro\r\n\r\nclass Meow;\r\n\r\nMeow some_export_macro meow();\r\n\r\n#endif /* end of include guard: MEOW_H_ATIHVJ0Z */\r\n```\r\n\r\nExpected result:\r\n```bash\r\n$ cppclean meow.h\r\n```\r\n\r\nActual:\r\n```bash\r\n$ cppclean meow.h\r\nmeow.h:6: 'Meow' not used\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 88,
                "title": "Crashes on member initialization using uniform initialization list",
                "labels": [],
                "description": "**EDIT:** I dug into this a bit, added some details below, and changed the name to be more descriptive. ~~Sorry for the non-descript issue name. I haven't actually dug into what's causing it to crash, so I don't have much more detail there.~~ I _have_ however narrowed it down to a small example file which actually causes two separate crashes. If you run `cppclean` on the file as is it'll complain about popping from an empty `namespaces` list, but if you comment out the `int` member, it'll give you a parsing error. The example file is here:\n\n``` cpp\nclass Foo {\nprivate:\n    atomic<bool> m_shutdown { false };\n    int m_threads_started = 0; // Comment this line out for a different error\n    vector<const function<void()> *> & list_of(const function<void()> &) { return m_callbacks; }\n}\n```\n\nThe stack trace the file as-is is:\n\n```\nTraceback (most recent call last):\n  File \"/Users/user/venv/bin/cppclean\", line 145, in <module>\n    sys.exit(main())\n  File \"/Users/user/venv/bin/cppclean\", line 120, in main\n    entire_ast = list([_f for _f in builder.generate() if _f])\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 651, in generate\n    result = self._generate_one(token)\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 675, in _generate_one\n    return method()\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 1158, in handle_class\n    return self._handle_class_and_struct(Class)\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 1155, in _handle_class_and_struct\n    return self._get_class(class_type, None)\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 1456, in _get_class\n    body = list(ast.generate())\n  File \"/Users/user/venv/lib/python2.7/site-packages/cpp/ast.py\", line 647, in generate\n    if self.namespaces.pop():\nIndexError: pop from empty list\n```\n\nAnd the error message when the `int` member is commented out:\n\n```\n/Users/user/test_header.hpp: parsing error: (Token(u'>', 128, 129), [Token(u'bool', 32, 36), Token(u'>', 36, 37), Token(u'm_shutdown', 38, 48), Token(u'{', 49, 50), Token(u'false', 51, 56), Token(u'}', 57, 58), Token(u';', 58, 59), Token(u'vector', 64, 70), Token(u'<', 70, 71), Token(u'const', 71, 76), Token(u'function', 77, 85), Token(u'<', 85, 86), Token(u'void', 86, 90), Token(u'(', 90, 91), Token(u')', 91, 92), Token(u'>', 92, 93), Token(u'*', 94, 95), Token(u'>', 95, 96), Token(u'&', 97, 98), Token(u'list_of', 99, 106), Token(u'(', 106, 107), Token(u'const', 107, 112), Token(u'function', 113, 121), Token(u'<', 121, 122)], [])\n```\n\nThis is on cppclean 0.8 as installed by `pip`.\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 117,
                "title": "Function declaration and initialization warning",
                "labels": [],
                "description": "You have a code:\r\n```void f();\r\n\r\nvoid f2()\r\n{\r\n    ...\r\n    f();\r\n}\r\n\r\nvoid f()\r\n{\r\n    ...\r\n}\r\n```\r\n\r\nYou will have a warning for function f()."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 104,
                "title": "UnboundLocalError: local variable 'name_tokens' referenced before assignment",
                "labels": [],
                "description": "```\r\n$ cppclean .\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/cppclean\", line 145, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/bin/cppclean\", line 138, in main\r\n    quiet=args.quiet):\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 597, in run\r\n    hunter.find_warnings()\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 126, in find_warnings\r\n    self._find_source_warnings()\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 542, in _find_source_warnings\r\n    included_files, forward_declarations = self._read_and_parse_includes()\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 177, in _read_and_parse_includes\r\n    module = self._get_module(node)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 151, in _get_module\r\n    ast_list = [_f for _f in builder.generate() if _f]\r\n  File \"/usr/lib/python3.6/site-packages/cpp/find_warnings.py\", line 151, in <listcomp>\r\n    ast_list = [_f for _f in builder.generate() if _f]\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 651, in generate\r\n    result = self._generate_one(token)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 675, in _generate_one\r\n    return method()\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 1180, in handle_struct\r\n    return self._handle_class_and_struct(Struct)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 1174, in _handle_class_and_struct\r\n    return self._get_class(class_type, None)\r\n  File \"/usr/lib/python3.6/site-packages/cpp/ast.py\", line 1507, in _get_class\r\n    name_tokens = [class_token] + name_tokens\r\nUnboundLocalError: local variable 'name_tokens' referenced before assignment\r\n```\r\nArch Linux, installed from pip"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 116,
                "title": "Static variable warning should be thrown only in header file",
                "labels": [],
                "description": "This is correct behaviour to put static variable in cpp file like for example for singletons while putting it in header file could be dangerous."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 126,
                "title": "Support for ignoring warning",
                "labels": [
                    "enhancement"
                ],
                "description": "There should be possibility to ignore warnings with some comment in code for example:\r\n\r\n```cpp\r\n// NOCLEAN\r\n#include \"not_needed_header.h\"\r\n```\r\n\r\nThis would help with false-positives until the other issues are fixed."
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 127,
                "title": "False warning of Not used forward declaration",
                "labels": [],
                "description": "When using forward declaration and templates the cppclean gives false warning. Not sure if this is related to the using keyword or the use of template. To reproduce:\r\n\r\n```cpp\r\ntemplate<typename T>\r\nclass Container {\r\n}\r\n\r\nclass Item;\r\nusing ItemContainer = Container<Item>;\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 90,
                "title": "Issue 89: warning on using namespace in header",
                "labels": [],
                "description": "Added a warning when 'using namespace' is used in a header file.\nThe rest of the file is ignored because the output could be incorrect.\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 132,
                "title": "Errors when encountering Preoprocessor Macros while listing initializers in constructors",
                "labels": [],
                "description": "Here's a small sample that shows the issue \r\n```\r\nstruct MyClass\r\n{\r\n\tint A;\r\n#if DEFINE\r\n\tint B;\r\n#endif\r\n\r\n\tMyClass() : A(-1) \r\n#if DEFINE\r\n\t\t,B(42)\r\n#endif\r\n\t{}\r\n};\r\n```\r\n\r\nI'll try to make a pull request if I find a solution.\r\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 94,
                "title": "Wrong report of header file \"does not need to be included; use a forward declaration instead\"",
                "labels": [],
                "description": "I have the following include files:\nA.hpp\n\n``` C\nclass A {\npublic:\n  A();\n  int value() { return mValue; }\nprivate:\n  int mValue;\n};\n```\n\nB.hpp\n\n``` C\n#include \"A.hpp\"\n\nclass B {\npublic:\n  B();\n  int getAValue() { return mA->value(); }\nprivate:\n  A *mA;\n};\n```\n\nAnd here is what cppclean tells me:\n\n``` bash\n$ cppclean B.hpp\nB.hpp:1: 'A.hpp' does not need to be #included; use a forward declaration instead\n```\n\nHowever if I replace `#include \"A.cpp\"` with `class A;`, it doesn't compile anymore:\n\n``` bash\n$ gcc B.hpp\nB.hpp: In member function 'int B::getAValue()':\nB.hpp:6:30: error: invalid use of incomplete type 'class A'\n   int getAValue() { return mA->value(); }\n                              ^\nB.hpp:2:7: note: forward declaration of 'class A'\n class A;\n       ^\n```\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 136,
                "title": "Could cppclean remove unused #import of COM libraries somehow? eg. #import \"foo.tlb\"",
                "labels": [],
                "description": "I know it probably can't, but maybe it is still possible if you set some parameters to work it out? Or there is a way to make it work?\r\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 87,
                "title": "Incomplete type, std::shared_ptr, and alias declaration",
                "labels": [],
                "description": "cppclean seems to be clever enough to determine that you can have a `std::shared_ptr<X>` to a forward-declared type `X`, which is good.\n\nUnfortunately, if the name is hidden behind an [alias declaration](http://en.cppreference.com/w/cpp/language/type_alias), cppclean then warns that `X` must be #included.  The following test code demonstrates the issue:\n\n```\n#include <memory>\n\n// Forward declaration of class X is all that is required to have a std::shared_ptr\nclass X;\n\n// Alias declaration - requires C++11\ntemplate<typename T>\nusing MySharedPtr = std::shared_ptr<T>;\n\nstruct A\n{\n  MySharedPtr<X> x;\n};\n```\n\nFor this case, cppclean prints:\n\n```\ncppclean_test5.h:4: 'X' forward declared, but needs to be #included\n```\n\nOn the other hand, if you change the line `MySharedPtr<X> x;` to simply `std::shared_ptr<X> x;`, the warning goes away.  So I guess this is  really more of a feature request to better handle alias declarations, as we use this technique to handle backwards compatibility with older compilers in our library.  \n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 121,
                "title": "IndexError: pop from empty list",
                "labels": [],
                "description": "Ran this on my code base. I handle dependencies as git submodules, so they're all in my working tree and cppclean ran on all of them. It spit out a bunch of warnings, then a stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/cppclean\", line 145, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/bin/cppclean\", line 120, in main\r\n    entire_ast = list([_f for _f in builder.generate() if _f])\r\n  File \"/usr/local/bin/cppclean\", line 120, in <listcomp>\r\n    entire_ast = list([_f for _f in builder.generate() if _f])\r\n  File \"/usr/local/lib/python3.5/dist-packages/cpp/ast.py\", line 647, in generate\r\n    if self.namespaces.pop():\r\nIndexError: pop from empty list\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 139,
                "title": "Prevent from crash when macros are present in ctor initializer list",
                "labels": [],
                "description": "Fix for #132.\r\nDifferent approach than #134, with working tests :)\r\n\r\n----------\r\nThis only skips tokens if find macro, to prevent from crash.\r\nSmarted solution is needed? "
            },
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 56,
                "title": "Dealing with defines",
                "labels": [
                    "enhancement"
                ],
                "description": "If one includes a header where a macro is defined, `cppclean` will not be able to detect that the header can actually be needed. This may be clearer with the following dummy example.\n### Example:\n#### `foo.h`\n\n``` cpp\n#ifndef FOO_H\n# define FOO_H\n\n# include \"bar.h\"\n\nclass Foo\n{\npublic:\n  Foo () : bar (BAR) {}\n\nprivate:\n  int bar;\n};\n\n#endif //! FOO_H\n```\n#### `bar.h`\n\n``` cpp\n#ifndef BAR_H\n# define BAR_H\n\n# define BAR 1\n\n#endif //! BAR_H\n```\n\nRunning `cppclean` gives:\n\n```\n$ cppclean --verbose .\nProcessing ./bar.h\nProcessing ./foo.h\n./foo.h:4: 'bar.h' does not need to be #included\n```\n\nThis may be something to add to the \"planned\" features, unless this requires some analysis that this tool is not meant to achieve. If that's the case, this may be worth noting somewhere in the documentation/help message.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/myint/cppclean",
                "id": 120,
                "title": "Support Windows by using `setuptools` in `setup.py` instead of `distutils`",
                "labels": [
                    "help wanted"
                ],
                "description": "`pip --install cppclean` is not sufficient on my Computer.\r\n\r\nI'm unable to execute `py cppclean` after that.  \r\nI have to execute `py $AbsolutePathToCppclean`\r\nI don't work much with python."
            }
        ]
    },
    "theandrewdavis/cpplint": {
        "all": [
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 27,
                "title": "False positive: Add #include <algorithm> for sort",
                "labels": [],
                "description": "Cpplint seems to assume that all standard algorithms come from the STL,\nso, for example, if Boost algorithms are used,\nthe linter suggests to include `<algorithm>`.\nNote that the function call is fully qualified as is required by the Google style:\n\n``` cpp\n#include <boost/range/algorithm.hpp>\n\nvoid foo() {\n  boost::sort(std::vector<int>{1, 2, 3, 4});\n}\n```\n\nThe solution strategy could be to take into account `std::` qualification for function calls.\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 30,
                "title": "Specify unapproved C++11 and C++14 features",
                "labels": [],
                "description": "The tuples that contain unapproved C++11 and C++14 can be made to be customisable through [`--cxx11-unapproved-headers=thread`](https://github.com/theandrewdavis/cpplint/blob/a33992f68f36fcaa6d0f531a25012a4c474d3542/cpplint.py#L6002-L6012), [`--cxx11-unapproved-classes=](https://github.com/theandrewdavis/cpplint/blob/a33992f68f36fcaa6d0f531a25012a4c474d3542/cpplint.py#L6023-L6027) (could have a `--cxx11-unapproved-functions=` that is merged or split out). Same for [C++14](https://github.com/theandrewdavis/cpplint/blob/a33992f68f36fcaa6d0f531a25012a4c474d3542/cpplint.py#L6049). Would this be something that would be acceptable for a PR?\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 43,
                "title": "Order of includes error for 3rd party libraries (reopened)",
                "labels": [],
                "description": "(reopening issue #7 because it was closed without resolution)\r\nThe following example snippet produces \"Found C system header after C++ system header...[build/include_order]\".\r\n\r\n```cpp\r\n#include <vector>\r\n\r\n#include <gtest/gtest.h>\r\n```\r\nThe problem goes away if the angle brackets are replaced by quotes.\r\nI guess the script assumes the angle brackets only for C/C++ system and standard library headers.\r\n\r\nI think the *CORRECT* behavior would be to encode into cpplint the full list of C system and standard-library headers (as is done with C++ standard headers).\r\n\r\nHere's a suggested starting place:\r\n\r\n- The system C headers (per https://en.cppreference.com/w/c/header):\r\n  - assert.h\r\n  - complex.h\r\n  - ctype.h\r\n  - errno.h\r\n  - fenv.h\r\n  - float.h\r\n  - inttypes.h\r\n  - iso646.h\r\n  - limits.h\r\n  - locale.h\r\n  - math.h\r\n  - setjmp.h\r\n  - signal.h\r\n  - stdalign.h\r\n  - stdarg.h\r\n  - stdatomic.h\r\n  - stdbool.h\r\n  - stddef.h\r\n  - stdint.h\r\n  - stdio.h\r\n  - stdlib.h\r\n  - stdnoreturn.h\r\n  - string.h\r\n  - tgmath.h\r\n  - threads.h\r\n  - time.h\r\n  - uchar.h\r\n  - wchar.h\r\n  - wctype.h\r\n- POSIX C headers (per http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/contents.html)\r\n  - aio.h\r\n  - arpa/inet.h\r\n  - cpio.h\r\n  - dirent.h\r\n  - dlfcn.h\r\n  - fcntl.h\r\n  - fmtmsg.h\r\n  - fnmatch.h\r\n  - ftw.h\r\n  - glob.h\r\n  - grp.h\r\n  - iconv.h\r\n  - langinfo.h\r\n  - libgen.h\r\n  - monetary.h\r\n  - mqueue.h\r\n  - ndbm.h\r\n  - net/if.h\r\n  - netdb.h\r\n  - netinet/in.h\r\n  - netinet/tcp.h\r\n  - nl_types.h\r\n  - poll.h\r\n  - pthread.h\r\n  - pwd.h\r\n  - regex.h\r\n  - sched.h\r\n  - search.h\r\n  - semaphore.h\r\n  - setjmp.h\r\n  - signal.h\r\n  - spawn.h\r\n  - strings.h\r\n  - stropts.h\r\n  - syslog.h\r\n  - tar.h\r\n  - termios.h\r\n  - trace.h\r\n  - ulimit.h\r\n  - unistd.h\r\n  - utime.h\r\n  - utmpx.h\r\n  - wordexp.h\r\n- GNUlib Headers\r\n  - a.out.h\r\n  - aliases.h\r\n  - alloca.h\r\n  - ar.h\r\n  - argp.h\r\n  - argz.h\r\n  - byteswap.h\r\n  - crypt.h\r\n  - endian.h\r\n  - envz.h\r\n  - err.h\r\n  - error.h\r\n  - execinfo.h\r\n  - fpu_control.h\r\n  - fstab.h\r\n  - fts.h\r\n  - getopt.h\r\n  - gshadow.h\r\n  - ieee754.h\r\n  - ifaddrs.h\r\n  - libintl.h\r\n  - mcheck.h\r\n  - mntent.h\r\n  - obstack.h\r\n  - paths.h\r\n  - printf.h\r\n  - pty.h\r\n  - resolv.h\r\n  - shadow.h\r\n  - sysexits.h\r\n  - ttyent.h\r\n- Other system-specific C headers\r\n  - sys/*.h\r\n- Hardware-specific C system headers\r\n  - arm_neon.h\r\n  - emmintrin.h\r\n  - xmmintrin.h"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 45,
                "title": "Preprocessor directives are seen as functions",
                "labels": [],
                "description": "The preprocessor directive `#elif (<expression>)` is seen as a function call and so the error [whitespace/parens] is raised.\r\n\r\nExample: https://pastebin.com/VC7q0Gz1\r\n\r\nThe problem is not raised with `#if (<expression>)`, probably because it detects `if` as a control structure and is ignored. A possible hack can be applied by adding `elif` to the ignored control structures (see patch https://pastebin.com/ZgBBG3Wf) in `CheckSpacingForFunctionCall`.\r\n\r\nThough, it would be better to ignore preprocessor directives."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 33,
                "title": "Exclude ignores wildcard on folder names",
                "labels": [],
                "description": "I'm trying to use cpplint to check some Arduino code. I'm using `--recursive` to find all source files in numerous sub-directories. However, this is causing it to pick up the auto-generated code that the Arduino preprocessor creates in `.build` directories.\r\n\r\nPer the `--help` documentation, I believe I should be able to direct the tool to ignore these folders with a call like:\r\n\r\n    cpplint --recursive --exclude=.build src\r\n\r\nHowever, this does not work, and cpplint still attempts to parse the auto-generated (and messy) Arduino code. I've also tried:\r\n\r\n    cpplint --recursive --exclude=*/.build src\r\n\r\nas well as other wildcard variations, but nothing seems to work.\r\n\r\nThe docs say `--exclude` supports globbing, but if that were so, I would expect one of these patterns to work. Am I misunderstanding it, or is this a limitation of cpplint?"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 47,
                "title": "Travis CI: Add Python 3.6 and 3.7 and upgrade to flake8",
                "labels": [],
                "description": "Flake8 is a superset of PyFlakes so it runs all the same tests and adds others from pycodestyle, McCabe Complexity, etc."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 29,
                "title": "Allow module usage",
                "labels": [],
                "description": "Due to global variables it is not possible to do something like:\n\n``` py\nimport cpplint\ncpplint.ProcessFile(filepathOne)\ncpplint.ProcessFile(filepathTwo)\n```\n\nThis would require refactoring all the global state into the `CpplintState` class and passing it between functions.\n\nWould this be something that would be of interest to the project? We would like to use `cpplint` in our Python build tool and using it at a module would simplify things hugely.\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 34,
                "title": "Add sed and gsed output formats to auto-fix code",
                "labels": [],
                "description": "The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format.\r\n\r\nSed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes, e.g.\r\n\r\n    cpplint --output sed file.cpp | bash\r\n\r\nCurrently doesn't apply fixes that cause line numbers below to change. I plan to reverse the order of the output by storing it in the _junit_errors array, then reversing on print, so that line numbers are only changed for lines lower in the file which would have already been fixed.\r\n\r\nThis was written on a different fork of cpplint that followed different coding standards, and I have attempted to merge only the relevant parts in. I'm submitting this PR to get feedback on whether it is likely to be accepted and if I am doing things in the best way."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 28,
                "title": "merge upstream PRs ",
                "labels": [],
                "description": "- [ ] https://github.com/google/styleguide/pulls/158 \n- [ ] https://github.com/google/styleguide/pulls/160\n- [ ] https://github.com/google/styleguide/pulls/169\n\nWould you want a PR?\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 41,
                "title": "allow .hh headers",
                "labels": [],
                "description": "https://github.com/search?l=C%2B%2B&q=.hh&type=Code"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 37,
                "title": "cpplint output error when it is a git submodule",
                "labels": [],
                "description": "cpplint checks a project and prints no error found. \r\nWhen the same project is as a git submodule, cpplint prints multiple errors.\r\n\r\n```\r\ninclude/base_code.hpp:6:  #ifndef header guard has wrong style, please use: COMPANY_COMMON_INCLUDE_BASE_CODE_HPP_  [build/header_guard] [5]\r\ninclude/base_code.hpp:56:  #endif line should be \"#endif  // COMPANY_COMMON_INCLUDE_BASE_CODE_HPP_\"  [build/header_guard] [5]\r\n```"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 39,
                "title": "lude",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 32,
                "title": "Allow #endif  /* GUARD */ style header guards",
                "labels": [],
                "description": "When checking C89 headers the header guard must use the `/* */` style comments so the warning should allow that.\r\n\r\n```\r\ninclude/vca/test/macros.h:216:  #endif line should be \"#endif  // INCLUDE_VCA_TEST_MACROS_H_\"  [build/header_guard] [5]\r\n```\r\n\r\nI know that this is **cpp**lint but I think it should still allow headers that are C89 compatible in a C++ project."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 44,
                "title": "Header guard handling conflicts with Google spec",
                "labels": [],
                "description": "According to the [Google guidelines](https://google.github.io/styleguide/cppguide.    html#The__define_Guard), the format of the header guard is:\r\n`{PROJECT}_{FILEPATH}_{FILENAME}_`\r\ne.g. `HELLOWORLD_SRC_INCLUDE_HEADER_H_`\r\n\r\nHowever, CppLint.py insists that the header guard format must be: `{FILEPATH}_{FILENAME}_`\r\n\r\nWe need a way to specify the $PROJECT\r\n\r\nAlso, the Google spec specifies that the header guard is an exception to the line-length limits, but cpplint.py does not treat it as an exception."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 17,
                "title": "RValue reference not guessed correctly when on new line ",
                "labels": [],
                "description": "To reproduce:\n\n```\nstruct A {};\nvoid create_output(const char *c,\n                   A&& a);\n```\n\nAs reported here: https://github.com/google/styleguide/issues/61\nRelated to #24 \n\nHint to bugfix: In order to classify A&& a correctly, with the current strategy, cpplint would have to extend it's search for a function opener over the previous lines, around the spot where #24 made fixes. It's feasible, but will add to the mess inside cpplint.\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 38,
                "title": "Fix root option on Windows platform",
                "labels": [],
                "description": "This solves an issue where the root option never worked on Windows machines\r\n\r\nThis because FileInfo always returns filepaths in Unix format, but root_ was interpreted in Windows format on Windows machines. \r\n\r\nSo I updated the format of the root_ to Unix format"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 26,
                "title": "--version cmd-line option",
                "labels": [],
                "description": "This can be a helpful quick-n-easy way to find out which cpplint is being used. (vs. Google one)\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 48,
                "title": "cpplint: add c++14,17 headers to _CPP_HEADERS",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 18,
                "title": "Disambiguate header guards ",
                "labels": [],
                "description": "To reproduce, create headers:\n\n```\ninclude/foo/baz_bar.h\ninclude/foo_baz/bar.h\n```\n\nhaving distinct header guards\n\nSee google/styleguide#78\n\nNo ideal solution provided so far.\n"
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 36,
                "title": "check file Generated by the protocol buffer compiler.",
                "labels": [],
                "description": "No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\" [legal/copyright]\r\n\r\nInclude the directory when naming .h files  [build/include_subdir]\r\n\r\nFound C system header after C++ system header."
            },
            {
                "repo_url": "https://github.com/theandrewdavis/cpplint",
                "id": 25,
                "title": "Replace googlecode links with github links",
                "labels": [],
                "description": ""
            }
        ],
        "suitable": []
    },
    "willkg/dennis": {
        "all": [
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 76,
                "title": "abstract out a backend api",
                "labels": [],
                "description": "Currently Dennis code is pretty tied to .po and .pot files. Dennis would be more useful if it could understand other formats.\n\nThis issue covers creating a backend API and then rewriting the code so that it uses the backend specified to manipulate files. This then lets us write backends for .po/.pot, the way Plone does .po/.pot files, and other formats that are supported by Pontoon.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 45,
                "title": "transform: \"asian\"-ish translation",
                "labels": [
                    "mentored",
                    "enhancement"
                ],
                "description": "Cribbing from https://bugzilla.mozilla.org/show_bug.cgi?id=1011520\n- strings are shorter than original strings\n- use glyphs\n- still be readable for English speakers\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 97,
                "title": "False positive: width field",
                "labels": [],
                "description": "Hello, I am facing a false positive occurrence when using Dennis to check the translations of [0 A.D.](https://play0ad.com/).\r\n\r\nWe have one place where we use the format `%(name)4s` to pad the result to at least 4 characters. Dennis throws a 'type missing' error when reading that.\r\n\r\nYou can reproduce it with http://trac.wildfiregames.com/browser/ps/trunk/binaries/data/mods/public/l10n/ar.public-gui-other.po\r\n\r\n```\r\nWorking on: /path/to/ar.public-gui-other.po\r\nE101: type missing: %(fps)\r\n94:msgid \"FPS: %(fps)4s\"\r\n```\r\n\r\nThanks for the work on Dennis, it's a very nice tool! \ud83d\ude03 "
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 43,
                "title": "rewrite command line handlers to use a Reporter class",
                "labels": [],
                "description": "We need a Reporter class that reports in specific formats: cmdline, JSON, HTML, singleline (for SublimeText, Emacs, etc), etc.\n\nThe user would be able to specify the reporter to use with a command line argument.\n\nFirst step is to write the Reporter class and the CmdLineReporter. We can push off other reporters to different issues.\n\nThings to think about:\n1. reporters should be plugin-friendly\n2. how do we handle options being passed to the reporter? like indent=4, pretty=true, etc?\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 77,
                "title": "does translation correctly handle context?",
                "labels": [],
                "description": "We should add tests for gettext context to make sure dennis translation works with them correctly.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 59,
                "title": "handle specifying variable format with #, comments",
                "labels": [
                    "enhancement"
                ],
                "description": "http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files\n\n> The comment lines beginning with #, are special because they are not completely\n> ignored by the programs as comments generally are. The comma separated list of\n> flags is used by the msgfmt program to give the user some better diagnostic\n> messages. Currently there are two forms of flags defined: \n\nThen it goes on to talk about variable format flags. We should support those flags to build variable tokenizers for those strings.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 23,
                "title": "add JSON output format for lint and translate percentage commands",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 42,
                "title": "transform: RTL transform",
                "labels": [
                    "enhancement"
                ],
                "description": "We need a right-to-left transform. This will surface problematic strings that have order-based placement variables.\n\nThe `.po` file doesn't specify whether it's RTL or LTR--that information is elsewhere. So in the documentation we need to mention this. We might want to provide some options: they could translate in-place the Hebrew `.po` file, they could create an xx-rtl and make sure the locale data specifies that it's RTL. Other options?\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 49,
                "title": "extract \"reporter\" code into a Reporter class",
                "labels": [],
                "description": "There's a lot of \"reporter\" code for the linters. We should extract that into a class hierarchy so it's easier to make new reporters. This only affects \"lint\" and \"linttemplate\".\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 40,
                "title": "transform: add business speak translator",
                "labels": [
                    "mentored",
                    "enhancement"
                ],
                "description": "A business speak translator would have the following properties:\n1. translated strings would be longer than the original ones\n2. translated strings would be mostly recognizable\n\nPossibilities:\n1. replace various nouns with nouns that are ambiguous and/or meaningless. e.g. \"thing\", \"flange\"\n2. add adjectives and superlatives. e.g. \"monetized\", \"leveraged\", \"super\", \"extreme\", \"crowdsourced\"\n3. add additional sentences for longer texts\n\nThis requires recognition of parts of speech. It might be sufficient to just recognize nouns, though. Probably also need to recognize sentences, but I think we have a translator that does that.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 67,
                "title": "translate should handle variables as part of pipeline",
                "labels": [
                    "enhancement"
                ],
                "description": "`dennis-cmd translate` has a `--varformat` flag, but there are two problems with that:\n1. it's ignored by most of the transforms\n2. it should be like `html` where it breaks the token stream into mutable and immutable parts\n\nI think instead of having it as a separate flag, we should change it so that it's passed as part of the pipeline. Something like this should work:\n\n```\n% dennis-cmd translate -p python-format,shouty -s \"omg %(foo)s!\nOMG %(foo)s!\n```\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 14,
                "title": "transform: trololo",
                "labels": [
                    "mentored",
                    "enhancement"
                ],
                "description": "I would like to have a trololo transform to add more color to dennis transforms. I was thinking about how the transform might work and maybe something like this:\n1. break up the string on whitespace characters into tokens\n2. for each token, convert it to the equivalently lengthed trololo\n3. for tokens shorter than 5 characters, maybe just do equivalently lengthed lo\n4. for tokens of one character, do lo\n5. for tokens with an even number of characters, make them one character longer (e.g. \"fine\" would turn into \"trolo\", \"within\" would turn into \"trololo\", ...)\n6. maintain the case (e.g. \"Fine\" would turn into \"Trolo\" and \"WITHIN\" would turn into \"TROLOLO\")\n\nOr something to that effect. Frankly, funnier looking is funnier.\n\nThere are a handful of existing transforms that someone who was interested in writing something like this could draw inspiration from. All are currently in:\n\nhttps://github.com/willkg/dennis/blob/master/dennis/translator.py\n\nThe pirate transform has some tests:\n\nhttps://github.com/willkg/dennis/blob/master/dennis/tests/test_translator.py#L10\n\nThe others don't. (I should fix that.)\n\nIf someone is interested in working on this, let me know in the comments!\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 19,
                "title": "add a clean command",
                "labels": [
                    "mentored",
                    "enhancement"
                ],
                "description": "The linter finds a series of production crashing errors. We could use this to figure out which strings need wiping out in a .po file to \"make it good again\" and then wipe those strings out.\n\nSeveral thoughts:\n1. Should it be a flag on the lint command or a separate command? I think given that it's wiping things out, it should be a separate command for better safety.\n2. It should copy the .po file to .po.orig, then wipe it in place.\n3. For problems with plurals, I think it should wipe all the msgstrs--not just the one with the issue.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 58,
                "title": "support c-format variables",
                "labels": [
                    "enhancement"
                ],
                "description": "Support c-format:\n\nhttp://www.gnu.org/software/gettext/manual/html_node/c_002dformat.html#c_002dformat\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 71,
                "title": "redo coloration using click coloration",
                "labels": [],
                "description": "We should ditch blessings if we haven't already and switch to click coloration. Also, we should ditch as much of `out` and `err` as we can.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 12,
                "title": "lint summary assumes too much about path names",
                "labels": [
                    "bug"
                ],
                "description": "The lint summary assumes that the paths are in the form `locale/xx/LC_MESSAGES/messages.po`. If that's true, then it prints out a summary like this:\n\n```\nFinal Tally:\n\nNumber of files examined:            160\nTotal number of files with errors:    57\nTotal number of warnings:           1479\nTotal number of errors:              781\n\nWarnings  Errors  Filename\n    81        67  en_US (messages.po)\n    28        46  lt (messages.po)\n    26        42  th (messages.po)\n    30        41  tr (messages.po)\n    62        40  eu (messages.po)\n    25        40  id (messages.po)\n    30        39  hr (messages.po)\n    57        37  fy_NL (messages.po)\n```\n\nIf that's not true, then it prints a summary that's goofy looking. For example, with Miro, it prints this:\n\n```\nFinal Tally:\n\nNumber of files examined:             91\nTotal number of files with errors:    18\nTotal number of warnings:            101\nTotal number of errors:               37\n\nWarnings  Errors  Filename\n     2         5  resources (tr.po)\n     0         4  resources (ko.po)\n     4         3  resources (lv.po)\n     0         3  resources (zh_TW.po)\n     0         3  resources (zh_CN.po)\n     0         3  resources (th.po)\n     0         3  resources (sl.po)\n     3         2  resources (br.po)\n     0         2  resources (id.po)\n```\n\nWe could print the entire path, but paths can be really long, so I'm not excited about that. We could print the last part of the path, but that might not be enough information. We could use CLDR information to divine the locale from the path parts. Maybe that's the right thing to do.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 9,
                "title": "plugins",
                "labels": [
                    "enhancement"
                ],
                "description": "I was thinking that it might be nice if it supported plugins. Then projects could more easily defined different transforms and lint rules.\n\nMaybe look at using stevedore for managing the extension infrastructure:\n\nhttp://stevedore.readthedocs.org/en/latest/\n\nNote: This is a far future thing if and only if dennis gains traction and there's a need for this sort of thing.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 81,
                "title": "Check for matching Sphinx documentation syntax",
                "labels": [],
                "description": "It would be nice if dennis was able to detect when Sphinx documentation strings are translated without retaining the syntax, similar to how `W303` checks that HTML syntax must match.\n\nThe most common mistakes are adding spaces (e.g. below), or translating keywords\n\n```\n:term:`Zip`\n: term: `Zip`\n```\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 85,
                "title": "PyPy3 support",
                "labels": [
                    "needs-your-help"
                ],
                "description": "Both PyPy3 2.4 and 5.2 fail.\nThe 5.2 problem is like an upstream bug.\n\nhttps://travis-ci.org/jayvdb/dennis/builds/167224524\n\nPyPy 3 2.4:\n\n```\n====== FAILURES ======\n__ tests/test_linter.py::TestMismatchedHTMLLintRule::test_invalid_html_gt_26 ___\nself = <tests.test_linter.TestMismatchedHTMLLintRule object at 0x00000000083a0f38>\n    @pytest.mark.skipif(sys.version.startswith('2.6'),\n                        reason='using python 2.6')\n    def test_invalid_html_gt_26(self):\n        linted_entry = build_linted_entry(\n            u'#: foo/foo.py:5\\n' +\n            u'msgid \"<a>Foo</a>\"\\n' +\n            u'msgstr \"<a>ARGH</\\u0430>\"\\n')\n\n        msgs = self.lintrule.lint(self.vartok, linted_entry)\n        assert len(msgs) == 1\n        assert msgs[0].kind == 'warn'\n>       assert msgs[0].code == 'W303'\nE       assert 'W304' == 'W303'\nE         - W304\nE         ?    ^\nE         + W303\nE         ?    ^\ntests/test_linter.py:698: AssertionError\n```\n\nPyPy3 5.2 beta has many failures like:\n\n```\n_________________ tests/test_cmdline.py::TestStatus::test_help _________________\nself = <tests.test_cmdline.TestStatus object at 0x0000000003419ad0>\nrunner = <click.testing.CliRunner object at 0x0000000003419b08>\n    def test_help(self, runner):\n        result = runner.invoke(cli, ('status', '--help'))\n>       assert result.exit_code == 0\nE       assert -1 == 0\nE        +  where -1 = <Result AttributeError(\"'module' object has no attribute get_terminal_size'\",)>.exit_code\ntests/test_cmdline.py:28: AssertionError\n...\n===== 9 failed, 74 passed, 1 skipped in 2.13 seconds ======\n```\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 98,
                "title": "False positive: length field",
                "labels": [],
                "description": "I am facing another false positive occurrence, still while checking the translations of [0 A.D.](https://play0ad.com/).\r\n\r\nWe have one place where we use the C length field specifier `%ls` in order to handle the parameter as a `wchar_t`.\r\n\r\nYou can reproduce it with http://trac.wildfiregames.com/browser/ps/trunk/binaries/data/l10n/ar.engine.po\r\n\r\n```\r\nWorking on: /path/to/ar.engine.po\r\nE104: bad format character: %l\r\n35:msgid \"%s (%ls)\"\r\n```\r\n\r\nThanks in advance!"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 87,
                "title": "support Windows",
                "labels": [
                    "needs-your-help"
                ],
                "description": "``` ruby\nDennis: '0.7'\nPython: '3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)]'\nCommand line: ['C:\\\\Python34\\\\Scripts\\\\dennis-cmd', 'lint', '--errorsonly', 'locale/']\nTraceback (most recent call last):\n  File \"c:\\python34\\lib\\runpy.py\", line 170, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\python34\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Python34\\Scripts\\dennis-cmd.exe\\__main__.py\", line 9, in <module>\n    sys.exit(click_run())\n  File \"c:\\python34\\lib\\site-packages\\dennis\\cmdline.py\", line 156, in click_run\n    cli(obj={})\n  File \"c:\\python34\\lib\\site-packages\\click\\core.py\", line 664, in __call__\n    return self.main(*args, **kwargs)\n  File \"c:\\python34\\lib\\site-packages\\click\\core.py\", line 644, in main\n    rv = self.invoke(ctx)\n  File \"c:\\python34\\lib\\site-packages\\click\\core.py\", line 991, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"c:\\python34\\lib\\site-packages\\click\\core.py\", line 837, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"c:\\python34\\lib\\site-packages\\click\\core.py\", line 464, in invoke\n    return callback(*args, **kwargs)\n  File \"c:\\python34\\lib\\site-packages\\dennis\\cmdline.py\", line 312, in lint\n    out(withlines(msg.poentry.linenum, msg.poentry.original))\n  File \"c:\\python34\\lib\\site-packages\\dennis\\cmdline.py\", line 50, in out\n    click.echo(part, nl=False)\n  File \"c:\\python34\\lib\\site-packages\\click\\utils.py\", line 293, in echo\n    file.write(message)\n  File \"c:\\python34\\lib\\site-packages\\click\\_compat.py\", line 504, in _safe_write\n    return _write(s)\n  File \"c:\\python34\\lib\\site-packages\\colorama\\ansitowin32.py\", line 40, in write\n    self.__convertor.write(text)\n  File \"c:\\python34\\lib\\site-packages\\colorama\\ansitowin32.py\", line 141, in write\n    self.write_and_convert(text)\n  File \"c:\\python34\\lib\\site-packages\\colorama\\ansitowin32.py\", line 169, in write_and_convert\n    self.write_plain_text(text, cursor, len(text))\n  File \"c:\\python34\\lib\\site-packages\\colorama\\ansitowin32.py\", line 174, in write_plain_text\n    self.wrapped.write(text[start:end])\n  File \"c:\\python34\\lib\\encodings\\cp850.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 97-134: character maps to <undefined>\n\n---\n```\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 80,
                "title": "Allow ignoring some domain in URLs",
                "labels": [],
                "description": "Some sites support multiple languages , and therefore a URL should be different for each language.\nA good example is Wikipedia, where a English Wikipedia link in the English source should be converted to a French Wikipedia link in the French translation.\n\nCurrently that is reported as `W303: different html` .\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 74,
                "title": "add explanation of what dubstep does to docs",
                "labels": [],
                "description": "dubstep is a really interesting transform with interesting properties. Definitely should document it better in the docs.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 73,
                "title": "add option to translate subcommand to only translate missing strings",
                "labels": [],
                "description": "Right now, translate stomps on all the strings in the `.po` file. It'd be nice if it had a mode where it only translated missing strings.\n\nThis might get tricky when dealing with plurals, though.\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 101,
                "title": "Dennis shows a warning rather than an error for a missing leading % in a placholder",
                "labels": [],
                "description": "If you have a string like `(foo)s blah %(bar)s` dennis returns `W202 Missing variables in translated string`. I would have expected this to be an error since it results in untranslated content.\r\n\r\nThis is obvious but since it's a warning it's not seen when running in errors-only mode."
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 70,
                "title": "merge and generalize lint rules",
                "labels": [],
                "description": "The linter is kind of a mess right now. Issues:\n1. We have \"lint rules\" and \"template lint rules\", but we should really have \"rules for id strings\" and \"rules for translated strings\". In other words, one file with all the rules in them and they're all of type `LintRule`. That'll reduce a ton of repeated code.\n2. Lint rules do goofy things to make sure they only look at strings that apply to them. For example, some lint rules only apply to strings with python-format variables. Right now, we do goofy things at the beginning to handle that. We should do something better. Maybe call the lint rule with more context so it's easier for it to figure out whether it should check things?\n3. The documentation for lint rules is split between the docs and the code and it's almost certainly out of sync. We need a better way to deal with that. Maybe document it in the code and extract it with autodoc?\n4. We should have better registration infrastructure for lint rules. Right now it's pretty hard-coded-esque and not plugin-friendly.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 42,
                "title": "transform: RTL transform",
                "labels": [
                    "enhancement"
                ],
                "description": "We need a right-to-left transform. This will surface problematic strings that have order-based placement variables.\n\nThe `.po` file doesn't specify whether it's RTL or LTR--that information is elsewhere. So in the documentation we need to mention this. We might want to provide some options: they could translate in-place the Hebrew `.po` file, they could create an xx-rtl and make sure the locale data specifies that it's RTL. Other options?\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 81,
                "title": "Check for matching Sphinx documentation syntax",
                "labels": [],
                "description": "It would be nice if dennis was able to detect when Sphinx documentation strings are translated without retaining the syntax, similar to how `W303` checks that HTML syntax must match.\n\nThe most common mistakes are adding spaces (e.g. below), or translating keywords\n\n```\n:term:`Zip`\n: term: `Zip`\n```\n"
            },
            {
                "repo_url": "https://github.com/willkg/dennis",
                "id": 70,
                "title": "merge and generalize lint rules",
                "labels": [],
                "description": "The linter is kind of a mess right now. Issues:\n1. We have \"lint rules\" and \"template lint rules\", but we should really have \"rules for id strings\" and \"rules for translated strings\". In other words, one file with all the rules in them and they're all of type `LintRule`. That'll reduce a ton of repeated code.\n2. Lint rules do goofy things to make sure they only look at strings that apply to them. For example, some lint rules only apply to strings with python-format variables. Right now, we do goofy things at the beginning to handle that. We should do something better. Maybe call the lint rule with more context so it's easier for it to figure out whether it should check things?\n3. The documentation for lint rules is split between the docs and the code and it's almost certainly out of sync. We need a better way to deal with that. Maybe document it in the code and extract it with autodoc?\n4. We should have better registration infrastructure for lint rules. Right now it's pretty hard-coded-esque and not plugin-friendly.\n"
            }
        ]
    },
    "jimo1001/docutils-ast-writer": {
        "all": [],
        "suitable": []
    },
    "myint/eradicate": {
        "all": [
            {
                "repo_url": "https://github.com/myint/eradicate",
                "id": 9,
                "title": "Following PEP 263 to be more precisely",
                "labels": [],
                "description": "This PR aims to follow [PEP 263](https://www.python.org/dev/peps/pep-0263/) more precisely, especially for source code encoding hints.\r\nAccording to PEP 263, encoding hints allow the following regular expression:\r\n\r\n    ^[ \\t\\f]*#.*?coding[:=][ \\t]*([-_.a-zA-Z0-9]+)\r\n\r\nThe regexp match `# encoding: utf8` which I often use but `eradicate 0.2.1` considered that the line contains code.\r\n\r\n```con\r\n$ eradicate tmp.py\r\n #!/usr/bin/python\r\n-# encoding: utf8\r\n\r\n...\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/eradicate",
                "id": 7,
                "title": "misses withs and fors",
                "labels": [
                    "enhancement"
                ],
                "description": "```diff\r\n         # with open('filename', 'w') as outfile:\r\n-        #     json.dump(objects, outfile)\r\n         #\r\n```\r\n\r\n```diff\r\n     # for x in y:\r\n-    #     foop = x.ham\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/myint/eradicate",
                "id": 8,
                "title": "Misses methods declaration with annotated return types",
                "labels": [],
                "description": "Hi, thanks for this awesome plugin. I am using it in production, it works great.\r\nHowever, I have found out that it misses this case:\r\n\r\n```\r\n-# class CommentedClass(object):\r\n #     def __init__(self, prop: int) -> None:\r\n-#         self.property = prop\r\n \r\n #     def __str__(self) -> str:\r\n-#         return self.__class__.__name__\r\n \r\n-#    def set_prop(self, prop: int):\r\n-#        self.prop = prop\r\n \r\n-#    def get_prop(self):\r\n-#        return self.prop\r\n```\r\n\r\nLook, all method declarations with annotated return types are ignored in this diff. The same goes for the regular functions, not just methods.\r\nThis may lead to some false negative behavior. \r\n\r\nP.S. I have made a `flake8` plugin to check my codebase with `eradicate`, check it out: https://github.com/sobolevn/flake8-eradicate"
            }
        ],
        "suitable": []
    },
    "retr0h/git-url-parse": {
        "all": [
            {
                "repo_url": "https://github.com/retr0h/git-url-parse",
                "id": 18,
                "title": "Add back an invalid url to the invalid_urls() fixture",
                "labels": [],
                "description": "This restores some coverage"
            },
            {
                "repo_url": "https://github.com/retr0h/git-url-parse",
                "id": 11,
                "title": "Support for local urls",
                "labels": [],
                "description": "git allows local urls in it's path\r\nCurrently the parser will put some un-helpful values in the parsed object's tuples if this is the case\r\n\r\nPossibly there can be some kind of check for an absolute path, so that in case a user passes a local repository, they get an empty return value\r\n\r\nReproducing code:\r\n```\r\n$ git clone https://github.com/retr0h/git-url-parse\r\n$ cd git-url-parse\r\n$ pip install -e .\r\n$ python3\r\n>>> import giturlparse\r\n>>> p = giturlparse.parse(\"/path/to/local/repository/directory/\")\r\n>>> print(p)\r\n```\r\n\r\nWhat we get is : \r\n```\r\n>>> print(p)\r\nParsed(pathname='to/local', protocols=[], protocol='ssh', href='/path/to/local/repository/directory/', resource='path', user=None, port=None, name='local', owner='to')\r\n```\r\nProbably this can be improved, since the protocol='ssh' is highly misleading, and the name, local and resource can also be put to None, along with pathname and href being the same (or preferably href None)"
            },
            {
                "repo_url": "https://github.com/retr0h/git-url-parse",
                "id": 16,
                "title": "Support #ref has npm does",
                "labels": [],
                "description": "Some systems, e.g. npm, support specifying a commit or branch by adding #commit at the end of the url; see\r\nhttps://docs.npmjs.com/files/package.json#git-urls-as-dependencies\r\n\r\nAfter this feature is implemented, one would expect\r\n\r\ngit clone https://github.com/retr0h/git-url-parse\r\ncd git-url-parse\r\npip3 install --user -e .\r\npython3 -c 'import giturlparse; print(giturlparse.parse(\"git@gitlab.com:hi/there#rel-1.1\"))'\r\n\r\nto output e.g.\r\n\r\nParsed(pathname='hi/there', protocols=[], protocol='ssh', href='git@gitlab.com:hi/there#rel-1.1', resource='gitlab.com', user='git', port=None, name='there', owner='hi', ref='rel-1.1')\r\n\r\nor possibly\r\n\r\nParsed(pathname='hi/there', protocols=[], protocol='ssh', href='git@gitlab.com:hi/there', resource='gitlab.com', user='git', port=None, name='there', owner='hi', ref='rel-1.1')\r\n\r\n(because arguably href should be what one passes to 'git clone')"
            }
        ],
        "suitable": []
    },
    "sk-/html-linter": {
        "all": [
            {
                "repo_url": "https://github.com/sk-/html-linter",
                "id": 15,
                "title": "Add TeamCity inspection formatting",
                "labels": [],
                "description": "This detects if the tool is being called from within TeamCity, and if so, formats the results as inspection messages for TC to pick up. \r\n\r\n- https://confluence.jetbrains.com/display/TCD10/Working+with+Build+Results#WorkingwithBuildResults-codeInspectionsTab\r\n- https://confluence.jetbrains.com/display/TCD10/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-inspectionsReportingInspections\r\n\r\nNote that I've also refactored the `--printfilename` option since this felt more consistent now that there are more formatting options.\r\n\r\nI've tested this version in our TC environment (Python 3.5 and 3.6), but haven't done any checks with Python 2."
            },
            {
                "repo_url": "https://github.com/sk-/html-linter",
                "id": 1,
                "title": "Are non javascript script tags harmful? ",
                "labels": [
                    "question"
                ],
                "description": "For files with handlebars templates like `<script id=\"template\" type=\"text/x-handlebars-template\">` the following error is shown:\n\n`line 22, col 1: Error: Separation of concerns: Javascript should be defined in its own file: Move the contents of this tag to its own JS file.`\n"
            }
        ],
        "suitable": []
    },
    "timothycrosley/isort": {
        "all": [
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 597,
                "title": "setup.cfg vs. .isort.cfg yield different results",
                "labels": [],
                "description": "versions: 4.2.5 and 4.2.15\r\n\r\nIn `setup.cfg`:\r\n\r\n```[isort]\r\ncombine_as_imports = true\r\ndefault_section = THIRDPARTY\r\ninclude_trailing_comma = false\r\nline_length = 79\r\nmulti_line_output = 5\r\nskip = env,node_modules\r\nskip_glob = **/migrations/**\r\nnot_skip = __init__.py\r\nknown_standard_library=asyncio\r\nknown_django=django\r\nknown_first_party=\r\n    api\r\n    clients\r\n    core\r\n    demographics\r\n    export\r\n    giveaway\r\n    idb\r\n    igg\r\n    imadb\r\n    image_cache\r\n    influencers\r\n    kpis\r\n    media\r\n    monitoring\r\n    projects\r\n    tracking\r\n    users\r\nsections=FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\r\n\r\n[pep8]\r\nignore=W293,W291,E501,E261\r\n\r\nmax-line-length=120\r\n\r\nexclude=\r\n    scripts_timex.py,\r\n    confs/aws.py,\r\n    migrations,\r\n    staticfiles,\r\n    static,\r\n    envvars,\r\n    node_modules,\r\n    idb/datascripts\r\n\r\n[flake8]\r\nignore=W293,W291,E501,E261\r\n\r\nmax-line-length=120\r\n\r\nexclude=\r\n    scripts_timex.py,\r\n    confs/aws.py,\r\n    migrations,\r\n    staticfiles,\r\n    static,\r\n    envvars,\r\n    node_modules,\r\n    idb/datascripts\r\n```\r\n\r\nin `.isort.cfg`:\r\n\r\n```\r\n[settings]\r\ncombine_as_imports = true\r\ndefault_section = THIRDPARTY\r\ninclude_trailing_comma = false\r\nline_length = 79\r\nmulti_line_output = 5\r\nskip = env,node_modules\r\nskip_glob = **/migrations/**\r\nnot_skip = __init__.py\r\nknown_standard_library=asyncio\r\nknown_django=django\r\nknown_first_party=\r\n    api\r\n    clients\r\n    core\r\n    demographics\r\n    export\r\n    giveaway\r\n    idb\r\n    igg\r\n    imadb\r\n    image_cache\r\n    influencers\r\n    kpis\r\n    media\r\n    monitoring\r\n    projects\r\n    tracking\r\n    users\r\nsections=FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\r\n```\r\n\r\nExpected:\r\n\r\nImports are correctly sorted, so isort should not fail.\r\n\r\nObserved:\r\n\r\nWhen using `.isort.cfg`, the expected behaviour happens. When using `setup.cfg`, imports fail with:\r\n\r\n```\r\n(ima) \u279c  imadb git:(code-quality-conf) \u2717 isort --recursive --check-only --diff .\r\nERROR: /home/bbt/code/imadb/imadb/tests/test_views.py Imports are incorrectly sorted.\r\n--- /home/bbt/code/imadb/imadb/tests/test_views.py:before\t2017-09-15 11:35:58.032665\r\n+++ /home/bbt/code/imadb/imadb/tests/test_views.py:after\t2017-09-15 11:38:21.413430\r\n@@ -1,6 +1,5 @@\r\n from django.conf import settings\r\n from django.urls import reverse\r\n-\r\n\r\n\r\n from django_webtest import WebTest\r\n \r\n from clients.tests.factories import UserClientFactory\r\nERROR: /home/bbt/code/imadb/imadb/settings/common.py Imports are incorrectly sorted.\r\n--- /home/bbt/code/imadb/imadb/settings/common.py:before\t2017-09-15 11:35:58.052665\r\n+++ /home/bbt/code/imadb/imadb/settings/common.py:after\t2017-09-15 11:38:21.431162\r\n@@ -9,9 +9,8 @@\r\n import sys  # noqa\r\n from logging import Filter\r\n \r\n+import environ\r\n from django.urls import reverse_lazy\r\n-\r\n-import environ\r\n \r\n ROOT_DIR = environ.Path(__file__) - 3  # (/a/b/myfile.py - 3 = /)\r\n```\r\n\r\n`environ` is a third party app, and adding it to `known_third_party` doesn't fix it.\r\n\r\nAny ideas?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 678,
                "title": "ujson treated as a firstparty/localfolder",
                "labels": [],
                "description": "ujson is a thridparty library that implements JSON encoder/decoder, however isort treats it as a firstparty or localfolder:\r\n\r\n```\r\n$ cat main.py \r\n\r\nimport os\r\n\r\nimport requests\r\nimport ujson\r\n\r\nimport foo\r\n$ touch foo.py\r\n$ isort --diff main.py \r\n--- /tmp/bar/main.py:before\t2018-02-20 15:52:06.323003\r\n+++ /tmp/bar/main.py:after\t2018-02-20 15:52:09.555307\r\n@@ -2,6 +2,6 @@\r\n import os\r\n \r\n import requests\r\n-import ujson\r\n \r\n import foo\r\n+import ujson\r\n```\r\nIn my reproduction it want to put it after `foo` which is a local module and detach from `requests` which is a third-party module (where I want to put ujson as well).\r\n\r\nSystem info:\r\n```\r\n$ cat /etc/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=16.04\r\nDISTRIB_CODENAME=xenial\r\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.3 LTS\"\r\n$ python --version\r\nPython 3.6.4\r\n$ pip freeze\r\ncertifi==2018.1.18\r\nchardet==3.0.4\r\nidna==2.6\r\nisort==4.3.4\r\nrequests==2.18.4\r\nujson==1.35\r\nurllib3==1.22\r\n```\r\n\r\nThanks!"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 596,
                "title": "isort does not recognize six.moves and email modules properly.",
                "labels": [],
                "description": "Given something as:\r\n\r\n```\r\nimport email  # standard library\r\nimport os  # standard library\r\nfrom os import path  # standard library\r\n\r\nfrom six.moves import zip  # third party\r\n\r\nimport my_project  # project\r\nfrom my_project import basic  # project\r\n```\r\n\r\nisort wrongly sorts to:\r\n\r\n```\r\nimport os  # standard library\r\nfrom os import path  # standard library\r\n\r\nimport my_project # project\r\nimport email  # standard library\r\nfrom my_project import basic  # project\r\nfrom six.moves import zip  # third party\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 627,
                "title": "4.2.15 released but not in master or develop",
                "labels": [],
                "description": "Latest in `setup.py` is 4.2.14.\r\n\r\nTip: Would suggest to only have one `master` branch (remove `develop`) and then branch off into major release branches if you want to patch up older releases."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 761,
                "title": "provide a way to mix stdlib and third party libraries in one section",
                "labels": [],
                "description": "stdlib dependencies and third party dependencies are indistinguishable in many cases and I would like to sort them into the same section, separately from local dependencies.\r\n\r\nFor example, `enum` is stdlib on Python 3 but third party on Python 2 when using a backport. The order of the sorting is different based on whether I run `isort` using Python 2 or Python 3.\r\n\r\nIt's possible to fix this with `known_standard_library=...` but this is tedious to maintain if I want to sort every single third party library along with stdlibs.\r\n\r\nI'd propose some form of `+` syntax allowing me to specify `sections=FUTURE,STDLIB+THIRDPARTY,FIRSTPARTY,LOCALFOLDER`.\r\n\r\nEven if my rationale is not interesting, I think the syntax is very useful to be able to combine a couple sections which is not currently possible. You can specify a line break or not between sections, but there's no current way to actually just combine them."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 759,
                "title": "isort can trash Python installations",
                "labels": [],
                "description": "Heya :)\r\n\r\nThis is a bit of a corner case, but it's happened to me more than once already...\r\nSo `isort` is prooobably not meant to be used on Python stdlib code, since it can be a little tricky with imports in places.\r\n\r\nHowever, if you happen to have a virtualenv within your working directory, or a `.tox` directory containing those, `isort -rc .` may recurse down into them, like in the logs below.\r\n\r\nThis will be a problem in any environment where the python stdlib files are writable, as they are on MacOS when you've installed Python with Homebrew; running within a virtualenv doesn't matter, since these files are usually linked into it, not copied.\r\n\r\n```\r\n$ isort -rc .\r\nFixing ./.tox/flake8/bin/python-config\r\nFixing ./.tox/flake8/bin/activate_this.py\r\n[...]\r\nFixing ./.tox/flake8/lib/python3.7/os.py\r\n[...]\r\nFixing ./.tox/flake8/lib/python3.7/site.py\r\n[...]\r\n```\r\n\r\nAt this point, I hit ctrl+c, because this wasn't what I wanted, removed the `.tox` directory and tried to re-run `isort`:\r\n\r\n```\r\n$ rm -r .tox\r\n$ isort -rc .\r\nFatal Python error: initsite: Failed to import the site module\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site.py\", line 73, in <module>\r\n    import os\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/os.py\", line 30, in <module>\r\n    from os.path import (altsep, curdir, defpath, devnull, extsep, pardir, pathsep,\r\nModuleNotFoundError: No module named 'os.path'; 'os' is not a package\r\n$\r\n```\r\nOh no! Remembering I'd seen this before, I tried to run a non-virtualenv `python3`:\r\n```\r\n~ $ python3\r\nFatal Python error: initsite: Failed to import the site module\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site.py\", line 73, in <module>\r\n    import os\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/os.py\", line 30, in <module>\r\n    from os.path import (altsep, curdir, defpath, devnull, extsep, pardir, pathsep,\r\nModuleNotFoundError: No module named 'os.path'; 'os' is not a package\r\n```\r\nIt's dead, Jim \ud83d\ude1e \r\n\r\nThis is fixed by reinstalling Python (`brew reinstall python3` for me) to replace the isort-tainted stdlib modules with fresh ones.\r\n\r\nI think it'd be worth it to add special-casing in `isort` to ignore (by default; could be overridden with some sort of footgun switch) files in:\r\n\r\n* `*/.tox/`\r\n* `*/lib/python*.*`\r\n* any `site-packages` directory\r\n* any `dist-packages` directory (Debian special)\r\n\r\nMaybe some others?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 675,
                "title": "sort order changed recently when mixing \"from ... import\" statements where only some have an \"as\" clause",
                "labels": [],
                "description": "We're running `isort` as a pre-commit hook, so all files have had their imports sorted at some point.\r\n\r\nNow I just ran `isort` on our repo and found a bunch of changes like these:\r\n![image](https://user-images.githubusercontent.com/199071/36170874-933313d0-10b5-11e8-9310-202204adeb51.png)\r\n\r\nso it seems like it used to group all imports without an \"as\" clause together, but now sorts them alphabetically, even if that means splitting them up.\r\n\r\nI personally preferred the previous style, but I guess it doesn't really matter. I'd be happy to commit as is if isort prefers that now :)\r\n\r\nWas that an intentional change? If yes, is it configurable?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 728,
                "title": "Feature request: Give support to '-' to read from standard input",
                "labels": [],
                "description": "Here's a little example showing how to achieve this simple but at the same time useful time when it comes to integrate these type of tools with text editor plugins:\r\n\r\n - Make sure this option doesn't conflict with existing one: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457)\r\n - Read from standard input: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963)"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 727,
                "title": "Feature Request: Add option to force __future__ import of absolute_imports",
                "labels": [],
                "description": "We would like to force all of the Python files in our project (if and only if they contain other import statements) to contain `from __future__ import absolute_import` (or add `absolute_import` if it's missing in an already-existing `__future__` import). A new setting for isort to instruct it to add `absolute_import` whenever needed would be a great feature."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 726,
                "title": "isort insists on moving PyCharm noinspection comment, breaking it",
                "labels": [],
                "description": "[This import statement](https://github.com/eventbrite/pysoa/blob/9ce65ce5e7a2f934070bb30754f88d2cb400e9ff/tests/server/test_autoreloader.py#L17-L24) imports several protected (start with underscore) members from a module. PyCharm includes a special comment that instructs its inspector to ignore this and not issue a warning:\r\n\r\n```\r\n# noinspection PyProtectedMember\r\n```\r\n\r\nThis comment must go directly above the import statement that imports the protected members. If it goes anywhere else, it has no effect and PyCharm issues the warning. isort insists on moving this comment from where it's supposed to go to above the import group:\r\n\r\n```\r\n@@ -10,11 +10,11 @@\r\n import time\r\n import unittest\r\n \r\n+# noinspection PyProtectedMember\r\n import pysoa\r\n import pysoa.client\r\n import pysoa.server\r\n import pysoa.server.autoreload\r\n-# noinspection PyProtectedMember\r\n from pysoa.server.autoreload import (\r\n     NEED_RELOAD_EXIT_CODE,\r\n     AbstractReloader,\r\nApply suggested changes to '/Users/nwilliams/eventbrite/pysoa/tests/server/test_autoreloader.py' [y/n/q]? n\r\n```\r\n\r\nI have to skip it every time, which triggers warnings from our linter. isort should not attempt to move this comment to the top of the group. It should leave it where it is."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 611,
                "title": "Allow import statement in conditional block",
                "labels": [],
                "description": "When the sequence of import statements is interrupted by conditional blocks, ISort thinks the imports have ended and wants the conditional block to be separated from other import statements.\r\n\r\nGiven this correctly-ordered code:\r\n\r\n```python\r\nimport pytz\r\ntry:\r\n    import semver\r\nexcept ImportError:\r\n    # We won't be able to parse Semantic Versioning values.\r\n    semver = NotImplemented\r\n```\r\n\r\nISort requires these changes:\r\n\r\n```diff\r\n import pytz\r\n+\r\n+\r\n try:\r\n     import semver\r\n except ImportError:\r\n    # We won't be able to parse Semantic Versioning values.\r\n    semver = NotImplemented\r\n```\r\n\r\nI can't find any way to tell ISort to allow the conditional block (whether `try`, or `if`, etc.) as part of the sequence of import statements.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 712,
                "title": "isort merge driver for git etc",
                "labels": [],
                "description": "Some tool to automatically handle merge conflicts in files. Where the only conflicts are in the imports: Take the imports in 'theirs' and 'ours' and run isort on the union"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 760,
                "title": "New release",
                "labels": [],
                "description": "Is it possible to release a new version please? I want to start using the recent changes for supporting pyproject.yaml."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 661,
                "title": "ISort produces different result running from command line vs from Vim's ISort function.",
                "labels": [],
                "description": "This is the original list of imports: \r\n\r\n     from flask import Markup, Response, flash, redirect, request\r\n     from flask_admin._compat import iteritems, text_type\r\n     from flask_babelex import gettext, lazy_gettext\r\n     from flask_admin.base import expose\r\n     from flask_admin.helpers import get_redirect_target\r\n     from flask_admin.model import typefmt\r\n     from flask_admin.model.helpers import get_mdict_item_or_list\r\n     from sqlalchemy import and_\r\n     from sqlalchemy.inspection import inspect\r\n     \r\n     from portal.account.models import AttributeManagerSingleton as AMS\r\n     from portal.account.utils import History, ReplacementBank\r\n     from portal.admin.utils import (AccessControlView, AuthorizationRequiredView,\r\n                                     TimeTrackedModelView)\r\n     from portal.models import db\r\n     from portal.user import RolesEnum\r\n     from portal.user.models import User, UsersRoles, Role\r\n     from portal.utils.EnumRelated import EnumSQLAModelView\r\n     from portal.vps.widgets import ReleasableWidget\r\n     \r\n\r\nAfter running isort on the directory (`isort`), I get: \r\n\r\n    from flask import Markup, Response, flash, redirect, request\r\n    from flask_admin._compat import iteritems, text_type\r\n    from flask_admin.base import expose\r\n    from flask_admin.helpers import get_redirect_target\r\n    from flask_admin.model import typefmt\r\n    from flask_admin.model.helpers import get_mdict_item_or_list\r\n    from flask_babelex import gettext, lazy_gettext\r\n    from portal.account.models import AttributeManagerSingleton as AMS\r\n    from portal.account.utils import History, ReplacementBank\r\n    from portal.admin.utils import (AccessControlView, AuthorizationRequiredView,\r\n                                    TimeTrackedModelView)\r\n    from portal.models import db\r\n    from portal.user import RolesEnum\r\n    from portal.user.models import Role, User, UsersRoles\r\n    from portal.utils.EnumRelated import EnumSQLAModelView\r\n    from portal.vps.widgets import ReleasableWidget\r\n    from sqlalchemy import and_\r\n    from sqlalchemy.inspection import inspect\r\n\r\nI installed isort on vim and execute the following upon save: `:autocmd BufWritePost *.py Isort`\r\n\r\nWhen I open this file and press save, I see isort sorted my imports yet again: \r\n\r\n    from flask import Markup, Response, flash, redirect, request\r\n    from flask_admin._compat import iteritems, text_type\r\n    from flask_admin.base import expose\r\n    from flask_admin.helpers import get_redirect_target\r\n    from flask_admin.model import typefmt\r\n    from flask_admin.model.helpers import get_mdict_item_or_list\r\n    from flask_babelex import gettext, lazy_gettext\r\n    from sqlalchemy import and_\r\n    from sqlalchemy.inspection import inspect\r\n    \r\n    from portal.account.models import AttributeManagerSingleton as AMS\r\n    from portal.account.utils import History, ReplacementBank\r\n    from portal.admin.utils import (AccessControlView, AuthorizationRequiredView,\r\n                                    TimeTrackedModelView)\r\n    from portal.models import db\r\n    from portal.user import RolesEnum\r\n    from portal.user.models import Role, User, UsersRoles\r\n    from portal.utils.EnumRelated import EnumSQLAModelView\r\n    from portal.vps.widgets import ReleasableWidget\r\n\r\nIs this happening to anybody? I am very annoyed because Isort doesn't seem to be producing a deterministic output each time. \r\n\r\nI installed 'fisadev/vim-isort' via Plug. No other configuration is supplied to vim-isort. \r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 725,
                "title": "isort behavior different on linux vs osx even with config",
                "labels": [],
                "description": "on OSX:\r\n```bash\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4 took 2s\r\n\u279c pipenv run isort --recursive --check-only server\r\nERROR: /Users/ahonnecke/Code/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py Imports are incorrectly sorted.\r\nERROR: /Users/ahonnecke/Code/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py Imports are incorrectly sorted.\r\n\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4\r\n\u279c head -n16 /Users/ahonnecke/Code/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py\r\nimport json\r\nimport os\r\nfrom time import sleep\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom django.test import TestCase\r\n\r\nfrom wiremock.constants import Config\r\nfrom wiremock.resources.mappings import Mapping\r\nfrom wiremock.resources.mappings.resource import Mappings\r\nfrom wiremock.server import WireMockServer\r\n\r\n\r\nfrom assets.models import Ledger\r\nfrom dad.configuration import PortfolioManagerConfiguration\r\nfrom portfolio_manager.models import LedgerAddress, Portfolio\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4\r\n\u279c head -n16 /Users/ahonnecke/Code/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py\r\nimport json\r\nimport os\r\nfrom time import sleep\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom django.test import TestCase\r\n\r\nfrom wiremock.constants import Config\r\nfrom wiremock.resources.mappings import Mapping\r\nfrom wiremock.resources.mappings.resource import Mappings\r\nfrom wiremock.server import WireMockServer\r\n\r\n\r\nfrom assets.models import Ledger\r\nfrom dad.configuration import PortfolioManagerConfiguration\r\nfrom portfolio_manager.wallets.ledger_client import LedgerClient\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4\r\n\u279c pipenv run isort --recursive --check-only server\r\nERROR: /Users/ahonnecke/Code/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py Imports are incorrectly sorted.\r\nERROR: /Users/ahonnecke/Code/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py Imports are incorrectly sorted.\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4 took 2s\r\n\u279c pipenv run isort --recursive server\r\nFixing /Users/ahonnecke/Code/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py\r\nFixing /Users/ahonnecke/Code/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py\r\nSkipped 26 files\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4 took 2s\r\n\u279c head -n16 /Users/ahonnecke/Code/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py\r\nimport json\r\nimport os\r\nfrom time import sleep\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom django.test import TestCase\r\n\r\nfrom wiremock.constants import Config\r\nfrom wiremock.resources.mappings import Mapping\r\nfrom wiremock.resources.mappings.resource import Mappings\r\nfrom wiremock.server import WireMockServer\r\n\r\nfrom assets.models import Ledger\r\nfrom dad.configuration import PortfolioManagerConfiguration\r\nfrom portfolio_manager.wallets.ledger_client import LedgerClient\r\nfrom util.security import create_user, get_token_for_user\r\n\r\nweb on \ue0a0 fox-295 [\u21e1$!] via \ud83d\udc0d 3.6.4\r\n\u279c head -n16 /Users/ahonnecke/Code/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py\r\nimport json\r\nimport os\r\nfrom time import sleep\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom django.test import TestCase\r\n\r\nfrom wiremock.constants import Config\r\nfrom wiremock.resources.mappings import Mapping\r\nfrom wiremock.resources.mappings.resource import Mappings\r\nfrom wiremock.server import WireMockServer\r\n\r\nfrom assets.models import Ledger\r\nfrom dad.configuration import PortfolioManagerConfiguration\r\nfrom portfolio_manager.models import LedgerAddress, Portfolio\r\nfrom util.security import create_client_user, get_token_for_user\r\n```\r\n\r\nCloud based CI platform (Circle CI / ubuntu)\r\n```bash\r\ncircleci@02354f6b3c74:~/project/repos/web$ pipenv run isort --recursive --check-only server\r\nERROR: /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py Imports are incorrectly sorted.\r\nERROR: /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py Imports are incorrectly sorted.\r\n\r\ncircleci@02354f6b3c74:~/project/repos/web$ cp /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py.bak\r\n\r\ncircleci@02354f6b3c74:~/project/repos/web$ cp /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py.bak\r\n\r\ncircleci@02354f6b3c74:~/project/repos/web$ pipenv run isort --recursive server\r\nFixing /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py\r\nFixing /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py\r\nSkipped 26 files\r\ncircleci@02354f6b3c74:~/project/repos/web$ diff /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py /home/circleci/project/repos/web/server/portfolio_manager/graphql/tests/test_ledger_addresses_query.py.bak\r\n8,12d7\r\n< from wiremock.constants import Config\r\n< from wiremock.resources.mappings import Mapping\r\n< from wiremock.resources.mappings.resource import Mappings\r\n< from wiremock.server import WireMockServer\r\n<\r\n17a13,16\r\n> from wiremock.constants import Config\r\n> from wiremock.resources.mappings import Mapping\r\n> from wiremock.resources.mappings.resource import Mappings\r\n> from wiremock.server import WireMockServer\r\ncircleci@02354f6b3c74:~/project/repos/web$ diff /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py /home/circleci/project/repos/web/server/portfolio_manager/wallets/test_supported_ledgers.py.bak\r\n8,12d7\r\n< from wiremock.constants import Config\r\n< from wiremock.resources.mappings import Mapping\r\n< from wiremock.resources.mappings.resource import Mappings\r\n< from wiremock.server import WireMockServer\r\n<\r\n17a13,16\r\n> from wiremock.constants import Config\r\n> from wiremock.resources.mappings import Mapping\r\n> from wiremock.resources.mappings.resource import Mappings\r\n> from wiremock.server import WireMockServer\r\ncircleci@02354f6b3c74:~/project/repos/web$ pipenv run isort --recursive --check-only server\r\nSkipped 26 files\r\n```\r\n\r\nisort\r\n```\r\n[settings]\r\nknown_django=django\r\nsections=FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\r\n```\r\n\r\nTLDR, isort requires a different number of newlines on ubuntu."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 723,
                "title": "Imports with `as` break grouping.",
                "labels": [],
                "description": "Given `.isort.cfg` containing:\r\n\r\n```\r\n[settings]\r\nmulti_line_output=3\r\n```\r\n\r\nApplying isort to a file containing:\r\n\r\n```\r\nfrom some_module.or_other.somewhere import (\r\n    submodule_named_a,\r\n    submodule_named_b,\r\n    submodule_named_c,\r\n    submodule_named_d,\r\n    submodule_named_e\r\n)\r\n```\r\n\r\nDoes nothing, as expected.\r\n\r\nBut, if one of the imports is renamed:\r\n\r\n```\r\nfrom some_module.or_other.somewhere import (\r\n    submodule_named_a,\r\n    submodule_named_b,\r\n    submodule_named_c as renamed_c,\r\n    submodule_named_d,\r\n    submodule_named_e\r\n)\r\n```\r\n\r\nisort transforms it into:\r\n\r\n```\r\nfrom some_module.or_other.somewhere import submodule_named_a, submodule_named_b\r\nfrom some_module.or_other.somewhere import submodule_named_c as renamed_c\r\nfrom some_module.or_other.somewhere import submodule_named_d, submodule_named_e\r\n```\r\n\r\nWhich is pretty ugly.\r\n\r\nIt would be preferable to keep the group the same, or to sort the renamed import separately so as the rest of the imports could still be grouped."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 643,
                "title": "Expand verbose to include deleted lines",
                "labels": [
                    "enhancement"
                ],
                "description": "As a new feature, it would be helpful to provide a way for the user to know what lines of code have been deleted.  This would probably be appropriate to include this information in the verbose mode or perhaps by another command line parameter."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 735,
                "title": "The -k/--keep-direct-and-as flag does not work",
                "labels": [],
                "description": "    -k, --keep-direct-and-as\r\n                        Turns off default behavior that removes direct imports\r\n                        when as imports exist.\r\nBut when I have file `test.py`:\r\n\r\n    from django.utils.translation import ugettext as _, ugettext\r\n\r\nand run `isort -k test.py` or `isort --keep-direct-and-as test.py`, the result is:\r\n\r\n    from django.utils.translation import ugettext as _\r\n\r\nisort version is 4.3.4."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 676,
                "title": "check-only false positive if file is missing closing newline",
                "labels": [],
                "description": "`isort --check-only` will complain about import whitespace if the _file_ is missing a closing newline.\r\n\r\n``` python\r\ndef test_strict_whitespace_no_newline(capsys):\r\n    test_input = ('import os\\n'\r\n                  '\\n'\r\n                  'from django.conf import settings\\n'\r\n                  '\\n'\r\n                  'print(1)')\r\n    SortImports(file_contents=test_input, check=True)\r\n    out, err = capsys.readouterr()\r\n    assert out == ''  # valid imports, but AssertionError\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 714,
                "title": "improve skip_glob to eagerly ignore directories",
                "labels": [],
                "description": "At the moment one can use skip_glob to ignore folders. However, the ignore is evaluated lazily (meaning we look at each file and decide if it needs it or not). For folders that have a lot of file in it (e.g. ``.git``, or ``.tox`` folders) this becomes really slow. Ideally, if a directory matches the glob expression we should not look into that folder anymore entirely. "
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 639,
                "title": "Create mapping profile mapping",
                "labels": [
                    "enhancement"
                ],
                "description": "This is an issue to represent making mappings of common isort settings for different projects, for example the settings used within django and pyramid.\r\n\r\nThis first pass should simply be a document listing these settings in a text or markdown document.\r\nThere will then be a follow-up issue for providing a way to apply these profiles directly from the isort command line application"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 699,
                "title": "isort should support alphabetical-only sorting",
                "labels": [],
                "description": "I have some codebases where the naming conventions don't follow the expected constant/class/function naming patterns, so isort interleaves the imports weirdly when it tries to guess the type of an imported name based on its capitalisation.\r\n\r\nI would like to be able to (optionally) tell isort to do a pure alpha-sort."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 701,
                "title": "CLI flag outdated",
                "labels": [],
                "description": "```\r\n\u276f isort --version\r\n\r\n/#######################################################################\\\r\n\r\n     `sMMy`\r\n     .yyyy-                                                      `\r\n    ##soos##                                                    ./o.\r\n          `     ``..-..`         ``...`.``         `   ```` ``-ssso```\r\n     .s:-y-   .+osssssso/.     ./ossss+:so+:`    :+o-`/osso:+sssssssso/\r\n     .s::y-   osss+.``.``     -ssss+-.`-ossso`   ssssso/::..::+ssss:::.\r\n     .s::y-   /ssss+//:-.`   `ssss+     `ssss+   sssso`       :ssss`\r\n     .s::y-   `-/+oossssso/  `ssss/      sssso   ssss/        :ssss`\r\n     .y-/y-       ````:ssss`  ossso.    :ssss:   ssss/        :ssss.\r\n     `/so:`    `-//::/osss+   `+ssss+-/ossso:    /sso-        `osssso/.\r\n       \\/      `-/oooo++/-      .:/++:/++/-`      ..           `://++/.\r\n\r\n\r\n         isort your Python imports for you so you don't have to\r\n\r\n                            VERSION 4.3.4\r\n\r\n\\########################################################################/\r\n\r\n\r\n\u276f isort --help\r\nusage: isort [-h] [-a ADD_IMPORTS] [-ac] [-af] [-b KNOWN_STANDARD_LIBRARY]\r\n             [-c] [-ca] [-cs] [-d] [-df] [-ds] [-dt] [-e]\r\n             [-f KNOWN_FUTURE_LIBRARY] [-fas] [-fass] [-ff FROM_FIRST]\r\n             [-fgw [FORCE_GRID_WRAP]] [-fss] [-i INDENT] [-j JOBS] [-k]\r\n             [-l LINE_LENGTH] [-lai LINES_AFTER_IMPORTS]\r\n             [-lbt LINES_BETWEEN_TYPES] [-le LINE_ENDING] [-ls]\r\n             [-m {0,1,2,3,4,5}] [-nis] [-nlb NO_LINES_BEFORE] [-ns NOT_SKIP]\r\n             [-o KNOWN_THIRD_PARTY] [-ot] [-p KNOWN_FIRST_PARTY] [-q]\r\n             [-r REMOVE_IMPORTS] [-rc] [-s SKIP] [-sd DEFAULT_SECTION]\r\n             [-sg SKIP_GLOB] [-sl] [-sp SETTINGS_PATH] [-t FORCE_TO_TOP] [-tc]\r\n             [-up] [-v] [-vb] [--virtual-env VIRTUAL_ENV] [-vn]\r\n             [-w LINE_LENGTH] [-wl WRAP_LENGTH] [-ws] [-y]\r\n             [files [files ...]]\r\n```\r\n\r\n```\r\n-lbt LINES_BETWEEN_TYPES\r\n```\r\n\r\nDoes nothing. Is it because of https://github.com/timothycrosley/isort/blob/06b06b90d6639fac913601f5e9c0174b3ec0e005/CHANGELOG.md#424?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 659,
                "title": "Ability to setup `virtual_env` relative to `.isort.cfg` location",
                "labels": [],
                "description": "In our setup it is necessary to specify a location of a virtual environment relative to `.isort.cfg` file, but I cannot find the way to do it. It is obvious why I cannot use absolute path in `.isort.cfg` - this file lives in the repository. But when I specify relative path it treats it relative to the current working directory. So I simply cannot run `isort` from any directory except the root of the project, cause if I do so `isort` cannot find the virtual env and starts treating third party libraries as a first party ones."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 706,
                "title": "Only sort imports that are already at the top?",
                "labels": [],
                "description": "I'm working on a project where some imports are in the middle and they run code, so the order from them matters, but the imports at the top can be freely ordered. Is there a way to only order imports that are already at the top?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 708,
                "title": "Remove leading newlines.",
                "labels": [],
                "description": "Would be nice if isort could automatically remove any leading newlines at the top of the file, or at least offer a configuration option to do so.\r\n\r\nI've had cases where blank lines have been left behind as a result of global search&replacing, or just someone lazily throws their import in at the top of the file, tapping enter a few times in the process, and expecting isort to clean up their mess on file save.\r\n\r\nCurrently isort does nothing with leading newlines and is happy to have a whole block of whitespace before imports start.\r\n\r\nRelated to #630"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 710,
                "title": "Settings path CLI option",
                "labels": [],
                "description": "Hi @timothycrosley, I see that `isort` has a `-sp, --settings-path` option. Am I right if I say that it allows users to specify the configuration file path for `isort`? If yes, then it does not seem to work :confused:. I see that #170 was closed without saying the CLI option was implemented. Was it?\r\n\r\nI use it like this: `isort --settings-path config/isort.conf --check-only --recursive src`, but then the output does not match what I configured in this settings file (files that should be skipped aren't, etc.)"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 722,
                "title": "isort behavior different on linux vs osx",
                "labels": [],
                "description": "OSX:\r\n```bash\r\npipenv run isort server/portfolio_manager/management/commands/safe_migrate.py\r\n```\r\n\r\n```python\r\nfrom django.core.management import call_command\r\nfrom django.core.management.base import BaseCommand, CommandError\r\n\r\nfrom db_mutex import DBMutexError, DBMutexTimeoutError\r\nfrom db_mutex.db_mutex import db_mutex\r\n```\r\n\r\nUbuntu 16.04:\r\n```bash\r\npipenv run isort server/portfolio_manager/management/commands/safe_migrate.py\r\n```\r\n\r\n```python\r\nfrom db_mutex import DBMutexError, DBMutexTimeoutError\r\nfrom db_mutex.db_mutex import db_mutex\r\nfrom django.core.management import call_command\r\nfrom django.core.management.base import BaseCommand, CommandError\r\n```\r\n\r\nPerhaps there is a setting that would force OSX to behave like ubuntu that I'm missing?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 673,
                "title": "isort removes empty lines from the end of the file",
                "labels": [],
                "description": "Even though it is nonstandard, I like having a single empty line at the end of my python files. `isort` removes it with the default settings, and I haven't found a way to change this behavior."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 711,
                "title": "isort doesn't seem to respect dunders",
                "labels": [],
                "description": "This is not breaking, but does definitely prevent me from adding this to any automated process.\r\n\r\nBasically, isort doesn't seem to respect the positioning of dunders. Take the following code for example:\r\n```python\r\nfrom __future__ import absolute_imports\r\n\r\n__all__ = [\r\n    \"SomeClass\",\r\n]\r\n\r\nimport os\r\nimport sys\r\n\r\nclass SomeClass(object):\r\n    ...\r\n```\r\n\r\n[According to PEP8](https://www.python.org/dev/peps/pep-0008/#module-level-dunder-names), dunders should come immediately after `__future__` imports, which it does in this case. After running isort, dunders will be moved to after the import block.\r\n\r\n```python\r\nfrom __future__ import absolute_imports\r\n\r\nimport os\r\nimport sys\r\n\r\n\r\n__all__ = [\r\n    \"SomeClass\",\r\n]\r\n\r\n\r\nclass SomeClass(object):\r\n    ...\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 721,
                "title": "Make \"first party\" take priority when import matches both first party and another section?",
                "labels": [],
                "description": "Example - the local package is `foo_bar`, but there are more similarly named packages, `foo_a`, `foo_b` and `foo_c` that we'd like to separate into a group:\r\n\r\n```ini\r\nsections=FOO,FIRSTPARTY\r\nknown_firstparty=foo_bar\r\nknown_foo=foo_*\r\n```\r\n\r\nand the desired result is\r\n\r\n```python\r\nfrom foo_a import a\r\nfrom foo_b import b\r\nfrom foo_c import c\r\n\r\nfrom foo_bar import x\r\n```\r\n\r\nHowever they all get mashed into one \"foo\" group because foo_bar matches its wildcard:\r\n\r\n```python\r\nfrom foo_a import a\r\nfrom foo_b import b\r\nfrom foo_bar import x\r\nfrom foo_c import c\r\n```\r\n\r\nIs there a way to tell it for the first party to \"take priority\" somehow?\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 758,
                "title": "isort messes up pylint tags",
                "labels": [],
                "description": "This\r\n```\r\nfrom time import (loong, looong, looonger,  # pylint: disable=E0611\r\n                  looongest, muchlooonger,  # pylint: disable=E0611\r\n                  evenloooooooooooooonger)  # pylint: disable=E0611\r\n```\r\nbecomes\r\n```\r\nfrom time import \\\r\n    evenloooooooooooooonger  # pylint: disable=E0611; pylint: disable=E0611; pylint: disable=E0611\r\nfrom time import loong, looong, looonger, looongest, muchlooonger\r\n\r\n```\r\n\r\nafter `isort`. As a consequence, pylint finds errors it did not find before:\r\n\r\n```\r\nC:\\Work\\Desktop>pylint --disable=R,C,W bug.py & isort bug.py -d > out.py & pylint --disable=R,C,W out.py\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n\r\n************* Module out\r\nout.py:1:0: E0611: No name 'evenloooooooooooooonger' in module 'time' (no-name-in-module)\r\n\r\n----------------------------------------------------------------------\r\nYour code has been rated at -15.00/10 (previous run: -15.00/10, +0.00)\r\n```\r\n\r\n[bug.py.txt](https://github.com/timothycrosley/isort/files/2464362/bug.py.txt)\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 679,
                "title": "# NOQA is not honoured",
                "labels": [],
                "description": "```\r\n$ cat main.py \r\n\r\nimport os\r\n\r\nimport requests\r\nimport ujson  # NOQA\r\n\r\nimport foo\r\n\r\n$ touch foo.py\r\n$ isort --diff main.py \r\n--- /tmp/bar/main.py:before\t2018-02-20 15:58:49.566743\r\n+++ /tmp/bar/main.py:after\t2018-02-20 16:00:04.680267\r\n@@ -2,6 +2,6 @@\r\n import os\r\n \r\n import requests\r\n-import ujson  # NOQA\r\n \r\n import foo\r\n+import ujson  # NOQA\r\n```\r\nI.e. I would expect the NOQA line not to be touched at all.\r\n\r\nThe system info:\r\n```\r\n$ cat /etc/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=16.04\r\nDISTRIB_CODENAME=xenial\r\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.3 LTS\"\r\n$ python --version\r\nPython 3.6.4\r\n$ pip freeze\r\ncertifi==2018.1.18\r\nchardet==3.0.4\r\nidna==2.6\r\nisort==4.3.4\r\nrequests==2.18.4\r\nujson==1.35\r\nurllib3==1.22\r\n```\r\n\r\nThanks!"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 755,
                "title": "Isort should never suggest fixes that exceeds the specified line length",
                "labels": [],
                "description": "In all of the cases below, isort suggests a fix that succeeds the maximum line length:\r\n\r\n**Test case 1**\r\nSource (exceeds default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils import foo_abcdefghijklmnopqrstuvxyz\r\nfrom third_party.platform.utilities.foo_utils import bar_abcdefghijklmnopqrstuvxyz\r\n```\r\n\r\nOutput (exceeds default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils import (bar_abcdefghijklmnopqrstuvxyz,\r\n                                                      foo_abcdefghijklmnopqrstuvxyz)\r\n```\r\n\r\n**Test case 2**\r\nSource (dos **NOT** exceed default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils import (\r\n    foo_abcdefghijklmnopqrstuvxyz,\r\n    bar_abcdefghijklmnopqrstuvxyz\r\n)\r\n```\r\n\r\nOutput (exceeds default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils import (bar_abcdefghijklmnopqrstuvxyz,\r\n                                                      foo_abcdefghijklmnopqrstuvxyz)\r\n```\r\n\r\n**Test case 3**\r\nSource (exceeds default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils.even.deeper.nested.library import foo_abcdefghijklmnopqrstuvxyz\r\n```\r\n\r\nOutput (exceeds default line length):\r\n```\r\nfrom third_party.platform.utilities.foo_utils.even.deeper.nested.library import \\\r\n    foo_abcdefghijklmnopqrstuvxyz\r\n```\r\n\r\nIn case isort suggests a fix that exceeds the specified line length, and there is no other fallback method / fix that isort can pull out of the hat: fail with an exception instead of continuing, or else subsequent code style tests fails due to the long lines. "
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 757,
                "title": "Import from collections.abc to avoid deprecation warning",
                "labels": [],
                "description": "Fixes #756"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 756,
                "title": "DeprecationWarning regarding collections.abc",
                "labels": [],
                "description": "Pytest reports the following deprecation warnings about isort 4.3.4 under Python 3.7:\r\n\r\n```\r\n/usr/local/lib/python3.7/site-packages/isort/pie_slice.py:362: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  class OrderedSet(collections.MutableSet):\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 751,
                "title": "isort incorrectly processed my code",
                "labels": [],
                "description": "Original code:\r\n~~~py\r\n# -*- coding: utf-8 -*-\r\n\r\n# Define your item pipelines here\r\n#\r\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\r\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\r\nfrom datetime import datetime\r\nfrom .items import WeiboMblogItem\r\n\r\nclass WeiboMblogPipeline(object):\r\n    def process_item(self, item, spider):\r\n        if isinstance(item, WeiboMblogItem):\r\n            item = self._process_item(item, spider)\r\n        return item\r\n\r\n    def _process_item(self, item, spider):\r\n        item['inserted_at'] = datetime.now()\r\n        return item\r\n~~~\r\n\r\nSorted code:\r\n~~~py\r\n# -*- coding: utf-8 -*-\r\n\r\n\r\nclass WeiboMblogPipeline(object):\r\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\r\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\r\nfrom datetime import datetime\r\n\r\n# Define your item pipelines here\r\n#\r\nfrom .items import WeiboMblogItem\r\n\r\n    def process_item(self, item, spider):\r\n        if isinstance(item, WeiboMblogItem):\r\n            item = self._process_item(item, spider)\r\n        return item\r\n\r\n    def _process_item(self, item, spider):\r\n        item['inserted_at'] = datetime.now()\r\n        return item\r\n~~~\r\n\r\nisort version: 4.3.4\r\nOS: macOS 10.13\r\nPython: 3.6.6"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 754,
                "title": "Skip files that look like an editor's backup file",
                "labels": [],
                "description": "Fixes #748"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 609,
                "title": "Sort statements by package name, ignore \u2018import\u2019 vs \u2018from \u2026 import\u2019",
                "labels": [],
                "description": "A sensible ordering for import statements is alphanumerically by the *package* name. This should ignore whether the statement is \u2018import\u2019 or \u2018from \u2026 import\u2019.\r\n\r\nCurrently, ISort insists on separating \u2018import\u2019 versus \u2018from \u2026 import\u2019, resulting in statements that jumble the sequence of package names:\r\n\r\n```python\r\nimport apidiscing\r\nimport euismod\r\nfrom dolor import consecteur\r\nfrom ex import metus\r\n```\r\n\r\nInstead, ISort should order these statements by the package name:\r\n\r\n```python\r\nimport apidiscing\r\nfrom dolor import consecteur\r\nimport euismod\r\nfrom ex import metus\r\n```\r\n\r\nThere does not seem to be any combination of ISort settings that will obey this sequence.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 753,
                "title": "Update EditorConfig URL to use https://",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 748,
                "title": "isort checks files with extension.py~ if they have \"#!... python\"",
                "labels": [],
                "description": "Steps to reproduce:\r\n\r\nCreate a file \"test.py~\" with:\r\n\r\n    #!/usr/bin/env python\r\n    import foo\r\n    import bar\r\n\r\nExecute isort -c\r\nExpected result - test.py~ is ignored because it ends with ~ since that extension is often used by editors when they save files.\r\nActual result - the file appears as \"Imports are incorrectly sorted\"\r\n\r\nI'm guessing isort is now doing some detecting of shell scripts which are Python code, perhaps this logic can be special cased to ignore certain file endings?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 743,
                "title": "PyPI's configparser confuses _get_config_data()",
                "labels": [],
                "description": "Some people use https://pypi.org/project/configparser/. Don't ask (I didn't).\r\n\r\nCurrently, `settings.py` handles this new twist well for the import (it tries `configparser` before `ConfigParser`). Inside `_get_config_data()`, though, it looks at the Python interpreter's version. This will break on 2.7 with configparser, because now you have a third-party module with the 3.5 API. And that means that you'll get\r\n\r\n```\r\n    config = configparser.SafeConfigParser()\r\nAttributeError: 'module' object has no attribute 'SafeConfigParser'\r\n```\r\nwhich makes sense, because the 3.5 API only has `ConfigParser()`. \r\n\r\nPerhaps `_get_config_data()` should look at the methods on configparser. Or perhaps the import order should be changed at the top.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 745,
                "title": "How to use known_django as an argument?",
                "labels": [],
                "description": "I want to use something like this\r\n```\r\nknown_django=django\r\nsections=FUTURE,STDLIB,DJANGO,THIRDPARTY,LOCALFOLDER\r\n```\r\nfrom `.isort.cfg` in args format to setup isort in vscode\r\n\r\nTry many options not working.\r\n\r\nThank."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 744,
                "title": "farmhash is not sorted as a third party",
                "labels": [],
                "description": "The [Farmhash library](https://pypi.org/project/pyfarmhash/) get installed as `/usr/local/lib/python3.6/site-packages/farmhash.cpython-36m-x86_64-linux-gnu.so` on my machine. But `isort` won't see that it's a third party.\r\n\r\nI think this is due to this code:\r\nhttps://github.com/timothycrosley/isort/blob/fcd80d46e66179f9464c2df745ffed07622d9ee3/isort/isort.py#L315\r\nwhich would only find\r\n - `/usr/local/lib/python3.6/site-packages/farmhash.so`\r\n - `/usr/local/lib/python3.6/site-packages/farmhash.py`\r\n - `/usr/local/lib/python3.6/site-packages/farmhash`\r\n\r\nI'm not sure how the import solver finds it, but I think that `isort` could be as smart."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 593,
                "title": "Add more verbose explanation for diff option",
                "labels": [],
                "description": "After upgrading isort version, it now wants to insert an empty line between two first-party modules. It would be useful to be able to get an explanation on why it wants to do this."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 740,
                "title": "isort doesn't recognize cpython compiled libraries properly",
                "labels": [],
                "description": "the check at https://github.com/timothycrosley/isort/blob/develop/isort/isort.py#L316 tests for `<name>.py` or `<name>.so`.\r\n\r\nBut in Python 3, compiled modules are named something like `<name>.cpython-36m-x86_64-linux-gnu.so`. Also IIRC Windows use \".pyd\" extension, so I assume this never worked there?\r\n\r\nThe correct suffix can be read from `sysconfig.get_config_var(\"EXT_SUFFIX\")`.\r\n\r\n\r\nas a complete aside: i assume there is a good reason, but why won't isort simply import the name and use the `__file__` property?"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 592,
                "title": "Add ability to provide a custom sorting key",
                "labels": [],
                "description": "Feature request. \r\n\r\nCanned example:\r\n\r\n```\r\n# third_party_module.py\r\nkB = 1000\r\nKiB = 1024\r\nMiB = 1048576\r\n```\r\n\r\nI want this: \r\n\r\n```\r\n# my_module.py\r\nfrom third_party_module import kB\r\nfrom third_party_module import KiB\r\nfrom third_party_module import MiB\r\n```\r\n\r\n`isort` insists this\r\n\r\n```\r\n# my_module.py\r\nfrom third_party_module import KiB\r\nfrom third_party_module import MiB\r\nfrom third_party_module import kB\r\n```\r\n\r\npresumably it's trying to group CONSTANTS, Classes, functions by naming conventions.  \r\n\r\nCan you provide a way for user to customize the sort key?  This feature would provide a generic solution to get e.g. case-insensitivity, [natural sorting](https://pypi.python.org/pypi/natsort), or whatever other exotic custom use-cases.  \r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 742,
                "title": "multiple test failures (replay of #583?)",
                "labels": [],
                "description": "\r\n    def test_long_line_comments():\r\n        \"\"\"Ensure isort correctly handles comments at the end of extremely long lines\"\"\"\r\n        test_input = (\"from foo.utils.fabric_stuff.live import check_clean_live, deploy_live, sync_live_envdir, \"\r\n                      \"update_live_app, update_live_cron  # noqa\\n\"\r\n                      \"from foo.utils.fabric_stuff.stage import check_clean_stage, deploy_stage, sync_stage_envdir, \"\r\n                      \"update_stage_app, update_stage_cron  # noqa\\n\")\r\n>       assert SortImports(file_contents=test_input).output == \\\r\n                    (\"from foo.utils.fabric_stuff.live import (check_clean_live, deploy_live,  # noqa\\n\"\r\n                     \"                                         sync_live_envdir, update_live_app, update_live_cron)\\n\"\r\n                     \"from foo.utils.fabric_stuff.stage import (check_clean_stage, deploy_stage,  # noqa\\n\"\r\n                     \"                                          sync_stage_envdir, update_stage_app, update_stage_cron)\\n\")\r\nE       AssertionError: assert 'from foo.uti...stage_cron)\\n' == 'from foo.util...stage_cron)\\n'\r\nE         Skipping 145 identical leading characters in diff, use -v to show\r\nE         + _live_app, update_live_cron)\r\nE         - _live_app,\r\nE         -                                          update_live_cron)\r\nE         - from foo.utils.fabric_stuff.stage import (check_clean_stage,  # noqa\r\nE         + from foo.utils.fabric_stuff.stage import (check_clean_stage, deploy_stage,  # noqa\r\nE         ?                                                              ++++++++++++++...\r\nE         \r\nE         ...Full output truncated (5 lines hidden), use '-vv' to show\r\n\r\ntest_isort.py:1349: AssertionError\r\n\r\n---\r\n\r\n    def test_import_case_produces_inconsistent_results_issue_472():\r\n        \"\"\"Test to ensure sorting imports with same name but different case produces the same result across platforms\"\"\"\r\n        test_input = ('from sqlalchemy.dialects.postgresql import ARRAY\\n'\r\n                      'from sqlalchemy.dialects.postgresql import array\\n')\r\n        assert SortImports(file_contents=test_input, force_single_line=True).output == test_input\r\n    \r\n        test_input = 'from scrapy.core.downloader.handlers.http import HttpDownloadHandler, HTTPDownloadHandler\\n'\r\n>       assert SortImports(file_contents=test_input).output == test_input\r\nE       AssertionError: assert 'from scrapy....oadHandler)\\n' == 'from scrapy.c...loadHandler\\n'\r\nE         Skipping 39 identical leading characters in diff, use -v to show\r\nE         + tp import HttpDownloadHandler, HTTPDownloadHandler\r\nE         - tp import (HttpDownloadHandler,\r\nE         -                                                   HTTPDownloadHandler)\r\n\r\ntest_isort.py:2139: AssertionError\r\n\r\n\r\n    def test_no_extra_lines_issue_557():\r\n        \"\"\"Test to ensure no extra lines are prepended\"\"\"\r\n        test_input = ('import os\\n'\r\n                      '\\n'\r\n                      'from scrapy.core.downloader.handlers.http import HttpDownloadHandler, HTTPDownloadHandler\\n')\r\n        expected_output = ('import os\\n'\r\n                           'from scrapy.core.downloader.handlers.http import HttpDownloadHandler, HTTPDownloadHandler\\n')\r\n>       assert SortImports(file_contents=test_input, force_alphabetical_sort=True,\r\n                           force_sort_within_sections=True).output == expected_output\r\nE       AssertionError: assert 'import os\\nf...oadHandler)\\n' == 'import os\\nfr...loadHandler\\n'\r\nE         Skipping 49 identical leading characters in diff, use -v to show\r\nE         + tp import HttpDownloadHandler, HTTPDownloadHandler\r\nE         - tp import (HttpDownloadHandler,\r\nE         -                                                   HTTPDownloadHandler)\r\n\r\ntest_isort.py:2205: AssertionError\r\n\r\n---\r\n\r\nAgain, this happens with Python 2.7.15 and 3.6.6, using the 4.3.4 release from PyPI--but the offending tests pass with the GitHub tarball release, so I don't consider this a big deal.\r\n\r\nI haven't tracked down the specific difference that triggers these failures, but it would be nice to have a PyPI release that passed all tests..."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 630,
                "title": "Should there be a newline added between shebang and imports?",
                "labels": [],
                "description": "I've noticed that this code doesn't get changed when you run `isort`:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\nimport this\r\n```\r\n\r\nI feel like adding a newline between the shebang and import improves readability."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 741,
                "title": "TypeError: '>' not supported between instances of 'int' and 'str' when -wl option is used",
                "labels": [],
                "description": "With this as the contents of file.py:\r\n\r\n```\r\nfrom longimportedmodule.modulepath import (first_thing_to_get,\r\n                                           second_thing_to_get)\r\n```\r\n\r\nRunning `isort -wl 79 file.py` with isort 4.3.4 on python 3.6.4 I get this stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/dan/.pyenv/versions/dpw3/bin/isort\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/main.py\", line 343, in main\r\n    sort_attempt = SortImports(file_name, **arguments)\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/isort.py\", line 163, in __init__\r\n    self._add_formatted_imports()\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/isort.py\", line 573, in _add_formatted_imports\r\n    self._add_from_imports(from_modules, section, section_output, sort_ignore_case)\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/isort.py\", line 502, in _add_from_imports\r\n    import_statement = self._multi_line_reformat(import_start, from_import_section, comments)\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/isort.py\", line 519, in _multi_line_reformat\r\n    dynamic_indent, indent, line_length, comments)\r\n  File \"/Users/dan/.pyenv/versions/3.6.4/envs/dpw3/lib/python3.6/site-packages/isort/isort.py\", line 662, in _output_grid\r\n    if len(next_statement.split(self.line_separator)[-1]) + 1 > line_length:\r\nTypeError: '>' not supported between instances of 'int' and 'str'\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 737,
                "title": "isort does not support unix paths in config when run on Windows",
                "labels": [],
                "description": "The following config does not work on Windows \r\n```ini\r\n[isort]\r\nskip=tests/test_config.py,tests/test_integration.py\r\n```\r\n\r\nI raised this previously as https://github.com/timothycrosley/isort/issues/419 , and it doesnt appear to work for 4.2.8, or 4.3, or in latest.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 698,
                "title": "README incorrectly claims that isort sorts alphabetically",
                "labels": [],
                "description": "It, in fact, sorts by the type being imported (inferred from the naming) and then alphabetically within each of those types.\r\n\r\nThis isn't a problem per-se, but did just lead to some confusion when trying to work out why I was getting particularly output; I had to examine the isort code to work out what the expected behaviour was."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 680,
                "title": "Failed to parse .editorconfig with 'root' keyword",
                "labels": [],
                "description": "An .editorconfig file may  contains the 'root' keyword on global section like,\r\n\r\n```\r\n# .editorconfig\r\n\r\n# root keyword in global section\r\nroot = true \r\n\r\n[*]\r\n...\r\n```\r\nas shown in http://editorconfig.org.\r\n`isort` cannot parse the file properly and raises an error such as\r\n\r\n```\r\n  (snipped...)\r\n    File \"/Users/ikeno/.pyenv/versions/3.6.4/envs/neovim3/lib/python3.6/site-packages/isort/isort.py\", line 64, in __init__\r\n    self.config = settings.from_path(settings_path).copy()\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/envs/neovim3/lib/python3.6/site-packages/isort/settings.py\", line 147, in from_path\r\n    _update_settings_with_config(path, '.editorconfig', '~/.editorconfig', ('*', '*.py', '**.py'), computed_settings)\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/envs/neovim3/lib/python3.6/site-packages/isort/settings.py\", line 171, in _update_settings_with_config\r\n    _update_with_config_file(editor_config_file, sections, computed_settings)\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/envs/neovim3/lib/python3.6/site-packages/isort/settings.py\", line 175, in _update_with_config_file\r\n    settings = _get_config_data(file_path, sections).copy()\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/envs/neovim3/lib/python3.6/site-packages/isort/settings.py\", line 238, in _get_config_data\r\n    config.read_file(config_file)\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/lib/python3.6/configparser.py\", line 718, in read_file\r\n    self._read(f, source)\r\n  File \"/Users/ikeno/.pyenv/versions/3.6.4/lib/python3.6/configparser.py\", line 1080, in _read\r\n    raise MissingSectionHeaderError(fpname, lineno, line)\r\nconfigparser.MissingSectionHeaderError: File contains no section headers.\r\nfile: '/Users/ikeno/.editorconfig', line: 3\r\n'root = true\\n'\r\n```\r\n\r\nIs there any workaround for this problem?\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 681,
                "title": "noqa line not ignored",
                "labels": [],
                "description": "The code below gives an error about the line `import app.models` But I think it should be OK because of the noqa comment above. This is with the setting `known_third_party = django\r\n`\r\n\r\nWhen using django we need to call django.setup() before importing any models. This is used a lot in standalone scripts. So this pattern is very common.\r\n\r\n```python\r\n#!/usr/bin/env python\r\nfrom __future__ import print_function\r\n\r\nimport django\r\ndjango.setup()  # noqa\r\n\r\nimport app.models\r\n\r\n\r\ndef main():\r\n    app.models.objects.get(id=1)\r\n    print('Hello')\r\n```\r\n\r\nPutting import/setup on one line:\r\n\r\n```python\r\nimport django; django.setup()  # noqa\r\n```\r\n\r\ngives the same error.\r\n\r\nI think when it's on one line, like the above isort, does not recognize it as a 3rd party library."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 689,
                "title": "Rename abbreviation of --REMOVE-IMPORTS from -r to -ri, -rm or another name",
                "labels": [],
                "description": "For example, here is a project with some modules:\r\n\r\n```\r\n a.py\r\n b.py\r\n test.py\r\n __init__.py\r\n```\r\n\r\nHere is the test.py:\r\n\r\n```\r\nfrom . import a\r\nfrom . import b\r\n```\r\n\r\nRunning `isort -r .` ends with missing those lines and causing ImportError.\r\nThough there is a comfirmation before deletion.\r\n\r\nPeople used to treat `-r` as `--recursive` instead of `--remove`.\r\nMaybe it's safer and more friendly to users."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 599,
                "title": "'check' in setup.cfg not functioning?",
                "labels": [],
                "description": "Hi,\r\n\r\nI've been trying to move a configuration over from the command line options specified here:\r\n`isort --check-only --diff --multi-line 3 --verbose --recursive --line-width 79`\r\n\r\ninto this `setup.cfg` configuration:\r\n```\r\n[isort]\r\ncheck = True\r\nshow_diff = True\r\nmulti_line_output = 3\r\nrecursive = True\r\nverbose = True\r\nline_length = 79\r\n```\r\n\r\nEverything seems to have parity except for `check` vs `--check-only`. Using `--check-only` will result in errors (such as line length) being printed, while setting `check = True` does not.\r\n\r\nisort version: 4.2.15\r\npython version: 2.7.6"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 690,
                "title": "Don't skip __init__.py by default",
                "labels": [],
                "description": "Hi!\r\n\r\nisort's `skip` list includes `__init__.py` by default, which we hadn't realised until now (after two years of using isort). I think it makes sense for isort to not do this, and let people explicitly set which files they want to skip - to reduce confusion and increase coverage (I would imagine most people would want all files consistently sorted).\r\n\r\nSee also #183.\r\n\r\nThoughts? :-)"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 691,
                "title": "Comment lines removed when file is sorted",
                "labels": [],
                "description": "When isort is run on this file (via `isort --dont-skip '__init__.py' treeherder/__init__.py`), it unexpectedly removes the two comment lines highlighted here:\r\nhttps://github.com/mozilla/treeherder/blob/addd73c8631ee2c005a0139bf0a88fabe3c6a24b/treeherder/__init__.py#L2-L3\r\n\r\nResulting in:\r\n```python\r\nimport os\r\n\r\nfrom .celery import app as celery_app  # noqa\r\n\r\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\r\n\r\n\r\ndef path(*subdirectories):\r\n    return os.path.join(PROJECT_DIR, *subdirectories)\r\n```\r\n\r\nThis is using isort 4.3.4 under Python 2.7.14."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 713,
                "title": "respect the XDG_CONFIG_HOME environment variable",
                "labels": [],
                "description": "An increasing number of projects are starting to respect the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) and it would be awesome if isort did that too!\r\n\r\nBasically, this means to check for the environment variable XDG_CONFIG_HOME. If it exists, make your configuration file relative to that (`${XDG_CONFIG_HOME}/isort/`). If it does not exist, make your configuration file relative to `~/.config/isort/`"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 594,
                "title": "Incorrect grouping of from ... import ...",
                "labels": [],
                "description": "**Version:** isort 4.2.9\r\n\r\nIsort incorrectly places `from six.moves import range` in a the package group, but correctly places `from six import add_metaclass` in the third party group. The following is from a package named `treecat`:\r\n```py\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport itertools\r\nimport logging\r\nfrom abc import ABCMeta\r\nfrom abc import abstractmethod\r\n\r\nimport numpy as np\r\nfrom scipy.special import gammaln\r\nfrom six import add_metaclass\r\n\r\nfrom six.moves import range  # <------------ This import is in the wrong group.\r\nfrom treecat.structure import OP_IN\r\nfrom treecat.structure import OP_OUT\r\nfrom treecat.structure import OP_ROOT\r\nfrom treecat.structure import OP_UP\r\nfrom treecat.structure import TreeStructure\r\nfrom treecat.structure import estimate_tree\r\nfrom treecat.structure import make_propagation_program\r\nfrom treecat.structure import sample_tree\r\nfrom treecat.util import SERIES\r\nfrom treecat.util import TODO\r\nfrom treecat.util import jit\r\nfrom treecat.util import parallel_map\r\nfrom treecat.util import profile\r\nfrom treecat.util import sample_from_probs\r\nfrom treecat.util import set_random_seed\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 718,
                "title": "Problem with spaces when using Pylint pragmas",
                "labels": [],
                "description": "## Observed behavior:\r\nWhen using pylint pragmas such as `# pylint: disable=relative-import` in the same line as the imports, Isort wants two spaces before the pragma and produces the error message, `Imports are incorrectly sorted` for the following lines:\r\n\r\n```python\r\nimport a # pylint: disable=relative-import\r\nfrom b import c # pylint: disable=relative-import\r\nfrom x import y # pylint: disable=relative-import\r\n``` \r\nThe error log and diff:\r\n```bash\r\nERROR: /home/dev/test.py Imports are incorrectly sorted.\r\n--- /home/dev/test.py:before\t2018-07-10 18:30:00.551178\r\n+++ /home/dev/test.py:after\t2018-07-10 18:30:04.896646\r\n@@ -1,3 +1,3 @@\r\n-import a # pylint: disable=relative-import\r\n-from b import c # pylint: disable=relative-import\r\n-from x import y # pylint: disable=relative-import\r\n+import a  # pylint: disable=relative-import\r\n+from b import c  # pylint: disable=relative-import\r\n+from x import y  # pylint: disable=relative-import\r\n```\r\n\r\n## Expected behavior:\r\n~Isort should not consider the whitespaces post the import statement (`ignore_whitespace` can be set to `true` here but still whitespaces after the import statement should not be taken into account) if possible.~\r\nThe error message for this case, where the diffs differ in whitespaces, should be different from `Imports are incorrectly sorted` since the imports are actually in the correct order.\r\n\r\n## Versions:\r\nPython: 2.7.12\r\nIsort: 4.2.15 (Also, tested this on 4.3.4 and observed the same behavior)\r\n\r\nThanks!"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 606,
                "title": "\"import x as y\" lost",
                "labels": [],
                "description": "running isort on \r\n```\r\nimport os\r\nimport os as _os\r\n```\r\nresults in\r\n```\r\nimport os as _os\r\n```\r\n\r\nRan into this problem in a large file that imported the same thing twice in different places with different names. Appreciate that this is bad code, but it would only be obvious after sorting, and isort breaks it."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 670,
                "title": "Add full-string ignoring type of import to force-sort-within-sections option",
                "labels": [],
                "description": "For example, i try ordering imports in test file with ignoring import type (option `--force-sort-within-sections`). Python file: \r\n```\r\n# cat test.py\r\nfrom webob import exc\r\nimport mock\r\nimport os\r\nimport bb\r\nfrom aa.aa.aa import aa\r\nfrom aa import bb\r\n```\r\nI run command: `isort --stdout --force-sort-within-sections test.py` and as a result i see:\r\n```\r\nimport os\r\n\r\nimport mock\r\nfrom webob import exc\r\n\r\nfrom aa import bb\r\nfrom aa.aa.aa import aa\r\nimport bb\r\n```\r\nBut if the isort really ignores the type of import in the entire line, i expect to see in last three lines:\r\n```\r\nfrom aa.aa.aa import aa\r\nfrom aa import bb\r\nimport bb\r\n```\r\nBecause: `aa.bb > aa.aa.aa.aa`\r\nThis sorting style without the import type, for example, is used in Openstack: https://docs.openstack.org/hacking/latest/user/hacking.html#imports"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 646,
                "title": "there could be an error message making clear that imports are missing",
                "labels": [],
                "description": "when displaying a diff of missing imports the only error message printed is\r\n\"ERROR: {0} Imports are incorrectly sorted.\"\r\n\r\nit would be nice if \r\n\"ERROR: {0} Missing imports.\"\r\nwas printed in this case"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 586,
                "title": "Package installed as egg isn't detected as third-party",
                "labels": [],
                "description": "Hi.\r\n\r\nIn Python shell:\r\n\r\n    >>> import sniper\r\n    >>> sniper\r\n    <module 'sniper' from '/home/xxx/envs/test-my-env/lib/python3.6/site-packages/sniper-0.0.5-py3.6.egg/sniper/__init__.py'>\r\n\r\nIn shell:\r\n\r\n    ->  file /home/xxx/envs/test-my-env/lib/python3.6/site-packages/sniper-0.0.5-py3.6.egg\r\n    ../envs/test-my-env/lib/python3.6/site-packages/sniper-0.0.5-py3.6.egg: Zip archive data, at least v2.0 to extract\r\n\r\n`sniper` is installed as an egg package, and when isort see `import sniper`, it doesnot detect `sniper` as a third-party package which lead to an error when run `isort -c`.\r\n\r\nWhen I install `sniper` as a module, the isort error is gone."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 584,
                "title": "Bug: add_imports by .editorconfig",
                "labels": [],
                "description": "In my .editorconfig i added this:\r\n```\r\nadd_imports = from __future__ import print_function, absolute_import, unicode_literals\r\n```\r\n\r\nThis will be result in adding this:\r\n```\r\nfrom __future__ import print_function\r\n\r\nimport absolute_import\r\nimport unicode_literals\r\n``` \r\n:)\r\n\r\nWork-a-round is this:\r\n```\r\nadd_imports = from __future__ import print_function, from __future__ import absolute_import, from __future__ import unicode_literals\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 582,
                "title": "not_skip doesn't seem to be honoured",
                "labels": [],
                "description": "AFAICT, despite being [documented](https://github.com/timothycrosley/isort/wiki/isort-Settings#full-reference-of-isort-settings) there isn't any code to support it."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 581,
                "title": "encoding error in windows",
                "labels": [],
                "description": "OS: windows10 64bit(locale is japanese)\r\npython: 3.6.2(installed by chocolatey)\r\n\r\ninstall isort `pip install isort`. and make test project folder and run isort.\r\nthen I get below error messages.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\python36\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\python36\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Python36\\Scripts\\isort.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\python36\\lib\\site-packages\\isort\\main.py\", line 264, in main\r\n    config = from_path(os.path.abspath(file_names[0]) or os.getcwd()).copy()\r\n  File \"c:\\python36\\lib\\site-packages\\isort\\settings.py\", line 139, in from_path\r\n    _update_settings_with_config(path, '.editorconfig', '~/.editorconfig', ('*', '*.py', '**.py'), computed_settings)\r\n  File \"c:\\python36\\lib\\site-packages\\isort\\settings.py\", line 163, in _update_settings_with_config\r\n    _update_with_config_file(editor_config_file, sections, computed_settings)\r\n  File \"c:\\python36\\lib\\site-packages\\isort\\settings.py\", line 167, in _update_with_config_file\r\n    settings = _get_config_data(file_path, sections).copy()\r\n  File \"c:\\python36\\lib\\site-packages\\isort\\settings.py\", line 222, in _get_config_data\r\n    line = config_file.readline()\r\nUnicodeDecodeError: 'cp932' codec can't decode byte 0x99 in position 73: illegal multibyte sequence\r\n```\r\n\r\nhow to fix it? Please.\r\n\r\non the other hand,in bash on windows, isort works correctly."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 579,
                "title": "Modules on separate lines, but symbols on same line",
                "labels": [],
                "description": "I would like isort to put imports of modules on separate lines, but imports of symbols (from a module) to stay on the same line:\r\n```\r\nfrom typing import Dict, List\r\n\r\nfrom . import baz\r\nfrom . import foo\r\n```\r\n\r\nFrom what I can tell, there is no way to currently configure that. If so, would a configuration setting that adds this be welcome?\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 577,
                "title": "Inconsistent sorting order for relative import",
                "labels": [],
                "description": "The default sorting order `isort` recommends for relative imports is inconsistent.\r\n\r\nGiven a sequence of import statements:\r\n\r\n```python\r\nfrom . import lorem\r\nfrom . import ipsum\r\nfrom .dolor import consecteur\r\nfrom .sit import apidiscing\r\nfrom .. import donec\r\nfrom .. import euismod\r\nfrom ..mi import iaculis\r\nfrom ..nec import tempor\r\nfrom ... import diam\r\nfrom ... import dui\r\nfrom ...eu import dignissim\r\nfrom ...ex import metus\r\n```\r\n\r\n`isort` recommends an inconsistent sort order:\r\n\r\n```python\r\nfrom . import (ipsum, lorem)\r\nfrom .. import (donec, euismod)\r\nfrom ... import (diam, dui)\r\nfrom ...eu import dignissim\r\nfrom ...ex import metus\r\nfrom ..mi import iaculis\r\nfrom ..nec import tempor\r\nfrom .dolor import consecteur\r\nfrom .sit import apidiscing\r\n```\r\n\r\nThe sort order recommended should not reverse from \u201cincreasing number of dots\u201d to \u201cdecreasing number of dots\u201d. It should montonically increase or decrease.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 576,
                "title": "isort removes comments between imports",
                "labels": [],
                "description": "If the following code is processed with isort the comment is removed.\r\n\r\n```python\r\nimport distutils\r\n# this comment is important and should not be removed \r\nfrom sys import api_version as api_version\r\n```\r\n\r\nThis was reported in https://github.com/coala/coala-bears/issues/1929 as we use isort through coala. \r\n\r\nI'm not even sure what the intended behavior is here, since sorting imports with comments could raise all kinds of problems, but removing them seems wrong too. \r\n\r\nHave you thought about this problem yet? "
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 575,
                "title": "Can't handle backslash and bracket",
                "labels": [],
                "description": "I have found a following imports that can't be automatically sorted:\r\n\r\n```python\r\nfrom sympy import S, pi, GoldenRatio as phi, sqrt\r\nfrom sympy.ntheory.continued_fraction import \\\r\n    (continued_fraction_periodic as cf_p,\r\n     continued_fraction_iterator as cf_i,\r\n     continued_fraction_convergents as cf_c,\r\n     continued_fraction_reduce as cf_r)\r\nfrom sympy.utilities.pytest import raises\r\n```\r\n\r\nResults to:\r\n```python\r\nfrom sympy import GoldenRatio as phi\r\nfrom sympy import S, pi, sqrt\r\nfrom sympy.ntheory.continued_fraction import \\\r\n    continued_fraction_periodic as cf_p\r\nfrom sympy.utilities.pytest import raises\r\n\r\n     continued_fraction_iterator as cf_i,\r\n     continued_fraction_convergents as cf_c,\r\n     continued_fraction_reduce as cf_r)\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 574,
                "title": "Make configuration discovery public?",
                "labels": [
                    "enhancement"
                ],
                "description": "On the flake8-isort plugin, which I'm the author, we are kind of playing catch-up with isort, as isort gets more and more ways where to store the settings.\r\n\r\nWould it be possible/desirable to have a stable public method to get that configuration? Is there already one and I just missed it?\r\n\r\nflake8-isort only needs a basic boolean value whether a configuration somewhere exists."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 555,
                "title": "Tests fail locally in test_alphabetic_sorting and test_third_party_case_sensitive",
                "labels": [],
                "description": "STR:\r\n1. Spin up an Ubuntu 16.04 VM\r\n2. Install Ubuntu's Python 2.7, which is 2.7.12 (eg `apt-get update && apt-get install curl python2.7`)\r\n3. Install upstream pip (eg `curl -sS \"https://bootstrap.pypa.io/get-pip.py\" | sudo -H python -`)\r\n4. Install/create a virtualenv (eg using virtualenvwrapper)\r\n5. Inside the virtualenv, `pip install tox`\r\n6. From the root of the isort repo run `tox -e py27` (I'm having to use `--always-copy` to prevent symlink errors, since the repo is being used via Virtualbox shared folders from a Windows host)\r\n\r\n**Expected:**\r\nNo test failures, since tests are passing on master on Travis for Python 2.7:\r\nhttps://travis-ci.org/timothycrosley/isort/jobs/238542161\r\n\r\n**Actual:**\r\n```\r\n(isort) devbox ~/src/_todo/isort $ tox -e py27 --alwayscopy\r\nGLOB sdist-make: /home/vagrant/src/_todo/isort/setup.py\r\npy27 create: /home/vagrant/src/_todo/isort/.tox/py27\r\npy27 installdeps: six, pytest\r\npy27 inst: /home/vagrant/src/_todo/isort/.tox/dist/isort-4.2.12.zip\r\npy27 installed: isort==4.2.12,py==1.4.33,pytest==3.1.1,six==1.10.0\r\npy27 runtests: PYTHONHASHSEED='3135525473'\r\npy27 runtests: commands[0] | py.test test_isort.py\r\n======================================= test session starts ========================================\r\n\r\nplatform linux2 -- Python 2.7.12, pytest-3.1.1, py-1.4.33, pluggy-0.4.0\r\nrootdir: /home/vagrant/src/_todo/isort, inifile:\r\ncollected 102 items\r\n\r\ntest_isort.py .................................................................F................F...................\r\n\r\n============================================= FAILURES =============================================\r\n\r\n_____________________________________ test_alphabetic_sorting ______________________________________\r\n\r\n\r\n    def test_alphabetic_sorting():\r\n        \"\"\"Test to ensure isort correctly handles top of file comments\"\"\"\r\n        test_input = (\"import unittest\\n\"\r\n                      \"\\n\"\r\n                      \"import ABC\\n\"\r\n                      \"import Zope\\n\"\r\n                      \"from django.contrib.gis.geos import GEOSException\\n\"\r\n                      \"from plone.app.testing import getRoles\\n\"\r\n                      \"from plone.app.testing import ManageRoles\\n\"\r\n                      \"from plone.app.testing import setRoles\\n\"\r\n                      \"from Products.CMFPlone import utils\\n\"\r\n                      )\r\n        options = {'force_single_line': True,\r\n                   'force_alphabetical_sort_within_sections': True, }\r\n\r\n        output = SortImports(file_contents=test_input, **options).output\r\n>       assert output == test_input\r\nE       AssertionError: assert 'import ABC\\ni...import utils\\n' == 'import unitte...import utils\\n' E         Skipping 210 identical trailing characters in diff, use -v to show\r\nE         - import ABC\r\nE           import unittest\r\nE\r\nE         + import ABC\r\nE           import Z\r\n\r\ntest_isort.py:1639: AssertionError\r\n_________________________________ test_third_party_case_sensitive __________________________________\r\n\r\n\r\n    def test_third_party_case_sensitive():\r\n        \"\"\"Modules which match builtins by name but not on case should not be picked up on Windows.\"\"\"\r\n        test_input = (\"import thirdparty\\n\"\r\n                      \"import os\\n\"\r\n                      \"import ABC\\n\")\r\n\r\n        expected_output = ('import os\\n'\r\n                           '\\n'\r\n                           'import ABC\\n'\r\n                           'import thirdparty\\n')\r\n>       assert SortImports(file_contents=test_input).output == expected_output\r\nE       AssertionError: assert 'import ABC\\ni...t thirdparty\\n' == 'import os\\n\\nim...t thirdparty\\n'\r\nE         - import ABC\r\nE           import os\r\nE\r\nE         + import ABC\r\nE           import thirdparty\r\n\r\ntest_isort.py:1934: AssertionError\r\n=============================== 2 failed, 100 passed in 8.36 seconds ===============================\r\n```"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 554,
                "title": "Remove generated blob from runtests.py",
                "labels": [],
                "description": "#55 / #57 added a generated blob to runtests.py I believe to support systems that didn't have setuptools installed.\r\n\r\nThis should no longer be necessary and can be removed.\r\n\r\nhttps://github.com/timothycrosley/isort/blob/b41338b33f5e5ca0ce587a81e2f8a54ddf920d8b/runtests.py#L3"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 541,
                "title": "[regression] Inconsistent results on travis-ci",
                "labels": [
                    "bug"
                ],
                "description": "After the last release I started to get [inconsistent results on travis](https://travis-ci.org/openwisp/django-netjsonconfig/jobs/238291068) again (python3).\r\n\r\nI cannot replicate and fix the issues.\r\n\r\nI opened this issue even though I don't have much details to offer, hoping that if more people are experiencing the same problem they will help to debug, for now I will try to pin the test requirements to the previous stable version."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 522,
                "title": "multiprocess execution a-la 'autopep8 -j'",
                "labels": [
                    "enhancement"
                ],
                "description": "`autopep8 -j -1` nearly tripled the speed of autopep8's execution across my codebase. Sadly there does not seem to be an equivalent option for `isort`.  It would be cool if there were!"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 517,
                "title": "Add `skip_path_glob` setting",
                "labels": [
                    "enhancement"
                ],
                "description": "Unless I missed something, there there is currently no way to exclude e.g. `foo/bar/*.py` or even just anything in `foo/bar`.\r\n\r\nThis would be useful e.g.  for an alembic revisions directory since adding futures like unicode_literals isn't very useful there - but there is no way of disabling either just the `add_imports` or isort alrogether just for a specific subdirectory."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 512,
                "title": "Add an option to ignore order within a single import statement",
                "labels": [
                    "enhancement"
                ],
                "description": "For example, I really like proper blocks and alphabetical order for my import statements but just couldn't care less about the order within a statement. So it'd be great if there was an option to prevent isort from doing a change like this:\r\n\r\n```diff\r\n-from foo import a, c, b\r\n+from foo import a, b, c\r\n```\r\n\r\nThis would especially be useful in large existing codebases where enforcing order on this level would require a rather awful commit to change all the existing imports."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 499,
                "title": "Can't set sorting method (LC_COLLATE)",
                "labels": [
                    "enhancement"
                ],
                "description": "If I have locale: `LC_COLLATE=\"en_US.UTF-8\"` then I get different results from machines with locale: `LC_COLLATE=\"C.UTF-8\"`\r\n\r\n**The difference is in sorting big letters.** One is putting them first, the other doesn't care about capitalization at all. This creates different behaviours on different machines. \r\n\r\n**Could we get a setting to force locale?** I don't want to use isort like so:\r\n\r\n`$ LC_COLLATE=\"en_US.UTF-8\" isort`"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 498,
                "title": "Can't determine third party packages when it's installed globally",
                "labels": [
                    "enhancement"
                ],
                "description": "Here's a workaround(s): https://medium.com/@zwinny/different-isort-results-from-the-same-version-15c277600957\r\n\r\nMy static analysis checks fail on dockerized isort because it's not in virtualenv and so it can't determine which packages are first or third party. On virtualenv installation it correctly puts all nonlocal in third party. On global installation (docker image, \"python:3.5\") it doesn't recognize third party packages and just puts them all into first party section."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 494,
                "title": "Question: separate imports from project modules with blank line",
                "labels": [
                    "enhancement"
                ],
                "description": "I am working on a project with too many modules, and the imports can get messy sometimes. Is there a easy way to automatically separate imports from my different modules with a blank line? \r\n\r\nfor instance, like this:\r\n\r\n```python\r\nfrom mymodule1 import x, y\r\nfrom mymodule1.foo import bar\r\n\r\nfrom mymodule2 import z\r\n```\r\nThank you.\r\n\r\n**UPDATE:**\r\nCurrently, I have specified all modules with the forced_separate setting. However,\r\nthe list keeps growing and I have to manually add new entries.\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 488,
                "title": "future imports and 'isort:skip' don't work together",
                "labels": [
                    "enhancement"
                ],
                "description": "For example:\r\n\r\n    from __future__ import absolute_import\r\n    \r\n    import foo # isort:skip\r\n    \r\n    import os\r\n\r\n`isort -c` on this file incorrectly says \"Imports are incorrectly sorted\". If the `__future__` imports are removed, there is no error. Putting \"import foo\" above the future import works, but is a problem in other ways (e.g. now flake8 rightly complains).\r\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 468,
                "title": "Option to allow code intermixing",
                "labels": [
                    "enhancement"
                ],
                "description": "Unfortunately, we have some patterns that require:\n\n``` python\nimport gevent.monkey\ngevent.monkey.patch_all()\n\nimport other\n```\n\nisort currently clobbers that, as it should (`test_code_intermixed`). Can there be an option to disable that?\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 456,
                "title": "possible not calling reload(sys)?",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi,\n\nhttps://github.com/timothycrosley/isort/blob/4680d1d53d65a634c9e3d7ddf02d2cdcb2011823/isort/pie_slice.py#L160-L166 indicates it is calling `reload(sys)`, thus killing our pre-loaded exception handling, and therefore we have to resort to running isort as a separate process. \n\nso question is, is there anyway to work around it, so we can load it our program in process without any side effects. \n\nThanks,\nYi\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 455,
                "title": "isort:skip comments and __future__ imports",
                "labels": [
                    "enhancement"
                ],
                "description": "Hello. I have an interesting case for you with a suggestion. If it's crazy, then shout me down.\n\nIf you have import lines with `# isort:skip` in them, and you add a `__future__` import line, then isort will rightly not move the `__future__` imports above the import lines you have marked to be skipped. However, `__future__` imports should always appear at the top in practice. I'm wondering if we should make a special exception for `__future__` imports, so they can be moved to the top, ignoring skipped imports.\n\nThis is only really an issue for me because I add new imports to files by appending the import line to the end of the file, and then running isort on the entire file. I suppose in my scripts I could attempt to solve this by sorting the `__future__` import myself.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 454,
                "title": "Enhancement request: Change formatting options per section",
                "labels": [
                    "enhancement"
                ],
                "description": "I just found isort (how have I survived so long without it?!) and let me first say a resounding THANK YOU.\n\nI would like to request/suggest formatting options be adjustable per section (vs. always global).\n\nFor example, one might set (globally):\n`multi_line_output=3`\n`include_trailing_comma=true`\n\nThen for (only) section FUTURE, change:\n`multi_line_output=5`\n\nThen for (only) section LOCALFOLDER, add:\n`force_grid_wrap=true`\n\nand so on.\n\nEffectively allowing additions/changes to formatting options tailored for each section, vs. all formatting settings being global.\n\nIf this is already possible/available, please feel free to point me in the right direction -- but from quite a bit of documentation review and experimentation, I do not believe this is currently possible.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 447,
                "title": "Option to eliminate localfolder section/combine with firstparty",
                "labels": [
                    "enhancement"
                ],
                "description": "By default isort will take a module with PEP8-compliant imports like this:\n\n```\nimport decimal\n\nimport django\n\nfrom .utils import spellcheck\nfrom myblog.models import Post\n```\n\nAnd sort them into four sections like this:\n\n```\nimport decimal\n\nimport django\n\nfrom myblog.models import Post\n\nfrom .utils import spellcheck\n```\n\nI understand the rationale behind the four sections and their ordering, but PEP8 only mentions three distinct sections for imports (see https://www.python.org/dev/peps/pep-0008/#imports). It would be nice if isort accommodated projects which want to maintain a three-section PEP8 import style. I suspect this can be done most easily by having an option where any import that would go into the \"localfolder\" section gets put into the \"firstparty\" section instead.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 446,
                "title": "Option to eliminate localfolder section/combine with firstparty",
                "labels": [
                    "enhancement"
                ],
                "description": "Duplicate of #447, guess there was a system problem at Github which made these tickets disappear after I made them for a short while. Apologies!\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 442,
                "title": "add_import is not a supported setting in the .isort.cfg",
                "labels": [
                    "enhancement"
                ],
                "description": "I can use `-a` to automatically add an import statement using the command line, but why this option (`add_import`) is not supported / read from the `cfg` file?\n\nIt doesn't appear at: https://github.com/timothycrosley/isort/wiki/isort-Settings#full-reference-of-isort-settings\n\nHow I can do to add it in the config file or what it's not supported?\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 438,
                "title": "Transparent version of the logo",
                "labels": [
                    "enhancement"
                ],
                "description": "Do you have a version we can use to say things about isort in presentations with transparency?\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 431,
                "title": "Support adding encoding header",
                "labels": [
                    "enhancement"
                ],
                "description": "We like to make sure our files start with:\n\n```\n# -*- encoding:utf-8 -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n```\n\n`isort` lets us automatically add the `__future__` imports, it could add the encoding comment too.\n#260 seemed to discuss this but then became a bug report for them not working\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 422,
                "title": "option to report lines with incorrectly ordered imports",
                "labels": [
                    "enhancement"
                ],
                "description": "`--check` only says the file is incorrect, and `--diff` provides the details in a format that isnt suitable for most users.\n\nIt would be good to only output a list of errors like:\n`<line number>: import x should be in section y`\n\nThis output format would be very helpful for [flake8-isort](https://github.com/gforcada/flake8-isort)\n\nFrom a quick look at the parser, that isnt easily possible.\nHowever it would be might be possible to import a diff reader to transform the diff to nice error messages at least saying `<line number>: import x not sorted correctly`.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 417,
                "title": "Relative import sorting order ",
                "labels": [
                    "enhancement"
                ],
                "description": "Is there a setting to change the sort order of relative imports from\n\n``` python\nfrom .. import x\nfrom . import y\n```\n\nto\n\n``` python\nfrom . import y\nfrom ..import x\n```\n\nso that one can comply with the Google style guide as per this linter https://github.com/public/flake8-import-order#configuration?\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 393,
                "title": "Add asserts on top of file - before imports",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi,\n\nIm trying to use `isort`  in [coala](https://github.com/coala-analyzer/coala) and I came across a problem.\nIn our `setup.py` we do:\n\n```\nfrom coalib import assert_supported_version\nassert_supported_version()\n\n# Now begin all other imports\nimport locale\nimport sys\n```\n\nThis is because we do not want users to run our script with python2 - as it throws syntax errors. Now, the assertion has to come before imports as otherwise the imports can throw syntax errors.\n\nHow would I go about acheiving this with `isort` ? Is there an arg I can use ? (I couldnt find anything obvious I could use from [here](https://github.com/timothycrosley/isort/wiki/isort-Settings) )\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 392,
                "title": "sort __all__",
                "labels": [
                    "enhancement"
                ],
                "description": "Is it reasonable to include functionality to sort `__all__ = [export_1, export_2]`?\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 385,
                "title": "Have option to move imports within functions/code blocks to top?",
                "labels": [
                    "enhancement"
                ],
                "description": "I would like to move imports within (nested) functions/code blocks to the top of the file. Is it possible to add an option enabling this (in the simplest way possible, not necessarily handling edge cases?).\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 380,
                "title": "Need way to enforce everything but the wrapping style",
                "labels": [
                    "enhancement"
                ],
                "description": "We're running isort on Travis, since we want to enforce import order (and avoid dupes etc). \nHowever, there isn't a way to enforce this without also imposing a wrapping style.\n\nThis is problematic for us, since it's quite hard to pick a wrapping mode that's both pretty/what we want, and also deterministic for a human that might not be familiar with our isort config and exact max line length etc. (We don't enforce a max line length in our codebase, we leave that up to best judgement).\n\nFor example, the \"prettiest\" style for me would probably be:\n\n```\n[isort]\nmulti_line_output = 0\nforce_grid_wrap = false\nline_length = 100\n```\n\neg:\n\n``` python\nfrom third_party import lib1, lib2, lib3, lib4, lib5\nfrom another_third_party import (lib1, lib2, lib3, ...\n                                 libX, libY, ...)\n```\n\nHowever the user then has to keep a close eye on the line length and can't make a judgement call - since they'll then get bitten by the Travis run when pushing to GitHub.\n\nAn \"easier to guess when writing code\" style (and what we're using for now) is:\n\n```\n[isort]\nmulti_line_output = 1\nforce_grid_wrap = true\nline_length = 140\n```\n\nHowever this results in multi-line imports when not really necessary:\n\neg:\n\n``` python\nfrom third_party import (lib1,\n                         lib2)\n```\n\nIt would be great if we could enforce only the order of imports (and that there aren't dupes etc) and not the wrapping style, to avoid these issues.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 356,
                "title": "'ISortCommand' has no such option 'not_skip'",
                "labels": [
                    "enhancement"
                ],
                "description": "This error appears where I'm running `python setup.py isort`\n\n_Commandline_\n\n``` bash\n~/p/q (isort) $ python setup.py isort\nrunning isort\nerror: error in setup.cfg: command 'ISortCommand' has no such option 'not_skip'\n\n```\n\n_setup.cfg_\n\n```\n[isort]\nnot_skip = __init__.py\n```\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 331,
                "title": "User settings file ignored if project's settings exists",
                "labels": [
                    "enhancement"
                ],
                "description": "The priority of settings file is described in [wiki](../wiki/isort-Settings). But I found this order is not followed in the code. If case project contains `.isort.cfg` file (e.g. project specific settings) and user has it's own `~/.isort.cfg` (e.g. user preferences etc.), the project file is loaded, but the user's config file is ignored. I wouldn't expect this behaviour based on documentation.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 295,
                "title": "skip statements",
                "labels": [
                    "enhancement"
                ],
                "description": "Some statements need to be nested within imports, is there a way for isort to ignore them?\n\nHere's the motivating example:\n\n```\nimport matplotlib\nmatplotlib.use('Agg')  # isort:skip\nimport matplotlib.pyplot as plt\n```\n\nthe use Agg must be called before the plt import. `isort:skip` doesn't work here.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 278,
                "title": "py.test should not use local config",
                "labels": [
                    "enhancement"
                ],
                "description": "When running the tests using \n\n`py.test`\n\nThe config file from user `~/.isort.cfg` is still loaded up.  This can cause many test failures since the user can customise max line length etc.  \n\nThe test runner should know to patch out his own (default) configs, so that the tests are always executed from a known initial state.  \n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 273,
                "title": "Doesn't work fine with long modules and `\\`",
                "labels": [
                    "enhancement"
                ],
                "description": "There is an example for long modules:\n\n``` python\nfrom testtesttest import iamaveryveryveryvertveryveryveryvertveryveryveryverylong1, iamaveryveryveryvertveryveryveryvertveryveryveryverylong2\n```\n\nAfter `isort`:\n\n``` python\nfrom testtesttest import (iamaveryveryveryvertveryveryveryvertveryveryveryverylong1,\n    iamaveryveryveryvertveryveryveryvertveryveryveryverylong2)\n```\n\nMaybe sort to these will be better:\n\n``` python\nfrom testtesttest import \\\n    (iamaveryveryveryvertveryveryveryvertveryveryveryverylong1,\n     iamaveryveryveryvertveryveryveryvertveryveryveryverylong2)\n```\n\nAnd `isort` not work fine with `. After I sorted above code, it turned to\n\n``` python\nfrom testtesttest import \\\n    iamaveryveryveryvertveryveryveryvertveryveryveryverylong1\n\n     iamaveryveryveryvertveryveryveryvertveryveryveryverylong2)\n```\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 252,
                "title": "Support `cimport` from Cython/Pyrex",
                "labels": [
                    "enhancement"
                ],
                "description": "Cython has, additionally to classic `import` statements the `cimport` statements to import native C functions [0].\nCurrently isort mangles those:\n\nBefore:\n\n``` pyrex\nfrom .storage cimport Offset, Storage\n```\n\nAfter:\n\n``` py\nfrom .storagecimportOffset import Storage\n```\n\nIt would be nice if isort either\n1. Does not mangle those\n2. Even better: sort them properly (TBH: I am not sure what sorting scheme would be best)\n\n[0] http://docs.cython.org/src/tutorial/pxd_files.html\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 728,
                "title": "Feature request: Give support to '-' to read from standard input",
                "labels": [],
                "description": "Here's a little example showing how to achieve this simple but at the same time useful time when it comes to integrate these type of tools with text editor plugins:\r\n\r\n - Make sure this option doesn't conflict with existing one: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457)\r\n - Read from standard input: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963)"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 698,
                "title": "README incorrectly claims that isort sorts alphabetically",
                "labels": [],
                "description": "It, in fact, sorts by the type being imported (inferred from the naming) and then alphabetically within each of those types.\r\n\r\nThis isn't a problem per-se, but did just lead to some confusion when trying to work out why I was getting particularly output; I had to examine the isort code to work out what the expected behaviour was."
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 454,
                "title": "Enhancement request: Change formatting options per section",
                "labels": [
                    "enhancement"
                ],
                "description": "I just found isort (how have I survived so long without it?!) and let me first say a resounding THANK YOU.\n\nI would like to request/suggest formatting options be adjustable per section (vs. always global).\n\nFor example, one might set (globally):\n`multi_line_output=3`\n`include_trailing_comma=true`\n\nThen for (only) section FUTURE, change:\n`multi_line_output=5`\n\nThen for (only) section LOCALFOLDER, add:\n`force_grid_wrap=true`\n\nand so on.\n\nEffectively allowing additions/changes to formatting options tailored for each section, vs. all formatting settings being global.\n\nIf this is already possible/available, please feel free to point me in the right direction -- but from quite a bit of documentation review and experimentation, I do not believe this is currently possible.\n"
            },
            {
                "repo_url": "https://github.com/timothycrosley/isort",
                "id": 447,
                "title": "Option to eliminate localfolder section/combine with firstparty",
                "labels": [
                    "enhancement"
                ],
                "description": "By default isort will take a module with PEP8-compliant imports like this:\n\n```\nimport decimal\n\nimport django\n\nfrom .utils import spellcheck\nfrom myblog.models import Post\n```\n\nAnd sort them into four sections like this:\n\n```\nimport decimal\n\nimport django\n\nfrom myblog.models import Post\n\nfrom .utils import spellcheck\n```\n\nI understand the rationale behind the four sections and their ordering, but PEP8 only mentions three distinct sections for imports (see https://www.python.org/dev/peps/pep-0008/#imports). It would be nice if isort accommodated projects which want to maintain a three-section PEP8 import style. I suspect this can be done most easily by having an option where any import that would go into the \"localfolder\" section gets put into the \"firstparty\" section instead.\n"
            }
        ]
    },
    "myint/language-check": {
        "all": [
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 59,
                "title": "pip install fails",
                "labels": [],
                "description": "```\r\npip install language-check                                                                                                                                          1\r\nCollecting language-check\r\n  Using cached https://files.pythonhosted.org/packages/97/45/0fd1d3683d6129f30fa09143fa383cdf6dff8bc0d1648f2cf156109cb772/language-check-1.1.tar.gz\r\nBuilding wheels for collected packages: language-check\r\n  Running setup.py bdist_wheel for language-check ... error\r\n  Complete output from command /usr/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-_W9osa/language-check/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d /tmp/tmpYOwq7gpip-wheel- --python-tag cp27:\r\n  Could not parse Java version from \"\"\"openjdk version \"10.0.1\" 2018-04-17\r\n  OpenJDK Runtime Environment (build 10.0.1+10-Ubuntu-3ubuntu1)\r\n  OpenJDK 64-Bit Server VM (build 10.0.1+10-Ubuntu-3ubuntu1, mixed mode)\r\n  \"\"\".\r\n  \r\n  ----------------------------------------\r\n  Failed building wheel for language-check\r\n  Running setup.py clean for language-check\r\nFailed to build language-check\r\nInstalling collected packages: language-check\r\n  Running setup.py install for language-check ... error\r\n    Complete output from command /usr/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-_W9osa/language-check/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-xKEHYl-record/install-record.txt --single-version-externally-managed --compile --user --prefix=:\r\n    Could not parse Java version from \"\"\"openjdk version \"10.0.1\" 2018-04-17\r\n    OpenJDK Runtime Environment (build 10.0.1+10-Ubuntu-3ubuntu1)\r\n    OpenJDK 64-Bit Server VM (build 10.0.1+10-Ubuntu-3ubuntu1, mixed mode)\r\n    \"\"\".\r\n    \r\n    ----------------------------------------\r\nCommand \"/usr/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-_W9osa/language-check/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-xKEHYl-record/install-record.txt --single-version-externally-managed --compile --user --prefix=\" failed with error code 1 in /tmp/pip-build-_W9osa/language-check/\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 36,
                "title": "setup_requires=3to2 doesnt work",
                "labels": [],
                "description": "If `3to2` is not pre-installed, it is not installed for the user during `python setup.py install`.  It seems `kwargs['setup_requires'] = ['3to2']` in `setup.py` is not sufficient.\r\n\r\nThe result can be seen at https://travis-ci.org/jayvdb/language-check/jobs/213723679\r\n```\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 595, in <module>\r\n    sys.exit(main())\r\n  File \"setup.py\", line 590, in main\r\n    run_setup_hooks(config)\r\n  File \"setup.py\", line 562, in run_setup_hooks\r\n    default_hook(config)\r\n  File \"setup.py\", line 573, in default_hook\r\n    generate_py2k(config)\r\n  File \"setup.py\", line 542, in generate_py2k\r\n    run_3to2(copied_py_files)\r\n  File \"setup.py\", line 375, in run_3to2\r\n    raise OSError('3to2 script is unavailable.')\r\nOSError: 3to2 script is unavailable.\r\n```\r\n\r\nThe same problem occurs in `guess_language`:\r\nhttps://bitbucket.org/spirit/guess_language/issues/18/pip-doesnt-understand-that-guess-language\r\n\r\nThere @wichert found that the code was almost python 2 compatible with some minor and routine adjustments.\r\n\r\nIf there is no easy way forward, maybe a better error message could tell the user how to install `3to2`."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 58,
                "title": "Finding errors using n-gram data",
                "labels": [],
                "description": "The LanguageTool wiki [describes how to use n-gram data to detect additional error types](http://wiki.languagetool.org/finding-errors-using-n-gram-data), and provides n-gram data for this purpose. Is it possible to support this in `language-check`?\r\n\r\nI don't see anything in `language-check` about `--languagemodel` or `--config file` options (I've mostly been looking in `__init__.py`). I don't know enough about how `language-check` wraps the Java application to suggest a solution, nor whether supporting this would complicate other things (e.g., if using the n-gram directories, does this no longer check for other errors?), so apologies if I've posted an untenable request."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 56,
                "title": "Shorter regex and LATEST_VERSION = '4.2'",
                "labels": [],
                "description": "This shorter regex should not be confused by digits after the version number.\r\nBut it is not able to get a java version number like 9-ea."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 54,
                "title": "can't install from the git repo with OpenJDK",
                "labels": [],
                "description": "Config: \r\n- Ubuntu Server 18.04 \"Bionic Beaver\" LTS (64bits) \r\n- Python 3.6.5, \r\n- openjdk 10.0.1 2018-04-17\r\n- OpenJDK Runtime Environment (build 10.0.1+10-Ubuntu-3ubuntu1)\r\n- OpenJDK 64-Bit Server VM (build 10.0.1+10-Ubuntu-3ubuntu1, mixed mode)\r\n\r\nI tried to install language-check from pip, and the installation works. But then, when I try using it in some Python code, it throws some error. \r\n\r\nSo I tried to install language-check directly from the git repo, as suggested [in another issue](https://github.com/myint/language-check/issues/45#issuecomment-326625807), with:\r\n`pip3 install git+https://github.com/myint/language-check.git`\r\nBut then I get:\r\n\r\n>  Could not parse Java version from \"\"\"openjdk version \"10.0.1\" 2018-04-17\r\n>  OpenJDK Runtime Environment (build 10.0.1+10-Ubuntu-3ubuntu1)\r\n>  OpenJDK 64-Bit Server VM (build 10.0.1+10-Ubuntu-3ubuntu1, mixed mode\r\n\r\nI also tried installing it on Windows, with the following configuration, and in this case it works like a charm:\r\n\r\n- Windows 10, 64 bits, \r\n- Python 3.6.3\r\n- java version \"1.8.0_171\"\r\n- Java(TM) SE Runtime Environment (build 1.8.0_171-b11)\r\n- Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode) \r\n\r\nSo I guess that the problem comes from OpenJDK on Ubuntu. \r\n\r\nAny advice?"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 40,
                "title": "language-check hangs during initialization. ",
                "labels": [],
                "description": "I am using language-check for few days without an issue. Today, Language-check hangs  for 10+ minutes during `self.grammarTool = language_check.LanguageTool('en-US')` . I am using language-check-1.0 with python  2.7.13. \r\n\r\nLooks like `_server_is_alive()` is not working correctly and multiple servers are created on the same port. \r\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 29,
                "title": "Parsing source code",
                "labels": [],
                "description": "Cfr. vim-syntastic/syntastic/issues/1918.\r\n\r\nWhen using syntastic with language-check on source files, program code is obviously parsed as language, and obviously has a lot of grammatical mistakes.\r\n\r\nI know this is a big one, but would it be interesting to add some experimental support to language-check to parse source files? This would be especially useful for LaTeX, as that contains a lot of text. I also think it is useful to parse eg. C, C++ and Java code, and check comments for grammatical and spelling mistakes.\r\n\r\nWhat do you think?"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 55,
                "title": "Dockerfile",
                "labels": [],
                "description": "Is there a new Dockerfile available? This one runs with Java 8."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 47,
                "title": "Not work in vim with the suggested settings",
                "labels": [],
                "description": "I use `vim-syntastic/syntastic` plugin in vim with python3 installed and install langugage_check by pip. As [syntastic](https://github.com/vim-syntastic/syntastic#faqforeign) suggest the following setting for `TeX` file, such that it view the file as `text` and use `language_check` as a checker.\r\n```\r\nlet g:syntastic_tex_checkers = ['chktex', 'text/language_check']\r\n```\r\nIt turns out, such setting not work on a `tex` file, the error message says:\r\n>syntastic: error: checker output:\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/language-check\", line 6, in <module>\r\n    sys.exit(main.main())\r\n  File \"/usr/lib/python3.6/site-packages/language_check/main.py\", line 113, in main\r\n    remote_server=remote_server,\r\n  File \"/usr/lib/python3.6/site-packages/language_check/__init__.py\", line 196, in __init__\r\n    self._start_server_on_free_port()\r\n  File \"/usr/lib/python3.6/site-packages/language_check/__init__.py\", line 333, in _start_server_on_\r\nfree_port\r\n    cls._start_local_server()\r\n  File \"/usr/lib/python3.6/site-packages/language_check/__init__.py\", line 377, in _start_local_serv\r\ner\r\n    raise Error(err_msg)\r\nlanguage_check.Error\r\nsyntastic: error: checker text/language_check returned abnormal status 1\r\n\r\nCan't figure out what's wrong?"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 45,
                "title": "Error: http://127.0.0.1:8081: HTTP Error 400: Bad Request",
                "labels": [],
                "description": "Hi, I got some problem when using this tools. \r\nI followed you guild and replaced Language-Tools 3.8 to language-check, then I import language_check successfully. But when I try to call any method in language-check, it just raise the same error:\r\n\r\n\r\nHere is for languagetools():\r\n```\r\n>>> tool = language_check.LanguageTool('en-US')\r\nTraceback (most recent call last):\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 529, in get_languages\r\n    languages = cache['languages']\r\nKeyError: 'languages'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 310, in _get_root\r\n    with urlopen(url, data, cls._TIMEOUT) as f:\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 223, in urlopen\r\n    return opener.open(url, data, timeout)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 532, in open\r\n    response = meth(req, response)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 642, in http_response\r\n    'http', request, response, code, msg, hdrs)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 570, in error\r\n    return self._call_chain(*args)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 504, in _call_chain\r\n    result = func(*args)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py\", line 650, in http_error_default\r\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\r\nurllib.error.HTTPError: HTTP Error 400: Bad Request\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 201, in __init__\r\n    self._language = LanguageTag(language)\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 453, in __new__\r\n    return str.__new__(cls, cls._normalize(tag))\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 474, in _normalize\r\n    for language in get_languages()}\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 531, in get_languages\r\n    languages = LanguageTool._get_languages()\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 291, in _get_languages\r\n    for e in cls._get_root(url, num_tries=1):\r\n  File \"/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py\", line 317, in _get_root\r\n    raise Error('{}: {}'.format(cls._url, e))\r\nlanguage_check.Error: http://127.0.0.1:8081: HTTP Error 400: Bad Request\r\n\r\n```\r\n\r\nHere is for get_language():\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py in get_languages()\r\n    528     try:\r\n--> 529         languages = cache['languages']\r\n    530     except KeyError:\r\n\r\nKeyError: 'languages'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nHTTPError                                 Traceback (most recent call last)\r\n/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py in _get_root(cls, url, data, num_tries)\r\n    309             try:\r\n--> 310                 with urlopen(url, data, cls._TIMEOUT) as f:\r\n    311                     return ElementTree.parse(f).getroot()\r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)\r\n    222         opener = _opener\r\n--> 223     return opener.open(url, data, timeout)\r\n    224 \r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout)\r\n    531             meth = getattr(processor, meth_name)\r\n--> 532             response = meth(req, response)\r\n    533 \r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in http_response(self, request, response)\r\n    641             response = self.parent.error(\r\n--> 642                 'http', request, response, code, msg, hdrs)\r\n    643 \r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in error(self, proto, *args)\r\n    569             args = (dict, 'default', 'http_error_default') + orig_args\r\n--> 570             return self._call_chain(*args)\r\n    571 \r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args)\r\n    503             func = getattr(handler, meth_name)\r\n--> 504             result = func(*args)\r\n    505             if result is not None:\r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/urllib/request.py in http_error_default(self, req, fp, code, msg, hdrs)\r\n    649     def http_error_default(self, req, fp, code, msg, hdrs):\r\n--> 650         raise HTTPError(req.full_url, code, msg, hdrs, fp)\r\n    651 \r\n\r\nHTTPError: HTTP Error 400: Bad Request\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nError                                     Traceback (most recent call last)\r\n<ipython-input-20-7ce33a1ca083> in <module>()\r\n----> 1 tool = language_check.get_languages()\r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py in get_languages()\r\n    529         languages = cache['languages']\r\n    530     except KeyError:\r\n--> 531         languages = LanguageTool._get_languages()\r\n    532         cache['languages'] = languages\r\n    533     return languages\r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py in _get_languages(cls)\r\n    289         url = urllib.parse.urljoin(cls._url, 'Languages')\r\n    290         languages = set()\r\n--> 291         for e in cls._get_root(url, num_tries=1):\r\n    292             languages.add(e.get('abbr'))\r\n    293             languages.add(e.get('abbrWithVariant'))\r\n\r\n/home/jie-gd/anaconda3/lib/python3.6/site-packages/language_check/__init__.py in _get_root(cls, url, data, num_tries)\r\n    315                     cls._start_server()\r\n    316                 if n + 1 >= num_tries:\r\n--> 317                     raise Error('{}: {}'.format(cls._url, e))\r\n    318 \r\n    319     @classmethod\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 15,
                "title": "Using system LanguageTool",
                "labels": [
                    "enhancement"
                ],
                "description": "I was in the process of packaging language-check for Arch Linux, when I realized the setup script was actually downloading LanguageTool. Since a `languagetool` package is [already available](https://www.archlinux.org/packages/community/any/languagetool/) in the official Arch packages (v3.0), do you think it would be possible to rely on it instead? You can see a list of the files it contains [here](https://www.archlinux.org/packages/community/any/languagetool/), so if the setup script can handle an extra argument to find the jar files at runtime, this would be greatly appreciated :)\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 51,
                "title": "Ignoring spelling errors with numbers in them.",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Using language-check for catching spelling errors with numbers in them would fail.\r\n\r\nE.g. `d0g` would produce no errors while `dogg` would.\r\n\r\nLanguage Tool has the ability to toggle spell checking with numbers off and on (http://wiki.languagetool.org/hunspell-support). It would be nice if langauge-check has this ability also.\r\n \r\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 50,
                "title": "Upgrade to LanguageTool latest version",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "### 1. Briefly\r\n\r\nI don't understand, how I can ignore English words, if I use Russian language by default.\r\n\r\nIt feature by default, if I run LanguageTool, use:\r\n\r\n1. command line,\r\n1. [**Sublime Text LanguageTool**](https://github.com/gtarawneh/languagetool-sublime) plugin.\r\n\r\n### 2. Environment\r\n\r\n+ Windows 10 LTSB Enterprise EN,\r\n+ Python 3.6.3,\r\n+ LanguageTool 3.6,\r\n+ language-check 1.1.\r\n\r\n### 3. Argumentation\r\n\r\nI write texts in Russian, where can be many words from English. Now language-check check English words as errors.\r\n\r\n### 4. Settings\r\n\r\nMy file `SashaExample.txt`:\r\n\r\n```markdown\r\nSasha Belissimo!\r\n\r\n\u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n```\r\n\r\nMy file [**`eric_languagetool.py`**](https://github.com/Kristinita/SashaPythonista/blob/master/tests/eric_languagetool.py):\r\n\r\n```python\r\nfrom eric_config import all_txt_in_eric_room_wihtout_subfolders\r\nfrom eric_config import log\r\n\r\nimport language_check\r\nimport os\r\n\r\ntool_language = language_check.LanguageTool('ru-RU')\r\n\r\nfailure_tests = False\r\n\r\nfor filename in all_txt_in_eric_room_wihtout_subfolders:\r\n\r\n    filename_without_path = os.path.basename(filename)\r\n\r\n    log.debug(filename_without_path + \"\\n\")\r\n    file_text = open(filename_without_path).read()\r\n\r\n    error_list = tool_language.check(file_text)\r\n    print(*error_list, sep='\\n\\n')\r\n    if not error_list:\r\n        log.debug(\r\n            \"Not detect errors and typos in\" +\r\n            filename_without_path +\r\n            \"\\n\\n\")\r\n    else:\r\n        log.warning(\r\n            \"Detect error(s) or/and typo(s) in \" + filename_without_path + \"\\n\\n\")\r\n        failure_tests = True\r\n\r\nif not failure_tests:\r\n    log.notice(\"LanguageTool no detect errors and typos for all files.\")\r\n\r\nif failure_tests:\r\n    log.warning(\r\n        \"LanguageTool detect error(s) or/and typo(s). Please, review it.\")\r\n\r\n```\r\n\r\n### 5. Expected behavior\r\n\r\n**If** I run in console:\r\n\r\n```shell\r\nD:\\SashaPythonista>java -jar \"D:/Chocolatey/lib/languagetool/tools/LanguageTool-3.6/languagetool.jar\" SashaExample.txt\r\n```\r\n\r\nNo errors:\r\n\r\n![LanguageTool CLI](https://i.imgur.com/vGEXMaz.png)\r\n\r\nAlso, I can't errors, if I can use Sublime Text LanguageTool package.\r\n\r\n### 6. Actual behavior\r\n\r\nI run `eric_languagetool.py` for `SashaExample.txt`:\r\n\r\n```shell\r\nD:\\SashaPythonista>language-check --heelp\r\n'language-check' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nD:\\SashaPythonista>python \"tests/eric_languagetool.py\"\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n```\r\n\r\nThe same in Interpreter:\r\n\r\n```python\r\n>>> import language_check\r\n>>> tool_language = language_check.LanguageTool('ru-RU')\r\n>>> file_text = u'Sasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!'\r\n>>> error_list = tool_language.check(file_text)\r\n>>> print(*error_list, sep='\\n\\n')\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n>>>\r\n```\r\n\r\nEnglish words in Russian texts check as errors.\r\n\r\n### 7. Did not help\r\n\r\nI don't find, how I can solve this problem, in:\r\n\r\n1. language-check description,\r\n1. issues of this repository.\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 25,
                "title": "HTTP Error using languagetool",
                "labels": [],
                "description": "When one of our users (at coala) was running the tests, he got the following error:\n\n```\nE          \nE           Traceback information is provided below:\nE          \nE           Traceback (most recent call last):\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 522, in get_languages\nE               languages = cache['languages']\nE           KeyError: 'languages'\nE          \nE           During handling of the above exception, another exception occurred:\nE          \nE           Traceback (most recent call last):\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 304, in _get_root\nE               with urlopen(url, data, cls._TIMEOUT) as f:\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 161, in urlopen\nE               return opener.open(url, data, timeout)\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 469, in open\nE               response = meth(req, response)\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 579, in http_response\nE               'http', request, response, code, msg, hdrs)\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 507, in error\nE               return self._call_chain(*args)\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 441, in _call_chain\nE               result = func(*args)\nE             File \"/usr/lib/python3.4/urllib/request.py\", line 587, in http_error_default\nE               raise HTTPError(req.full_url, code, msg, hdrs, fp)\nE           urllib.error.HTTPError: HTTP Error 403: Forbidden\nE          \nE           During handling of the above exception, another exception occurred:\nE          \nE           Traceback (most recent call last):\nE             File \"/usr/local/lib/python3.4/dist-packages/coala-0.4.2.dev20160309195000-py3.4.egg/coalib/bears/Bear.py\", line 97, in execute\nE               return list(self.run_bear_from_section(args, kwargs) or [])\nE             File \"/home/vivek/gsoc16/coala-bears/bears/natural_language/LanguageToolBear.py\", line 41, in run\nE               tool = LanguageTool(locale, motherTongue=\"en_US\")\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 195, in __init__\nE               self._language = LanguageTag(language)\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 446, in __new__\nE               return str.__new__(cls, cls._normalize(tag))\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 467, in _normalize\nE               for language in get_languages()}\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 524, in get_languages\nE               languages = LanguageTool._get_languages()\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 285, in _get_languages\nE               for e in cls._get_root(url, num_tries=1):\nE             File \"/usr/local/lib/python3.4/dist-packages/language_check-0.8-py3.4.egg/language_check/__init__.py\", line 310, in _get_root\nE               raise Error('{}: {}'.format(cls._url, e))\nE           language_check.Error: http://127.0.0.1:8081: HTTP Error 403: Forbidden\n```\n\nI went through your code and found that you were actually trying multiple ports (https://github.com/myint/language-check/blob/master/language_check/__init__.py#L177) so this couldn't be an issue that he had something else running on that port.\n\nCould you help us in figuring out why this could happen ?\nAnd what we could do to prevent it ?\n\nPS: Ignore the `E` at the front. It is from the `pytest` utility when running tests\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 7,
                "title": "Windows Build",
                "labels": [
                    "enhancement"
                ],
                "description": "Hey,\n\nwe'd love to use language-check to get LanguageTool into coala. See https://groups.google.com/d/msg/coala-devel/JU7dGspgMv4/l7fIJrLNQgQJ fore more info.\n\nYou already do travis CI, I would love it if you could validate your software also against windows using a service like AppVeyor. We just did that with the coala project (https://github.com/coala-analyzer/coala/ ) and I'd be happy to help through suggestions although I don't have the time to do it for you.\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 9,
                "title": "automatic language detection",
                "labels": [
                    "enhancement"
                ],
                "description": "LanguageTool as automatic language detection, could you expose that?\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 46,
                "title": "Combine language-check with wordlist to ignore certain suggestions",
                "labels": [],
                "description": "Is there a way to provide the language tool with a list of words that should NOT be marked as mistakes? \r\nI have a lot of technical terms in my data that are wrongly corrected when automatically applying the suggestions of the language tool.\r\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 31,
                "title": "Install failing with certain java version",
                "labels": [
                    "bug"
                ],
                "description": "[Our build system Travis](https://travis-ci.org/coala/coala-bears/jobs/189849476) has problems to install `language-check`:\r\n```\r\n----------------------------------------\r\n  Failed building wheel for language-check\r\n  Running setup.py clean for language-check\r\nFailed to build language-check\r\nInstalling collected packages: language-check, munkres3, mypy-lang, jsonschema, decorator, ipython-genutils, enum34, traitlets, jupyter-core, nbformat, nltk, click, future, proselint, pycodestyle, pydocstyle, lazy-object-proxy, wrapt, astroid, mccabe, pylint, mando, colorama, radon, restructuredtext-lint, rstcheck, pyparsing, packaging, safety, scspell3k, pathlib, chardet, ansicolor, vim-vint, vulture, yamllint, yapf\r\n  Running setup.py install for language-check ... error\r\n    Complete output from command /home/travis/virtualenv/python3.3.6/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-x7h2r3/language-check/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /tmp/pip-u9p7qy-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/travis/virtualenv/python3.3.6/include/site/python3.3/language-check:\r\n    Could not parse Java version from \"\"\"java version \"9-ea\"\r\n    Java(TM) SE Runtime Environment (build 9-ea+140)\r\n    Java HotSpot(TM) 64-Bit Server VM (build 9-ea+140, mixed mode)\r\n    \"\"\".\r\n    \r\n    ----------------------------------------\r\nCommand \"/home/travis/virtualenv/python3.3.6/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-x7h2r3/language-check/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /tmp/pip-u9p7qy-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/travis/virtualenv/python3.3.6/include/site/python3.3/language-check\" failed with error code 1 in /tmp/pip-build-x7h2r3/language-check/\r\n```"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 8,
                "title": "Documentation",
                "labels": [
                    "enhancement"
                ],
                "description": "Hey, this lacks a bit of documentation a bit. Especially the match class could expose a few more public methods and have at least in code documentation so one can easily do something else than printing with matches.\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 44,
                "title": "CI timeouts during installation",
                "labels": [
                    "enhancement"
                ],
                "description": "As the installation can take quite a while, it would be useful to emit some progress indicators during the process so that CI doesnt fail because it hasnt seen any output.\r\n\r\ncoala is seeing lots of timeout failures due to this problem: https://circleci.com/gh/jayvdb/coala-bears\r\n\r\n(But this is aggravated by a bug in our Circle CI (https://github.com/coala/coala-bears/issues/1863) , but fixing that doesnt entirely resolve this issue.)"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 57,
                "title": "Fix newest java version check",
                "labels": [],
                "description": "I've faced an installation issue with parsing java v 10.0 which has release date at the end of the first line of version description.\r\n\r\nSo, I've fixed it.\r\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 27,
                "title": "Can't disable spell checking for Italian (it)",
                "labels": [],
                "description": "Here is a simple test case to show that `LanuageTool.disable_spellcheck()` is not working correctly for Italian. I'm not sure if this is a problem here or in LanguageTool, but I thought I'll start by reporting here:\n\n``` Python\nfrom language_check import LanguageTool\nt = LanguageTool(language='it')\nt.disable_spellchecking()\n#this contains MORFOLOGIK_RULE_IT:\nprint(t._spell_checking_rules)\n#this unfortunately contains MORFOLOGIK_RULE_IT_IT:\nprint(t.check('Non le fate piu?'))\n```\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 51,
                "title": "Ignoring spelling errors with numbers in them.",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Using language-check for catching spelling errors with numbers in them would fail.\r\n\r\nE.g. `d0g` would produce no errors while `dogg` would.\r\n\r\nLanguage Tool has the ability to toggle spell checking with numbers off and on (http://wiki.languagetool.org/hunspell-support). It would be nice if langauge-check has this ability also.\r\n \r\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 50,
                "title": "Upgrade to LanguageTool latest version",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "### 1. Briefly\r\n\r\nI don't understand, how I can ignore English words, if I use Russian language by default.\r\n\r\nIt feature by default, if I run LanguageTool, use:\r\n\r\n1. command line,\r\n1. [**Sublime Text LanguageTool**](https://github.com/gtarawneh/languagetool-sublime) plugin.\r\n\r\n### 2. Environment\r\n\r\n+ Windows 10 LTSB Enterprise EN,\r\n+ Python 3.6.3,\r\n+ LanguageTool 3.6,\r\n+ language-check 1.1.\r\n\r\n### 3. Argumentation\r\n\r\nI write texts in Russian, where can be many words from English. Now language-check check English words as errors.\r\n\r\n### 4. Settings\r\n\r\nMy file `SashaExample.txt`:\r\n\r\n```markdown\r\nSasha Belissimo!\r\n\r\n\u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n```\r\n\r\nMy file [**`eric_languagetool.py`**](https://github.com/Kristinita/SashaPythonista/blob/master/tests/eric_languagetool.py):\r\n\r\n```python\r\nfrom eric_config import all_txt_in_eric_room_wihtout_subfolders\r\nfrom eric_config import log\r\n\r\nimport language_check\r\nimport os\r\n\r\ntool_language = language_check.LanguageTool('ru-RU')\r\n\r\nfailure_tests = False\r\n\r\nfor filename in all_txt_in_eric_room_wihtout_subfolders:\r\n\r\n    filename_without_path = os.path.basename(filename)\r\n\r\n    log.debug(filename_without_path + \"\\n\")\r\n    file_text = open(filename_without_path).read()\r\n\r\n    error_list = tool_language.check(file_text)\r\n    print(*error_list, sep='\\n\\n')\r\n    if not error_list:\r\n        log.debug(\r\n            \"Not detect errors and typos in\" +\r\n            filename_without_path +\r\n            \"\\n\\n\")\r\n    else:\r\n        log.warning(\r\n            \"Detect error(s) or/and typo(s) in \" + filename_without_path + \"\\n\\n\")\r\n        failure_tests = True\r\n\r\nif not failure_tests:\r\n    log.notice(\"LanguageTool no detect errors and typos for all files.\")\r\n\r\nif failure_tests:\r\n    log.warning(\r\n        \"LanguageTool detect error(s) or/and typo(s). Please, review it.\")\r\n\r\n```\r\n\r\n### 5. Expected behavior\r\n\r\n**If** I run in console:\r\n\r\n```shell\r\nD:\\SashaPythonista>java -jar \"D:/Chocolatey/lib/languagetool/tools/LanguageTool-3.6/languagetool.jar\" SashaExample.txt\r\n```\r\n\r\nNo errors:\r\n\r\n![LanguageTool CLI](https://i.imgur.com/vGEXMaz.png)\r\n\r\nAlso, I can't errors, if I can use Sublime Text LanguageTool package.\r\n\r\n### 6. Actual behavior\r\n\r\nI run `eric_languagetool.py` for `SashaExample.txt`:\r\n\r\n```shell\r\nD:\\SashaPythonista>language-check --heelp\r\n'language-check' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nD:\\SashaPythonista>python \"tests/eric_languagetool.py\"\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n```\r\n\r\nThe same in Interpreter:\r\n\r\n```python\r\n>>> import language_check\r\n>>> tool_language = language_check.LanguageTool('ru-RU')\r\n>>> file_text = u'Sasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!'\r\n>>> error_list = tool_language.check(file_text)\r\n>>> print(*error_list, sep='\\n\\n')\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n>>>\r\n```\r\n\r\nEnglish words in Russian texts check as errors.\r\n\r\n### 7. Did not help\r\n\r\nI don't find, how I can solve this problem, in:\r\n\r\n1. language-check description,\r\n1. issues of this repository.\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 8,
                "title": "Documentation",
                "labels": [
                    "enhancement"
                ],
                "description": "Hey, this lacks a bit of documentation a bit. Especially the match class could expose a few more public methods and have at least in code documentation so one can easily do something else than printing with matches.\n"
            },
            {
                "repo_url": "https://github.com/myint/language-check",
                "id": 27,
                "title": "Can't disable spell checking for Italian (it)",
                "labels": [],
                "description": "Here is a simple test case to show that `LanuageTool.disable_spellcheck()` is not working correctly for Italian. I'm not sure if this is a problem here or in LanguageTool, but I thought I'll start by reporting here:\n\n``` Python\nfrom language_check import LanguageTool\nt = LanguageTool(language='it')\nt.disable_spellchecking()\n#this contains MORFOLOGIK_RULE_IT:\nprint(t._spell_checking_rules)\n#this unfortunately contains MORFOLOGIK_RULE_IT_IT:\nprint(t.check('Non le fate piu?'))\n```\n"
            }
        ]
    },
    "lxml/lxml": {
        "all": [
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 144,
                "title": "'too many bodies' should not include 0",
                "labels": [],
                "description": "changed check for number of bodies to < 2, as the error 'too many bodies' can currently be thrown when len(bodies) == 0\n"
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 272,
                "title": "Fix index out of range when <body> or <head> is missing",
                "labels": [],
                "description": "If a HTML file that doesn't contain a <body> or <head> part is parsed, \r\nit can lead to a index out of range error when you try \r\n`getattr(lxmlElement, \"body\")`\r\n"
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 236,
                "title": "Adds a `smart_prefix` option to XPath evaluations to overcome a counter-intuitive design flaw",
                "labels": [],
                "description": "> Namespaces are one honking great idea -- let's do more of those!\r\n\r\nUsing XPath to locate elements is quiet cumbersome when it comes to documents that have a default namespace:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{'x': 'http://www.w3.org/2000/svg', None: 'http://www.tei-c.org/ns/1.0'}\r\n>>> root.xpath('./text/body')\r\n[]\r\n>>> root.xpath('./text/body', namespaces=root.nsmap)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    root.xpath('./text/body', namespaces=root.nsmap)\r\n  File \"src/lxml/lxml.etree.pyx\", line 1584, in lxml.etree._Element.xpath (src/lxml/lxml.etree.c:59349)\r\n    evaluator = XPathElementEvaluator(self, namespaces=namespaces,\r\n  File \"src/lxml/xpath.pxi\", line 261, in lxml.etree.XPathElementEvaluator.__init__ (src/lxml/lxml.etree.c:170589)\r\n  File \"src/lxml/xpath.pxi\", line 133, in lxml.etree._XPathEvaluatorBase.__init__ (src/lxml/lxml.etree.c:168702)\r\n  File \"src/lxml/xpath.pxi\", line 57, in lxml.etree._XPathContext.__init__ (src/lxml/lxml.etree.c:167658)\r\n    _BaseContext.__init__(self, namespaces, extensions, error_log, enable_regexp,\r\n  File \"src/lxml/extensions.pxi\", line 84, in lxml.etree._BaseContext.__init__ (src/lxml/lxml.etree.c:156529)\r\n    if namespaces:\r\nTypeError: empty namespace prefix is not supported in XPath\r\n```\r\n\r\nThis is a [well](http://lxml.de/xpathxslt.html) [documented](http://lxml.de/FAQ.html#xpath-and-document-traversal) [issue](http://git.net/ml/python-lxml-devel/2009-08/msg00039.html) ([also here](https://stackoverflow.com/questions/8053568/how-do-i-use-empty-namespaces-in-an-lxml-xpath-query)) and is [commonly solved](https://stackoverflow.com/questions/31177707/parsing-xml-containing-default-namespace-to-get-an-element-value-using-lxml) by manipulating the namespace mapping with an ad-hoc prefix - which loses the information what the default namespace was unless preserved - and adding that to XPath expressions. ([another hack](https://stackoverflow.com/questions/5572247/how-to-find-xml-elements-via-xpath-in-python-in-a-namespace-agnostic-way), [stdlib as well](http://www.goodmami.org/2015/11/04/python-xpath-and-default-namespaces.html) with some insights)\r\n\r\nBut this solution doesn't play well in generalising code like adapter classes where it becomes tedious and error prone because XPath expressions are not always identical (did i mention they are counter-intuitive to type?) and keeping track of namespace mappings across loosely coupled code elements introduces boilerplates. \r\n\r\nUltimately, the interplay of document namespaces and XPath expressions is everything but pythonic and rather complicated than complex, though\r\n \r\n> There should be one-- and preferably only one --obvious way to do it.\r\n\r\nThe root of this issue is caused by [a flaw](https://lists.w3.org/Archives/Public/www-dom/2002JulSep/0159.html) in the [XPath 1.0](https://www.w3.org/TR/xpath/#node-tests) specs that `libxml2` follows in its implementation:\r\n\r\n> A QName in the node test is expanded into an expanded-name using the namespace declarations from the expression context. This is the same way expansion is done for element type names in start and end-tags except that the default namespace declared with xmlns is not used: **if the QName does not have a prefix, then the namespace URI is null** (this is the same way attribute names are expanded). It is an error if the QName has a prefix for which there is no namespace declaration in the expression context.\r\n\r\nWhile [XML namespaces](https://www.w3.org/TR/REC-xml-names/#ns-decl) actually have a notion of an unaliased default namespace:\r\n\r\n> If the attribute name matches DefaultAttName, then the namespace name in the attribute value is that of the default namespace in the scope of the element to which the declaration is attached.\r\n\r\n[XPath 2.0](https://www.w3.org/TR/xpath20/#node-tests) did eventually fix this:\r\n\r\n> A QName in a name test is resolved into an expanded QName using the statically known namespaces in the expression context. It is a static error [err:XPST0081] if the QName has a prefix that does not correspond to any statically known namespace. **An unprefixed QName, when used as a name test on an axis whose principal node kind is element, has the namespace URI of the default element/type namespace in the expression context**; otherwise, it has no namespace URI.\r\n\r\nThere's no XPath 2.0 implementation with Python bindings around (well, there is one to XQuilla that returns raw strings and is far off `lxml`'s capabilities), and it is very unlikely there's one to be implemented as the extension as a whole is a lot - which probably no one needs outside the XQuery/XSLT scene. [`libxml2` didn't intend to](https://www.mail-archive.com/xml@gnome.org/msg04082.html) ten years ago, but hey, [looking for a thesis](https://diplomky.redhat.com/topic/show/190/xpath-20-support-to-libxml) to write?\r\n\r\nThus I propose to backport that bug fix from XPath 2.0 to `lxml`'s XPath interfaces with an opt-in `smart_prefix` option without considering the whole standard as  \r\n\r\n> practicality beats purity.\r\n\r\nBehind the scenes the ad-hoc prefix 'solution' described above is applied, but completely hidden from the client code.\r\n\r\nThis pull request demonstrates the design and isn't completed yet, at least these issues still need to be addressed:\r\n\r\n- documentation\r\n- predicates are handled rather hackish and i have doubts that it works with more complex predicates\r\n  - i'd appreciate test proposals for practical examples with such\r\n  - support for predicates with the `smart_prefix` option could be dropped altogether, finer-grained selection is possible with Python and probably a common usage\r\n- should this even be the default behavior with opt-out? afaict it wouldn't break any code as supplying a namespace map with a default namespace (mapped to `None`) is currently invalid \r\n  - i'd keep it out of XSLT anyway\r\n- should result elements from such queries have a property that stores the option? so later calls on `.xpath()` of these elements would behave the same if no `smart_prefix` option is provided\r\n- can `regex.h` be used directly from Cython, but that's not specific to this here\r\n\r\nbtw, this is the first time i used Cython and my C usage was long ago, i'm happy about every feedback for improvements.\r\n\r\nNow, let's have some fun:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{None: 'http://www.tei-c.org/ns/1.0', 'x': 'http://www.w3.org/2000/svg'}\r\n>>> root.xpath('./text/body', namespaces=root.nsmap, smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n>>> root.xpath('./text/body', smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n```\r\n\r\n(oh, the inplace build option fails on my local machine without a helpful message. does anyone have a hint on that?)\r\n"
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 177,
                "title": "Clarify cleaner doc on setting `comments=False`",
                "labels": [],
                "description": "Maybe the actual way to go is to remove [this rule](https://github.com/lxml/lxml/blob/11e7f9a7d98e96ad31a1d5991b57d47472c1d143/src/lxml/html/clean.py#L308) you seem not to be sure about. The sure thing is that the effect is quite unexpected for the library user: \"I cannot disable comments removing\".\n"
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 267,
                "title": "Let ElementTreeProducer use the available namespaces",
                "labels": [],
                "description": "sax.ElementTreeProducer would ignore the namespace prefixes that were available in the element tree, and always generate new prefixes like ns00, ns01 etc.\r\n\r\nThis PR uses the prefixes in the XML by looking at the elements nsmap."
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 269,
                "title": "Make .nsmap available in XSLT extensions.",
                "labels": [
                    "feature"
                ],
                "description": "When adding namespaced elements/attributes in `execute` of XSLT extension element, new `xmlns` declaration is generated with prefix `ns0`. At the same time it does not seem to be possible to figure out what are the existing namespaces and prefixes in the `input_node`, resulting in\r\n```\r\nAttributeError: 'lxml.etree._ReadOnlyElementProxy' object has no attribute 'nsmap'\r\n```\r\nThis patch makes it possible to see the namespace map."
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 274,
                "title": "Fix regression unknown error/undeclared vars while performing a xslt transform",
                "labels": [],
                "description": "Regression came up while updating from lxml 2.2.8. In a complex environment parameters were\r\nsuddenly reported as not declared after the lxml update like:\r\n<xslt>:100:0:ERROR:XSLT:ERR_OK: runtime error, element 'result'\r\n<string>:0:0:ERROR:XSLT:ERR_OK: Variable 'name' has not been declared.\r\n<string>:0:0:ERROR:XSLT:ERR_OK: unknown error\r\n\r\nRunning the same transformation with the same template and inputs outside the\r\ncomplex environment does not reproduce the error. The \"complex environment\" did several\r\nxml operations before across multiple threads which seem to be important to reproduce the\r\nissue.\r\n\r\nAt the end the issue seem to be caused by the string \"name\" which is contained in two dicts\r\nand therefore with different addresses. The xsltXPathVariableLookup function does only a pointer\r\ncomparison and so \"name\" was != \"name\"."
            },
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 130,
                "title": "Disable resolve_entities by default w/ one billion laughs expansion bug.",
                "labels": [],
                "description": "Facebook recently issued its largest bug bounty to remove this security bug.\n\nhttps://www.facebook.com/BugBounty/posts/778897822124446?stream_ref=10\n\nThis may result in breaking changes but should be considered an important\nsecurity enhancement.\n\nTest fix included.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/lxml/lxml",
                "id": 236,
                "title": "Adds a `smart_prefix` option to XPath evaluations to overcome a counter-intuitive design flaw",
                "labels": [],
                "description": "> Namespaces are one honking great idea -- let's do more of those!\r\n\r\nUsing XPath to locate elements is quiet cumbersome when it comes to documents that have a default namespace:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{'x': 'http://www.w3.org/2000/svg', None: 'http://www.tei-c.org/ns/1.0'}\r\n>>> root.xpath('./text/body')\r\n[]\r\n>>> root.xpath('./text/body', namespaces=root.nsmap)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    root.xpath('./text/body', namespaces=root.nsmap)\r\n  File \"src/lxml/lxml.etree.pyx\", line 1584, in lxml.etree._Element.xpath (src/lxml/lxml.etree.c:59349)\r\n    evaluator = XPathElementEvaluator(self, namespaces=namespaces,\r\n  File \"src/lxml/xpath.pxi\", line 261, in lxml.etree.XPathElementEvaluator.__init__ (src/lxml/lxml.etree.c:170589)\r\n  File \"src/lxml/xpath.pxi\", line 133, in lxml.etree._XPathEvaluatorBase.__init__ (src/lxml/lxml.etree.c:168702)\r\n  File \"src/lxml/xpath.pxi\", line 57, in lxml.etree._XPathContext.__init__ (src/lxml/lxml.etree.c:167658)\r\n    _BaseContext.__init__(self, namespaces, extensions, error_log, enable_regexp,\r\n  File \"src/lxml/extensions.pxi\", line 84, in lxml.etree._BaseContext.__init__ (src/lxml/lxml.etree.c:156529)\r\n    if namespaces:\r\nTypeError: empty namespace prefix is not supported in XPath\r\n```\r\n\r\nThis is a [well](http://lxml.de/xpathxslt.html) [documented](http://lxml.de/FAQ.html#xpath-and-document-traversal) [issue](http://git.net/ml/python-lxml-devel/2009-08/msg00039.html) ([also here](https://stackoverflow.com/questions/8053568/how-do-i-use-empty-namespaces-in-an-lxml-xpath-query)) and is [commonly solved](https://stackoverflow.com/questions/31177707/parsing-xml-containing-default-namespace-to-get-an-element-value-using-lxml) by manipulating the namespace mapping with an ad-hoc prefix - which loses the information what the default namespace was unless preserved - and adding that to XPath expressions. ([another hack](https://stackoverflow.com/questions/5572247/how-to-find-xml-elements-via-xpath-in-python-in-a-namespace-agnostic-way), [stdlib as well](http://www.goodmami.org/2015/11/04/python-xpath-and-default-namespaces.html) with some insights)\r\n\r\nBut this solution doesn't play well in generalising code like adapter classes where it becomes tedious and error prone because XPath expressions are not always identical (did i mention they are counter-intuitive to type?) and keeping track of namespace mappings across loosely coupled code elements introduces boilerplates. \r\n\r\nUltimately, the interplay of document namespaces and XPath expressions is everything but pythonic and rather complicated than complex, though\r\n \r\n> There should be one-- and preferably only one --obvious way to do it.\r\n\r\nThe root of this issue is caused by [a flaw](https://lists.w3.org/Archives/Public/www-dom/2002JulSep/0159.html) in the [XPath 1.0](https://www.w3.org/TR/xpath/#node-tests) specs that `libxml2` follows in its implementation:\r\n\r\n> A QName in the node test is expanded into an expanded-name using the namespace declarations from the expression context. This is the same way expansion is done for element type names in start and end-tags except that the default namespace declared with xmlns is not used: **if the QName does not have a prefix, then the namespace URI is null** (this is the same way attribute names are expanded). It is an error if the QName has a prefix for which there is no namespace declaration in the expression context.\r\n\r\nWhile [XML namespaces](https://www.w3.org/TR/REC-xml-names/#ns-decl) actually have a notion of an unaliased default namespace:\r\n\r\n> If the attribute name matches DefaultAttName, then the namespace name in the attribute value is that of the default namespace in the scope of the element to which the declaration is attached.\r\n\r\n[XPath 2.0](https://www.w3.org/TR/xpath20/#node-tests) did eventually fix this:\r\n\r\n> A QName in a name test is resolved into an expanded QName using the statically known namespaces in the expression context. It is a static error [err:XPST0081] if the QName has a prefix that does not correspond to any statically known namespace. **An unprefixed QName, when used as a name test on an axis whose principal node kind is element, has the namespace URI of the default element/type namespace in the expression context**; otherwise, it has no namespace URI.\r\n\r\nThere's no XPath 2.0 implementation with Python bindings around (well, there is one to XQuilla that returns raw strings and is far off `lxml`'s capabilities), and it is very unlikely there's one to be implemented as the extension as a whole is a lot - which probably no one needs outside the XQuery/XSLT scene. [`libxml2` didn't intend to](https://www.mail-archive.com/xml@gnome.org/msg04082.html) ten years ago, but hey, [looking for a thesis](https://diplomky.redhat.com/topic/show/190/xpath-20-support-to-libxml) to write?\r\n\r\nThus I propose to backport that bug fix from XPath 2.0 to `lxml`'s XPath interfaces with an opt-in `smart_prefix` option without considering the whole standard as  \r\n\r\n> practicality beats purity.\r\n\r\nBehind the scenes the ad-hoc prefix 'solution' described above is applied, but completely hidden from the client code.\r\n\r\nThis pull request demonstrates the design and isn't completed yet, at least these issues still need to be addressed:\r\n\r\n- documentation\r\n- predicates are handled rather hackish and i have doubts that it works with more complex predicates\r\n  - i'd appreciate test proposals for practical examples with such\r\n  - support for predicates with the `smart_prefix` option could be dropped altogether, finer-grained selection is possible with Python and probably a common usage\r\n- should this even be the default behavior with opt-out? afaict it wouldn't break any code as supplying a namespace map with a default namespace (mapped to `None`) is currently invalid \r\n  - i'd keep it out of XSLT anyway\r\n- should result elements from such queries have a property that stores the option? so later calls on `.xpath()` of these elements would behave the same if no `smart_prefix` option is provided\r\n- can `regex.h` be used directly from Cython, but that's not specific to this here\r\n\r\nbtw, this is the first time i used Cython and my C usage was long ago, i'm happy about every feedback for improvements.\r\n\r\nNow, let's have some fun:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{None: 'http://www.tei-c.org/ns/1.0', 'x': 'http://www.w3.org/2000/svg'}\r\n>>> root.xpath('./text/body', namespaces=root.nsmap, smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n>>> root.xpath('./text/body', smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n```\r\n\r\n(oh, the inplace build option fails on my local machine without a helpful message. does anyone have a hint on that?)\r\n"
            }
        ]
    },
    "mementoweb/py-memento-client": {
        "all": [
            {
                "repo_url": "https://github.com/mementoweb/py-memento-client",
                "id": 8,
                "title": "AttributeError on prescribed use of memento_info",
                "labels": [],
                "description": "This was reported by @jayvdb in https://phabricator.wikimedia.org/T112250:\n\n<hr>\n\nWhen there is a gateway error in the timegate server, Memento client response doesnt include what we expect, and doesnt raise an exception.\n\nWhen we were using `memento_info.get('mementos').get('closest').get('uri')[0]`, it failed with an AttributeError:\n\n```\n======================================================================\nERROR: test_newest (tests.weblinkchecker_tests.TestMementoWebCite)\nTest WebCite for newest https://google.com.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/travis/build/jayvdb/pywikibot-core/tests/weblinkchecker_tests.py\", line 73, in test_newest\n    archivedversion = self._get_archive_url('https://google.com')\n  File \"/home/travis/build/jayvdb/pywikibot-core/tests/weblinkchecker_tests.py\", line 45, in _get_archive_url\n    self.timegate_uri)\n  File \"/home/travis/build/jayvdb/pywikibot-core/scripts/weblinkchecker.py\", line 181, in _get_closest_memento_url\n    return memento_info.get('mementos').get('closest').get('uri')[0]\nAttributeError: 'NoneType' object has no attribute 'get'\n```\n\nhttps://travis-ci.org/jayvdb/pywikibot-core/jobs/79818375#L3326\n\nA patch to `weblinkchecker.py` has been merged to raise a more informative Exception.  `weblinkchecker.py` doesn't have serious problem here, as it catches any error and falls back from Internet Archive -> WebCite -> user error.\n\n<hr>\n\nIdeas for remediation:\n- @hariharshankar has suggested filling the data structure out so that this does not happen.\n- raise an exception if the TimeGate comes back with nothing\n- create a convenience method for this use case that would handle this error internally\n"
            },
            {
                "repo_url": "https://github.com/mementoweb/py-memento-client",
                "id": 2,
                "title": "More efficient timegate query option",
                "labels": [],
                "description": "Great to see this library, I was just exploring using the `get_memento_info` for Netcapsule or Reconstruct and ran into the following issue.\n\nWhile the `get_memento_info` is a great general purpose function, I think there needs to be a more optimized option that performs just the basic \"Get memento from TimeGate at specified datetime\" and nothing else. Ideally, this means having a single HTTP request to the TimeGate to get the desired info.\n\nI propose adding an extra param, `include_uri_checks`, which will default to True, but when set to False, will disable any of the following additional checks.\n\nCurrently, the `get_memento_info` also includes the following:\n- A `get_original_uri` queries the original url to determine if its a URL-R or URl-M. This is unnecessary if the user knows that a URL-R is being passed in (and potentially slow). With `include_uri_checks` disabled, this test will be skipped.\n- Redirects are enabled on the TimeGate `HEAD` request, initiating potentially many redirects. This can be disabled to ensure just one request to the TimeGate. With `include_uri_checks` disabled,\n  the value of `Location` or `Content-Location` header will be used instead.\n- Redirects are followed with a head request to the URL-M to get the `Memento-Datetime` header. This also brings additional overhead. Instead, the datetime is usually already available Link header response from the TimeGate, getting the `datetime` from the `rel=memento` entry. (As a side note, I was surprised to find that this is not required, though luckily present in most implementations -- seems like the timegate should always return the datetime in the link header, rather than force user to make another request to the URL-M)\n- With this option, automatic redirecting, eg. `http://lanl.gov` -> `http://www.lanl.gov/worldview/` is disabled, as the users browser will follow the 302 explicitly and it will be reflected to the user.\n\nFor now, I've called this property `include_uri_checks` but can be changed to something else. If better to make a separate function, that can work as well.\n\nWith this option disabled, Reconstruct and Netcapsule can use start using this API, rather than relying on the existing Memento JSON api that's only on the aggregator.\n\nI've also included a simple test file with demonstrates these changes.\n\nLet me know if there are any questions/thoughts.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/mementoweb/py-memento-client",
                "id": 2,
                "title": "More efficient timegate query option",
                "labels": [],
                "description": "Great to see this library, I was just exploring using the `get_memento_info` for Netcapsule or Reconstruct and ran into the following issue.\n\nWhile the `get_memento_info` is a great general purpose function, I think there needs to be a more optimized option that performs just the basic \"Get memento from TimeGate at specified datetime\" and nothing else. Ideally, this means having a single HTTP request to the TimeGate to get the desired info.\n\nI propose adding an extra param, `include_uri_checks`, which will default to True, but when set to False, will disable any of the following additional checks.\n\nCurrently, the `get_memento_info` also includes the following:\n- A `get_original_uri` queries the original url to determine if its a URL-R or URl-M. This is unnecessary if the user knows that a URL-R is being passed in (and potentially slow). With `include_uri_checks` disabled, this test will be skipped.\n- Redirects are enabled on the TimeGate `HEAD` request, initiating potentially many redirects. This can be disabled to ensure just one request to the TimeGate. With `include_uri_checks` disabled,\n  the value of `Location` or `Content-Location` header will be used instead.\n- Redirects are followed with a head request to the URL-M to get the `Memento-Datetime` header. This also brings additional overhead. Instead, the datetime is usually already available Link header response from the TimeGate, getting the `datetime` from the `rel=memento` entry. (As a side note, I was surprised to find that this is not required, though luckily present in most implementations -- seems like the timegate should always return the datetime in the link header, rather than force user to make another request to the URL-M)\n- With this option, automatic redirecting, eg. `http://lanl.gov` -> `http://www.lanl.gov/worldview/` is disabled, as the users browser will follow the 302 explicitly and it will be reflected to the user.\n\nFor now, I've called this property `include_uri_checks` but can be changed to something else. If better to make a separate function, that can work as well.\n\nWith this option disabled, Reconstruct and Netcapsule can use start using this API, rather than relying on the existing Memento JSON api that's only on the aggregator.\n\nI've also included a simple test file with demonstrates these changes.\n\nLet me know if there are any questions/thoughts.\n"
            }
        ]
    },
    "datapublica/munkres": {
        "all": [],
        "suitable": []
    },
    "amperser/proselint": {
        "all": [
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 421,
                "title": "phrasal adjectives with an adverb ending in -ly should exclude words like family",
                "labels": [],
                "description": "> 1-metaphor.md:608:5: garner.phrasal_adjectives.ly No hyphen is necessary in phrasal adjectives with an adverb ending in -ly.\n\nis choking on family-tree. The rule should exclude nouns ending in -ly (family, early)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 419,
                "title": "Too many nouns in a row test, plain language guidelines",
                "labels": [],
                "description": "One of the rules that may be easier to implement but still requires a bit of proper NLP is the [Federal Plain Language Guidelines recommendation about noun strings](http://www.plainlanguage.gov/howto/guidelines/FederalPLGuidelines/writeNoNounStrings.cfm)\n\n> The bulk of government and technical writing uses too many noun strings \u2013 groups of nouns \u201csandwiched\u201d together. Readability suffers when three words that are ordinarily separate nouns follow in succession. Once you get past three, the string becomes unbearable. Technically, clustering nouns turns all but the last noun into adjectives. However, many users will think they\u2019ve found the noun when they\u2019re still reading adjectives, and will become confused.\n\nThis provides an explicit recommendation (\u2265 3 nouns in sequence), but I fear that that may cause too many false alarms, though of course we can test this. My suggestion is to make it slightly weaker (>3 nouns in sequence), however this would require using an NLP engine like spaCy (see #110). \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 896,
                "title": "Update itsdangerous to 1.0.0",
                "labels": [],
                "description": "\nThis PR updates [itsdangerous](https://pypi.org/project/itsdangerous) from **0.24** to **1.0.0**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 1.0.0\n   ```\n   -------------\n\nReleased 2018-10-18\n\n-   Drop support for Python 2.6 and 3.3.\n-   Refactor code from a single module to a package. Any object in the\n    API docs is still importable from the top-level ``itsdangerous``\n    name, but other imports will need to be changed. A future release\n    will remove many of these compatibility imports. (`107`_)\n-   Optimize how timestamps are serialized and deserialized. (`13`_)\n-   ``base64_decode`` raises ``BadData`` when it is passed invalid data.\n    (`27`_)\n-   Ensure value is bytes when signing to avoid a ``TypeError`` on\n    Python 3. (`29`_)\n-   Add a ``serializer_kwargs`` argument to ``Serializer``, which is\n    passed to ``dumps`` during ``dump_payload``. (`36`_)\n-   More compact JSON dumps for unicode strings. (`38`_)\n-   Use the full timestamp rather than an offset, allowing dates before\n    2011. (`46`_)\n-   Detect a ``sep`` character that may show up in the signature itself\n    and raise a ``ValueError``. (`62`_)\n-   Use a consistent signature for keyword arguments for\n    ``Serializer.load_payload`` in subclasses. (`74`_, `75`_)\n-   Change default intermediate hash from SHA-1 to SHA-512. (`80`_)\n-   Convert JWS exp header to an int when loading. (`99`_)\n\n.. _13: https://github.com/pallets/itsdangerous/pull/13\n.. _27: https://github.com/pallets/itsdangerous/pull/27\n.. _29: https://github.com/pallets/itsdangerous/issues/29\n.. _36: https://github.com/pallets/itsdangerous/pull/36\n.. _38: https://github.com/pallets/itsdangerous/issues/38\n.. _46: https://github.com/pallets/itsdangerous/issues/46\n.. _62: https://github.com/pallets/itsdangerous/issues/62\n.. _74: https://github.com/pallets/itsdangerous/issues/74\n.. _75: https://github.com/pallets/itsdangerous/pull/75\n.. _80: https://github.com/pallets/itsdangerous/pull/80\n.. _99: https://github.com/pallets/itsdangerous/pull/99\n.. _107: https://github.com/pallets/itsdangerous/pull/107\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/itsdangerous\n  - Changelog: https://pyup.io/changelogs/itsdangerous/\n  - Homepage: https://palletsprojects.com/p/itsdangerous/\n  - Docs: https://pythonhosted.org/itsdangerous/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 415,
                "title": "Please consider adding automatic arg completion with python3-argcomplete",
                "labels": [
                    "enhancement"
                ],
                "description": "Automatic arg completion for bash can be achieved by using\nhttps://tracker.debian.org/pkg/python-argcomplete\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 414,
                "title": "Please consider signing releases with OpenGPG",
                "labels": [
                    "enhancement"
                ],
                "description": "A nice read on GPG good practices is https://help.riseup.net/en/security/message-security/openpgp/best-practices .\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 411,
                "title": "Extract Rules from \"Write it Right\" by Ambrose Bierce",
                "labels": [
                    "extraction"
                ],
                "description": "Most rules are pretty simple, but require context. Many recommendations are archaic. Text is available from the Gutenberg Project: https://www.gutenberg.org/files/12474/12474-h/12474-h.htm\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 407,
                "title": "Extract advice from Style Writer",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.editorsoftware.com/StyleWriter_Features.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 888,
                "title": "Update flask-cors to 3.0.6",
                "labels": [],
                "description": "\nThis PR updates [Flask-Cors](https://pypi.org/project/Flask-Cors) from **3.0.4** to **3.0.6**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 3.0.6\n   ```\n   Manual error in release process. Identical contents at 3.0.5.\n   ```\n   \n  \n  \n   ### 3.0.5\n   ```\n   Fixes incorrect handling of regexes containg `[`, and a few other special characters. Fixes Issue [212](https://github.com/corydolphin/flask-cors/issues/212)\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/flask-cors\n  - Changelog: https://pyup.io/changelogs/flask-cors/\n  - Repo: https://github.com/corydolphin/flask-cors\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 403,
                "title": "Extract advice from Eats, Shoots, & Leaves",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.amazon.com/Eats-Shoots-Leaves-Tolerance-Punctuation/dp/1592402038\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 731,
                "title": "Enable unicode_literals for checks.links.broken",
                "labels": [],
                "description": "This makes `\\uXXXX` escape sequences in the regular expression work in Python 2.\n\nFixes #672"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 402,
                "title": "Extract advice from 'Woe is I'",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.amazon.com/Woe-Grammarphobes-Better-English-Edition/dp/157322331X\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 401,
                "title": "Extract advice from Kate Turabian's book",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.press.uchicago.edu/books/turabian/manual/index.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 400,
                "title": "Extract advice from Mignon Fogarty's blog",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.quickanddirtytips.com/grammar-girl\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 396,
                "title": "Add a manual page",
                "labels": [
                    "enhancement"
                ],
                "description": "I have attached a simple manpage, but I guess it would be better to generate it automatically by using sphinx and [sphinxcontrib-autoprogram](https://pythonhosted.org/sphinxcontrib-autoprogram/) (or maybe [sphinx-argparse](https://github.com/ribozz/sphinx-argparse), but that doesn't seem to support click yet).\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 393,
                "title": "Disable Butterick by default",
                "labels": [
                    "enhancement"
                ],
                "description": "The presumptive use of Proselint is for unrendered plaintext (Markdown, RTF, TXT). In light of this, I can\u2019t make sense of using Butterick as a default filter.\n\nThe [documentation for Markdown basics](http://daringfireball.net/projects/markdown/basics) uses non-curly quotes and triple-period ellipses, whereas the surrounding, post-processed text uses the \u201cproper versions\u201d, since it has been parsed by SmartyPants.\n\nGiven the dedication to thwarting false positives, this feels like an extreme case of a false positives that might deter people from using Proselint after running it the first time on their plaintext files.\n\nBesides the detriment to the experimence, it doesn\u2019t makes sense. if we assume some basic usage case for the linter. :)\n\nEDIT: Lotta typos, lord.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 386,
                "title": "A/an distinction",
                "labels": [],
                "description": "I noticed that at least one check, oxford.venery_terms, does not take into account the a/an distinction in English, which results in the code not doing what it should:\n\n```\nlist = []\nfor term_pair in term_list:\n    for generic in generic_terms:\n        wrong = \"a {} of {}\".format(generic, term_pair[0])\n        right = \"a {} of {}\".format(term_pair[1], term_pair[0])\n        list += [[right, [wrong]]]\n```\n\nFor example, unless I am misinterpreting this code, it would suggest \"a army of caterpillars\" instead of \"an army of caterpillars.\"\n\nI imagine (though I haven't checked to confirm) that there are other locations in the code where the a/an distinction is relevant, so perhaps a general solution would be to write a helper function that automatically generates the appropriate article.\n\nAlternatively, I can think of another solution, but this would be a lot more complex and I'm not sure how workable this would be. You could have rules stack on each other; after all it is theoretically possible that fixing one rule violation in the prescribed fashion leads to another rule violation (the a/an example I have given here is a simple example). In such a case you would have certain rules stack on top of others and then modify them accordingly, so there could be an \"a/an\" rule corrector stacked on top of the venery terms rule corrector that corrects the mistakes made by the latter. You could generalize this to other areas, probably. But I'm guessing this would require a substantial rewrite of the project.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 891,
                "title": "Fix typo in README closes #780",
                "labels": [],
                "description": "This fixes a spelling mistake in the README."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 729,
                "title": "Support more than two keys in .proselintrc",
                "labels": [],
                "description": "In #491, @netflash pointed out that:\r\n\r\n> Looks like the filter in the tools.py only works with first 2 keys,\r\n`\"typography.symbols.curly_quotes\": false,` won't work, and this\r\n`\"typography.symbols\": false,` should work\r\n\r\nIt would be great if we could have more control over what rules to ignore."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 382,
                "title": "\"but however\" and \"but nevertheless\"",
                "labels": [],
                "description": "From @suchow:\n\n> This is complicated. \"But however, the man ate the cheese\" should become \"However, the man \u2026\" not \"But, the man...\", and \"but nevertheless\" sometimes needs to be rewritten in a more complicated way, e.g., \"He ran, but nevertheless was caught\" should be \"He ran, but was caught nevertheless.\"\n> \n> Maybe kill this and open a separate issue.\n\nThink about + implement a way to consider these usages. (The simple version originally in `after_the_deadline.redundancy`  [#376] simply replaced both phrases with `but`\u2014but that doesn't really make sense.)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 381,
                "title": "Add command line option to omit or only use certain rulesets",
                "labels": [
                    "enhancement"
                ],
                "description": "It'd be nice if the command line let you select the rulesets.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 380,
                "title": "Extract guidelines from \"Plain English at Work\" by Edward P. Bailey",
                "labels": [],
                "description": "The book \"Plain English at Work\" by Edward P. Bailey has a set of recommendations, primarily focused at replacing bureaucratic language with simpler and clearer phrases.\n\nIts \"appendix A\" has a set of words and recommended alternatives.  Examples are:\n- accomplish -> do\n- afford an opportunity -> let\n- anticipate -> expect\n- assist -> help\n\nWould this be of interest?  I'd be willing to type them in if #238 is fixed.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 378,
                "title": "Multi-word checks do not break over new lines",
                "labels": [
                    "bug"
                ],
                "description": "Many checks for multiple-word phrases do not flag if the phrase includes a line break.\n\nFor example, orwell.debased flags\n'It is a consideration which we should do well to bear in mind in these times.'\nbut not\n'It is a consideration which we should do well to bear \nin mind in these times.'\n\nThis could be fixed for each check, but it would probably be better to modify the tools.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 375,
                "title": "Shakespeare a terrible writer?",
                "labels": [],
                "description": "I ran a couple of works by Shakespeare through proselint and, even ignoring the various words marked as archaic, he sets off a lot of flags.\n\nWhat does it say about the grammatical mavens and pundits this project relies on that they would mark one of the greatest authors of the English language as being chock full of stylistic errors?\n\nHere is one that came up a lot, for example: Wallace's uncomparables, i.e. \"most true\" or \"most fatal.\" This seems like a bad rule because the word \"most\" does not necessarily imply comparison. It can just as well act as a intensifier, like the word \"very.\" Wallace might argue that truth is binary, either it is or it isn't, but that clearly isn't true. Proof: the expression \"partially true.\"\n\nOr consider the word \"accurate\" and the related word \"precise,\" which Wallace cites directly in the quote in the docstring of wallace/uncomparables.py. Yet accuracy isn't binary, as he argues, in many usages. In particular, in a scientific usage, both accuracy and precision are not discrete; they are mathematically quantifiable on a continuous scale.\n\nI'm sure I could apply similar arguments against a lot of the stylistic \"suggestions\" offered here. A lot of them strike me as writers simply stroking their own egos in a more-grammatical-than-thou fashion.\n\nIt would make much more sense to apply a critical lens to proposed rule additions to this project, rather than simply adding any old rule because some famous dude said it.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 708,
                "title": "Inline suppression comments",
                "labels": [],
                "description": "Are there any special markers (like comments in latex) that can be used to turn of linting for a certain line? If not, such a thing would be very nice to avoid some false positives."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 374,
                "title": "Avoid over-use of the word \"actually\" with proselint",
                "labels": [],
                "description": "Actually, I was tired of actually having to actually see people actually write like this...\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 367,
                "title": "JavaScript Wrapper/Transpiler",
                "labels": [],
                "description": "Is Python backend at `api.proselint.com` running just for [the demo page](http://proselint.com/write)? ([broken in FF](https://github.com/amperser/proselint/issues/227))\r\n\r\nI wonder if it would be feasible to run it entirely in the browser using one of [these py2js solutions](https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js#python).\r\n\r\nIt would be an one-time investment that removes the cost of maintaining the backend server and provides a reusable JS wrapper library for the linter itself.\r\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 364,
                "title": "Figure out a way to test the web app outside production",
                "labels": [
                    "tooling"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 892,
                "title": "Update pytest to 3.9.1",
                "labels": [],
                "description": "\nThis PR updates [pytest](https://pypi.org/project/pytest) from **3.7.3** to **3.9.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 3.8.2\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `4036 &lt;https://github.com/pytest-dev/pytest/issues/4036&gt;`_: The ``item`` parameter of ``pytest_warning_captured`` hook is now documented as deprecated. We realized only after\n  the ``3.8`` release that this parameter is incompatible with ``pytest-xdist``.\n\n  Our policy is to not deprecate features during bugfix releases, but in this case we believe it makes sense as we are\n  only documenting it as deprecated, without issuing warnings which might potentially break test suites. This will get\n  the word out that hook implementers should not use this parameter at all.\n\n  In a future release ``item`` will always be ``None`` and will emit a proper warning when a hook implementation\n  makes use of it.\n\n\n\nBug Fixes\n---------\n\n- `3539 &lt;https://github.com/pytest-dev/pytest/issues/3539&gt;`_: Fix reload on assertion rewritten modules.\n\n\n- `4034 &lt;https://github.com/pytest-dev/pytest/issues/4034&gt;`_: The ``.user_properties`` attribute of ``TestReport`` objects is a list\n  of (name, value) tuples, but could sometimes be instantiated as a tuple\n  of tuples.  It is now always a list.\n\n\n- `4039 &lt;https://github.com/pytest-dev/pytest/issues/4039&gt;`_: No longer issue warnings about using ``pytest_plugins`` in non-top-level directories when using ``--pyargs``: the\n  current ``--pyargs`` mechanism is not reliable and might give false negatives.\n\n\n- `4040 &lt;https://github.com/pytest-dev/pytest/issues/4040&gt;`_: Exclude empty reports for passed tests when ``-rP`` option is used.\n\n\n- `4051 &lt;https://github.com/pytest-dev/pytest/issues/4051&gt;`_: Improve error message when an invalid Python expression is passed to the ``-m`` option.\n\n\n- `4056 &lt;https://github.com/pytest-dev/pytest/issues/4056&gt;`_: ``MonkeyPatch.setenv`` and ``MonkeyPatch.delenv`` issue a warning if the environment variable name is not ``str`` on Python 2.\n\n  In Python 2, adding ``unicode`` keys to ``os.environ`` causes problems with ``subprocess`` (and possible other modules),\n  making this a subtle bug specially susceptible when used with ``from __future__ import unicode_literals``.\n\n\n\nImproved Documentation\n----------------------\n\n- `3928 &lt;https://github.com/pytest-dev/pytest/issues/3928&gt;`_: Add possible values for fixture scope to docs.\n   ```\n   \n  \n  \n   ### 3.8.1\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3286 &lt;https://github.com/pytest-dev/pytest/issues/3286&gt;`_: ``.pytest_cache`` directory is now automatically ignored by Git. Users who would like to contribute a solution for other SCMs please consult/comment on this issue.\n\n\n- `3749 &lt;https://github.com/pytest-dev/pytest/issues/3749&gt;`_: Fix the following error during collection of tests inside packages::\n\n      TypeError: object of type &#39;Package&#39; has no len()\n\n\n- `3941 &lt;https://github.com/pytest-dev/pytest/issues/3941&gt;`_: Fix bug where indirect parametrization would consider the scope of all fixtures used by the test function to determine the parametrization scope, and not only the scope of the fixtures being parametrized.\n\n\n- `3973 &lt;https://github.com/pytest-dev/pytest/issues/3973&gt;`_: Fix crash of the assertion rewriter if a test changed the current working directory without restoring it afterwards.\n\n\n- `3998 &lt;https://github.com/pytest-dev/pytest/issues/3998&gt;`_: Fix issue that prevented some caplog properties (for example ``record_tuples``) from being available when entering the debugger with ``--pdb``.\n\n\n- `3999 &lt;https://github.com/pytest-dev/pytest/issues/3999&gt;`_: Fix ``UnicodeDecodeError`` in python2.x when a class returns a non-ascii binary ``__repr__`` in an assertion which also contains non-ascii text.\n\n\n\nImproved Documentation\n----------------------\n\n- `3996 &lt;https://github.com/pytest-dev/pytest/issues/3996&gt;`_: New `Deprecations and Removals &lt;https://docs.pytest.org/en/latest/deprecations.html&gt;`_ page shows all currently\n  deprecated features, the rationale to do so, and alternatives to update your code. It also list features removed\n  from pytest in past major releases to help those with ancient pytest versions to upgrade.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3955 &lt;https://github.com/pytest-dev/pytest/issues/3955&gt;`_: Improve pre-commit detection for changelog filenames\n\n\n- `3975 &lt;https://github.com/pytest-dev/pytest/issues/3975&gt;`_: Remove legacy code around im_func as that was python2 only\n   ```\n   \n  \n  \n   ### 3.8.0\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: ``Config.warn`` and ``Node.warn`` have been\n  deprecated, see `&lt;https://docs.pytest.org/en/latest/deprecations.htmlconfig-warn-and-node-warn&gt;`_ for rationale and\n  examples.\n\n- `3936 &lt;https://github.com/pytest-dev/pytest/issues/3936&gt;`_: ``pytest.mark.filterwarnings`` second parameter is no longer regex-escaped,\n  making it possible to actually use regular expressions to check the warning message.\n\n  **Note**: regex-escaping the match string was an implementation oversight that might break test suites which depend\n  on the old behavior.\n\n\n\nFeatures\n--------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: Internal pytest warnings are now issued using the standard ``warnings`` module, making it possible to use\n  the standard warnings filters to manage those warnings. This introduces ``PytestWarning``,\n  ``PytestDeprecationWarning`` and ``RemovedInPytest4Warning`` warning types as part of the public API.\n\n  Consult `the documentation &lt;https://docs.pytest.org/en/latest/warnings.htmlinternal-pytest-warnings&gt;`_ for more info.\n\n\n- `2908 &lt;https://github.com/pytest-dev/pytest/issues/2908&gt;`_: ``DeprecationWarning`` and ``PendingDeprecationWarning`` are now shown by default if no other warning filter is\n  configured. This makes pytest more compliant with\n  `PEP-0506 &lt;https://www.python.org/dev/peps/pep-0565/recommended-filter-settings-for-test-runners&gt;`_. See\n  `the docs &lt;https://docs.pytest.org/en/latest/warnings.htmldeprecationwarning-and-pendingdeprecationwarning&gt;`_ for\n  more info.\n\n\n- `3251 &lt;https://github.com/pytest-dev/pytest/issues/3251&gt;`_: Warnings are now captured and displayed during test collection.\n\n\n- `3784 &lt;https://github.com/pytest-dev/pytest/issues/3784&gt;`_: ``PYTEST_DISABLE_PLUGIN_AUTOLOAD`` environment variable disables plugin auto-loading when set.\n\n\n- `3829 &lt;https://github.com/pytest-dev/pytest/issues/3829&gt;`_: Added the ``count`` option to ``console_output_style`` to enable displaying the progress as a count instead of a percentage.\n\n\n- `3837 &lt;https://github.com/pytest-dev/pytest/issues/3837&gt;`_: Added support for &#39;xfailed&#39; and &#39;xpassed&#39; outcomes to the ``pytester.RunResult.assert_outcomes`` signature.\n\n\n\nBug Fixes\n---------\n\n- `3911 &lt;https://github.com/pytest-dev/pytest/issues/3911&gt;`_: Terminal writer now takes into account unicode character width when writing out progress.\n\n\n- `3913 &lt;https://github.com/pytest-dev/pytest/issues/3913&gt;`_: Pytest now returns with correct exit code (EXIT_USAGEERROR, 4) when called with unknown arguments.\n\n\n- `3918 &lt;https://github.com/pytest-dev/pytest/issues/3918&gt;`_: Improve performance of assertion rewriting.\n\n\n\nImproved Documentation\n----------------------\n\n- `3566 &lt;https://github.com/pytest-dev/pytest/issues/3566&gt;`_: Added a blurb in usage.rst for the usage of -r flag which is used to show an extra test summary info.\n\n\n- `3907 &lt;https://github.com/pytest-dev/pytest/issues/3907&gt;`_: Corrected type of the exceptions collection passed to ``xfail``: ``raises`` argument accepts a ``tuple`` instead of ``list``.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Removed ``&quot;run all (no recorded failures)&quot;`` message printed with ``--failed-first`` and ``--last-failed`` when there are no failed tests.\n   ```\n   \n  \n  \n   ### 3.7.4\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3506 &lt;https://github.com/pytest-dev/pytest/issues/3506&gt;`_: Fix possible infinite recursion when writing ``.pyc`` files.\n\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Cache plugin now obeys the ``-q`` flag when ``--last-failed`` and ``--failed-first`` flags are used.\n\n\n- `3883 &lt;https://github.com/pytest-dev/pytest/issues/3883&gt;`_: Fix bad console output when using ``console_output_style=classic``.\n\n\n- `3888 &lt;https://github.com/pytest-dev/pytest/issues/3888&gt;`_: Fix macOS specific code using ``capturemanager`` plugin in doctests.\n\n\n\nImproved Documentation\n----------------------\n\n- `3902 &lt;https://github.com/pytest-dev/pytest/issues/3902&gt;`_: Fix pytest.org links\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pytest\n  - Changelog: https://pyup.io/changelogs/pytest/\n  - Homepage: https://docs.pytest.org/en/latest/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 356,
                "title": "Config files are loaded only from a central location",
                "labels": [],
                "description": "The `.proselintrc` file is [searched for](https://github.com/amperser/proselint/blob/master/proselint/command_line.py#L56) only in the base directory of proselinty itself.  This makes it impossible for the user to disable some of the checking rules.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 63,
                "title": "Fix web plugin's choice of column to underline",
                "labels": [
                    "bug"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 355,
                "title": "Output format",
                "labels": [],
                "description": "Proselint prints only the [basename](https://github.com/amperser/proselint/blob/7288bb88fed4f8d854c14bac884eda2b5cf62f63/proselint/command_line.py#L33) of filenames in normal text output.  This makes said output useless when proselint is run from an editor against a file that is located anywhere else than the current directory.\n\nOn the other hand, the [JSON output](https://github.com/amperser/proselint/blob/7288bb88fed4f8d854c14bac884eda2b5cf62f63/proselint/command_line.py#L131-L141) doesn't contain any information about filenames.  This makes the JSON output useless (and invalid as JSON) when linting several files at once.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 745,
                "title": "misc.but reports false positive",
                "labels": [],
                "description": "Run proselint on the following file:\r\n\r\n```\r\nThis line is OK,\r\nbut this is not.\r\n```\r\n\r\nThe following error is reported:\r\n\r\n```\r\nmisc.but No paragraph should start with a 'But'.\r\n```\r\n\r\nThat \"but\" is not only not at the beginning of the paragraph, it's not even at the beginning of a sentence."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 345,
                "title": "Test system assumes proselint is installed instead of testing the code in the source tree",
                "labels": [],
                "description": "For example, https://github.com/amperser/proselint/blob/master/tests/_test_version.py#L17 \n\n`out = subprocess.check_output(\"proselint --version\", shell=True)`\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 342,
                "title": "Exclude code",
                "labels": [],
                "description": "I'm interested in running this on technical documentation, but for it to be meaningful you'd have to exclude any code in backticks or code blocks, and I can't see an easy way to do that. \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 341,
                "title": "False positives",
                "labels": [
                    "false alarm"
                ],
                "description": "I ran this through the release note for the code base I work on, which is an ascii format file; I got the following false reports:\n\n> DataSource for Java was updated from 6.2.2-296613 to 6.2.5-300333.\n\ncauses\n\n`garner.dates When specifying a date range, write 'from X to Y'.`\nWrong because it is not a valid date format.\n\n> Resolved an issue with the margin on the spot rate being applied the\n\n`write_good.cliches 'on the spot' is a clich\u00e9.`\nWrong because spot rate is the subject.\n\n> When prices are nulled in the Reuters Admin applet, or the panic button is pressed\n\n`write_good.cliches 'panic button' is a clich\u00e9.`\nAgain, wrong because 'panic button' is not a figure of speech.\n\nFinally\n`butterick.symbols.curly_quotes Use curly quotes \u201c\u201d, not straight quotes \"\".`\n`butterick.symbols.curly_quotes Use curly quotes \u201c\u201d, not straight quotes \"\". Found 56 times elsewhere.`\n`butterick.symbols.ellipsis '...' is an approximation, use the ellipsis symbol '\u2026'.`\nWrong because of the file format.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 751,
                "title": "FR: en/em dash support",
                "labels": [],
                "description": "en/em(--, -- ,---) dash support in checks/typography/symbols.py would be nice, if feasible.\r\n\r\nEn dashes denote ranges (eg. Monday--Friday), but can be also function as em dashes if surrounded by spaces."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 336,
                "title": "Check Copyeditor's Handbook for linting rules",
                "labels": [
                    "extraction"
                ],
                "description": "[The Copyeditor's Handbook](http://www.amazon.com/The-Copyeditors-Handbook-Publishing-Communications/dp/0520271564/?tag=thisautomated-20) by Amy Ainsohn\n\nWorth checking for rules. May buy in a little while. \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 335,
                "title": "Go through the subversive copyeditor for potential linting rules",
                "labels": [
                    "extraction"
                ],
                "description": "[the subversive copyeditor](http://www.amazon.com/The-Subversive-Copy-Editor-Relationships/dp/0226734250/?tag=thisautomated-20) by Carol Fisher Seller\n\nMay have good linting rules. Probably will purchase in a little while. \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 60,
                "title": "Add rule on placement of \"only\"",
                "labels": [
                    "rule",
                    "hard"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 334,
                "title": "Extract issues from these emails",
                "labels": [
                    "bug"
                ],
                "description": "From: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 1:58:59 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nUse of the `multiplication` symbol (instead of multiplcation - missing i) \n\nChina, Shanghai Shi, Shanghai \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 2:25:10 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nMy Firefox browser console reported \"NS_ERROR_DOM_BAD_URI: Access to restricted URI denied\" on reqwest.min.js \n\nSingapore \nDesktop, Windows, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 2:35:59 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nPasted some markdown, and pointed out an error that makes no sense: https://monosnap.com/file/ZbNdixuCeIk7hpOqtDcOkz3Rr8Z75k \n\nSpain, Catalonia, Barcelona, Barcelona \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 2:58:21 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe error message is following the cursor even after correcting the error. \n\nPakistan, Sindh, Karachi \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 2:58:47 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe page does nothing on Firefox 44.0.2. I have uBlock but it is deactivated for this website. I only see the original text and there is no error displayed. \n\nFrance, Midi-Pyr\u00e9n\u00e9es, Upper Garonne, Toulouse \nDesktop, Windows 7, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:11:03 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nCan't see all warning message when hovering. E.g. in \"very\" word I see \"Substitute 'damn' every time you're inclined to write 'very;' your editor will d\". \n\nPoland, Kujawsko-Pomorskie, Bydgoszcz \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:13:09 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nSometimes warning messages not are not hiding. Very annoing, can't rid of them without page reload. \n\nPoland, Kujawsko-Pomorskie, Bydgoszcz \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:13:32 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nDoesn't with firefox on macos : NS_ERROR_DOM_BAD_URI: Access to restricted URI denied \n\nFrance, Provence-Alpes-C\u00f4te d'Azur, Vaucluse, Avignon \nDesktop, Mac OS X, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:15:54 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nIs this just a text? Other tell me there should be underlined things and hover messages for them, but I don't see any. \n\nFinland, Northern Ostrobothnia, Oulu \nDesktop, Ubuntu, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:43:31 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nIt doesn't do anything in Firefox. I can only see text. In Chrome I can see underlined text with the suggestions. \n\nUnited Kingdom, England, Oxfordshire, Oxford \nDesktop, Linux, Iceweasel\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 4:01:24 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nAll the of the proposed fixes don't seem to fit in the tootip. The tooltip will extend past the editing window, but at least two fwo of mine obviously ended before the entire tip was displayed. I'm on Chrome  47.0.2526.106 on Manjaro Linux. \n\nUnited States, Maryland, Columbia \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 4:35:36 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nSome messages are cut off. e.g. \"Substitute 'damn' every time you're inclined to write 'very;' your editor will d\" - no idea what the rest should say. I thought maybe you could click to see the rest of the text, but you can't.\n\nAlso, this feedback box (even when collapsed) overlaps the text and you can't read the last line unless you add some more line breaks. \n\nUnited Kingdom, England, Sutton \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:14:39 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nDoesn't work in firefox?  \n\nUnited States, Virginia, King George \nDesktop, Ubuntu, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:20:34 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nDetects gender bias on 'chairperson' despite the term being the gender neutral alternative to gendered nouns.  \n\nCanada, Quebec, Montreal \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:22:42 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"A large group of antelopes walked by the road.\"\n\nNow it won't tell me that I should use herd instead of group. \n\nNetherlands, Provincie Gelderland, Nijmegen \nOther, Other, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:34:19 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"in recent years, an increasing number of mathematicians have\"\n\nI gather that psychologists are professionals, but mathematicians are not? \n\nNetherlands, Provincie Gelderland, Nijmegen \nOther, Other, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:42:06 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThis box (\"Find a problem? Tell us about it.\") Is covering content and can't be moved.\nReadability? \n\nUnited Kingdom, England, Norfolk, Norwich \nDesktop, Mac OS X, Safari\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:45:04 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nLady Mondegreen incorrectly labeled as \"laid him on the green\" \n\nUnited Kingdom, England, Plumstead \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 6:00:57 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nthis stupid box \n\nBrazil, Santa Catarina, Florian\u00f3polis \nDesktop, Ubuntu, Chromium\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 6:06:20 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe text displayed when you hover over an underlined word is truncated.  The is obviously a problem. \n\nUnited States, Pennsylvania, Malvern \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 6:45:41 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe roll-over advice on phrasal adjectives appears to be backwards (it advises changes the correct, hyphenated form to the unhyphenated form.) \n\nUnited States, North Carolina, Chapel Hill \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 6:56:11 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe advice against \"more research is needed\" and against what looks like the introduction to a literature review (acknowledging the work of prior researchers is really the opposite of professional narcissism!) seems wrong for academic writing. It's not narcissism to sound like a professional if you are one. As for Latin, et al. is Latin too. Is mutatis mutandis worse that c'est la vie or que sera sera? Maybe the advice should read: \"Will your audience understand this?\" or something more audience-centered--? (There's a book called _They Say, I Say_ that lists the most common fixed expressions in academic writing. What's most common is seldom what's good, so I'm not sure it's a great resource for _good_ writing, but I don't want to send mixed-messages to first-time college students, etc., who are also trying to learn what sounds normal.) Stuff to think about! \n\nUnited States, North Carolina, Chapel Hill \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 7:00:37 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"is the preferred form\" sounds to me like a nod to the fact that prescriptivism is dumb, BUT it also sounds kind of passive-aggressive and condescending. It's also not necessarily accurate, since a misspelling like \"Chronicals\" is not, to my knowledge, an alternative form that's used somewhere but which isn't preferred in proselint's context--it's just a mistakes that isn't recognized anywhere?. \"conventional spelling\"? \"dictionary spelling\"? Again, \"shoe-in\" seems to MEAN something different from \"shoo-in\", so it's more of a false etymology than an issue of which form do \"we\" (whoever \"we\" are) \"prefer.\" \n\nUnited States, North Carolina, Chapel Hill \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 7:01:12 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nNot working for me :< Not even CLI \n\nPoland, Masovian Voivodeship, Warsaw \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 7:05:54 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe venery terms probably belong in the \"narcissism\" section... :) \n\nUnited States, North Carolina, Chapel Hill \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 7:08:12 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"Get that off of me before I catch on fire!\" This is the ONLY acceptable way to say this orally, in the actual circumstance of being on fire, where I am from. Is oral or dialectal a category that would be helpful in distinguishing forms that aren't \"preferred\" from forms (like the mondegreens) that someone invented on the spot the first time they tried to write something down? \n\nUnited States, North Carolina, Chapel Hill \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 7:29:43 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nError box the floating one sticks on to the pointer and remains even after fixing the issue. I think happens when you fix all the issues the last error remains. \n\nIndia, National Capital Territory of Delhi, Delhi \nDesktop, Windows, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 8:03:22 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n'kaleidoscope', not 'kaleidascope'. :/ \n\nUnited States, Massachusetts, Roslindale \nDesktop, Ubuntu, Chromium\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 8:27:40 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nUnable to select all text in demo on mobile device.  \n\nUnited States, California, San Francisco \nMobile, BlackBerry OS, BlackBerry WebKit\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 8:59:10 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nI just typed in \"I've been pouring over this book by Ghandi and it is definately wrong\" and no black dots appeared :( \n\nUnited Kingdom, England, Bath and North East Somerset, Bath \nDesktop, Ubuntu, Chromium\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:12:16 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe error message is stuck to my pointer. Can't seem to get rid of it. It's behind othe boxes that show up, but still very distracting. \n\nNice tool, btw! Cheers! \n\nIndia, Maharashtra, Mumbai \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:13:58 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"Mr. Carter\" is triggering the \"inconsistent spacing after period\" message when it shouldn't. \n\nUnited States, Massachusetts, Cambridge \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:35:55 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nDoesn't work with Firefox. \n\nArgentina, Mendoza, San Rafael \nDesktop, Windows 8.1, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:39:28 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nI don't see any underlined anything; it looks like a fairly normal markdown editor. \n\nUnited States, Connecticut, New Haven \nDesktop, Linux, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:39:40 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nMy mouseover text is floating around and following my cursor. \n\nUnited States, California, San Francisco \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 9:43:55 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nWhile hovering over curse words, the whole tooltip is not shown. \n\nPakistan, Punjab, Lahore \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 10:49:11 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nMessed around with the \"$1000 USD\" line and the tooltip followed my cursor around the document until I refreshed the page.  \n\nUnited States, Illinois, Chicago \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 10:50:09 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nYeah, edits lead to the tooltip staying up forever. (OS X Chrome) \n\nUnited States, Illinois, Chicago \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 11:10:58 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nHi, geat idea! Just that while the example text is shown, nothing is marked; so I thought I'd give feedback. Browser: Pale Moon  25.8.1 (x64); OS: Linux (BunsenLab); Cookies on, all JS on, Adblocker off. \n\nGermany, Lower Saxony, Weener \nDesktop, Linux, Pale Moon (Firefox Variant)\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 11:15:21 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nAddendum to my previous feedback (couple minutes ago, with PaleMoon browser): JS Error concole says:\n\nTimestamp: 07.03.2016 20:06:38\nError: TypeError: document.getElementById(...) is null\nSource File: chrome://adblockplus/content/ui/sidebarDetached.xul\nLine: 1\n\nTimestamp: 07.03.2016 20:06:44\nError: NS_ERROR_DOM_BAD_URI: Access to restricted URI denied\nSource File: http://proselint.com/write/reqwest.min.js\nLine: 6\n\nGermany, Lower Saxony, Weener \nDesktop, Linux, Pale Moon (Firefox Variant)\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 11:24:03 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nI don't see how to make this run \n\nCanada, Manitoba, Winnipeg \nDesktop, Windows 8.1, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 11:49:09 AM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nNo problem,  I just really wanted to say how amazing your service was.  It's so incredible. \n\nUnited Kingdom, England, Essex, Chelmsford \nDesktop, Windows 7, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:31:48 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nDid not work on Firefox, which I presumed to be related to noscript, ABE settings, etc. \n\nAlso did not work on out-of-the-box internet explorer (which I do not customize or secure, specifically to test or bypass Firefox configuration issues.)\n\nIE is older (11), and Firefox older still, but I'm will to be this demo just doesn't work on anything _except_ the latest Chrome. \n\nUnited States, Texas, Austin \nDesktop, Windows 7, IE\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:32:35 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nfollow-up to \"doesn't work\".\n\nThe previous problem report -- \"doesn't work on Firefox or IE\" -- was with respect to the live demo. \n\nUnited States, Texas, Austin \nDesktop, Windows 7, IE\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:37:37 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"Preceeding\" should be \"preceding\".  (You've confused \"precede\" with \"proceed\".) \n\nUnited States, California, Sunnyvale \nDesktop, Mac OS X, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:42:22 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nwhen you have a popup open about a fix and you fix it, the popup will not disappear, ever.\nthis is great, kudos! \n\nUnited States, Pennsylvania, Philadelphia \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:43:48 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n\"Kaleidoscope\" is misspelled in the pop-up.  (That example is a hoot!  I hadn't seen it.) \n\nUnited States, California, Sunnyvale \nDesktop, Mac OS X, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:44:29 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nPopup indicating \"apostrophe is not required after decades\" does not disappear after fixing it. When I hover on to so excited!!, \"after decades\" message is visible behind \"is hyperbolic\" popup. \n\nUnited States, Massachusetts, Hudson \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:47:25 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe pop-ups under \"Tense present\" simply repeat the underlined text. \n\nUnited States, California, Sunnyvale \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 12:51:10 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nIt does not work on Firefox. \n\nFrance, \u00cele-de-France, Paris, Paris \nDesktop, Linux, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 1:34:19 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \n'very unique' is caught, but not 'kind of unique' or 'mildly unique' or similar. \n\nUnited States, Illinois, Urbana \nDesktop, Linux, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 2:44:27 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nMove this little box to the right, so it doesn't cover what I'm typing. \n\nMexico, Guanajuato, Irapuato \nDesktop, Mac OS X, Safari\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:11:45 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nThe pop-up text for the phrasal adjective examples doesn't quite make sense.  E.g.:\n\n> Hyphenate 'big-ticket item', a phrasal adjective, as 'big ticket item.'.\n\n(1) 'Big-ticket item' is not a phrasal adjective; the phrasal adjective is 'big ticket'.\n\n(2) The text actually tells the reader to remove the hyphen.\n\n(3) Since you couldn't decide whether the period should go inside or outside the quotes, you put one in both places.\n\nThe big problem with phrasal adjectives is that people think that whether a phrase is a phrasal adjective is determined by the words in the phrase.  It's not; it's determined by the context in which the phrase appears, namely, modifying another noun.  So: \"a real-time system\", but \"in real time\".\n\nI suggest explaining this in the pop-up text.  A possible wording:\n\n> 'Big ticket' is a phrasal adjective because it modifies 'item', so hyphenate it: 'big-ticket item'.\n\n(Put the period inside the quote if you want -- I don't care -- just don't use two of them :-) \n\nUnited States, California, Sunnyvale \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 3:18:40 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nI entered some text that included a single exclamation mark, but Proselint flagged it with the comment \"More than 30 ppm of exclamations. Keep them under control.\" \n\nUnited States, Missouri, Columbia \nDesktop, Mac OS X, Chrome\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n\n\fFrom: GetSiteControl notify@getsitecontrol.com\nSubject: Message  via proselint.com\nDate: March 7, 2016 at 5:09:47 PM PST\nTo: hello@lifelinter.com\n\nNew message via \"Contact widget\"\n\nMessage \nI don't see anything happening in Firefox (on Mac OS X). \n\nUnited States, Pennsylvania, Pittsburgh \nDesktop, Mac OS X, Firefox\nhttp://proselint.com/write/ \n---\u2028Powered by GetSiteControl \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 894,
                "title": "Update requests to 2.20.0",
                "labels": [],
                "description": "\nThis PR updates [requests](https://pypi.org/project/requests) from **2.19.1** to **2.20.0**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 2.20.0\n   ```\n   -------------------\n\n**Bugfixes**\n\n-   Content-Type header parsing is now case-insensitive (e.g.\n    charset=utf8 v Charset=utf8).\n-   Fixed exception leak where certain redirect urls would raise\n    uncaught urllib3 exceptions.\n-   Requests removes Authorization header from requests redirected\n    from https to http on the same hostname. (CVE-2018-18074)\n-   `should_bypass_proxies` now handles URIs without hostnames (e.g.\n    files).\n\n**Dependencies**\n\n- Requests now supports urllib3 v1.24.\n\n**Deprecations**\n\n- Requests has officially stopped support for Python 2.6.\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/requests\n  - Changelog: https://pyup.io/changelogs/requests/\n  - Homepage: http://python-requests.org\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 325,
                "title": "Multiple sources for similar linting rules are difficult to incorporate in the same module",
                "labels": [],
                "description": "The current architecture takes the source as the top level organising principle, but this means that sets of rules that are conceptually similar but come from different sources are difficult to integrate into a single set of checks. \n\nOriginally ran across regarding clich\u00e9s in https://github.com/amperser/proselint/issues/314.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 316,
                "title": ".proselintrc example and terminal screenshot in README",
                "labels": [
                    "enhancement"
                ],
                "description": "Would be nice to have an explicit example section for .proselintrc, including both\n1. example contents (with some rules disabled)\n2. the relevant terminal terminal command(s)\n\nDoesn\u2019t _have_ to be a terminal screenshot, just something like\n\n``` sh\n$ postlint foo.markdown\n# (...) [error code]\n```\n\nI guess. But it\u2019d be nice with a screenshot for size.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 315,
                "title": "Add rule on 'literally'",
                "labels": [],
                "description": "Using 'literally' to emphasize a figurative expression is widespread. I'm not sure of the best way to handle this, but proselint could flag such use of the word as [informal](http://www.oxforddictionaries.com/definition/english/literally), or note that because the word can be used to stress both accuracy and mark hyperbole, its use can be confusing:\n\n> This newer, disputed usage (describing something non-literal, as a form of exaggeration) has become more frequent over time, and is now sometimes used quite deliberately in non-literal contexts. But literally has always been employed for added effect or emphasis. If you write, \u201cthe book is literally 500 pages\u201d, the statement may be precise, but its precision doesn\u2019t depend on the presence of the word literally; indeed the emphasis it adds may introduce doubt about the precision.\n\n```\nsource: OxfordWords Blog\nsource_url: http://blog.oxforddictionaries.com/2013/08/literally/\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 59,
                "title": "Get a Donald Knuth reward check",
                "labels": [],
                "description": "http://www.wikiwand.com/en/Knuth_reward_check\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 314,
                "title": "Anti-cliche suggestion",
                "labels": [
                    "needs clarification"
                ],
                "description": "I have collected a [bunch of commonly-used cliches from a variety of sources](https://github.com/shirish93/clicheDefender/blob/master/cliches.txt). Would there be any interest in adding it to  proselint?\n\nMy original idea was to create something similar to proselint but just for cliches. Considering how well it's been made, considering abandoning my repo and instead contributing to proselint. If there is interest, I'll start research on identifying where I got the cliches to begin with.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 313,
                "title": "Could not open cache file",
                "labels": [],
                "description": "Hey,\nI just shortly wanted to check this out and ran into a couple of problems. First, one you're probably already aware of, the incompratibility with python 2.7.\nI'm running in these problems here when I'm trying to run it with python 3.4 (I tried pip version, current master and v0.3.6 branch):\n\n`\nCould not open cache file /.proselint/checks.misc.chatspeak.check, maybe name collision\n`\nMore here: http://pastebin.com/ARZpLDQQ\n\nLots of these for all different check files, which I can't seem to find anywhere in the repository. This is then followed by ending up here: https://github.com/amperser/proselint/blob/master/proselint/tools.py#L50\n\n```\nTraceback (most recent call last):\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/proselint-0.3.6-py3.4.egg/proselint/tools.py\", line 50, in wrapped\n    return cache[key]\nTypeError: 'NoneType' object is not subscriptable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/root/.venvs/prose/bin/proselint\", line 9, in <module>\n    load_entry_point('proselint==0.3.6', 'console_scripts', 'proselint')()\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/click/core.py\", line 716, in __call__\n    return self.main(*args, **kwargs)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/click/core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/proselint-0.3.6-py3.4.egg/proselint/command_line.py\", line 165, in proselint\n    errors = lint(file, debug=debug)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/proselint-0.3.6-py3.4.egg/proselint/command_line.py\", line 79, in lint\n    result = check(text)\n  File \"/root/.venvs/prose/lib/python3.4/site-packages/proselint-0.3.6-py3.4.egg/proselint/tools.py\", line 59, in wrapped\n    '%s; it probably has unhashable args'] % (call_to))\nTypeError: unsupported operand type(s) for %: 'list' and 'str'\n```\n\nAm I doing something wrong?\n\nThanks already,\nMarcel\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 877,
                "title": "Add Vale to list of available plugins",
                "labels": [],
                "description": "https://github.com/errata-ai/vale"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 312,
                "title": "Add source to suggestions and maybe debug mode.",
                "labels": [],
                "description": "I just saw this in HN and showed it to my girlfriend. She's a professional English-Spanish translator and a writer. She was disappointed because the linter wouldn't explain why it was marking a sentence as incorrect. She was saying \"I'd like to know what's the source of this correction.\"\n\nI was also thinking that a debug mode would be nice, to show which checker threw the warning.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 873,
                "title": "Kellaway",
                "labels": [],
                "description": "Lucy Kellaway and _The Economist_ style guide have more suggestions for how to write better. Thanks for making this tool."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 310,
                "title": "First\u2026 , Second\u2026, Prefatory counting and signaling behavior",
                "labels": [
                    "medium",
                    "enhancement",
                    "needs clarification"
                ],
                "description": "Need to find an authoritative reference for this, but it would seem to be possible to check for the use of prefatory counting signatures \"First, \u2026\" to ensure that they are followed by a \"Second, \u2026\" or \"Next, \u2026\" or other similar prefatory signatures in order to keep the theme consistent. \n\nPerhaps, \"Second, \u2026\" or \"Next, \u2026\" or something like it would need to appear before the end of the text and before the next instance of \"First,\u2026\" \n\nSimilarly, \"Finally,\" may have some role to play in a check like this.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 308,
                "title": "Add multilanguage support",
                "labels": [
                    "enhancement"
                ],
                "description": "It would be great if rules for others languages could be added to the linter.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 306,
                "title": "checks are improperly triggered by hyphenated words.",
                "labels": [
                    "false alarm"
                ],
                "description": "It seems that proselint is using hyphens as word boundaries. This can lead to false positives. For example, this phrase: \n\n>  ... a 4th order low-pass with a roll-off of 24 db/octave ... \n\ntriggered _ganer.preferred_forms_, because \"off\" is preferred to \"off of\". Roll-off, of course, is a completely unrelated compound word. While this particular example is fairly jargony, there's potential for other false positives of this class.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 773,
                "title": "Confused about the misc.annotations warning when linting Markdown",
                "labels": [],
                "description": "I've received this warning a lot when linting Markdown:\r\n\r\n    misc.annotations Annotation left in text.\r\n\r\nWhat's triggering these?"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 300,
                "title": "false alarm on \"very\"",
                "labels": [
                    "medium",
                    "false alarm"
                ],
                "description": "False alarm:\n\n\"And there he was: the very same man who, just two days ago, had given John the watch\".\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 822,
                "title": "Add rule on 'trying'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> trying\r\n> \"Do or do not. There is no try.\" --Yoda"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 295,
                "title": "Allow \"at the end of the day\" when meant literally",
                "labels": [
                    "false alarm",
                    "hard"
                ],
                "description": "We currently flag this as clich\u00e9, but it isn't always:\n\n`At the end of the day, I asked my father again about the scene he described.`\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 821,
                "title": "Add rule on 'try'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> try\r\n> \"Do or do not. There is no try.\" --Yoda"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 293,
                "title": "Don't complain about 'discriminant' and 'matrices' when topic is math",
                "labels": [
                    "false alarm"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 820,
                "title": "Add rule on 'does that make sense'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> does that make sense\r\n> \"does that make sense\" comes across either as condescending (like your audience can't understand) or it implies you feel you've been incoherent. A better way to close is something like \"I look forward to hearing your thoughts.\" You can leave it up to the other party to let you know if they are confused about something, rather than implying that you \"didn't make sense.\" --Tara Sophia Mohr"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 286,
                "title": "False alarm on \"belly-button-lint removers\"",
                "labels": [
                    "false alarm"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 56,
                "title": "Extract rules from ETK Plus",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.editorium.com/ETKPlus2014.htm\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 285,
                "title": "Extract rules from Grammarian Pro",
                "labels": [
                    "extraction"
                ],
                "description": "http://linguisoft.com/gramerrorfeatures.html\n\nWow, there are many of these!\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 814,
                "title": "Add rule on 'we're no expert'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> we're no expert\r\n> \"'I'm no expert' undermines your idea and displays an overall lack of self-confidence.\" --Lydia Dishman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 283,
                "title": "Extract rules from GNU diction",
                "labels": [
                    "extraction"
                ],
                "description": "http://ftp.gnu.org/gnu/diction/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 730,
                "title": "Fix indentation in proselintrc",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 282,
                "title": "Extract rules from grammark",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/markfullmer/grammark/tree/master/app/scripts/models\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 874,
                "title": "browser plugin",
                "labels": [],
                "description": "I would like to do this if I have time.\r\n\r\nIf I were making a proselint browser extension I would surround bad text in `<span class=\"bad\">` and then add CSS `.bad{}` that makes the text X% transparent. (You could change the background of the text to grey but this works on any colour site.)\r\n\r\nAs a bonus there are ways to look ahead (let\u2019s say after a page has been loaded for 10\u201320 seconds) and see if the _next_ link contains a lot of cowardly or awkward text. The link or its containing `div` can then be visually flagged as not worth following."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 277,
                "title": "interaction with LaTeX?",
                "labels": [],
                "description": "Does proselint grok LaTeX?  I'm guessing for now converting LaTeX -> plain txt is best?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 885,
                "title": "Update click to 7.0",
                "labels": [],
                "description": "\nThis PR updates [click](https://pypi.org/project/click) from **6.7** to **7.0**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 7.0\n   ```\n   -----------\n\nReleased 2018-09-25\n\n-   Drop support for Python 2.6 and 3.3. (`967`_, `976`_)\n-   Wrap ``click.Choice``&#39;s missing message. (`202`_, `1000`_)\n-   Add native ZSH autocompletion support. (`323`_, `865`_)\n-   Document that ANSI color info isn&#39;t parsed from bytearrays in\n    Python 2. (`334`_)\n-   Document byte-stripping behavior of ``CliRunner``. (`334`_,\n    `1010`_)\n-   Usage errors now hint at the ``--help`` option. (`393`_, `557`_)\n-   Implement streaming pager. (`409`_, `889`_)\n-   Extract bar formatting to its own method. (`414`_)\n-   Add ``DateTime`` type for converting input in given date time\n    formats. (`423`_)\n-   ``secho``&#39;s first argument can now be ``None``, like in ``echo``.\n    (`424`_)\n-   Fixes a ``ZeroDivisionError`` in ``ProgressBar.make_step``, when the\n    arg passed to the first call of ``ProgressBar.update`` is 0.\n    (`447`_, `1012`_)\n-   Show progressbar only if total execution time is visible. (`487`_)\n-   Added the ability to hide commands and options from help. (`500`_)\n-   Document that options can be ``required=True``. (`514`_, `1022`_)\n-   Non-standalone calls to ``Context.exit`` return the exit code,\n    rather than calling ``sys.exit``. (`533`_, `667`_, `1098`_)\n-   ``click.getchar()`` returns Unicode in Python 3 on Windows,\n    consistent with other platforms. (`537`_, `821`_, `822`_,\n    `1088`_, `1108`_)\n-   Added ``FloatRange`` type. (`538`_, `553`_)\n-   Added support for bash completion of ``type=click.Choice`` for\n    ``Options`` and ``Arguments``. (`535`_, `681`_)\n-   Only allow one positional arg for ``Argument`` parameter\n    declaration. (`568`_, `574`_, `1014`_)\n-   Add ``case_sensitive=False`` as an option to Choice. (`569`_)\n-   ``click.getchar()`` correctly raises ``KeyboardInterrupt`` on &quot;^C&quot;\n    and ``EOFError`` on &quot;^D&quot; on Linux. (`583`_, `1115`_)\n-   Fix encoding issue with ``click.getchar(echo=True)`` on Linux.\n    (`1115`_)\n-   ``param_hint`` in errors now derived from param itself. (`598`_,\n    `704`_, `709`_)\n-   Add a test that ensures that when an argument is formatted into a\n    usage error, its metavar is used, not its name. (`612`_)\n-   Allow setting ``prog_name`` as extra in ``CliRunner.invoke``.\n    (`616`_, `999`_)\n-   Help text taken from docstrings truncates at the ``\\f`` form feed\n    character, useful for hiding Sphinx-style parameter documentation.\n    (`629`_, `1091`_)\n-   ``launch`` now works properly under Cygwin. (`650`_)\n-   Update progress after iteration. (`651`_, `706`_)\n-   ``CliRunner.invoke`` now may receive ``args`` as a string\n    representing a Unix shell command. (`664`_)\n-   Make ``Argument.make_metavar()`` default to type metavar. (`675`_)\n-   Add documentation for ``ignore_unknown_options``. (`684`_)\n-   Add bright colors support for ``click.style`` and fix the reset\n    option for parameters ``fg`` and ``bg``. (`703`_, `809`_)\n-   Add ``show_envvar`` for showing environment variables in help.\n    (`710`_)\n-   Avoid ``BrokenPipeError`` during interpreter shutdown when stdout or\n    stderr is a closed pipe. (`712`_, `1106`_)\n-   Document customizing option names. (`725`_, `1016`_)\n-   Disable ``sys._getframes()`` on Python interpreters that don&#39;t\n    support it. (`728`_)\n-   Fix bug in test runner when calling ``sys.exit`` with ``None``.\n    (`739`_)\n-   Clarify documentation on command line options. (`741`_, `1003`_)\n-   Fix crash on Windows console. (`744`_)\n-   Fix bug that caused bash completion to give improper completions on\n    chained commands. (`754`_, `774`_)\n-   Added support for dynamic bash completion from a user-supplied\n    callback. (`755`_)\n-   Added support for bash completions containing spaces. (`773`_)\n-   Allow autocompletion function to determine whether or not to return\n    completions that start with the incomplete argument. (`790`_,\n    `806`_)\n-   Fix option naming routine to match documentation and be\n    deterministic. (`793`_, `794`_)\n-   Fix path validation bug. (`795`_, `1020`_)\n-   Add test and documentation for ``Option`` naming: functionality.\n    (`799`_)\n-   Update doc to match arg name for ``path_type``. (`801`_)\n-   Raw strings added so correct escaping occurs. (`807`_)\n-   Fix 16k character limit of ``click.echo`` on Windows. (`816`_,\n    `819`_)\n-   Overcome 64k character limit when writing to binary stream on\n    Windows 7. (`825`_, `830`_)\n-   Add bool conversion for &quot;t&quot; and &quot;f&quot;. (`842`_)\n-   ``NoSuchOption`` errors take ``ctx`` so that ``--help`` hint gets\n    printed in error output. (`860`_)\n-   Fixed the behavior of Click error messages with regards to Unicode\n    on 2.x and 3.x. Message is now always Unicode and the str and\n    Unicode special methods work as you expect on that platform.\n    (`862`_)\n-   Progress bar now uses stderr by default. (`863`_)\n-   Add support for auto-completion documentation. (`866`_, `869`_)\n-   Allow ``CliRunner`` to separate stdout and stderr. (`868`_)\n-   Fix variable precedence. (`873`_, `874`_)\n-   Fix invalid escape sequences. (`877`_)\n-   Fix ``ResourceWarning`` that occurs during some tests. (`878`_)\n-   When detecting a misconfigured locale, don&#39;t fail if the ``locale``\n    command fails. (`880`_)\n-   Add ``case_sensitive=False`` as an option to ``Choice`` types.\n    (`887`_)\n-   Force stdout/stderr writable. This works around issues with badly\n    patched standard streams like those from Jupyter. (`918`_)\n-   Fix completion of subcommand options after last argument (`919`_,\n    `930`_)\n-   ``_AtomicFile`` now uses the ``realpath`` of the original filename\n    so that changing the working directory does not affect it.\n    (`920`_)\n-   Fix incorrect completions when defaults are present (`925`_,\n    `930`_)\n-   Add copy option attrs so that custom classes can be re-used.\n    (`926`_, `994`_)\n-   &quot;x&quot; and &quot;a&quot; file modes now use stdout when file is ``&quot;-&quot;``.\n    (`929`_)\n-   Fix missing comma in ``__all__`` list. (`935`_)\n-   Clarify how parameters are named. (`949`_, `1009`_)\n-   Stdout is now automatically set to non blocking. (`954`_)\n-   Do not set options twice. (`962`_)\n-   Move ``fcntl`` import. (`965`_)\n-   Fix Google App Engine ``ImportError``. (`995`_)\n-   Better handling of help text for dynamic default option values.\n    (`996`_)\n-   Fix ``get_winter_size()`` so it correctly returns ``(0,0)``.\n    (`997`_)\n-   Add test case checking for custom param type. (`1001`_)\n-   Allow short width to address cmd formatting. (`1002`_)\n-   Add details about Python version support. (`1004`_)\n-   Added deprecation flag to commands. (`1005`_)\n-   Fixed issues where ``fd`` was undefined. (`1007`_)\n-   Fix formatting for short help. (`1008`_)\n-   Document how ``auto_envvar_prefix`` works with command groups.\n    (`1011`_)\n-   Don&#39;t add newlines by default for progress bars. (`1013`_)\n-   Use Python sorting order for ZSH completions. (`1047`_, `1059`_)\n-   Document that parameter names are converted to lowercase by default.\n    (`1055`_)\n-   Subcommands that are named by the function now automatically have\n    the underscore replaced with a dash. If you register a function\n    named ``my_command`` it becomes ``my-command`` in the command line\n    interface.\n-   Hide hidden commands and options from completion. (`1058`_,\n    `1061`_)\n-   Fix absolute import blocking Click from being vendored into a\n    project on Windows. (`1068`_, `1069`_)\n-   Fix issue where a lowercase ``auto_envvar_prefix`` would not be\n    converted to uppercase. (`1105`_)\n\n.. _202: https://github.com/pallets/click/issues/202\n.. _323: https://github.com/pallets/click/issues/323\n.. _334: https://github.com/pallets/click/issues/334\n.. _393: https://github.com/pallets/click/issues/393\n.. _409: https://github.com/pallets/click/issues/409\n.. _414: https://github.com/pallets/click/pull/414\n.. _423: https://github.com/pallets/click/pull/423\n.. _424: https://github.com/pallets/click/pull/424\n.. _447: https://github.com/pallets/click/issues/447\n.. _487: https://github.com/pallets/click/pull/487\n.. _500: https://github.com/pallets/click/pull/500\n.. _514: https://github.com/pallets/click/issues/514\n.. _533: https://github.com/pallets/click/pull/533\n.. _535: https://github.com/pallets/click/issues/535\n.. _537: https://github.com/pallets/click/issues/537\n.. _538: https://github.com/pallets/click/pull/538\n.. _553: https://github.com/pallets/click/pull/553\n.. _557: https://github.com/pallets/click/pull/557\n.. _568: https://github.com/pallets/click/issues/568\n.. _569: https://github.com/pallets/click/issues/569\n.. _574: https://github.com/pallets/click/issues/574\n.. _583: https://github.com/pallets/click/issues/583\n.. _598: https://github.com/pallets/click/issues/598\n.. _612: https://github.com/pallets/click/pull/612\n.. _616: https://github.com/pallets/click/issues/616\n.. _629: https://github.com/pallets/click/pull/629\n.. _650: https://github.com/pallets/click/pull/650\n.. _651: https://github.com/pallets/click/issues/651\n.. _664: https://github.com/pallets/click/pull/664\n.. _667: https://github.com/pallets/click/issues/667\n.. _675: https://github.com/pallets/click/pull/675\n.. _681: https://github.com/pallets/click/pull/681\n.. _684: https://github.com/pallets/click/pull/684\n.. _703: https://github.com/pallets/click/issues/703\n.. _704: https://github.com/pallets/click/issues/704\n.. _706: https://github.com/pallets/click/pull/706\n.. _709: https://github.com/pallets/click/pull/709\n.. _710: https://github.com/pallets/click/pull/710\n.. _712: https://github.com/pallets/click/pull/712\n.. _719: https://github.com/pallets/click/issues/719\n.. _725: https://github.com/pallets/click/issues/725\n.. _728: https://github.com/pallets/click/pull/728\n.. _739: https://github.com/pallets/click/pull/739\n.. _741: https://github.com/pallets/click/issues/741\n.. _744: https://github.com/pallets/click/issues/744\n.. _754: https://github.com/pallets/click/issues/754\n.. _755: https://github.com/pallets/click/pull/755\n.. _773: https://github.com/pallets/click/pull/773\n.. _774: https://github.com/pallets/click/pull/774\n.. _790: https://github.com/pallets/click/issues/790\n.. _793: https://github.com/pallets/click/issues/793\n.. _794: https://github.com/pallets/click/pull/794\n.. _795: https://github.com/pallets/click/issues/795\n.. _799: https://github.com/pallets/click/pull/799\n.. _801: https://github.com/pallets/click/pull/801\n.. _806: https://github.com/pallets/click/pull/806\n.. _807: https://github.com/pallets/click/pull/807\n.. _809: https://github.com/pallets/click/pull/809\n.. _816: https://github.com/pallets/click/pull/816\n.. _819: https://github.com/pallets/click/pull/819\n.. _821: https://github.com/pallets/click/issues/821\n.. _822: https://github.com/pallets/click/issues/822\n.. _825: https://github.com/pallets/click/issues/825\n.. _830: https://github.com/pallets/click/pull/830\n.. _842: https://github.com/pallets/click/pull/842\n.. _860: https://github.com/pallets/click/issues/860\n.. _862: https://github.com/pallets/click/issues/862\n.. _863: https://github.com/pallets/click/pull/863\n.. _865: https://github.com/pallets/click/pull/865\n.. _866: https://github.com/pallets/click/issues/866\n.. _868: https://github.com/pallets/click/pull/868\n.. _869: https://github.com/pallets/click/pull/869\n.. _873: https://github.com/pallets/click/issues/873\n.. _874: https://github.com/pallets/click/pull/874\n.. _877: https://github.com/pallets/click/pull/877\n.. _878: https://github.com/pallets/click/pull/878\n.. _880: https://github.com/pallets/click/pull/880\n.. _883: https://github.com/pallets/click/pull/883\n.. _887: https://github.com/pallets/click/pull/887\n.. _889: https://github.com/pallets/click/pull/889\n.. _918: https://github.com/pallets/click/pull/918\n.. _919: https://github.com/pallets/click/issues/919\n.. _920: https://github.com/pallets/click/pull/920\n.. _925: https://github.com/pallets/click/issues/925\n.. _926: https://github.com/pallets/click/issues/926\n.. _929: https://github.com/pallets/click/pull/929\n.. _930: https://github.com/pallets/click/pull/930\n.. _935: https://github.com/pallets/click/pull/935\n.. _949: https://github.com/pallets/click/issues/949\n.. _954: https://github.com/pallets/click/pull/954\n.. _962: https://github.com/pallets/click/pull/962\n.. _965: https://github.com/pallets/click/pull/965\n.. _967: https://github.com/pallets/click/pull/967\n.. _976: https://github.com/pallets/click/pull/976\n.. _990: https://github.com/pallets/click/pull/990\n.. _991: https://github.com/pallets/click/pull/991\n.. _993: https://github.com/pallets/click/pull/993\n.. _994: https://github.com/pallets/click/pull/994\n.. _995: https://github.com/pallets/click/pull/995\n.. _996: https://github.com/pallets/click/pull/996\n.. _997: https://github.com/pallets/click/pull/997\n.. _999: https://github.com/pallets/click/pull/999\n.. _1000: https://github.com/pallets/click/pull/1000\n.. _1001: https://github.com/pallets/click/pull/1001\n.. _1002: https://github.com/pallets/click/pull/1002\n.. _1003: https://github.com/pallets/click/pull/1003\n.. _1004: https://github.com/pallets/click/pull/1004\n.. _1005: https://github.com/pallets/click/pull/1005\n.. _1007: https://github.com/pallets/click/pull/1007\n.. _1008: https://github.com/pallets/click/pull/1008\n.. _1009: https://github.com/pallets/click/pull/1009\n.. _1010: https://github.com/pallets/click/pull/1010\n.. _1011: https://github.com/pallets/click/pull/1011\n.. _1012: https://github.com/pallets/click/pull/1012\n.. _1013: https://github.com/pallets/click/pull/1013\n.. _1014: https://github.com/pallets/click/pull/1014\n.. _1016: https://github.com/pallets/click/pull/1016\n.. _1020: https://github.com/pallets/click/pull/1020\n.. _1022: https://github.com/pallets/click/pull/1022\n.. _1027: https://github.com/pallets/click/pull/1027\n.. _1047: https://github.com/pallets/click/pull/1047\n.. _1055: https://github.com/pallets/click/pull/1055\n.. _1058: https://github.com/pallets/click/pull/1058\n.. _1059: https://github.com/pallets/click/pull/1059\n.. _1061: https://github.com/pallets/click/pull/1061\n.. _1068: https://github.com/pallets/click/issues/1068\n.. _1069: https://github.com/pallets/click/pull/1069\n.. _1088: https://github.com/pallets/click/issues/1088\n.. _1091: https://github.com/pallets/click/pull/1091\n.. _1098: https://github.com/pallets/click/pull/1098\n.. _1105: https://github.com/pallets/click/pull/1105\n.. _1106: https://github.com/pallets/click/pull/1106\n.. _1108: https://github.com/pallets/click/pull/1108\n.. _1115: https://github.com/pallets/click/pull/1115\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/click\n  - Changelog: https://pyup.io/changelogs/click/\n  - Homepage: https://palletsprojects.com/p/click/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 276,
                "title": "Don't complain about \"obviously\" when it's used reasonably",
                "labels": [
                    "enhancement",
                    "hard"
                ],
                "description": "Compare\n\n\"Unlike introductions of H1N1, H2N2, and H3N2 into the human population, the emergence of the H1N2 subtype since 2001-2002 has not obviously increased incidence.\"\n\nto\n\n\"Unlike introductions of H1N1, H2N2, and H3N2 into the human population, the emergence of the H1N2 subtype since 2001-2002 obviously has not increased incidence.\"\n\nThe first is problematic; the second isn't.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 819,
                "title": "Add rule on 'sort of'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> sort of \r\n> \"This qualifier weakens the message as well as the authority of the writer.\" --Victoria Simon, Ph.D. and Holly Pedersen, Ph.D."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 275,
                "title": "Add rule for missing period at end of last sentence in a paragraph",
                "labels": [
                    "easy"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 886,
                "title": "Update coveralls to 1.5.1",
                "labels": [],
                "description": "\nThis PR updates [coveralls](https://pypi.org/project/coveralls) from **1.3.0** to **1.5.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 1.5.1\n   ```\n   Features\n* **git:**  omit git info when git isn&#39;t installed (187) ([764956ea](764956ea))\n  * ... instead of erroring. The fixes the v1.4.0 release of &quot;supporting\n    non-git repos&quot; when the git binary is not installed.\n  * Note that commit info can still be set with env vars, even in non-git\n    repositories -- see the docs for more info!\n\n Compatibility\n* **python:**  include python 3.7 in matrix tests ([023d474](023d474))\n  * previous versions of `coveralls-python` should be compatible with Python 3.7, no\n    code changes were required to make tests pass\n\n Internal\n* remove `pytest-runner` as a dependency (185) ([4cbbfcd](4cbbfcd))\n\n&lt;a name=&quot;1.5.0&quot;&gt;&lt;/a&gt;\n   ```\n   \n  \n  \n   ### 1.5.0\n   ```\n   Features\n* **cli:**  allow execution as a module (184) ([b261a853](b261a853), closes [183](183))\n\n Bug Fixes\n* **paths:**  ensure windows paths are normalized to posix ([661e0f54](661e0f54), closes [153](153))\n\n&lt;a name=&quot;1.4.0&quot;&gt;&lt;/a&gt;\n   ```\n   \n  \n  \n   ### 1.4.0\n   ```\n   Performance\n* **git:**  call fallback git commands in fallback cases only ([e42095b4](e42095b4))\n\n Features\n* **env:**  support git env vars (182) ([a1918e89](a1918e89))\n  * This change also adds support for non-git repos.\n* **flags:**  add ability to add named job (181) ([f7ba07bf](f7ba07bf))\n\n Compatibility\n* **python:**  drop support for Python 3.3 ([dcb06fc1](dcb06fc1))\n\n&lt;a name=&quot;1.3.0&quot;&gt;&lt;/a&gt;\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/coveralls\n  - Changelog: https://pyup.io/changelogs/coveralls/\n  - Repo: http://github.com/coveralls-clients/coveralls-python\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 818,
                "title": "Add rule on 'kind of'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> kind of\r\n> \"This qualifier weakens the message as well as the authority of the writer.\" --Victoria Simon, Ph.D. and Holly Pedersen, Ph.D."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 271,
                "title": "Add repel to skunked terms",
                "labels": [],
                "description": "(But only when the topic is not rock climbing.)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 823,
                "title": "Add rule on 'I feel'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> I feel\r\n> \"If you write an opinion, the reader understands that you also believe it is right.\" --David Bowman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 263,
                "title": "Add a rule for using the right maker-name",
                "labels": [],
                "description": "Chandler, cobbler, etc.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 815,
                "title": "Add rule on 'yes, but'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> yes, but\r\n> \"The 'Yes, but' syndrome is entirely counterproductive, particularly in a work setting. You will become an integral part of any team if you are willing to build ideas rather than discard them.\" --Victoria Simon, Ph.D. and Holly Pedersen, Ph.D."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 261,
                "title": "Create a utility that checks websites",
                "labels": [
                    "plugin"
                ],
                "description": "a la https://validator.w3.org/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 260,
                "title": "Check for gender bias in reference writing",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "![image](https://cloud.githubusercontent.com/assets/613981/11675675/6ff5f7f6-9de0-11e5-9349-874dcc9938e8.png)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 808,
                "title": "Add rule on 'apologize'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> apologize\r\n> \"Apologizing unnecessarily puts you in a subservient position and makes people lose respect for you.\" --Bonnie Marcus"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 259,
                "title": "Add rule on duplicated section numbers",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 54,
                "title": "Regex over semantics?",
                "labels": [
                    "enhancement"
                ],
                "description": "http://www.clips.ua.ac.be/pages/pattern-search\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 809,
                "title": "Add rule on 'apologies'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> apologies\r\n> \"Apologizing unnecessarily puts you in a subservient position and makes people lose respect for you.\" --Bonnie Marcus"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 254,
                "title": "Extract rules from the Federal Plain Language Guidelines",
                "labels": [
                    "extraction"
                ],
                "description": "http://1.usa.gov/1cvCIcC\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 897,
                "title": "Added checks for capitalizing the beginning of sentences",
                "labels": [],
                "description": "1. Fixes Issue #800\r\n2. Added a rule( named split_into_sentences) in tools.py that splits the text into sentences and return all the sentences.\r\n3. Added check in misc.capitalization for checking the beginning of sentences.\r\n\r\nRe-modified previous PR #893 "
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 810,
                "title": "Add rule on 'forgive'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> forgive\r\n> \"Apologizing unnecessarily puts you in a subservient position and makes people lose respect for you.\" --Bonnie Marcus"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 253,
                "title": "Extract rules from plainlanguage.gov",
                "labels": [
                    "extraction"
                ],
                "description": "| Name | Source | Github Issue | URL |\n| --- | --- | --- | --- |\n| Federal Plain Language Guidelines | U.S. Government | #254 | http://1.usa.gov/1cvCIcC |\n| A Plain English Handbook: How to Create Clear SEC Disclosure Documents | Security and Exchange Commission | None | http://1.usa.gov/1MuZv6S |\n| FAA Plain Language Course: The Basics | Federal Aviation Administration | None | http://1.usa.gov/1HLFxYN |\n| FAA Writing Standards | Federal Aviation Administration | None | http://1.usa.gov/1NTTAwv |\n| Acronyms | U.S. Citizenship and Immigration Services | None | https://youtu.be/0kmCtwBZLzk |\n| Active voice | U.S. Citizenship and Immigration Services | None | https://youtu.be/5JLPa17rLYA |\n| Proofreading | U.S. Citizenship and Immigration Services | None | https://youtu.be/bTn-do2WWcY |\n| Tables | U.S. Citizenship and Immigration Services | None | https://youtu.be/YtBuHGuWKFI |\n| Staff Writing | Army | None | http://1.usa.gov/1StosTF |\n| Simply Put | Center for Disease Control | None | http://1.usa.gov/1SRitsR |\n| Examples | U.S. Government | None | http://1.usa.gov/1WZQg3x |\n| Document Checklist for Plain Language | U.S. Government | None | http://1.usa.gov/1Nxzpjj |\n| Document Checklist for Plain Language on the Web | U.S. Government | None | http://1.usa.gov/1StpdMv |\n| Made up words | U.S. Government | None | http://1.usa.gov/1WTzs3v |\n| Shall and must | U.S. Government | None | http://1.usa.gov/1StprmR |\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 811,
                "title": "Add rule on 'I think'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> I think\r\n> \"'I think' undermines your idea and displays an overall lack of self-confidence.\" --Lydia Dishman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 252,
                "title": "Add a rule on the plural of nucleus",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     Garner's Modern American Usage\nsource_url: http://www.amazon.com/Garners-Modern-American-Usage-Garner/dp/0195382757\n```\n\n> nucleus.\n> \n> In traditional senses, the plural is \"nuclei\" \u2014 not *\"nucleuses.\" E.g.: \"[For DNA testing to work,] there have to be cell nuclei present, and hair that has been pulled away from its roots doesn't contain any nuclei.\" Laurie P. Cohen, \"Inside the Cell,\" Wall Street J., 19 Dec. 1997, at A1.\n> \n> But in sports talk \u2014 in which \"nucleus\" means \"a core of strong players on a team\" \u2014 \"nucleuses\" is standard. E.g.: \n> \n> o \"Now, with Villanova and Georgetown returning with strong nucleuses, UConn's reign will be tested.\" Steve Richardson, \"UConn's Big East Reign Faces Challenges,\" Dallas Morning News, 5 Nov. 1995, at B12.\n> \n> o \"Christie Burden, Megan Frank and Latoya Robinson all started a year ago and along with Selwyn make for one of the best \u2014 if not tallest \u2014 nucleuses around.\" Michael S. Snyder, \"Strongest in Decades,\" Sun-Sentinel (Ft. Lauderdale), 19 Nov. 1997, at 22.\n> \n> *Invariably inferior form.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 812,
                "title": "Add rule on 'we think'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n\r\n> We think\r\n> \"'I think' undermines your idea and displays an overall lack of self-confidence.\" --Lydia Dishman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 249,
                "title": "Extract rules from Mistress Matisse's guide blog on sex work",
                "labels": [
                    "extraction"
                ],
                "description": "http://mistressmatisse.blogspot.ca/2015/01/14.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 248,
                "title": "Extract rules from the Conscious Style Guide",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 890,
                "title": "Added rules from Just Say No plugin ",
                "labels": [],
                "description": "Fixes Issue #830"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 817,
                "title": "Add rule on 'very'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> very\r\n> \"The word 'very' does not communicate enough information. Find a stronger, more meaningful adverb, or omit it completely.\" --Andrea Ayres "
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 247,
                "title": "Extract rules on ableism",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 813,
                "title": "Add rule on 'I'm no expert'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> I'm no expert\r\n> \"'I'm no expert' undermines your idea and displays an overall lack of self-confidence.\" --Lydia Dishman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 246,
                "title": "Extract rules from NCDJ",
                "labels": [
                    "extraction"
                ],
                "description": "http://ncdj.org/style-guide/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 816,
                "title": "Add rule on 'literally'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> literally\r\n> \"If something is literal, your readers should know it without you needing to use this word to clarify it. More often than not, the word 'literally' makes writing sound flabby and juvenile, which is probably not what you're going for.\" --Julia McCoy"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 245,
                "title": "Extract rules from Retext",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/wooorm/retext\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 869,
                "title": "Use ignore_case=False in dates_times.am_pm.lowercase_periods",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 774,
                "title": "Custom checks through command line",
                "labels": [],
                "description": "closes #702 \r\n\r\n- Added mechanism to specify a custom checks folder.\r\n- Added mechanism to specify a custom path to proselintrc."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 244,
                "title": "Extract rules from just-say-no",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/lexicalunit/linter-just-say-no\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 807,
                "title": "Add rule on 'sorry'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> sorry\r\n> \"Using 'sorry' frequently undermines your gravitas and makes you appear unfit for leadership.\" --Sylvia Ann Hewlett"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 243,
                "title": "Extract rules from alexjs.com",
                "labels": [
                    "extraction"
                ],
                "description": "http://alexjs.com/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 68,
                "title": "Make the demo's sample sentences clever",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 830,
                "title": "Extract rules from the Just Say No plugin",
                "labels": [],
                "description": "https://github.com/lexicalunit/linter-just-say-no/blob/master/resources/hedges.cson "
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 705,
                "title": "0.8 is not tagged as latest release in github",
                "labels": [],
                "description": "The releases page still marks 0.7 as the latest release. Is this intended?"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 227,
                "title": "Live demo broken on Firefox",
                "labels": [
                    "bug"
                ],
                "description": "The live demo at http://proselint.com/write is broken on Firefox, which gives the following error:\n\n```\nNS_ERROR_DOM_BAD_URI: Access to restricted URI denied\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 865,
                "title": "Custom path to proselintrc through command line",
                "labels": [],
                "description": "This PR adds a feature to specify a custom path to proselintrc through command line."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 703,
                "title": "misc.but Gives incorrect line numbers (other tests give correct ones)",
                "labels": [],
                "description": "The misc.but test gives line numbers inconsistent with other tests\r\n\r\nTest file:\r\nVery unique ison line one\r\n\r\nHey!!! Is on lne three\r\n\r\nBut, wait, line five is wrong\r\n\r\nWell, so it is - but line 7 is fine\r\n\r\n\r\njson:\r\n\r\n{\r\n\t\"data\": {\r\n\t\t\"errors\": [{\r\n\t\t\t\"check\": \"uncomparables.misc\",\r\n\t\t\t\"column\": 1,\r\n\t\t\t\"end\": 13,\r\n\t\t\t\"extent\": 12,\r\n\t\t\t\"line\": 1,\r\n\t\t\t\"message\": \"Comparison of an uncomparable: 'very unique ' is not comparable.\",\r\n\t\t\t\"replacements\": null,\r\n\t\t\t\"severity\": \"warning\",\r\n\t\t\t\"start\": 1\r\n\t\t}, {\r\n\t\t\t\"check\": \"weasel_words.very\",\r\n\t\t\t\"column\": 2,\r\n\t\t\t\"end\": 6,\r\n\t\t\t\"extent\": 4,\r\n\t\t\t\"line\": 1,\r\n\t\t\t\"message\": \"Substitute 'damn' every time you're inclined to write 'very;' your editor will delete it and the writing will be just as it should be.\",\r\n\t\t\t\"replacements\": null,\r\n\t\t\t\"severity\": \"warning\",\r\n\t\t\t\"start\": 2\r\n\t\t}, {\r\n\t\t\t\"check\": \"hyperbolic.misc\",\r\n\t\t\t\"column\": 1,\r\n\t\t\t\"end\": 35,\r\n\t\t\t\"extent\": 7,\r\n\t\t\t\"line\": 3,\r\n\t\t\t\"message\": \"'Hey!!!' is hyperbolic.\",\r\n\t\t\t\"replacements\": null,\r\n\t\t\t\"severity\": \"warning\",\r\n\t\t\t\"start\": 28\r\n\t\t}, {\r\n\t\t\t\"check\": \"leonard.exclamation.multiple\",\r\n\t\t\t\"column\": 5,\r\n\t\t\t\"end\": 34,\r\n\t\t\t\"extent\": 2,\r\n\t\t\t\"line\": 3,\r\n\t\t\t\"message\": \"Stop yelling. Keep your exclamation points under control.\",\r\n\t\t\t\"replacements\": null,\r\n\t\t\t\"severity\": \"warning\",\r\n\t\t\t\"start\": 32\r\n\t\t}, {\r\n\t\t\t\"check\": \"misc.but\",\r\n\t\t\t\"column\": 1,\r\n\t\t\t\"end\": 56,\r\n\t\t\t\"extent\": 5,\r\n\t\t\t\"line\": 4,\r\n\t\t\t\"message\": \"No paragraph should start with a 'But'.\",\r\n\t\t\t\"replacements\": null,\r\n\t\t\t\"severity\": \"warning\",\r\n\t\t\t\"start\": 51\r\n\t\t}]\r\n\t},\r\n\t\"status\": \"success\"\r\n}"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 224,
                "title": "Words with initial apostrophes ('90s) hide suggestions until close single quotation mark",
                "labels": [
                    "bug"
                ],
                "description": "(I'm using the [online demo](http://proselint.com/write/) for this; please forgive me if this is not present in the actual downloadable version.)\n\nFor a sentence such as:\n\n> In the '90s I wrote very badly.\n\nI get a suggestion about the usage of \"very\".\n\nHowever, for this sentence:\n\n> In the '90s I wrote very 'badly.'\n\nI get no suggestions.\n\nI think this is because ~~Parselint~~ Proselint is reading _'90s I wrote very 'badly'_ as a quotation and skipping it.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 889,
                "title": "Update gunicorn to 19.9.0",
                "labels": [],
                "description": "\nThis PR updates [gunicorn](https://pypi.org/project/gunicorn) from **19.8.1** to **19.9.0**.\n\n\n\n*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*\n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/gunicorn\n  - Changelog: https://pyup.io/changelogs/gunicorn/\n  - Homepage: http://gunicorn.org\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 856,
                "title": "Add conditional requirement for openSUSE",
                "labels": [],
                "description": "Merging #797."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 702,
                "title": "custom `.proselintrc` path",
                "labels": [],
                "description": "Is there a way to point a custom path for the `.proselintrc` ? e.g. `$(pwd)`.\r\n\r\nIf not - I can try to implement it."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 827,
                "title": "Add rule on 'stupid question'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> stupid question\r\n> \"Like they said in school, there are no stupid questions. Well, sometimes there are--but ask, don't caveat.\" --Alexandra Macon"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 696,
                "title": "Wilbers' suggestions",
                "labels": [],
                "description": "Wilbers' *Keys to Great Writing* has tons of very explicit suggestions for improving prose, with lists of \"change this ... to this\" that could be used within proselint."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 223,
                "title": "Use SendGrid for editor@proselint.com",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 190,
                "title": "Create interactive worksheets for learning",
                "labels": [
                    "tooling"
                ],
                "description": "(Use the same technology used in interactive web demo.)\n- [ ] Symbols\n- [ ] Dates\n- [ ] Denizen labels\n\netc.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 829,
                "title": "Add rule on 'i might be wrong'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> i might be wrong\r\n> \"Don't lessen the impact of what you say before you say it.\" --Alexandra Macon"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 691,
                "title": "Fix misc.but check for lowercase \"but\"",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 187,
                "title": "Create a guide for contributors",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 828,
                "title": "Add rule on 'i may be wrong'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> i may be wrong\r\n> \"Don't lessen the impact of what you say before you say it.\" --Alexandra Macon"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 690,
                "title": "Fix one-off column offset with existence_check",
                "labels": [],
                "description": "When require_padding was not used (or it is at the beginning of a line),\r\ncolumns were off by 1.\r\n\r\nThis patch adds/substracts the matched subgroup conditionally.\r\n\r\nThis could use more tests in general - none was failing with initial (wrong) changes in this area.\r\nE.g. for the first fixup which passed all (py3) tests: https://github.com/amperser/proselint/pull/690/commits/b4e14621840c61820d693b2f9a8617b566411f65.\r\n\r\nI've tried to use `\\b` in the pattern instead, but that failed for/with `proselint/checks/misc/currency.py`."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 183,
                "title": "Scrape websites to create a legal corpus when setup.py is run",
                "labels": [
                    "enhancement"
                ],
                "description": "We can't just provide corpora that we don't have rights to, we need to get a corpus to test for people when installing.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 66,
                "title": "Add rule to detect improper tmesis",
                "labels": [
                    "rule"
                ],
                "description": "http://www.explainxkcd.com/wiki/index.php/1290:_Syllable_Planning\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 826,
                "title": "Add rule on 'in my opinion'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> in my opinion\r\n> \"Phrases such as 'in my opinion,' 'I think that,' and 'I believe' create three problems for writers: 1. They delay the writer's message; 2. They demonstrate insecurity; and 3. They tell the reader what he already knows. Remove that phrase, or any similar phrase, and get to the point.\" --David Bowman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 686,
                "title": "[Bug] Big CPU usage in Windows",
                "labels": [],
                "description": "### 1. Summary\n\nProselint have big CPU usage for me.\n\n### 2. Expected behavior\n\nSmall CPU usage. I use ~20 linters of SublimeLinter, they have small CPU usage.\n\n### 3. Actual behavior\n\nMore than 20% of CPU usage always for me. [**ProcessHacker**](http://processhacker.sourceforge.net/) screenshot.\n\n![Process Hacker](http://i.imgur.com/BDLYdjr.png)\n\n### 4. Steps to reproduce\n\nI reproduce the problem in a version of Sublime Text without plugins and user settings.\n\nI install [**proselint**](https://github.com/amperser/proselint) via pip, [**SublimeLinter**](https://packagecontrol.io/packages/SublimeLinter) and [**SublimeLinter-proselint**](https://packagecontrol.io/packages/SublimeLinter-contrib-proselint) via Package Control. I open any file with `txt` or `md` extension \u2192 proselint linter work for me, I get actual behavior.\n\n### 5. Environment\n\n**Operating system and version:**\nWindows 10 Enterprise LTSB 64-bit EN\n**Sublime Text:**\nBuild 3126\n**Python:**\n3.6.0\n**proselint:**\n0.8.0\n\n\nThanks."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 182,
                "title": "Find open source corpora for testing",
                "labels": [
                    "enhancement"
                ],
                "description": "find and include open source corpora for testing\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 824,
                "title": "Add rule on 'believe'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> believe\r\n> \"Phrases containing 'we believe,' 'we think,' and 'we feel' pervade presentation narratives to such a degree that they spill over into sentences where caution is unnecessary.\" --Jerry Weissman"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 681,
                "title": "[Feature request] \u00abChocolatey\u00bb word",
                "labels": [],
                "description": "I think, it would be better to remove [**this line**](https://github.com/amperser/proselint/blob/127bfe3c7298dfd184799aea5c2a2bb7113ec107/proselint/checks/spelling/misc.py#L39). [**Chocolatey**](http://chocolatey.org/) \u2014 is [**popular**](http://alternativeto.net/software/chocolatey/) program for Windows. Word \u201cChocolatey\u201d it is used in this meaning.\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 895,
                "title": "Fixes Issue #777",
                "labels": [],
                "description": "Passed `ignore_case=False` argument to the `existence_check` function call to avoid issue"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 176,
                "title": "Use oauth2-based authentication",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 677,
                "title": "[Question] Rule \u00abMore than 30 ppm of exclamations. Keep them under control.\u00bb",
                "labels": [],
                "description": "### 1. Briefly\r\n\r\nI don't understand the meaning of rule `More than 30 ppm of exclamations. Keep them under control.`\r\n\r\n### 2. Detail\r\n\r\nI get this error when I have 2 or more exclamation marks in my texts.\r\n\r\nI saw [**source of rule**](https://github.com/amperser/proselint/blob/127bfe3c7298dfd184799aea5c2a2bb7113ec107/proselint/checks/typography/exclamation.py#L34-L51). I learned the following: if I have more than 30 exclamation marks on million words (2 exclamation marks on 66666.6(6) words), this rule works for me.\r\n\r\n### 3. Questions\r\n\r\n1. Do I understand the meaning of the rule?\r\n2. If yes, what rules of the English language the necessity of this rule? Where can I to see 30 ppm rule in English language grammar resources?\r\n\r\n\r\n\r\nThanks."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 825,
                "title": "Add rule on 'just saying'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> just saying\r\n> \"I think what you're saying is that you said something. If you're using it to mitigate something that may be offensive or embarrassing, then don't say it. Say something else. Otherwise, say what you're saying without the 'just saying.' We already know you're saying it... after all, you just said it!\" --Robert Bruce"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 175,
                "title": "Use raw cmudict for a vs. n, not nltk",
                "labels": [
                    "enhancement"
                ],
                "description": "https://github.com/cmusphinx/cmudict\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 806,
                "title": "Add rule on 'Actually'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> actually\r\n> \"'Actually' communicates a sense of surprise that you have something to say. Of course you want to add something. Of course you have questions. There's nothing surprising about it.\" --Tara Sophia Mohr"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 672,
                "title": "Bad escapes in broken links regexp",
                "labels": [],
                "description": "`proselint/checks/links/broken.py` contains the following code (with boring parts of the regexp omitted):\n```python\n    regex = re.compile(\n        r\"\"\"...boring...\n        |[^\\s`!()\\[\\]{};:\\'\".,<>?\\xab\\xbb\\u201c\\u201d\\u2018\\u2019\\u21a9]))\"\"\",\n        re.U)\n```\nBut the `\\uXXXX` escape sequences for regexps were added only in Python 3.3.\nIn earlier versions, `\\u` stands for literal `u`.\nIn other words, in Python 2.7, this code is equivalent to:\n```python\n    regex = re.compile(\n        r\"\"\"...boring...\n        |[^\\s`!()\\[\\]{};:\\'\".,<>?\\xab\\xbb01289acdu]))\"\"\",\n        re.U)\n```\n...which is certainly not what you wanted.\n\nThe dubious regexp was found using [pydiatra](https://github.com/jwilk/pydiatra)."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 168,
                "title": "Add rule on \"hairy\" and related terms",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Hairy\n> There are maybe more descriptors for various kinds of hair and hairiness than any other word-set in English, and some of them are extremely strange and fun. The more pedestrian terms like shaggy, unshorn, bushy, coiffed, and so on we\u2019ll figure you already know. The adj. barbigerous is an extremely uptown synonym for bearded. Cirrose and cirrous, from the Latin cirrus meaning \u201ccurl\u201d or \u201cfringe\u201d (as in cirrus clouds), can both be used to refer to somebody\u2019s curly or tufty or wispy/feathery hair \u2014 Nicolas Cage\u2019s hair in Adaptation is cirrose. Crinite means \u201chairy or possessed of a hair-like appendage\u201d, though it\u2019s mainly a botanical term and would be a bit eccentric applied to a person. Crinose, though, is a people-adj. that means \u201chaving a lot of hair\u201d, especially in the sense of one\u2019s hair being really long. The related noun crinosity is antiquated but not obsolete and can be used to refer to somebody\u2019s hair in an amusingly donnish way, as in Madonna\u2019s normally platinum crinosity is now a maternal brown. Glabrous, which is the loveliest of all hair-related adjectives, means having no hair (on a given part) at all. Please note that glabrous means more baby\u2019s-bottom-hairless than bald or shaved, though if you wanted to describe a bald person in an ironically fancy way you could talk about his glabrous dome or something. Hirsute is probably the most familiar upmarket synonym for hairy, totally at home in any kind of formal writing. Like that of many hair-related adjectives, hirsute\u2019s original use was in botany (where it means \u201ccovered with coarse or bristly hairs\u201d), but in regular usage its definition is much more general. Hispid means \u201ccovered with stiff or rough little hairs\u201d and could apply to a military pate or unshaved jaw. Hispidulous is mainly just a puffed-up form of hispid and should be avoided. Lanate and lanated mean \u201chaving or being composed of woolly hairs\u201d. A prettier and slightly more familiar way to describe woolly hair is with the adjective flocculent. (There\u2019s also floccose, but this is used mainly of odd little hairy fruits like kiwi and quince.) Then there are the pil-based words, all derived from the Latin pilus (= hair). Pilose, another fairly common adj., means \u201ccovered with fine soft hair\u201d. Last but not least is the noun pilimiction, which names a hopefully very rare medical disorder \u201cin which piliform or hair-like bodies are passed in the urine\u201d. Outside of maybe describing some kind of terribly excruciated facial expression as pilimictive, however, it\u2019s hard to imagine a mainstream use for pilimiction. Tomentose means \u201ccovered with dense little matted hairs\u201d \u2014 baby chimps, hobbits\u2019 feet and Robin Williams are all tomentose. Ulotrichous, which is properly classed with lannate and flocculent, is an old term for \u201ccrisply woolly hair\u201d. Be advised that it is also, if not exactly a racist adj., certainly a racial one \u2014 AC Haddon\u2019s Races of Man, from the early 1900s, classified races according to three basic hair types: leiotrichous (straight), cymotrichous (wavy) and ulotrichous.\n> Now go do the right thing.\n\nFigure out how to suggest the right word.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 65,
                "title": "Add rule about realtorspeak",
                "labels": [
                    "rule"
                ],
                "description": "\"Sun drenched\"\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 802,
                "title": "Simple regex checker for passive voice constructions",
                "labels": [],
                "description": "This is my first attempt to contribute, so please let me know if I need to do anything differently -- e.g. register the check with the application.\r\n\r\nI haven't tested the regex extensively, but it performed well on [this list](https://github.com/amperser/proselint/files/2096770/passive_voice_examples.txt).\r\n\r\nHere are the results on [Pythex](https://pythex.org/):\r\n\r\n[Passive voice regex test 2018-06-12.pdf](https://github.com/amperser/proselint/files/2096776/Passive.voice.regex.test.2018-06-12.pdf)\r\n\r\nHere is the regex itself -- I'm sure it can be improved, modularized into several regexes, etc. Happy to continue working on it when I can if you like the idea.\r\n\r\n```\r\n(\\b(?:be|am|is|are|was|were|have|has|had)\\b[\\w\\s]{,15}?(?:d|(?<!whe)n|ne|left|being)\\b(?: by\\b)?)\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 668,
                "title": "Support for utf-8 codec",
                "labels": [],
                "description": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 1: ordinal not in range(128)\r\n\r\ngot this error while writing a technical document using flycheck-proselint in org-mode emacs  "
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 167,
                "title": "Add rule on \"nomal\"",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Noma\n> This medical noun signifies an especially icky ulcerous infection of the mouth or genitals. Because the condition most commonly strikes children living in abject poverty/squalor, it\u2019s a bit like scrofula. And just as the adj. scrofulous has gradually extended its sense to mean \u201ccorrupt, degenerate, gnarly\u201d, so nomal seems ripe for similar extension; it could serve as a slightly obscure or erudite synonym for \u201cscrofulous, repulsive, pathetically gross, grossly pathetic\u201d\u2026 you get the idea.\n\nFigure out how to suggest good places to use this word.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 805,
                "title": "Add rule on 'just'",
                "labels": [],
                "description": "source: Just Not Sorry \r\nsource_url: https://github.com/defmethodinc/just-not-sorry/blob/master/src/Warnings.js\r\n> just\r\n> \"'Just' demeans what you have to say. 'Just' shrinks your power. It's time to say goodbye to the justs.\" --Tara Sophia Mohr"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 667,
                "title": "[Feature request] [Sublime Text] source_url in linter message",
                "labels": [],
                "description": "### 1. Request\n\nIt would be nice, if will be possible to add value of [**source_url parameter**](https://github.com/amperser/proselint#usage) URL in linter message.\n\n### 2. Justification\n\nOften I want to read more details about my errors. It would be nice, if users can it fast.\n\n### 3. Desirable behavior\n\nI use SublimeLinter with @MattDMo [**patch**](https://github.com/SublimeLinter/SublimeLinter3/issues/178#issuecomment-182964392).\n\nFor example, I wrote message:\n\n    Kristina Kiva is very unique.\n\nI get SublimeLinter popup:\n\n![unique](http://i.imgur.com/CXw845S.png)\n\nIt would be nice, if in popup will be add also:\n\n    source: http://www.telegraph.co.uk/a/9715551\n\n### 4. Examples on other apps\n\nSee [**my similar approved issue**](https://github.com/gtarawneh/languagetool-sublime/issues/9) in LanguageTool Sublime Text package:\n\nNow I get result:\n\n![Kristina kiss](http://i.imgur.com/P6miyFH.png)\n\nThanks."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 166,
                "title": "Add rule on \"feckless\"",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Feckless\n> A totally great adjective. Feckless primarily means deficient in efficacy, i.e., lacking vigor or determination, feeble; but it can also mean careless, profligate, irresponsible. It appears most often now in connection with wastoid youths, bloated bureaucracies \u2014 anyone who\u2019s culpable for his own haplessness. The great thing about using feckless is that it lets you be extremely dismissive and mean without sounding mean; you just sound witty and classy. The word\u2019s also fun to read because of the soft e assonance and the k sound \u2014 the triply assonant noun form is even more fun.\n\nSuggest good places to use this word.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 64,
                "title": "Add rule about marketing speak",
                "labels": [
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 803,
                "title": "spacing false positive",
                "labels": [],
                "description": "I use pandoc to prettify markdown (via `pandoc -f markdown -t markdown`) and it puts 2 spaces after ordered lists to follow a 4 space indent rule. Proselint thinks this is an error. At least in the case where the ordered list is separated from the rest of the text by newlines, this may be worth detecting."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 763,
                "title": "false positives in mathematical text",
                "labels": [],
                "description": "Here are a few false positives I found when running proselint on a mathematical-statistical text. Some are based on a misinterpretation of technical terms, another on not being aware of embedded math. The source is Pandoc-style Markdown with embedded LaTeX math. Not sure whether these can be fixed, but hope this helps.\r\n\r\n    by discarding all terms in the negative log-likelihood function\r\n\r\n>   jargon.misc 'in the negative' is jargon. Can you replace it with something more standard?\r\n\r\n    linear discriminant $t$\r\n\r\n>   needless_variants.misc Needless variant. 'discriminating' is the preferred form.\r\n\r\n    $$\r\n    H(y | T) = \\frac12 \\log_2 (\\pi e ~ m n),\r\n    $$\r\n    but the marginal entropy\r\n    $$\r\n    H(y) = \\int - f_y(y) \\log_2 f_y(y) ~ \\ud y\r\n    $$\r\n\r\n>   misc.but No paragraph should start with a 'But'.\r\n\r\n     were directly estimated from 1,000,000 simulated $t$-tests\r\n\r\n>   dates_times.dates When specifying a date range, write 'from X to Y'.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 666,
                "title": "[Feature request] Open access links",
                "labels": [],
                "description": "### 1. Request\n\nWhat do you think about links to [**open access**](https://en.wikipedia.org/wiki/Open_access) resources, not commercial? I may to made pull requests. I think, that proselint developers are supporters fast and open knowledge.\n\n### 2. Justification\n\nI think, that users want to read about problems, that proselint linted. It would be nice, if they may quick read more details about rules of English language, where they made mistakes.\n\n### 3. Desirable behavior\n\nFor example, in [**line 7**](https://github.com/amperser/proselint/blob/127bfe3c7298dfd184799aea5c2a2bb7113ec107/proselint/checks/malapropisms/misc.py#L7) I want to change:\n\n**<http://bit.ly/1T4alrY>** \u2192 **<https://en.wikipedia.org/wiki/Malapropism>**\n\nSee, for example, [**my pull request**](https://github.com/btford/write-good/pull/65/files) to write-good module.\n\n### 4. Examples on other apps\n\nSee example for [**LanguageTool**](https://github.com/gtarawneh/languagetool-sublime) Sublime Text package:\n\n![As well](http://i.imgur.com/A0Nw7G3.png)\n\nI can read, why my text is wrong, and I may click to the link for more details.\n\nThanks."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 800,
                "title": "Add checks for capitalizing the beginning of sentences.",
                "labels": [],
                "description": "Will require some kind of function that splits the given text into individual sentences, NLTK can do this but that's probably overkill and I was thinking of just taking [this](https://stackoverflow.com/a/31505798) and putting it in `tools.py`.\r\n\r\nThe check would just take the output of that function and return a warning for every line where the first alphabetic character isn't capitalized."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 665,
                "title": "\"Cash money\" isn't necessarily redundancy",
                "labels": [],
                "description": "Example:\r\n\r\n> [product name] is well worth buying despite costing cash money.\r\n\r\nProselint flagged this up as an error. I'm not sure it is. It isn't formal standard English, but not everything one writes has to be. It is a use of slang for emphasis. I'm not sure whether this should be fixed, but it might be worth considering whether it is a problem or not."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 165,
                "title": "Add rule on fervid, fervent & perfervid",
                "labels": [
                    "rule",
                    "extraction"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Fervent\n> A beautiful and expressive word that combines the phonological charms of verve and fever. Lots of writers, though, think fervent is synonymous with fervid, and most dictionary defs. don\u2019t do much to disabuse them. The truth is that there\u2019s a hierarchical trio of zeal-type adjectives, all with roots in the Latin verb fervere (= to boil). Even though fervent can also mean extremely hot, glowing (as in \u201cFingering his ascot, Aubrey gazed abstractedly at the brazier\u2019s fervent coals\u201d), it\u2019s actually just the baseline term; fervent is basically synonymous with ardent. Fervid is the next level up; it connotes even more passion/devotion/eagerness than fervent. At the top is perfervid, which means extravagantly, rabidly, uncontrollably zealous or impassioned. Perfervid deserves to be used more, not only for its internal alliteration and metrical pizzazz but because its deployment usually shows that the writer knows the differences between the three fervere words.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 164,
                "title": "Beef up rule on comparing uncomparables",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Unique\n> This is one of a class of adjectives, sometimes called \u201cuncomparables\u201d, that can be a little tricky. Among other uncomparables are precise, exact, correct, entire, accurate, preferable, inevitable, possible, false; there are probably two dozen in all. These adjectives all describe absolute, non-negotiable states: something is either false or it\u2019s not; something is either inevitable or it\u2019s not. Many writers get careless and try to modify uncomparables with comparatives like more and less or intensives like very. But if you really think about them, the core assertions in sentences like \u201cWar is becoming increasingly inevitable as Middle East tensions rise\u201d; \u201cTheir cost estimate was more accurate than the other firms\u2019\u201d; and \u201cAs a mortician, he has a very unique attitude\u201d are nonsense. If something is inevitable, it is bound to happen; it cannot be bound to happen and then somehow even more bound to happen. Unique already means one-of-a-kind, so the adj. phrase very unique is at best redundant and at worst stupid, like \u201caudible to the ear\u201d or \u201crectangular in shape\u201d. You can blame the culture of marketing for some of this difficulty. As the number and rhetorical volume of US ads increase, we become inured to hyperbolic language, which then forces marketers to load superlatives and uncomparables with high-octane modifiers (special - very special - Super-special! - Mega-Special!!), and so on. A deeper issue implicit in the problem of uncomparables is the dissimilarities between Standard Written English and the language of advertising. Advertising English, which probably deserves to be studied as its own dialect, operates under different syntactic rules than SWE, mainly because AE\u2019s goals and assumptions are different. Sentences like \u201cWe offer a totally unique dining experience\u201d; \u201cCome on down and receive your free gift\u201d; and \u201cSave up to 50 per cent\u2026 and more!\u201d are perfectly OK in Advertising English \u2014 but this is because Advertising English is aimed at people who are not paying close attention. If your audience is by definition involuntary, distracted and numbed, then free gift and totally unique stand a better chance of penetrating \u2014 and simple penetration is what AE is all about. One axiom of Standard Written English is that your reader is paying close attention and expects you to have done the same.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 777,
                "title": "dates_times.am_pm.lowercase_periods is triggered when using uppercase letters",
                "labels": [],
                "description": "Witness the following bash session:\r\n\r\n```bash\r\n$  proselint <(echo 'It is 6:00 PM, you know.')\r\n/dev/fd/63:1:9: dates_times.am_pm.lowercase_periods With lowercase letters, the periods are standard.\r\n$ proselint --version\r\n0.8.0\r\n```\r\n\r\nSince the check is explicitly for lowercase letters, it should not be triggered when writing with uppercase letters.\r\n\r\nI tried locally hacking [this call to `existence_check`](https://github.com/amperser/proselint/blob/dfaed0ca844a807388c863cdcbb3f4a384112a0e/proselint/checks/dates_times/am_pm.py#L23) to include an `ignore_case=False` keyword arg, but it does not seem to have changed the behavior."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 649,
                "title": "Catch \"how does X look like\" error.",
                "labels": [],
                "description": "Finding the phrase (usually by non-native English speakers): An erroneous combination of two types correct sentences: \r\n\r\n - \"What does X look like?\" and \r\n - \"How does X look?\" \r\n\r\nTo arrive at the incorrect: \"How does X look like?\"\r\n\r\nI don't have a handy reference besides something like: http://english.stackexchange.com/questions/55672/is-it-what-it-looks-like-or-how-it-looks-like"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 163,
                "title": "Add rule on \"mucous\" vs. \"mucus\"",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Mucous\n> An adjective, not synonymous with the noun mucus. It\u2019s worth noting this not only because the two words are fun but because so many people don\u2019t know the difference. Mucus means the unmentionable stuff itself. Mucous refers to (1) something that makes or secretes mucus, as in \u201cThe next morning, his mucous membranes were in rocky shape indeed,\u201d or (2) something that consists of or resembles mucus, as in \u201cThe mucous consistency of its eggs kept the diner\u2019s breakfast trade minimal.\u201d\n\nWill likely require a tool, like spaCy, that can distinguish nouns from adjectives.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 780,
                "title": "Is correctly misspelled in the README?",
                "labels": [],
                "description": "Is the `corectly` spelling purposeful in the README? \r\n\r\n```\r\nspelling.misc | Spelling words corectly\r\n```\r\n\r\nI mean, I got a little chuckle out of it, but want to double-check. \ud83e\udd23 "
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 634,
                "title": "Groups",
                "labels": [],
                "description": "Fix issue 132"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 162,
                "title": "Add rule on \"use\" vs. \"utilize\"",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Utilize\n> A noxious puff-word. Since it does nothing that good old use doesn\u2019t do, its extra letters and syllables don\u2019t make a writer seem smarter; rather, using utilize makes you seem either like a pompous twit or like someone so insecure that she\u2019ll use pointlessly big words in an attempt to look sophisticated. The same is true for the noun utilization, for vehicle as used for car, for residence as used for house, for presently, at present, at this time, and at the present time as used for now, and so on. What\u2019s worth remembering about puff-words is something that good writing teachers spend a lot of time drumming into undergrads: \u201cformal writing\u201d does not mean gratuitously fancy writing; it means clean, clear, maximally considerate writing.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 57,
                "title": "Extract rules from Autocrit",
                "labels": [
                    "extraction"
                ],
                "description": "https://www.autocrit.com/editor/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 783,
                "title": "FR: Process only contents of narrowed buffer?",
                "labels": [],
                "description": "I often work on large documents in org and, for efficiency and less clutter, I tend to narrow the view to just a section of the document.  On such a large document. proselint seems to take a great deal of computation leading to lag in writing.  I wonder if it would be possible to have proselint only process the narrowed view?\r\n\r\n(it could be that I misunderstand how proselint works but the slowdown seems to be happening only when I have proselist enabled but I have not done an exhaustive testing... apologies if I got this wrong.)"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 631,
                "title": "Changes are not reflected in local develop version",
                "labels": [],
                "description": "I don't know why my changes aren't always added to the local development version.  Sometimes they are, and sometimes nothing I do will get my changes to reflect when I run proselint.\r\n\r\nI've tried running `python setup.py develop` from the root proselint directory, but that doesn't seem to help.  Can anyone help me figure out what I am doing wrong?"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 161,
                "title": "extract percentage of text that is italicized/bolded/underlined or otherwise formatted",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "This will be useful if we ever want to say things like _do not italicize more than 10% of your text_.\n\n_note: this issue should fail such check_\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 792,
                "title": "Online API",
                "labels": [],
                "description": "I am thinking of creating a standalone GUI for proselint. A simple alternative would be to simply send the text to http://proselint.com/write/ . Is there a plan to support this?"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 625,
                "title": "Added weasel_words.misc check and test from stub",
                "labels": [],
                "description": "Looking at the test results the `weasel_words.misc` test was skipping because the check itself was still a stub. I decided to fill it in based on the source provided and enable it.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 158,
                "title": "Look into Aho-Corasick algorithm",
                "labels": [
                    "speed"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 55,
                "title": "Look into prowritingaid",
                "labels": [
                    "question"
                ],
                "description": "http://prowritingaid.com/en/App/Purchase\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 795,
                "title": "Don't match multiple dashes in check_ly",
                "labels": [],
                "description": "In LaTeX, multiple dashes is used to represent an en (--) or an em (---) dash. Currently `check_ly` matches sentences on the form: `This is a family---albeit a small one (...)` which it probably shouldn't."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 624,
                "title": "-d option broken?",
                "labels": [],
                "description": "proselint -d outroute_timing_design.txt \nDeleting the cache...\nrm: invalid option -- 'p'\nTry 'rm --help' for more information.\n\n proselint -v\n0.7.0\n\nrunning on python-3.5.1\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 153,
                "title": "Look into this guy's work on judging editors of technical writing",
                "labels": [],
                "description": "https://scholar.google.com/citations?user=0pjcQjEAAAAJ&hl=en\n\nhttp://digital.library.unt.edu/ark:/67531/metadc39326/m2/1/high_res_d/BoettgerSTCProceeding_11.pdf\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 796,
                "title": "Missing module anydbm when pip installing",
                "labels": [],
                "description": "```\r\nash@mini:~> sudo pip3 install proselint\r\nCollecting proselint\r\n  Cache entry deserialization failed, entry ignored\r\n  Using cached https://files.pythonhosted.org/packages/1b/d2/2e6afa3f933a12bfb1eb588f1ec8c26f915935356d8a0e51b2e5c53bfd04/proselint-0.8.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"/tmp/pip-install-m2mb9_r1/proselint/proselint/tools.py\", line 20, in <module>\r\n        import dbm\r\n      File \"/usr/lib64/python3.4/_import_failed/dbm.py\", line 17, in <module>\r\n        to install it.\"\"\".format(__name__, package))\r\n    ImportError: Module 'dbm' is not installed.\r\n    Use:\r\n      sudo zypper install python3-dbm\r\n    to install it.\r\n    \r\n    During handling of the above exception, another exception occurred:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-m2mb9_r1/proselint/setup.py\", line 4, in <module>\r\n        from proselint.version import __version__\r\n      File \"/tmp/pip-install-m2mb9_r1/proselint/proselint/__init__.py\", line 2, in <module>\r\n        from . import tools\r\n      File \"/tmp/pip-install-m2mb9_r1/proselint/proselint/tools.py\", line 22, in <module>\r\n        import anydbm as dbm\r\n    ImportError: No module named 'anydbm'\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-m2mb9_r1/proselint/\r\n```"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 620,
                "title": "WIP: Actually lower case am/pm",
                "labels": [],
                "description": "Upon using proselint on an email, I immediately noticed that \"lowercase am/pm\" was not checking that am/pm was actually lower case.\n\nI attempted to fix that here (and throw in some tests). But, I'm not a python hacker, and I have no idea what the usual workflows are for python projects. I did run `nosetests` within the tests directory, but my new test still fails. Is there some build step I'm missing? Or is my test broken?\n\nP.S. It would be great if you could throw a few words into the contributing guide about how to approach the project as an absolute Python beginner. E.g. is `pip install --user --upgrade .` the right way to install a modified version? Or, how do I run it without even installing it locally? :)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 152,
                "title": "Check for common errors made by foreigners",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 52,
                "title": "Extract rules from \"For who the bell tolls\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.amazon.com/For-Bell-Tolls-David-Marsh/dp/1783350121\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 615,
                "title": "Add technical language for JavaScript",
                "labels": [],
                "description": "First attempt at adding Javascript rules from https://github.com/azu/technical-word-rules.\n1. Not sure how to add version number to \"ECMAScript\" in error message.\n2. Any feedback is appreciated.\n\nI can finish the rest of the rules when I hear that my implementation looks good!\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 151,
                "title": "Extract rules from FemaleScienceProfessor",
                "labels": [
                    "extraction"
                ],
                "description": "She runs a academic-writing-parody contest every year. It should be possible to mine rules from the entries.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 51,
                "title": "Detect sexism and biased language",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 798,
                "title": "'hopefully' is a bit of a skunked term",
                "labels": [],
                "description": "I ran into this while running proselint over some of my own writing. This was genuinely surprising to me. \r\n\r\nGiven that the term seems to have been controversial only from the 1960s, and that the AP have updated their stylebook to accept the new meaning - 'it is hoped', is it possible to remove this from `skunked_terms` ?\r\n\r\nhttps://www.washingtonpost.com/lifestyle/style/aps-approval-of-hopefully-symbolizes-larger-debate-over-language/2012/04/17/gIQAti4zOT_story.html?noredirect=on&utm_term=.d78e398433dd\r\n\r\nAlso, Garner's Modern English Usage which the file quotes has more to say about this - https://books.google.co.nz/books?id=2xv4CwAAQBAJ&q=hopefully#v=snippet&q=hopefully&f=false."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 610,
                "title": "Use a plugin architecture for rules",
                "labels": [
                    "enhancement"
                ],
                "description": "https://straightplugin.readthedocs.io/en/latest/getting-started.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 150,
                "title": "Extract rules from Matt Might's guide to email",
                "labels": [
                    "extraction"
                ],
                "description": "http://matt.might.net/articles/how-to-email/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 49,
                "title": "Extract rules from Butterick's Practical Typography",
                "labels": [
                    "extraction"
                ],
                "description": "http://practicaltypography.com/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 607,
                "title": "Extract rules from *Handbook of Nonsexist Writing*",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 149,
                "title": "Extract rules from Psych Terms to Avoid",
                "labels": [
                    "extraction"
                ],
                "description": "https://twitter.com/sapinker/status/628974546465460224\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 48,
                "title": "Add rule to detect Black English Vernacular",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 753,
                "title": "Ableism",
                "labels": [],
                "description": "Hi there,\r\n\r\nThis PR addresses https://github.com/amperser/proselint/issues/247, adding ableist terms from the link in the issue, supplemented with terminology from [this Wikipedia article](https://en.wikipedia.org/wiki/List_of_disability-related_terms_with_negative_connotations). \r\n\r\nI modeled the rules after the [LGBTQ checks](https://github.com/amperser/proselint/tree/master/proselint/checks/lgbtq), as it seemed to be the closest match to what I was going for: errors for outright slurs and warnings for potentially problematic language.\r\n\r\nA few notes:\r\n\r\n- I left terms repeated in other checks in, I figured it would be good to preserve context and intent for that specific check\r\n- I had my friend @danielsmc take a final look before submitting, as I'm not too familiar with Python\r\n- There's some initial tests included as well, I tried to model them after the other tests I saw in the repo\r\n\r\nAs an aside, I just wanted to say thanks for this project. It's really great to have as a resource, and I try to recommend it to everyone I know who is into linting!"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 605,
                "title": "Dubious: Starting paragraphs with 'But'",
                "labels": [],
                "description": "Is there a source for the following warning?\n\n```\nmisc.but No paragraph should start with a 'But'.\n```\n\nHere's what Garner says on the subject (but, 3rd edition, p 121):\n\n> It is a gross canard that beginning a sentence with _but_ is stylistically slipshod. In fact, doing so is desirable in any number of contexts, as countless stylebooks have said.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 148,
                "title": "Extract rules from Garner's list",
                "labels": [
                    "extraction"
                ],
                "description": "https://twitter.com/bryanagarner/status/628948744944271360\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 46,
                "title": "Unincorporated clich\u00e9s from GMAU",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "the following need some more thought before including.\n- \"inclement weather\", ?\n- \"there is wide support\" in politics\n- boasts as a transitive verb,\n- choreograph used figuratively,\n- giveth ... taketh away\n- orchestrate in nonmusical contexts\n- venerable when used for 'old'\n\nit would also be good to go through all the clich\u00e9s and think of variant forms that might appear.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 604,
                "title": "Dubious: extensible vs extendable",
                "labels": [],
                "description": "The following warning seems dubious:\n\n```\noutline.org:528:34: needless_variants.misc Needless variant. 'extendable' is the preferred form.\n```\n\nThere seems to be some agreement, [at least on english.se](http://english.stackexchange.com/a/90444/8851), that these word have distinct meanings.  This distinction is visible in IT terms, such as \"extensible programming\", \"extensible markup language (XML)\", \"extensible authentication protocol (EAP)\", \"unified extensible firmware interface (UEFI)\", etc.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 142,
                "title": "Add rule with technical dictionary",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "https://github.com/azu/technical-word-rules\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 44,
                "title": "Create a sports detector",
                "labels": [
                    "tooling"
                ],
                "description": "One of the entries in _GMAU_ is:\n\n> answer back is a common REDUNDANCY, especially in BrE\u2014e.g.: \u201cHilary and Piers du Pre seem determined to wreak the ultimate revenge on their sister by discrediting her while she lies\u2014unable to answer back [read answer]\u2014in her grave.\u201d Julian Lloyd Webber, \u201cAn Insult to Jackie\u2019s Memory,\u201d Daily Telegraph, 4 Jan. 1999, at 15. \n> \n> In AmE, the phrase is fairly common in sportswriting in the sense \u201cto equal an opponent\u2019s recent scoring effort\u201d\u2014e.g.:\n>  \u2022 \u201cEven when the Cougars did score, the Herd answered back in an instant.\u201d Joe Davidson, \u201cHerd Remain on a Roll,\u201d Sacramento Bee, 21 Nov. 1998, at D1. \n> \u2022 \u201cJake Armstrong quickly answered back for the Knights, but the two-goal cushion was short-lived.\u201d Joe Connor, \u201cLa Jolla, Bishop\u2019s Tie One On in Wester,\u201d San Diego Union-Trib., 16 Dec. 1998, at D6. \n> \n> Some writers have used the sport phrase metaphorically\u2014e.g.: \u201cThe last time somebody tried to impose prohibition on Chicago, the city answered back with Al Capone.\u201d Peter Annin, \u201cProhibition Revisited?\u201d Newsweek, 7 Dec. 1998, at 68. Despite the currency of this usage, answer can carry the entire load by itself. \n> \n> LANGUAGE-CHANGE INDEX answer back for answer (outside sports): Stage 3\n\nThis pattern, where there is an exception to a rule when talking about a particular topic (or where a rule applies only when talking about the topic) will come up many times.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 601,
                "title": "conda forge?",
                "labels": [],
                "description": "It would be useful to have this on conda forge. I can create a pull request to staged-recipes if you tell me who is willing to be added as a maintainer. \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 141,
                "title": "Increase the size of the test corpus",
                "labels": [
                    "tooling"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 43,
                "title": "Apply memoized rule checks at the paragraph level",
                "labels": [
                    "speed"
                ],
                "description": "Rules are currently defined as functions over the full text of the document. It would be better to apply the  functions to each paragraph separately. The reason for this is that, for many documents (especially large ones), most of the paragraphs will not change between saves or keystrokes, such that when these functions are memoized, most of the linter computations will be available right away.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 42,
                "title": "Create a plugin for Pages",
                "labels": [
                    "plugin"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 599,
                "title": "Code climate permissions",
                "labels": [
                    "codeclimate",
                    "bug"
                ],
                "description": "Not all repo admins can view the code climate results from PRs.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 139,
                "title": "Create settings that turn on and off groups of checks",
                "labels": [
                    "enhancement"
                ],
                "description": "e.g., one that is good for emails, one for dirty words, ...\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 41,
                "title": "Check for common typographical issues",
                "labels": [
                    "extraction"
                ],
                "description": "2 x 4 vs. 2 \u00d7 4\n2-4 vs. 2\u20134\nBose-Einstein condensate vs. Bose\u2013Einstein condensate\n--- vs. \u2014\n+/- vs. \u00b1\n\n(Take a look at Jordan's typography talk for some examples.)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 594,
                "title": "Not linting errors that start at index 0 and go to EOL",
                "labels": [],
                "description": "I'm currently working on an docx variant in which the document is read in, linted, and spit back out with comments. I'm using the text found at [http://proselint.com/write/](url) as my challenge text. I read each paragraph in (blocks of text separated by `\\n`), lint that paragraph, then output the XML required to make the comment. What I've found is that if the entire line is a lint error, the linter ignores it, and this is before it hits my XML output. I demonstrated a recovery by adding a space at EOL: `pl.tools.lint(texttolint+\" \")`.  A couple of examples are seen in the security section and commercialese section. See attached doc and compare to [http://proselint.com/write/](url) for further examples.\n\n[Linted_ProseLintTest.docx](https://github.com/amperser/proselint/files/432738/Linted_ProseLintTest.docx)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 138,
                "title": "Check for words banned from the NY Times",
                "labels": [
                    "extraction"
                ],
                "description": "http://arnoldzwicky.org/2012/04/16/the-gray-lady-avoids/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 40,
                "title": "Have American English and British English modes?",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 586,
                "title": "Add issue template and pull request template",
                "labels": [
                    "enhancement"
                ],
                "description": "`ISSUE_TEMPLATE.md`\n`PULL_REQUEST_TEMPLATE.md`\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 137,
                "title": "Extract rules from list of dirty words",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/d4l3k/sketchy-url-shortener/tree/master/word_list_dirty_words\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 34,
                "title": "Run checks in parallel",
                "labels": [
                    "speed"
                ],
                "description": "There's an opportunity to run the linter in a way that's massively parallel. The main insights here are that many of the rules can be run independently of each other and that they can be run independently on separate parts of the text (e.g., at the paragraph level).\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 585,
                "title": "Add BBEdit / bbresults to plugin list",
                "labels": [
                    "enhancement"
                ],
                "description": "Include a demo of some kind.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 135,
                "title": "Read about redaction software",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 32,
                "title": "Extract rules from Safire's \"On language\" columns",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 574,
                "title": "uncomparables.misc false alarms on \"July-August\"",
                "labels": [
                    "false alarm"
                ],
                "description": "```\nD. Verdon and G. McGraw, \"Risk analysis in software design,\" in IEEE Security & Privacy, vol. 2, no. 4, pp. 79-84, July-Aug. 2004.\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 133,
                "title": "Thing i haven't seen in any of the books but that is a weakening or condescending phrase",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "\"And we must remember\", \"And remember\",\u2026\n\nprobably can find a source for this somewhere but it made me roll my eyes when i read it, which suggests it's a problem.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 29,
                "title": "Create a demo where famous authors edit their own text",
                "labels": [],
                "description": "e.g., DFW on DFW.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 573,
                "title": "Add WordRake to survey",
                "labels": [
                    "research"
                ],
                "description": "http://www.wordrake.com/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 132,
                "title": "Add check for using the right name for groups of things",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "e.g., a group of cats is a \"glaring\".\n\nhttp://www.oxforddictionaries.com/us/words/what-do-you-call-a-group-of\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 28,
                "title": "Get in touch with Bryan Garner",
                "labels": [],
                "description": "His book is so thorough an authoritative that it would be _great_ to get him involved in some way, perhaps as an advisor. It would also be amazing if he (or Oxford University Press) allowed deeper integration with the text of his book.\n\nhttp://www.amazon.com/Garners-Modern-American-Usage-Garner/dp/0195382757\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 572,
                "title": "Find more usage and grammar tools from among these",
                "labels": [
                    "research"
                ],
                "description": "https://scholar.google.com/scholar?start=0&hl=en&as_sdt=2005&sciodt=0,5&cites=701013640091897207&scipsc=\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 131,
                "title": "Incorporate this to an optional media-friendly word-replacement flag",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/kjhealy/pf-industry-words\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 27,
                "title": "Extract rules from Garner's usage guide",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.amazon.com/Garners-Modern-American-Usage-Garner/dp/0195382757\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 571,
                "title": "Extract rules from the Just Not Sorry plugin",
                "labels": [
                    "extraction"
                ],
                "description": "https://chrome.google.com/webstore/detail/just-not-sorry-the-gmail/fmegmibednnlgojepmidhlhpjbppmlci?hl=en-US\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 130,
                "title": "extraction Robin Kinross of hyphen press on style (recent)",
                "labels": [
                    "extraction"
                ],
                "description": "Need to extract\n\nhttps://hyphenpress.co.uk/journal/article/style_guide_1\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 26,
                "title": "Extract rules from DFW's \"Tense present\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://instruct.westvalley.edu/lafave/DFW_present_tense.html\n\nThis is a particularly nice essay because the first page or two is just a list of idioms and grammatical structures that should be avoided.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 570,
                "title": "Create a CSV schema for tool.csv",
                "labels": [
                    "enhancement"
                ],
                "description": "http://digital-preservation.github.io/csv-schema/csv-schema-1.0.html\n#566\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 128,
                "title": "Extract rules from this thesis",
                "labels": [
                    "extraction"
                ],
                "description": "http://thescholarship.ecu.edu/bitstream/handle/10342/4399/Flanagan_ecu_0600O_11153.pdf?sequence=1\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 23,
                "title": "Check for weasel words",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "Stub placed in checks.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 569,
                "title": "vitality vs vitalness",
                "labels": [],
                "description": "When one wishes to turn `vital` into a noun, one might think the word `vitality` is appropriate. If you wish to have a noun form of the word `vital` (especially when referring to importance (5, 3b)), the appropriate term is `vitalness`.\n\nSources: http://www.dictionary.com/browse/vital , http://www.thefreedictionary.com/vitalness\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 122,
                "title": "Check for inflamatory language",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "http://rationalwiki.org/wiki/Inflammatory_language\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 22,
                "title": "Check for lexical illusions",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "https://github.com/btford/write-good/blob/master/lib/lexical-illusions.js\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 567,
                "title": "Support .py (and other language-specific) files",
                "labels": [
                    "enhancement"
                ],
                "description": "There are many instances where prose-like writing is embedded within language-specific files. Good examples of this are tutorials for many packages that are out there e.g., [here](https://github.com/mne-tools/mne-python/blob/master/tutorials/plot_background_filtering.py). \n\nThere are probably a subset of `proselint` features that'd be useful in this case (e.g., spellchecker). For example, in Python it could only analyze lines that began with `#` or were embedded within blockquotes, and run a few routines that are appropriate for short lines of text (e.g., line comments).\n\n I think it'd be useful for creating more polished documentation. Is this something you all have thought about? Something you're friendly to?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 121,
                "title": "Get in touch with sources",
                "labels": [
                    "communication"
                ],
                "description": "- [ ] E. B. White. His literary estate, White Literacy LLC, is run by his grandaughter Martha White (martha6white@gmail.com), who is herself an author. She has also edited a book of his quotations (see http://www.berfrois.com/2011/11/martha-white-on-e-b-white/).\n- [ ] Steve Pinker. He can be reached by email at pinker@wjh.harvard.edu.\n- [ ] David Foster Wallace. His literary estate is The David Foster Wallace Literary Trust (http://www.davidfosterwallacebooks.com/contact.html, estate@davidfosterwallacebooks.com).\n- [ ] Bryan Garner. He runs a company, LawProse, that provides legal writing services. He can be reached by email at info@lawprose.org.\n- [ ] Chuck Palahniuk. His agent is Edward Hibbert at Donadio and Olsen (edward@donadio.com) and his publicist is Tom Doughty at Random House (tdoughty@randomhouse.com).\n- [ ] Mary Norris. For inquiries regarding press and appearances, contact Erin Lovett at W. W. Norton. For all other inquiries, contact Becky Sweren at Kuhn Projects.\n- [ ] Mark Twain. His literary estate is here  http://www.cmgww.com/historic/twain/business/form_inquiries.html.\n- [ ] Elmore Leonard. His literary estate is represented by http://www.wylieagency.com/clients.html\n- [ ] George Orwell. His estate is represented by http://www.amheath.com/author?id=198.\n- [ ] Matthew Butterick can be reached by email at  mb@typographyforlawyers.com.\n- [ ] Philip Corbett. He's on Twitter at https://twitter.com/corbettnyt.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 19,
                "title": "Rubric for hard-to-implement features",
                "labels": [],
                "description": "Develop some systematic way to describe features within the extracted sources that are not easily implementable but with an eye to why they are not easily implementable and any clues as to what sources may provide a solution to the problem.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 565,
                "title": "Lady Mondegreen incorrectly labelled (from GetSiteControl)",
                "labels": [
                    "false alarm"
                ],
                "description": "A user says:\n\n> Lady Mondegreen incorrectly labeled as \"laid him on the green\" \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 120,
                "title": "Extract rules from Gower's The Complete Plain Words",
                "labels": [
                    "extraction"
                ],
                "description": "http://en.wikipedia.org/wiki/The_Complete_Plain_Words\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 17,
                "title": "Extract rules from Intelligent Editing website",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.intelligentediting.com/resources/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 564,
                "title": "Detects gender bias despite gender neutral alternative term (from GetSiteControl)",
                "labels": [
                    "easy",
                    "false alarm"
                ],
                "description": "A user says:\n\n> Detects gender bias on 'chairperson' despite the term being the gender neutral alternative to gendered nouns.\n\nText that will trigger false positive: `They thought the chairperson was interesting.`\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 119,
                "title": "Check out dashlane's inbox scanning",
                "labels": [
                    "extraction"
                ],
                "description": "https://www.dashlane.com/scan/11#/login\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 16,
                "title": "Add rule about consistency",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "See, e.g., http://www.intelligentediting.com/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 563,
                "title": "\"Get that off of me\" triggers \"off is the preferred form\" (from GetSiteControl)",
                "labels": [
                    "false alarm"
                ],
                "description": "This issue is still present in 0.6.1. A user says:\n\n> \"Get that off of me before I catch on fire!\" This is the ONLY acceptable way to say this orally, in the actual circumstance of being on fire, where I am from. Is oral or dialectal a category that would be helpful in distinguishing forms that aren't \"preferred\" from forms (like the mondegreens) that someone invented on the spot the first time they tried to write something down? \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 118,
                "title": "Extract rules from \"Comma Queen\" video series",
                "labels": [
                    "extraction"
                ],
                "description": "http://video.newyorker.com/watch/comma-queen-comma-queen-series-premiere?c=series\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 15,
                "title": "Create a Microsoft Word plugin/app",
                "labels": [
                    "plugin"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 561,
                "title": "Expand cases for venery terms (from GetSiteControl)",
                "labels": [],
                "description": "Report from user:\n\n> \"A large group of antelopes walked by the road.\" Now it won't tell me that I should use herd instead of group.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 117,
                "title": "Extract rules from \"After deadline\" by the NY Times staff",
                "labels": [
                    "extraction"
                ],
                "description": "http://afterdeadline.blogs.nytimes.com/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 14,
                "title": "Create a Google docs plugin/app",
                "labels": [
                    "plugin"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 560,
                "title": "Feedback box covering user input (from GetSiteControl)",
                "labels": [
                    "bug"
                ],
                "description": "A few users have reported that the feedback box has been making it difficult to see what they have written (example):\n\n> This box (\"Find a problem? Tell us about it.\") Is covering content and can't be moved.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 116,
                "title": "Extract rules from \"How to write badly well\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://writebadlywell.blogspot.it/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 10,
                "title": "Extract rules from Orwell's \"Politics and the English Language\"",
                "labels": [
                    "extraction"
                ],
                "description": "https://www.mtholyoke.edu/acad/intrel/orwell46.htm\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 559,
                "title": "Various tooltip bugs (from GetSiteControl)",
                "labels": [
                    "bug"
                ],
                "description": "A few user reports (edited for grammar and brevity):\n\n> The error message is following the cursor even after correcting the error.\n> \n> Warning message truncated when hovering over it.\n> \n> The error message is stuck to my pointer. Can't seem to get rid of it.\n> \n> Messed around with the \"$1000 USD\" line and the tooltip followed my cursor around the document until I refreshed the page.\n\nI have also had issues with the tooltip; it never disappears, and is usually truncated if the error message is too long.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 115,
                "title": "Extract rules from \"The science of scientific writing\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://engineering.missouri.edu/civil/files/science-of-writing.pdf\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 9,
                "title": "Extract rules from Steve Pinker's new book",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 558,
                "title": "Add Foxtype to tools survey",
                "labels": [
                    "enhancement"
                ],
                "description": "https://foxtype.com\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 114,
                "title": "Extract rules from \"The art of styling sentences\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.amazon.com/The-Styling-Sentences-K-D-Sullivan/dp/0764121812/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 8,
                "title": "Extract rules from Strunk & White",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 555,
                "title": "Reply-To: No hyphen is necessary\u2026 Actually, it is necessary.",
                "labels": [
                    "false alarm",
                    "bug"
                ],
                "description": "Using [mutt](http://www.mutt.org/) with `edit_headers=\"yes\"` and [neovim](https://neovim.io/) with `proselint`, I get an error on the `Reply-To:` line - `proselint: garner.phrasal_adjectives.ly No hyphen is necessary in[\u2026]`.\n\nHow can I set up `proselint` to ignore this error?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 113,
                "title": "Extract rules from this NY Times article",
                "labels": [
                    "extraction"
                ],
                "description": "http://learning.blogs.nytimes.com/2012/09/20/writing-rules-advice-from-the-new-york-times-on-writing-well/?_r=0\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 549,
                "title": "Add doubling-up-on-words rule",
                "labels": [
                    "enhancement"
                ],
                "description": "Correct cases to match:\nHe went to the **the** store. (extra \"the\")\nShe went to the store and thought that **that** \"That Ice Cream\" was expired. (redundant \"that\" however, the third \"that\" is part of the ice cream name, in quotes.)\nHe thought that **that** I thought that he wanted to go yesterday. (redundant \"that\")\n\nInvalid cases to match:\nHe thought that that was the correction. (removing \"that\" would make the sentence invalid)\nHe said, \"I think that that is the right thing to do\" (i.e. not changing someone's words; removing \"that\" would be bad)\nI thought that--that--that he had a stutter (removing \"that\" would change how the character speaks)\n\nThis regex: `[\\\"]\\w.*?[\\\"]` matches text in quotes, and `\\b(\\w+)\\s+\\1\\b` finds duplicate words (http://www.regular-expressions.info/backref.html).\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 112,
                "title": "Extract rules from Richard Nordquist",
                "labels": [
                    "extraction"
                ],
                "description": "e.g.,http://grammar.about.com/od/words/a/redundancies.htm\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 544,
                "title": "Ignore typography errors in code blocks in html and markdown",
                "labels": [],
                "description": "This is a tentative fix for #542 , I think it will probably break the build...\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 111,
                "title": "Extract rules from correction, misprints, and errata",
                "labels": [
                    "extraction"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 542,
                "title": "typography.symbols.curly_quotes fails to ignore code blocks in markdown in certain situations.",
                "labels": [
                    "false alarm",
                    "enhancement",
                    "tooling",
                    "bug"
                ],
                "description": "I am using proselint 0.6.1. typography.symbols.curly_quotes complains about double quotation characters on several sections in code blocks. Here's an example:\n\n``````\nHere is some preformatted code with double quotation marks:\n\n\\```\n\"hello world\"\n\"{hello world}\"\n\"hello world\"\n\\```\n``````\n\nresults in the error:\n\n```\n/home/catherine/markdown_test.md:6:1: typography.symbols.curly_quotes Use curly quotes \u201c\u201d, not straight quotes \"\". Found once elsewhere.\n/home/catherine/markdown_test.md:6:15: typography.symbols.curly_quotes Use curly quotes \u201c\u201d, not straight quotes \"\".\n```\n\nThe error pops up in several situations like this. Notice that the error is fine with both quotations above and below. I'm wondering if the markdown interpreter is doing something unexpected.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 110,
                "title": "Consider using spaCy instead of textblob",
                "labels": [],
                "description": "http://honnibal.github.io/spaCy/\n\nThe big benefit is speed and up-to-the-minute algorithms. the downside is that it's a new project, run by 1 guy, and has a commercial license of $5,000 unless you release you code under GPL. He's a Cython expert and knows a lot about NLP; might be worth trying to connect with him at some point (e.g., as a consultant to do a code review, or farming out some rules).\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 536,
                "title": "False positive on \"more false positives\"",
                "labels": [
                    "false alarm"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 109,
                "title": "Extract rules from Chuck Palahniuk",
                "labels": [
                    "extraction"
                ],
                "description": "http://1000wordseveryday.tumblr.com/post/54758529019/writing-advice-by-chuck-palahniuk-in-six\n\nhttp://referenceforwriters.tumblr.com/post/48884709774/by-chuck-palahniuk-8-words-you-should-avoid-when\n\nhttps://litreactor.com/essays/chuck-palahniuk/stocking-stuffers-13-writing-tips-from-chuck-palahniuk\n\nhttp://fixyourwritinghabits.tumblr.com/post/74834229987/does-chuck-palahniuks-advice-on-thought-verbs\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 534,
                "title": "Add a rule on the passive voice",
                "labels": [
                    "rule",
                    "hard"
                ],
                "description": "In some fields it's not advised to use the passive voice. There are two packages for Emacs which do mark uses of passive voice: _Writegood_ and _text-linter_.\n\nCan we also have a passive voice linter for proselint?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 108,
                "title": "Extract rules from \"Famous advice on writing\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.brainpickings.org/index.php/2013/05/03/advice-on-writing/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 533,
                "title": "False positive regarding center/centre in LaTeX document",
                "labels": [
                    "bug"
                ],
                "description": "I am using LaTeX, but with my habitual South African spelling (which is essentially en-uk). Proselint is picking up my use of \"centre\" as being inconsistent, I think it may be because I am using things like the following:\n\n```\n\\begin{table}[hbt!]\n\\begin{center}\n\\caption{Structural Index (SI) values for ideal geometries.}\n\\label{tab:SI_values}\n\\begin{tabular}{lll}\n    Ideal Geometry Model & Magnetic SI & Gravity SI\\\\\n    \\hline\n    Point, sphere & 3 & 2 \\\\\n    Line, cylinder, thin-bed fault & 2 & 1 \\\\\n    Thin sheet edge, thin sill, thin dyke & 1 & 0\n\\end{tabular}\n\\end{center}\n\\end{table}\n```\n\nThis is definitely a false positive, since nowhere in my text do I use \"center\", only in the LaTeX command.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 107,
                "title": "Extract rules from these books on writing",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.brainpickings.org/index.php/2012/01/09/best-books-on-writing-reading/#advice\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 532,
                "title": "Fix automatic PyPi release via Travis",
                "labels": [
                    "bug"
                ],
                "description": "```\nInstalling deploy dependencies\nsudo: must be setuid root\n--2016-07-18 07:25:28--  https://bootstrap.pypa.io/ez_setup.py\nResolving bootstrap.pypa.io (bootstrap.pypa.io)... 151.101.20.175\nConnecting to bootstrap.pypa.io (bootstrap.pypa.io)|151.101.20.175|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 12402 (12K) [text/x-python]\nSaving to: `STDOUT'\n 0% [                                       ] 0           --.-K/s   in 0s      \nCannot write to `-' (Success).\nCollecting twine\n  Downloading twine-1.7.4-py2.py3-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): requests>=2.5.0 in /home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages (from twine)\nCollecting clint (from twine)\n  Downloading clint-0.5.1.tar.gz\nCollecting requests-toolbelt>=0.5.1 (from twine)\n  Downloading requests_toolbelt-0.6.2-py2.py3-none-any.whl (49kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 7.8MB/s \nCollecting pkginfo>=1.0 (from twine)\n  Downloading pkginfo-1.3.2-py2.py3-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): setuptools>=0.7.0 in /home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages (from twine)\nCollecting args (from clint->twine)\n  Downloading args-0.1.0.tar.gz\nBuilding wheels for collected packages: clint, args\n  Running setup.py bdist_wheel for clint ... done\n  Stored in directory: /home/travis/.cache/pip/wheels/aa/65/4a/a0bceb0a6bee518b1dace4c803f24c4ac8febe55bdca0f14ed\n  Running setup.py bdist_wheel for args ... -done\n  Stored in directory: /home/travis/.cache/pip/wheels/0a/e0/66/35419f9f9ee41099a3631f0f308b9604bd1ffeabc066d69070\nSuccessfully built clint args\nInstalling collected packages: args, clint, requests-toolbelt, pkginfo, twine\nSuccessfully installed args-0.1.0 clint-0.5.1 pkginfo-1.3.2 requests-toolbelt-0.6.2 twine-1.7.4\npip install --user wheel\ndpl.2\nPreparing deploy\nAuthenticated as hello@amperser.com\nCleaning up git repository with `git stash --all`. If you need build artifacts for deployment, set `deploy.skip_cleanup: true`. See https://docs.travis-ci.com/user/deployment/#Uploading-Files.\n/usr/lib/git-core/git-stash: 186: /usr/lib/git-core/git-stash: cannot create /home/travis/build/amperser/proselint/.git/logs/refs/stash: Directory nonexistent\ndpl.3\nDeploying application\nrunning sdist\nrunning egg_info\ncreating proselint.egg-info\nwriting proselint.egg-info/PKG-INFO\nwriting top-level names to proselint.egg-info/top_level.txt\nwriting requirements to proselint.egg-info/requires.txt\nwriting dependency_links to proselint.egg-info/dependency_links.txt\nwriting entry points to proselint.egg-info/entry_points.txt\nwriting manifest file 'proselint.egg-info/SOURCES.txt'\nreading manifest file 'proselint.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'proselint.egg-info/SOURCES.txt'\nwarning: sdist: standard file not found: should have one of README, README.rst, README.txt\nrunning check\ncreating proselint-0.6.1\ncreating proselint-0.6.1/proselint\ncreating proselint-0.6.1/proselint.egg-info\ncreating proselint-0.6.1/proselint/checks\ncreating proselint-0.6.1/proselint/checks/airlinese\ncreating proselint-0.6.1/proselint/checks/annotations\ncreating proselint-0.6.1/proselint/checks/archaism\ncreating proselint-0.6.1/proselint/checks/cliches\ncreating proselint-0.6.1/proselint/checks/consistency\ncreating proselint-0.6.1/proselint/checks/corporate_speak\ncreating proselint-0.6.1/proselint/checks/cursing\ncreating proselint-0.6.1/proselint/checks/dates_times\ncreating proselint-0.6.1/proselint/checks/hedging\ncreating proselint-0.6.1/proselint/checks/hyperbole\ncreating proselint-0.6.1/proselint/checks/jargon\ncreating proselint-0.6.1/proselint/checks/lexical_illusions\ncreating proselint-0.6.1/proselint/checks/links\ncreating proselint-0.6.1/proselint/checks/malapropisms\ncreating proselint-0.6.1/proselint/checks/misc\ncreating proselint-0.6.1/proselint/checks/mixed_metaphors\ncreating proselint-0.6.1/proselint/checks/mondegreens\ncreating proselint-0.6.1/proselint/checks/needless_variants\ncreating proselint-0.6.1/proselint/checks/nonwords\ncreating proselint-0.6.1/proselint/checks/oxymorons\ncreating proselint-0.6.1/proselint/checks/psychology\ncreating proselint-0.6.1/proselint/checks/redundancy\ncreating proselint-0.6.1/proselint/checks/security\ncreating proselint-0.6.1/proselint/checks/sexism\ncreating proselint-0.6.1/proselint/checks/skunked_terms\ncreating proselint-0.6.1/proselint/checks/spelling\ncreating proselint-0.6.1/proselint/checks/terms\ncreating proselint-0.6.1/proselint/checks/typography\ncreating proselint-0.6.1/proselint/checks/uncomparables\ncreating proselint-0.6.1/proselint/checks/weasel_words\ncreating proselint-0.6.1/tests\nmaking hard links in proselint-0.6.1...\nhard linking LICENSE.md -> proselint-0.6.1\nhard linking MANIFEST.in -> proselint-0.6.1\nhard linking README.md -> proselint-0.6.1\nhard linking setup.cfg -> proselint-0.6.1\nhard linking setup.py -> proselint-0.6.1\nhard linking proselint/.proselintrc -> proselint-0.6.1/proselint\nhard linking proselint/__init__.py -> proselint-0.6.1/proselint\nhard linking proselint/command_line.py -> proselint-0.6.1/proselint\nhard linking proselint/demo.md -> proselint-0.6.1/proselint\nhard linking proselint/score.py -> proselint-0.6.1/proselint\nhard linking proselint/tools.py -> proselint-0.6.1/proselint\nhard linking proselint/version.py -> proselint-0.6.1/proselint\nhard linking proselint.egg-info/PKG-INFO -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/SOURCES.txt -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/dependency_links.txt -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/entry_points.txt -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/not-zip-safe -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/requires.txt -> proselint-0.6.1/proselint.egg-info\nhard linking proselint.egg-info/top_level.txt -> proselint-0.6.1/proselint.egg-info\nhard linking proselint/checks/__init__.py -> proselint-0.6.1/proselint/checks\nhard linking proselint/checks/airlinese/__init__.py -> proselint-0.6.1/proselint/checks/airlinese\nhard linking proselint/checks/airlinese/misc.py -> proselint-0.6.1/proselint/checks/airlinese\nhard linking proselint/checks/annotations/__init__.py -> proselint-0.6.1/proselint/checks/annotations\nhard linking proselint/checks/annotations/misc.py -> proselint-0.6.1/proselint/checks/annotations\nhard linking proselint/checks/archaism/__init__.py -> proselint-0.6.1/proselint/checks/archaism\nhard linking proselint/checks/archaism/misc.py -> proselint-0.6.1/proselint/checks/archaism\nhard linking proselint/checks/cliches/__init__.py -> proselint-0.6.1/proselint/checks/cliches\nhard linking proselint/checks/cliches/hell.py -> proselint-0.6.1/proselint/checks/cliches\nhard linking proselint/checks/cliches/misc.py -> proselint-0.6.1/proselint/checks/cliches\nhard linking proselint/checks/consistency/__init__.py -> proselint-0.6.1/proselint/checks/consistency\nhard linking proselint/checks/consistency/spacing.py -> proselint-0.6.1/proselint/checks/consistency\nhard linking proselint/checks/consistency/spelling.py -> proselint-0.6.1/proselint/checks/consistency\nhard linking proselint/checks/corporate_speak/__init__.py -> proselint-0.6.1/proselint/checks/corporate_speak\nhard linking proselint/checks/corporate_speak/misc.py -> proselint-0.6.1/proselint/checks/corporate_speak\nhard linking proselint/checks/cursing/__init__.py -> proselint-0.6.1/proselint/checks/cursing\nhard linking proselint/checks/cursing/filth.py -> proselint-0.6.1/proselint/checks/cursing\nhard linking proselint/checks/cursing/nfl.py -> proselint-0.6.1/proselint/checks/cursing\nhard linking proselint/checks/cursing/nword.py -> proselint-0.6.1/proselint/checks/cursing\nhard linking proselint/checks/dates_times/__init__.py -> proselint-0.6.1/proselint/checks/dates_times\nhard linking proselint/checks/dates_times/am_pm.py -> proselint-0.6.1/proselint/checks/dates_times\nhard linking proselint/checks/dates_times/dates.py -> proselint-0.6.1/proselint/checks/dates_times\nhard linking proselint/checks/hedging/__init__.py -> proselint-0.6.1/proselint/checks/hedging\nhard linking proselint/checks/hedging/misc.py -> proselint-0.6.1/proselint/checks/hedging\nhard linking proselint/checks/hyperbole/__init__.py -> proselint-0.6.1/proselint/checks/hyperbole\nhard linking proselint/checks/hyperbole/misc.py -> proselint-0.6.1/proselint/checks/hyperbole\nhard linking proselint/checks/jargon/__init__.py -> proselint-0.6.1/proselint/checks/jargon\nhard linking proselint/checks/jargon/misc.py -> proselint-0.6.1/proselint/checks/jargon\nhard linking proselint/checks/lexical_illusions/__init__.py -> proselint-0.6.1/proselint/checks/lexical_illusions\nhard linking proselint/checks/lexical_illusions/misc.py -> proselint-0.6.1/proselint/checks/lexical_illusions\nhard linking proselint/checks/links/__init__.py -> proselint-0.6.1/proselint/checks/links\nhard linking proselint/checks/links/broken.py -> proselint-0.6.1/proselint/checks/links\nhard linking proselint/checks/malapropisms/__init__.py -> proselint-0.6.1/proselint/checks/malapropisms\nhard linking proselint/checks/malapropisms/misc.py -> proselint-0.6.1/proselint/checks/malapropisms\nhard linking proselint/checks/misc/__init__.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/apologizing.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/back_formations.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/bureaucratese.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/but.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/capitalization.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/chatspeak.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/commercialese.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/composition.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/currency.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/debased.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/false_plurals.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/greylist.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/illogic.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/inferior_superior.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/latin.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/many_a.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/metaconcepts.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/metadiscourse.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/narcisissm.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/not_guilty.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/phrasal_adjectives.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/preferred_forms.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/pretension.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/professions.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/punctuation.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/scare_quotes.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/suddenly.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/tense_present.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/usage.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/waxed.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/misc/whence.py -> proselint-0.6.1/proselint/checks/misc\nhard linking proselint/checks/mixed_metaphors/__init__.py -> proselint-0.6.1/proselint/checks/mixed_metaphors\nhard linking proselint/checks/mixed_metaphors/misc.py -> proselint-0.6.1/proselint/checks/mixed_metaphors\nhard linking proselint/checks/mondegreens/__init__.py -> proselint-0.6.1/proselint/checks/mondegreens\nhard linking proselint/checks/mondegreens/misc.py -> proselint-0.6.1/proselint/checks/mondegreens\nhard linking proselint/checks/needless_variants/__init__.py -> proselint-0.6.1/proselint/checks/needless_variants\nhard linking proselint/checks/needless_variants/misc.py -> proselint-0.6.1/proselint/checks/needless_variants\nhard linking proselint/checks/nonwords/__init__.py -> proselint-0.6.1/proselint/checks/nonwords\nhard linking proselint/checks/nonwords/misc.py -> proselint-0.6.1/proselint/checks/nonwords\nhard linking proselint/checks/oxymorons/__init__.py -> proselint-0.6.1/proselint/checks/oxymorons\nhard linking proselint/checks/oxymorons/misc.py -> proselint-0.6.1/proselint/checks/oxymorons\nhard linking proselint/checks/psychology/__init__.py -> proselint-0.6.1/proselint/checks/psychology\nhard linking proselint/checks/psychology/misc.py -> proselint-0.6.1/proselint/checks/psychology\nhard linking proselint/checks/redundancy/__init__.py -> proselint-0.6.1/proselint/checks/redundancy\nhard linking proselint/checks/redundancy/misc.py -> proselint-0.6.1/proselint/checks/redundancy\nhard linking proselint/checks/redundancy/ras_syndrome.py -> proselint-0.6.1/proselint/checks/redundancy\nhard linking proselint/checks/security/__init__.py -> proselint-0.6.1/proselint/checks/security\nhard linking proselint/checks/security/credit_card.py -> proselint-0.6.1/proselint/checks/security\nhard linking proselint/checks/security/password.py -> proselint-0.6.1/proselint/checks/security\nhard linking proselint/checks/sexism/__init__.py -> proselint-0.6.1/proselint/checks/sexism\nhard linking proselint/checks/sexism/misc.py -> proselint-0.6.1/proselint/checks/sexism\nhard linking proselint/checks/skunked_terms/__init__.py -> proselint-0.6.1/proselint/checks/skunked_terms\nhard linking proselint/checks/skunked_terms/misc.py -> proselint-0.6.1/proselint/checks/skunked_terms\nhard linking proselint/checks/spelling/__init__.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/able_atable.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/able_ible.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/athletes.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/em_im_en_in.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/er_or.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/in_un.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/spelling/misc.py -> proselint-0.6.1/proselint/checks/spelling\nhard linking proselint/checks/terms/__init__.py -> proselint-0.6.1/proselint/checks/terms\nhard linking proselint/checks/terms/animal_adjectives.py -> proselint-0.6.1/proselint/checks/terms\nhard linking proselint/checks/terms/denizen_labels.py -> proselint-0.6.1/proselint/checks/terms\nhard linking proselint/checks/terms/eponymous_adjectives.py -> proselint-0.6.1/proselint/checks/terms\nhard linking proselint/checks/terms/venery.py -> proselint-0.6.1/proselint/checks/terms\nhard linking proselint/checks/typography/__init__.py -> proselint-0.6.1/proselint/checks/typography\nhard linking proselint/checks/typography/diacritical_marks.py -> proselint-0.6.1/proselint/checks/typography\nhard linking proselint/checks/typography/exclamation.py -> proselint-0.6.1/proselint/checks/typography\nhard linking proselint/checks/typography/symbols.py -> proselint-0.6.1/proselint/checks/typography\nhard linking proselint/checks/uncomparables/__init__.py -> proselint-0.6.1/proselint/checks/uncomparables\nhard linking proselint/checks/uncomparables/misc.py -> proselint-0.6.1/proselint/checks/uncomparables\nhard linking proselint/checks/weasel_words/__init__.py -> proselint-0.6.1/proselint/checks/weasel_words\nhard linking proselint/checks/weasel_words/misc.py -> proselint-0.6.1/proselint/checks/weasel_words\nhard linking proselint/checks/weasel_words/very.py -> proselint-0.6.1/proselint/checks/weasel_words\nhard linking tests/__init__.py -> proselint-0.6.1/tests\nhard linking tests/_test_version.py -> proselint-0.6.1/tests\nhard linking tests/check.py -> proselint-0.6.1/tests\nhard linking tests/test_butterick_symbols.py -> proselint-0.6.1/tests\nhard linking tests/test_cliches.py -> proselint-0.6.1/tests\nhard linking tests/test_consistency_check.py -> proselint-0.6.1/tests\nhard linking tests/test_demo.py -> proselint-0.6.1/tests\nhard linking tests/test_dfw_uncomparables.py -> proselint-0.6.1/tests\nhard linking tests/test_existence_check.py -> proselint-0.6.1/tests\nhard linking tests/test_exit_codes.py -> proselint-0.6.1/tests\nhard linking tests/test_garner_dates.py -> proselint-0.6.1/tests\nhard linking tests/test_illegal_chars.py -> proselint-0.6.1/tests\nhard linking tests/test_junge_but.py -> proselint-0.6.1/tests\nhard linking tests/test_preferred_forms_check.py -> proselint-0.6.1/tests\nhard linking tests/test_strunk_white_eos.py -> proselint-0.6.1/tests\nhard linking tests/test_tools.py -> proselint-0.6.1/tests\nhard linking tests/test_topic_detector.py -> proselint-0.6.1/tests\ncopying setup.cfg -> proselint-0.6.1\nWriting proselint-0.6.1/setup.cfg\ncreating dist\nCreating tar archive\nremoving 'proselint-0.6.1' (and everything under it)\nrunning bdist_wheel\nrunning build\nrunning build_py\ncreating build\ncreating build/lib\ncreating build/lib/proselint\ncopying proselint/__init__.py -> build/lib/proselint\ncopying proselint/command_line.py -> build/lib/proselint\ncopying proselint/score.py -> build/lib/proselint\ncopying proselint/tools.py -> build/lib/proselint\ncopying proselint/version.py -> build/lib/proselint\ncreating build/lib/tests\ncopying tests/__init__.py -> build/lib/tests\ncopying tests/_test_version.py -> build/lib/tests\ncopying tests/check.py -> build/lib/tests\ncopying tests/test_butterick_symbols.py -> build/lib/tests\ncopying tests/test_cliches.py -> build/lib/tests\ncopying tests/test_consistency_check.py -> build/lib/tests\ncopying tests/test_demo.py -> build/lib/tests\ncopying tests/test_dfw_uncomparables.py -> build/lib/tests\ncopying tests/test_existence_check.py -> build/lib/tests\ncopying tests/test_exit_codes.py -> build/lib/tests\ncopying tests/test_garner_dates.py -> build/lib/tests\ncopying tests/test_illegal_chars.py -> build/lib/tests\ncopying tests/test_junge_but.py -> build/lib/tests\ncopying tests/test_preferred_forms_check.py -> build/lib/tests\ncopying tests/test_strunk_white_eos.py -> build/lib/tests\ncopying tests/test_tools.py -> build/lib/tests\ncopying tests/test_topic_detector.py -> build/lib/tests\ncreating build/lib/proselint/checks\ncopying proselint/checks/__init__.py -> build/lib/proselint/checks\ncreating build/lib/proselint/checks/airlinese\ncopying proselint/checks/airlinese/__init__.py -> build/lib/proselint/checks/airlinese\ncopying proselint/checks/airlinese/misc.py -> build/lib/proselint/checks/airlinese\ncreating build/lib/proselint/checks/annotations\ncopying proselint/checks/annotations/__init__.py -> build/lib/proselint/checks/annotations\ncopying proselint/checks/annotations/misc.py -> build/lib/proselint/checks/annotations\ncreating build/lib/proselint/checks/archaism\ncopying proselint/checks/archaism/__init__.py -> build/lib/proselint/checks/archaism\ncopying proselint/checks/archaism/misc.py -> build/lib/proselint/checks/archaism\ncreating build/lib/proselint/checks/cliches\ncopying proselint/checks/cliches/__init__.py -> build/lib/proselint/checks/cliches\ncopying proselint/checks/cliches/hell.py -> build/lib/proselint/checks/cliches\ncopying proselint/checks/cliches/misc.py -> build/lib/proselint/checks/cliches\ncreating build/lib/proselint/checks/consistency\ncopying proselint/checks/consistency/__init__.py -> build/lib/proselint/checks/consistency\ncopying proselint/checks/consistency/spacing.py -> build/lib/proselint/checks/consistency\ncopying proselint/checks/consistency/spelling.py -> build/lib/proselint/checks/consistency\ncreating build/lib/proselint/checks/corporate_speak\ncopying proselint/checks/corporate_speak/__init__.py -> build/lib/proselint/checks/corporate_speak\ncopying proselint/checks/corporate_speak/misc.py -> build/lib/proselint/checks/corporate_speak\ncreating build/lib/proselint/checks/cursing\ncopying proselint/checks/cursing/__init__.py -> build/lib/proselint/checks/cursing\ncopying proselint/checks/cursing/filth.py -> build/lib/proselint/checks/cursing\ncopying proselint/checks/cursing/nfl.py -> build/lib/proselint/checks/cursing\ncopying proselint/checks/cursing/nword.py -> build/lib/proselint/checks/cursing\ncreating build/lib/proselint/checks/dates_times\ncopying proselint/checks/dates_times/__init__.py -> build/lib/proselint/checks/dates_times\ncopying proselint/checks/dates_times/am_pm.py -> build/lib/proselint/checks/dates_times\ncopying proselint/checks/dates_times/dates.py -> build/lib/proselint/checks/dates_times\ncreating build/lib/proselint/checks/hedging\ncopying proselint/checks/hedging/__init__.py -> build/lib/proselint/checks/hedging\ncopying proselint/checks/hedging/misc.py -> build/lib/proselint/checks/hedging\ncreating build/lib/proselint/checks/hyperbole\ncopying proselint/checks/hyperbole/__init__.py -> build/lib/proselint/checks/hyperbole\ncopying proselint/checks/hyperbole/misc.py -> build/lib/proselint/checks/hyperbole\ncreating build/lib/proselint/checks/jargon\ncopying proselint/checks/jargon/__init__.py -> build/lib/proselint/checks/jargon\ncopying proselint/checks/jargon/misc.py -> build/lib/proselint/checks/jargon\ncreating build/lib/proselint/checks/lexical_illusions\ncopying proselint/checks/lexical_illusions/__init__.py -> build/lib/proselint/checks/lexical_illusions\ncopying proselint/checks/lexical_illusions/misc.py -> build/lib/proselint/checks/lexical_illusions\ncreating build/lib/proselint/checks/links\ncopying proselint/checks/links/__init__.py -> build/lib/proselint/checks/links\ncopying proselint/checks/links/broken.py -> build/lib/proselint/checks/links\ncreating build/lib/proselint/checks/malapropisms\ncopying proselint/checks/malapropisms/__init__.py -> build/lib/proselint/checks/malapropisms\ncopying proselint/checks/malapropisms/misc.py -> build/lib/proselint/checks/malapropisms\ncreating build/lib/proselint/checks/misc\ncopying proselint/checks/misc/__init__.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/apologizing.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/back_formations.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/bureaucratese.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/but.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/capitalization.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/chatspeak.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/commercialese.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/composition.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/currency.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/debased.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/false_plurals.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/greylist.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/illogic.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/inferior_superior.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/latin.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/many_a.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/metaconcepts.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/metadiscourse.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/narcisissm.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/not_guilty.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/phrasal_adjectives.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/preferred_forms.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/pretension.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/professions.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/punctuation.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/scare_quotes.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/suddenly.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/tense_present.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/usage.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/waxed.py -> build/lib/proselint/checks/misc\ncopying proselint/checks/misc/whence.py -> build/lib/proselint/checks/misc\ncreating build/lib/proselint/checks/mixed_metaphors\ncopying proselint/checks/mixed_metaphors/__init__.py -> build/lib/proselint/checks/mixed_metaphors\ncopying proselint/checks/mixed_metaphors/misc.py -> build/lib/proselint/checks/mixed_metaphors\ncreating build/lib/proselint/checks/mondegreens\ncopying proselint/checks/mondegreens/__init__.py -> build/lib/proselint/checks/mondegreens\ncopying proselint/checks/mondegreens/misc.py -> build/lib/proselint/checks/mondegreens\ncreating build/lib/proselint/checks/needless_variants\ncopying proselint/checks/needless_variants/__init__.py -> build/lib/proselint/checks/needless_variants\ncopying proselint/checks/needless_variants/misc.py -> build/lib/proselint/checks/needless_variants\ncreating build/lib/proselint/checks/nonwords\ncopying proselint/checks/nonwords/__init__.py -> build/lib/proselint/checks/nonwords\ncopying proselint/checks/nonwords/misc.py -> build/lib/proselint/checks/nonwords\ncreating build/lib/proselint/checks/oxymorons\ncopying proselint/checks/oxymorons/__init__.py -> build/lib/proselint/checks/oxymorons\ncopying proselint/checks/oxymorons/misc.py -> build/lib/proselint/checks/oxymorons\ncreating build/lib/proselint/checks/psychology\ncopying proselint/checks/psychology/__init__.py -> build/lib/proselint/checks/psychology\ncopying proselint/checks/psychology/misc.py -> build/lib/proselint/checks/psychology\ncreating build/lib/proselint/checks/redundancy\ncopying proselint/checks/redundancy/__init__.py -> build/lib/proselint/checks/redundancy\ncopying proselint/checks/redundancy/misc.py -> build/lib/proselint/checks/redundancy\ncopying proselint/checks/redundancy/ras_syndrome.py -> build/lib/proselint/checks/redundancy\ncreating build/lib/proselint/checks/security\ncopying proselint/checks/security/__init__.py -> build/lib/proselint/checks/security\ncopying proselint/checks/security/credit_card.py -> build/lib/proselint/checks/security\ncopying proselint/checks/security/password.py -> build/lib/proselint/checks/security\ncreating build/lib/proselint/checks/sexism\ncopying proselint/checks/sexism/__init__.py -> build/lib/proselint/checks/sexism\ncopying proselint/checks/sexism/misc.py -> build/lib/proselint/checks/sexism\ncreating build/lib/proselint/checks/skunked_terms\ncopying proselint/checks/skunked_terms/__init__.py -> build/lib/proselint/checks/skunked_terms\ncopying proselint/checks/skunked_terms/misc.py -> build/lib/proselint/checks/skunked_terms\ncreating build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/__init__.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/able_atable.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/able_ible.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/athletes.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/em_im_en_in.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/er_or.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/in_un.py -> build/lib/proselint/checks/spelling\ncopying proselint/checks/spelling/misc.py -> build/lib/proselint/checks/spelling\ncreating build/lib/proselint/checks/terms\ncopying proselint/checks/terms/__init__.py -> build/lib/proselint/checks/terms\ncopying proselint/checks/terms/animal_adjectives.py -> build/lib/proselint/checks/terms\ncopying proselint/checks/terms/denizen_labels.py -> build/lib/proselint/checks/terms\ncopying proselint/checks/terms/eponymous_adjectives.py -> build/lib/proselint/checks/terms\ncopying proselint/checks/terms/venery.py -> build/lib/proselint/checks/terms\ncreating build/lib/proselint/checks/typography\ncopying proselint/checks/typography/__init__.py -> build/lib/proselint/checks/typography\ncopying proselint/checks/typography/diacritical_marks.py -> build/lib/proselint/checks/typography\ncopying proselint/checks/typography/exclamation.py -> build/lib/proselint/checks/typography\ncopying proselint/checks/typography/symbols.py -> build/lib/proselint/checks/typography\ncreating build/lib/proselint/checks/uncomparables\ncopying proselint/checks/uncomparables/__init__.py -> build/lib/proselint/checks/uncomparables\ncopying proselint/checks/uncomparables/misc.py -> build/lib/proselint/checks/uncomparables\ncreating build/lib/proselint/checks/weasel_words\ncopying proselint/checks/weasel_words/__init__.py -> build/lib/proselint/checks/weasel_words\ncopying proselint/checks/weasel_words/misc.py -> build/lib/proselint/checks/weasel_words\ncopying proselint/checks/weasel_words/very.py -> build/lib/proselint/checks/weasel_words\ncopying proselint/demo.md -> build/lib/proselint\ncopying proselint/.proselintrc -> build/lib/proselint\ninstalling to build/bdist.linux-x86_64/wheel\nrunning install\nrunning install_lib\ncreating build/bdist.linux-x86_64\ncreating build/bdist.linux-x86_64/wheel\ncreating build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/__init__.py -> build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/command_line.py -> build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/score.py -> build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/tools.py -> build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/version.py -> build/bdist.linux-x86_64/wheel/proselint\ncreating build/bdist.linux-x86_64/wheel/proselint/checks\ncopying build/lib/proselint/checks/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/airlinese\ncopying build/lib/proselint/checks/airlinese/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/airlinese\ncopying build/lib/proselint/checks/airlinese/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/airlinese\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/annotations\ncopying build/lib/proselint/checks/annotations/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/annotations\ncopying build/lib/proselint/checks/annotations/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/annotations\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/archaism\ncopying build/lib/proselint/checks/archaism/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/archaism\ncopying build/lib/proselint/checks/archaism/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/archaism\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/cliches\ncopying build/lib/proselint/checks/cliches/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cliches\ncopying build/lib/proselint/checks/cliches/hell.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cliches\ncopying build/lib/proselint/checks/cliches/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cliches\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/consistency\ncopying build/lib/proselint/checks/consistency/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/consistency\ncopying build/lib/proselint/checks/consistency/spacing.py -> build/bdist.linux-x86_64/wheel/proselint/checks/consistency\ncopying build/lib/proselint/checks/consistency/spelling.py -> build/bdist.linux-x86_64/wheel/proselint/checks/consistency\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/corporate_speak\ncopying build/lib/proselint/checks/corporate_speak/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/corporate_speak\ncopying build/lib/proselint/checks/corporate_speak/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/corporate_speak\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/cursing\ncopying build/lib/proselint/checks/cursing/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cursing\ncopying build/lib/proselint/checks/cursing/filth.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cursing\ncopying build/lib/proselint/checks/cursing/nfl.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cursing\ncopying build/lib/proselint/checks/cursing/nword.py -> build/bdist.linux-x86_64/wheel/proselint/checks/cursing\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/dates_times\ncopying build/lib/proselint/checks/dates_times/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/dates_times\ncopying build/lib/proselint/checks/dates_times/am_pm.py -> build/bdist.linux-x86_64/wheel/proselint/checks/dates_times\ncopying build/lib/proselint/checks/dates_times/dates.py -> build/bdist.linux-x86_64/wheel/proselint/checks/dates_times\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/hedging\ncopying build/lib/proselint/checks/hedging/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/hedging\ncopying build/lib/proselint/checks/hedging/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/hedging\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/hyperbole\ncopying build/lib/proselint/checks/hyperbole/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/hyperbole\ncopying build/lib/proselint/checks/hyperbole/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/hyperbole\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/jargon\ncopying build/lib/proselint/checks/jargon/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/jargon\ncopying build/lib/proselint/checks/jargon/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/jargon\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/lexical_illusions\ncopying build/lib/proselint/checks/lexical_illusions/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/lexical_illusions\ncopying build/lib/proselint/checks/lexical_illusions/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/lexical_illusions\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/links\ncopying build/lib/proselint/checks/links/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/links\ncopying build/lib/proselint/checks/links/broken.py -> build/bdist.linux-x86_64/wheel/proselint/checks/links\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/malapropisms\ncopying build/lib/proselint/checks/malapropisms/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/malapropisms\ncopying build/lib/proselint/checks/malapropisms/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/malapropisms\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/apologizing.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/back_formations.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/bureaucratese.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/but.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/capitalization.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/chatspeak.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/commercialese.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/composition.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/currency.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/debased.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/false_plurals.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/greylist.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/illogic.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/inferior_superior.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/latin.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/many_a.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/metaconcepts.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/metadiscourse.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/narcisissm.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/not_guilty.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/phrasal_adjectives.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/preferred_forms.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/pretension.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/professions.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/punctuation.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/scare_quotes.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/suddenly.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/tense_present.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/usage.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/waxed.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncopying build/lib/proselint/checks/misc/whence.py -> build/bdist.linux-x86_64/wheel/proselint/checks/misc\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/mixed_metaphors\ncopying build/lib/proselint/checks/mixed_metaphors/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/mixed_metaphors\ncopying build/lib/proselint/checks/mixed_metaphors/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/mixed_metaphors\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/mondegreens\ncopying build/lib/proselint/checks/mondegreens/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/mondegreens\ncopying build/lib/proselint/checks/mondegreens/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/mondegreens\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/needless_variants\ncopying build/lib/proselint/checks/needless_variants/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/needless_variants\ncopying build/lib/proselint/checks/needless_variants/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/needless_variants\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/nonwords\ncopying build/lib/proselint/checks/nonwords/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/nonwords\ncopying build/lib/proselint/checks/nonwords/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/nonwords\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/oxymorons\ncopying build/lib/proselint/checks/oxymorons/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/oxymorons\ncopying build/lib/proselint/checks/oxymorons/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/oxymorons\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/psychology\ncopying build/lib/proselint/checks/psychology/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/psychology\ncopying build/lib/proselint/checks/psychology/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/psychology\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/redundancy\ncopying build/lib/proselint/checks/redundancy/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/redundancy\ncopying build/lib/proselint/checks/redundancy/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/redundancy\ncopying build/lib/proselint/checks/redundancy/ras_syndrome.py -> build/bdist.linux-x86_64/wheel/proselint/checks/redundancy\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/security\ncopying build/lib/proselint/checks/security/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/security\ncopying build/lib/proselint/checks/security/credit_card.py -> build/bdist.linux-x86_64/wheel/proselint/checks/security\ncopying build/lib/proselint/checks/security/password.py -> build/bdist.linux-x86_64/wheel/proselint/checks/security\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/sexism\ncopying build/lib/proselint/checks/sexism/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/sexism\ncopying build/lib/proselint/checks/sexism/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/sexism\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/skunked_terms\ncopying build/lib/proselint/checks/skunked_terms/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/skunked_terms\ncopying build/lib/proselint/checks/skunked_terms/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/skunked_terms\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/able_atable.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/able_ible.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/athletes.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/em_im_en_in.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/er_or.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/in_un.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncopying build/lib/proselint/checks/spelling/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/spelling\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncopying build/lib/proselint/checks/terms/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncopying build/lib/proselint/checks/terms/animal_adjectives.py -> build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncopying build/lib/proselint/checks/terms/denizen_labels.py -> build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncopying build/lib/proselint/checks/terms/eponymous_adjectives.py -> build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncopying build/lib/proselint/checks/terms/venery.py -> build/bdist.linux-x86_64/wheel/proselint/checks/terms\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/typography\ncopying build/lib/proselint/checks/typography/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/typography\ncopying build/lib/proselint/checks/typography/diacritical_marks.py -> build/bdist.linux-x86_64/wheel/proselint/checks/typography\ncopying build/lib/proselint/checks/typography/exclamation.py -> build/bdist.linux-x86_64/wheel/proselint/checks/typography\ncopying build/lib/proselint/checks/typography/symbols.py -> build/bdist.linux-x86_64/wheel/proselint/checks/typography\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/uncomparables\ncopying build/lib/proselint/checks/uncomparables/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/uncomparables\ncopying build/lib/proselint/checks/uncomparables/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/uncomparables\ncreating build/bdist.linux-x86_64/wheel/proselint/checks/weasel_words\ncopying build/lib/proselint/checks/weasel_words/__init__.py -> build/bdist.linux-x86_64/wheel/proselint/checks/weasel_words\ncopying build/lib/proselint/checks/weasel_words/misc.py -> build/bdist.linux-x86_64/wheel/proselint/checks/weasel_words\ncopying build/lib/proselint/checks/weasel_words/very.py -> build/bdist.linux-x86_64/wheel/proselint/checks/weasel_words\ncopying build/lib/proselint/demo.md -> build/bdist.linux-x86_64/wheel/proselint\ncopying build/lib/proselint/.proselintrc -> build/bdist.linux-x86_64/wheel/proselint\ncreating build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/__init__.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/_test_version.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/check.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_butterick_symbols.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_cliches.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_consistency_check.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_demo.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_dfw_uncomparables.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_existence_check.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_exit_codes.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_garner_dates.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_illegal_chars.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_junge_but.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_preferred_forms_check.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_strunk_white_eos.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_tools.py -> build/bdist.linux-x86_64/wheel/tests\ncopying build/lib/tests/test_topic_detector.py -> build/bdist.linux-x86_64/wheel/tests\nrunning install_egg_info\nCopying proselint.egg-info to build/bdist.linux-x86_64/wheel/proselint-0.6.1-py3.5.egg-info\nrunning install_scripts\ncreating build/bdist.linux-x86_64/wheel/proselint-0.6.1.dist-info/WHEEL\nUploading distributions to https://pypi.python.org/pypi\nUploading proselint-0.6.1-py3-none-any.whl\n[================================] 116674/116674 - 00:00:00\nHTTPError: 401 Client Error: You must be identified to edit package information for url: https://pypi.python.org/pypi\nrunning upload_docs\ncreating build/docs\nerror: no files found in upload directory 'build/docs'\nNo stash found.\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 106,
                "title": "Add rule from Stephen King on adverbs in dialogue attribution",
                "labels": [
                    "rule"
                ],
                "description": "http://www.brainpickings.org/2013/03/13/stephen-king-on-adverbs/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 528,
                "title": "We need tests for running the command line tool over a directory of files",
                "labels": [
                    "bug"
                ],
                "description": "When i tried to do a conda build of proselint from the pypi installable proselint, the cli worked for a single file but not a directory. Errors included file not found errors, may be because we're using some kind of relative path in the file-system walking code.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 105,
                "title": "Extract rules from \"20 Great Writers on the Art of Revision\"",
                "labels": [
                    "extraction"
                ],
                "description": "flavorwire.com/361311/20-great-writers-on-the-art-of-revision\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 526,
                "title": "Maybe Encode problematic text using ROT13",
                "labels": [],
                "description": "Possibly look to this.py or just implement it to avoid people's firewalls and dirty word blockers.\n\nBut it'd make it harder for new people to code. I'm conflicted.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 104,
                "title": "Add check for how much something has been rewritten",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "This will require some form of tracking between diffs.\n\n```\nInterviewer: How much rewriting do you do?\nHemingway: It depends. I rewrote the ending of Farewell to Arms, the last page of it, 39 times before I was satisfied.\nInterviewer: Was there some technical problem there? What was it that had stumped you?\nHemingway: Getting the words right.\n\u2013 Ernest Hemingway, The Paris Review Interview, 1956\n```\n\n```\n\u201cI have rewritten \u2014 often several times \u2014 every word I have ever published. My pencils outlast their erasers.\u201d \u2014 Vladimir Nabokov, Speak, Memory, 1966\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 525,
                "title": "Copyright symbol could be false positive if inside code or math",
                "labels": [
                    "false alarm"
                ],
                "description": "All in title.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 103,
                "title": "Get in touch with grammarly people",
                "labels": [
                    "communication"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 524,
                "title": "LaTeX ... Isn't a problem in verbatim ",
                "labels": [],
                "description": "Could be used for code\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 99,
                "title": "Add authentication to API",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 523,
                "title": "LaTeX straight quotes false positive on diacritics ",
                "labels": [
                    "false alarm"
                ],
                "description": "\\\"{o}\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 98,
                "title": "Add rule about starting paragraph with \"But\"",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "```\nJustin Jung\u00e9 to me\nShow more\nMar 23\nHi Jordan,\n\nI'm grading more tutorial essays and keep making a similar set of comments about a problem that proselint might be able to flag.  \n\nHere's one instance of the comment:\n\nDon't start a paragraph with \"but.\"\n\nEvery paragraph should be self-contained.  \"But\" implies referring back to the previous paragraph to know what contrast is being made. \n\nOn a similar note, the first sentence of a new paragraph should use nouns instead of pronouns.  Pronouns often require referring back to previous sentences, breaking self-containment.\n\nIn this particular case, \"but\" can simply be deleted, because the sentence is sufficiently informative (effectively self-contained).  I'm merely flagging this use to explain why style guides forbid using \"but\" at the start of a paragraph.\n\n\nFlagging paragraphs that start with \"but\" should be trivial to implement.  Recognizing paragraph first-sentences with only pronouns and no nouns also seems feasible, though it won't catch every version of the general infraction.  \n\u2026\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 521,
                "title": "Checks Emacs flycheck ",
                "labels": [],
                "description": "Doesn't seem to be on flycheck \n\nMaybe check the flycheck-pyflakes extension as a model.\n\nMore investigation is needed\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 97,
                "title": "\"annunciate\"",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "A needless variant, except in religious contexts. Requires a topic detector for religion.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 516,
                "title": "[Website] /write Pinch to zoom breaks tooltip.",
                "labels": [
                    "bug"
                ],
                "description": "Discover by @michaelpacer while doing his talk at SciPy. \nHe zoomed in during presentation (By pinch) the tooltip don't appear after that. \n\nZooming with Cmd-Shift-Plus does work though,  (Chrome, OS X)\n\nNot sure you can do anything, but just letting you know. \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 94,
                "title": "Add the ability to solve some of the open hyphenation issues left from TeX back in the day",
                "labels": [],
                "description": "From: [hyphenate.py](http://nedbatchelder.com/code/modules/hyphenate.html)\n\n_Ned Batchelder_\n\n> \"project\" is one of the words Knuth explicitly added to the exceptions list as unhyphenated because the hyphenation depends on whether it is a noun or a verb. He may not be right about that, but that is why it is like that in this module.\n\n_Deewiant_\n\n> > Project is indeed ['proj', 'ect'] as a noun and ['pro', 'ject'] as a verb.\n\nProselint should be able to detect this example among others (using more advanced features like textblob) which can then lead to generally better hyphenation (presumably this matters for more than just `project`, other words that can be both nouns and verbs might be able to be broken at the same points, but with different rankings on the priority of those points). \n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 510,
                "title": "Current method of putting a command line invoker in `usr/local/bin/proselint` has `conda` problems?",
                "labels": [],
                "description": "There seem to be some issues around conda being able to find the `proselint` command line command when using an editable install. I'm going to look into this.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 93,
                "title": "Extract rules from Hemingway app",
                "labels": [
                    "extraction"
                ],
                "description": "http://www.hemingwayapp.com/desktop.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 759,
                "title": "FR: Do not lint URLs",
                "labels": [],
                "description": "In one of my .md files, I have something like:\r\n```md\r\nPlease read the [report from June](http://www.example.com/reports/june).\r\n```\r\nProselint detects that \"june\" in the URL is not properly spelled and should be \"June\" in my URL. However I would prefer proselint to ignore it altogether. I'm not sure how to fix it generically, but I think I'm not the only one running into this problem."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 508,
                "title": "Current json output example is not generically applicable to all checks",
                "labels": [],
                "description": "When running on the `PEP-0008.txt` text, none of the output mentions any source for any of the advice.\n\nIs that example out of date from the pre-\"redesign module structure to avoid apparent endorsement\" days? Is it actually out of date?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 92,
                "title": "Extract rules from \"Writing scripts\"",
                "labels": [
                    "extraction"
                ],
                "description": "https://github.com/ivanistheone/writing_scripts\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 501,
                "title": "Complicated redundancies",
                "labels": [
                    "rule"
                ],
                "description": "![screenshot 2016-06-28 02 13 17](https://cloud.githubusercontent.com/assets/613981/16410143/f656d308-3cd5-11e6-9d41-a42004d74171.jpg)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 89,
                "title": "Make the command line utility fast",
                "labels": [
                    "speed"
                ],
                "description": "https://files.bemusement.org/talks/OSDC2008-FastPython/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 497,
                "title": "Find a usage error in an opinion of the Supreme Court",
                "labels": [],
                "description": "http://www.supremecourt.gov/opinions/opinions.aspx\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 87,
                "title": "Extract rules from \"Common errors in English Usage\"",
                "labels": [
                    "extraction"
                ],
                "description": "http://public.wsu.edu/~brians/errors/errors.html\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 496,
                "title": "Chicago and in line e.g., i.e., in abbreviated form except in parentheticals and (foot/end)notes",
                "labels": [
                    "extraction"
                ],
                "description": "> [p]lease note that Chicago doesn\u2019t use i.e. or e.g. in running text (though we allow them in parentheses or notes). We use that is or a similar phrase. In many sentences (such as mine), you don\u2019t really need the abbreviation; a colon or dash alone would be better.\n\nfrom http://www.chicagomanualofstyle.org/qanda/data/faq/topics/Punctuation/faq0036.html\n\nThis seems like it would be tricky to identify footnotes or endnotes without knowing syntax specific info, so that will probably be tough.\n\nThe parenthesis detection might be reasonable.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 86,
                "title": "Create a plugin for OpenOffice",
                "labels": [
                    "plugin"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 494,
                "title": "[\"adulterous\",        [\"adulterate\"]],",
                "labels": [],
                "description": "What's up with that?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 85,
                "title": "Create a Wikipedia-editing bot",
                "labels": [
                    "plugin"
                ],
                "description": "Based on Justin's suggestion.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 491,
                "title": ".proselintrc usage",
                "labels": [
                    "question"
                ],
                "description": "Are there any guidelines on how to use `.proselintrc`?\n\nI've found a `.proselintrc` in  `/usr/lib/python2.7/site-packages/proselint` and can modify the checks there, but it doesn't seem like I can override it with something like `~/.proselintrc`.\n\nAlso, is there any way to disable a particular rule? I want to stop curly quote checking, but the following doesn't work in `.proselintrc`.\n\n```\n...\n\"typography.symbols\"            : true,\n\"typography.symbols.curly_quotes\" : false,\n...\n```\n\nIs there any way to keep the rest of the checks in `typography.symbols`, but disable one rule?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 83,
                "title": "Run the linter on docs from open source projects and send pull requests",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 490,
                "title": "`--debug` removes all *.pyc in home",
                "labels": [],
                "description": "Hi,\nAs stated in the title, proselint removes all *.pyc in the home directory.\n\nI maintain the Debian proselint package, and I have patched out the clear-cache()\nfunction for now.\n\nSee also https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=821886\n\nCheers\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 81,
                "title": "Apply for a copyediting job at The New Yorker",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 483,
                "title": "Coveralls - Source not available to view",
                "labels": [],
                "description": "I wanted to check out the coverage report, but saw this on e.g. https://coveralls.io/builds/6106698/source?filename=proselint%2Fchecks%2Fsexism%2Fmisc.py\n\n> SOURCE NOT AVAILABLE\n> The owner of this repo needs to re-authorize with github; their OAuth credentials are no longer valid so the file cannot be pulled from the github API.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 80,
                "title": "Add rule about excessive hedging",
                "labels": [
                    "rule"
                ],
                "description": "\"...could suggest potentially that these might have a relationship.\"\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 480,
                "title": "Checks in misc/capitalization.py not catching preferred forms correctly",
                "labels": [],
                "description": "Using a Win 10 machine, I did the following: \n- Create a TXT test input file called pref_prose_test.txt (included)\n- Run the command \"proselint pref_prose_test.txt\"\n- Look at the output\n\nThe expected result is that all incorrectly capitalized forms appear as errors in proselint's output.\n\nThe actual result is that no errors are found and proselint returns nothing. \n\nI suspect this has to do with a bug in the tools.py function preferred_forms_check() but I'll have to investigate further. \n\n[pref_prose_test.txt](https://github.com/amperser/proselint/files/247111/pref_prose_test.txt)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 79,
                "title": "Improvements to garner.a_vs_an",
                "labels": [
                    "enhancement"
                ],
                "description": "- [ ] Handle acronyms (e.g., \"a FBI investigation\"), but take into account acronyms that are pronounced as words instead of as their component letters.\n- [ ] Better handle words that aren't in the pronunciation dictionary. Right now, they are never flagged (e.g., \"an European country\").\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 477,
                "title": "Add this as a test",
                "labels": [],
                "description": "https://www.reddit.com/r/SubredditDrama/comments/356ilm/ive_already_sent_her_and_the_agent_who_represents/cr1lq3n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 78,
                "title": "Add rule about email capitalization",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "E.g., don't complain if it's all in lowercase.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 476,
                "title": "Look into \"Just say no\"",
                "labels": [],
                "description": "https://github.com/lexicalunit/linter-just-say-no/blob/master/resources/hedges.cson\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 77,
                "title": "Figure out what kind of rules would be needed to improve these kids' essays",
                "labels": [],
                "description": "http://www.edweek.org/media/25common_2c.pdf\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 472,
                "title": "Create a plugin for Nylas N1",
                "labels": [
                    "plugin"
                ],
                "description": "https://www.nylas.com\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 76,
                "title": "Handle pseudo-parsing ungrammatical input",
                "labels": [
                    "enhancement"
                ],
                "description": "Read [Parsing Ungrammatical Input: An Evaluation Procedure](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.116.3702&rep=rep1&type=pdf) to get an idea of how to understand the grammatical parsing of ungrammatical input.\n\nThis will be needed to handle ungrammatical sentences, sentences that are not well captured by the grammar parser, as well as for tests that actively introduce potentially ungrammatical replacements so as to ensure that the correct word is being used (see \"there/their/they're\").\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 471,
                "title": "Sublime Text 2?",
                "labels": [
                    "enhancement",
                    "plugin"
                ],
                "description": "Would it be possible to have a plugin for Sublime Text 2? I have an older machine on which I like to write and it's on Snow Leopard (No ST3 there). Thanks!\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 75,
                "title": "Add rule about Roman numerals being valid and compact",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 468,
                "title": "Learn from this discussion",
                "labels": [],
                "description": "[Proselint _ Hacker News.pdf](https://github.com/amperser/proselint/files/216092/Proselint._.Hacker.News.pdf)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 74,
                "title": "Add rule that checks whether quotations are veridical",
                "labels": [
                    "rule",
                    "hard"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 458,
                "title": "Is there any documentation?",
                "labels": [
                    "enhancement"
                ],
                "description": "I've looked for proselint documentation here on Github and elsewhere and come up empty. Any chance we'll be getting something along those lines soon? Mainly I'm interested in the command line options. What does `--clean` do? What syntax do I use for `.proselintrc`?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 73,
                "title": "Add rule about using the right citation",
                "labels": [
                    "ai-hard",
                    "rule"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 443,
                "title": "Use curly quotes \u201c\u201d, not straight quotes \"\" ",
                "labels": [],
                "description": "I'm using restructured text input files, and this error is not correct, straight quotes are changed to curly on rendered output.\n\nIf I had to insert curly quotes by hand it would be a nightmare.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 72,
                "title": "Extract rules from \"LanguageTool\" style checker",
                "labels": [
                    "extraction"
                ],
                "description": "https://languagetool.org/\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 437,
                "title": "Fix the automatic deploy to PyPi",
                "labels": [
                    "bug"
                ],
                "description": "It's not working yet, but it's close!\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 71,
                "title": "Extract rules from \"After the Deadline\" software",
                "labels": [
                    "extraction"
                ],
                "description": "https://openatd.wordpress.com/download/download-source-code/\n\nIt's GPL, so be careful.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 434,
                "title": "Extract Rules from The A.V. Club's Star Wars Style Guide",
                "labels": [
                    "extraction"
                ],
                "description": "Most of these are simple spelling and capitalization rules, but some of them apply to formatting, i.e. italicization. It doesn't seem to me that proselint takes this into account, but maybe a message could be raised.\nhttp://www.avclub.com/article/there-are-two-es-wookiee-damn-it-message-v-club-co-230029\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 70,
                "title": "Add rule checking if dates ever happened",
                "labels": [
                    "medium",
                    "rule"
                ],
                "description": "e.g., February 31st, 2011\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 430,
                "title": "Generate list of modules directly from source code",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 69,
                "title": "Detect ambiguities arising from spatial metaphors for time",
                "labels": [
                    "rule"
                ],
                "description": "\"The meeting originally scheduled for next Wednesday has been moved forward two days.\"\n\nIs this two days earlier or later?\n\nhttp://lingwistyka.pbworks.com/f/boroditsky.pdf\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 425,
                "title": "Write module-level demos, then aggregate",
                "labels": [
                    "enhancement"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 422,
                "title": "exclamaition point warnings should ignore common markdown and html elements",
                "labels": [
                    "enhancement"
                ],
                "description": "Writing in markdown getting warnings from commented out sections `<!` and image links `![`. Should be easy to filter these out.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 396,
                "title": "Add a manual page",
                "labels": [
                    "enhancement"
                ],
                "description": "I have attached a simple manpage, but I guess it would be better to generate it automatically by using sphinx and [sphinxcontrib-autoprogram](https://pythonhosted.org/sphinxcontrib-autoprogram/) (or maybe [sphinx-argparse](https://github.com/ribozz/sphinx-argparse), but that doesn't seem to support click yet).\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 386,
                "title": "A/an distinction",
                "labels": [],
                "description": "I noticed that at least one check, oxford.venery_terms, does not take into account the a/an distinction in English, which results in the code not doing what it should:\n\n```\nlist = []\nfor term_pair in term_list:\n    for generic in generic_terms:\n        wrong = \"a {} of {}\".format(generic, term_pair[0])\n        right = \"a {} of {}\".format(term_pair[1], term_pair[0])\n        list += [[right, [wrong]]]\n```\n\nFor example, unless I am misinterpreting this code, it would suggest \"a army of caterpillars\" instead of \"an army of caterpillars.\"\n\nI imagine (though I haven't checked to confirm) that there are other locations in the code where the a/an distinction is relevant, so perhaps a general solution would be to write a helper function that automatically generates the appropriate article.\n\nAlternatively, I can think of another solution, but this would be a lot more complex and I'm not sure how workable this would be. You could have rules stack on each other; after all it is theoretically possible that fixing one rule violation in the prescribed fashion leads to another rule violation (the a/an example I have given here is a simple example). In such a case you would have certain rules stack on top of others and then modify them accordingly, so there could be an \"a/an\" rule corrector stacked on top of the venery terms rule corrector that corrects the mistakes made by the latter. You could generalize this to other areas, probably. But I'm guessing this would require a substantial rewrite of the project.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 891,
                "title": "Fix typo in README closes #780",
                "labels": [],
                "description": "This fixes a spelling mistake in the README."
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 382,
                "title": "\"but however\" and \"but nevertheless\"",
                "labels": [],
                "description": "From @suchow:\n\n> This is complicated. \"But however, the man ate the cheese\" should become \"However, the man \u2026\" not \"But, the man...\", and \"but nevertheless\" sometimes needs to be rewritten in a more complicated way, e.g., \"He ran, but nevertheless was caught\" should be \"He ran, but was caught nevertheless.\"\n> \n> Maybe kill this and open a separate issue.\n\nThink about + implement a way to consider these usages. (The simple version originally in `after_the_deadline.redundancy`  [#376] simply replaced both phrases with `but`\u2014but that doesn't really make sense.)\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 892,
                "title": "Update pytest to 3.9.1",
                "labels": [],
                "description": "\nThis PR updates [pytest](https://pypi.org/project/pytest) from **3.7.3** to **3.9.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 3.8.2\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `4036 &lt;https://github.com/pytest-dev/pytest/issues/4036&gt;`_: The ``item`` parameter of ``pytest_warning_captured`` hook is now documented as deprecated. We realized only after\n  the ``3.8`` release that this parameter is incompatible with ``pytest-xdist``.\n\n  Our policy is to not deprecate features during bugfix releases, but in this case we believe it makes sense as we are\n  only documenting it as deprecated, without issuing warnings which might potentially break test suites. This will get\n  the word out that hook implementers should not use this parameter at all.\n\n  In a future release ``item`` will always be ``None`` and will emit a proper warning when a hook implementation\n  makes use of it.\n\n\n\nBug Fixes\n---------\n\n- `3539 &lt;https://github.com/pytest-dev/pytest/issues/3539&gt;`_: Fix reload on assertion rewritten modules.\n\n\n- `4034 &lt;https://github.com/pytest-dev/pytest/issues/4034&gt;`_: The ``.user_properties`` attribute of ``TestReport`` objects is a list\n  of (name, value) tuples, but could sometimes be instantiated as a tuple\n  of tuples.  It is now always a list.\n\n\n- `4039 &lt;https://github.com/pytest-dev/pytest/issues/4039&gt;`_: No longer issue warnings about using ``pytest_plugins`` in non-top-level directories when using ``--pyargs``: the\n  current ``--pyargs`` mechanism is not reliable and might give false negatives.\n\n\n- `4040 &lt;https://github.com/pytest-dev/pytest/issues/4040&gt;`_: Exclude empty reports for passed tests when ``-rP`` option is used.\n\n\n- `4051 &lt;https://github.com/pytest-dev/pytest/issues/4051&gt;`_: Improve error message when an invalid Python expression is passed to the ``-m`` option.\n\n\n- `4056 &lt;https://github.com/pytest-dev/pytest/issues/4056&gt;`_: ``MonkeyPatch.setenv`` and ``MonkeyPatch.delenv`` issue a warning if the environment variable name is not ``str`` on Python 2.\n\n  In Python 2, adding ``unicode`` keys to ``os.environ`` causes problems with ``subprocess`` (and possible other modules),\n  making this a subtle bug specially susceptible when used with ``from __future__ import unicode_literals``.\n\n\n\nImproved Documentation\n----------------------\n\n- `3928 &lt;https://github.com/pytest-dev/pytest/issues/3928&gt;`_: Add possible values for fixture scope to docs.\n   ```\n   \n  \n  \n   ### 3.8.1\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3286 &lt;https://github.com/pytest-dev/pytest/issues/3286&gt;`_: ``.pytest_cache`` directory is now automatically ignored by Git. Users who would like to contribute a solution for other SCMs please consult/comment on this issue.\n\n\n- `3749 &lt;https://github.com/pytest-dev/pytest/issues/3749&gt;`_: Fix the following error during collection of tests inside packages::\n\n      TypeError: object of type &#39;Package&#39; has no len()\n\n\n- `3941 &lt;https://github.com/pytest-dev/pytest/issues/3941&gt;`_: Fix bug where indirect parametrization would consider the scope of all fixtures used by the test function to determine the parametrization scope, and not only the scope of the fixtures being parametrized.\n\n\n- `3973 &lt;https://github.com/pytest-dev/pytest/issues/3973&gt;`_: Fix crash of the assertion rewriter if a test changed the current working directory without restoring it afterwards.\n\n\n- `3998 &lt;https://github.com/pytest-dev/pytest/issues/3998&gt;`_: Fix issue that prevented some caplog properties (for example ``record_tuples``) from being available when entering the debugger with ``--pdb``.\n\n\n- `3999 &lt;https://github.com/pytest-dev/pytest/issues/3999&gt;`_: Fix ``UnicodeDecodeError`` in python2.x when a class returns a non-ascii binary ``__repr__`` in an assertion which also contains non-ascii text.\n\n\n\nImproved Documentation\n----------------------\n\n- `3996 &lt;https://github.com/pytest-dev/pytest/issues/3996&gt;`_: New `Deprecations and Removals &lt;https://docs.pytest.org/en/latest/deprecations.html&gt;`_ page shows all currently\n  deprecated features, the rationale to do so, and alternatives to update your code. It also list features removed\n  from pytest in past major releases to help those with ancient pytest versions to upgrade.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3955 &lt;https://github.com/pytest-dev/pytest/issues/3955&gt;`_: Improve pre-commit detection for changelog filenames\n\n\n- `3975 &lt;https://github.com/pytest-dev/pytest/issues/3975&gt;`_: Remove legacy code around im_func as that was python2 only\n   ```\n   \n  \n  \n   ### 3.8.0\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: ``Config.warn`` and ``Node.warn`` have been\n  deprecated, see `&lt;https://docs.pytest.org/en/latest/deprecations.htmlconfig-warn-and-node-warn&gt;`_ for rationale and\n  examples.\n\n- `3936 &lt;https://github.com/pytest-dev/pytest/issues/3936&gt;`_: ``pytest.mark.filterwarnings`` second parameter is no longer regex-escaped,\n  making it possible to actually use regular expressions to check the warning message.\n\n  **Note**: regex-escaping the match string was an implementation oversight that might break test suites which depend\n  on the old behavior.\n\n\n\nFeatures\n--------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: Internal pytest warnings are now issued using the standard ``warnings`` module, making it possible to use\n  the standard warnings filters to manage those warnings. This introduces ``PytestWarning``,\n  ``PytestDeprecationWarning`` and ``RemovedInPytest4Warning`` warning types as part of the public API.\n\n  Consult `the documentation &lt;https://docs.pytest.org/en/latest/warnings.htmlinternal-pytest-warnings&gt;`_ for more info.\n\n\n- `2908 &lt;https://github.com/pytest-dev/pytest/issues/2908&gt;`_: ``DeprecationWarning`` and ``PendingDeprecationWarning`` are now shown by default if no other warning filter is\n  configured. This makes pytest more compliant with\n  `PEP-0506 &lt;https://www.python.org/dev/peps/pep-0565/recommended-filter-settings-for-test-runners&gt;`_. See\n  `the docs &lt;https://docs.pytest.org/en/latest/warnings.htmldeprecationwarning-and-pendingdeprecationwarning&gt;`_ for\n  more info.\n\n\n- `3251 &lt;https://github.com/pytest-dev/pytest/issues/3251&gt;`_: Warnings are now captured and displayed during test collection.\n\n\n- `3784 &lt;https://github.com/pytest-dev/pytest/issues/3784&gt;`_: ``PYTEST_DISABLE_PLUGIN_AUTOLOAD`` environment variable disables plugin auto-loading when set.\n\n\n- `3829 &lt;https://github.com/pytest-dev/pytest/issues/3829&gt;`_: Added the ``count`` option to ``console_output_style`` to enable displaying the progress as a count instead of a percentage.\n\n\n- `3837 &lt;https://github.com/pytest-dev/pytest/issues/3837&gt;`_: Added support for &#39;xfailed&#39; and &#39;xpassed&#39; outcomes to the ``pytester.RunResult.assert_outcomes`` signature.\n\n\n\nBug Fixes\n---------\n\n- `3911 &lt;https://github.com/pytest-dev/pytest/issues/3911&gt;`_: Terminal writer now takes into account unicode character width when writing out progress.\n\n\n- `3913 &lt;https://github.com/pytest-dev/pytest/issues/3913&gt;`_: Pytest now returns with correct exit code (EXIT_USAGEERROR, 4) when called with unknown arguments.\n\n\n- `3918 &lt;https://github.com/pytest-dev/pytest/issues/3918&gt;`_: Improve performance of assertion rewriting.\n\n\n\nImproved Documentation\n----------------------\n\n- `3566 &lt;https://github.com/pytest-dev/pytest/issues/3566&gt;`_: Added a blurb in usage.rst for the usage of -r flag which is used to show an extra test summary info.\n\n\n- `3907 &lt;https://github.com/pytest-dev/pytest/issues/3907&gt;`_: Corrected type of the exceptions collection passed to ``xfail``: ``raises`` argument accepts a ``tuple`` instead of ``list``.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Removed ``&quot;run all (no recorded failures)&quot;`` message printed with ``--failed-first`` and ``--last-failed`` when there are no failed tests.\n   ```\n   \n  \n  \n   ### 3.7.4\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3506 &lt;https://github.com/pytest-dev/pytest/issues/3506&gt;`_: Fix possible infinite recursion when writing ``.pyc`` files.\n\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Cache plugin now obeys the ``-q`` flag when ``--last-failed`` and ``--failed-first`` flags are used.\n\n\n- `3883 &lt;https://github.com/pytest-dev/pytest/issues/3883&gt;`_: Fix bad console output when using ``console_output_style=classic``.\n\n\n- `3888 &lt;https://github.com/pytest-dev/pytest/issues/3888&gt;`_: Fix macOS specific code using ``capturemanager`` plugin in doctests.\n\n\n\nImproved Documentation\n----------------------\n\n- `3902 &lt;https://github.com/pytest-dev/pytest/issues/3902&gt;`_: Fix pytest.org links\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pytest\n  - Changelog: https://pyup.io/changelogs/pytest/\n  - Homepage: https://docs.pytest.org/en/latest/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 316,
                "title": ".proselintrc example and terminal screenshot in README",
                "labels": [
                    "enhancement"
                ],
                "description": "Would be nice to have an explicit example section for .proselintrc, including both\n1. example contents (with some rules disabled)\n2. the relevant terminal terminal command(s)\n\nDoesn\u2019t _have_ to be a terminal screenshot, just something like\n\n``` sh\n$ postlint foo.markdown\n# (...) [error code]\n```\n\nI guess. But it\u2019d be nice with a screenshot for size.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 885,
                "title": "Update click to 7.0",
                "labels": [],
                "description": "\nThis PR updates [click](https://pypi.org/project/click) from **6.7** to **7.0**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 7.0\n   ```\n   -----------\n\nReleased 2018-09-25\n\n-   Drop support for Python 2.6 and 3.3. (`967`_, `976`_)\n-   Wrap ``click.Choice``&#39;s missing message. (`202`_, `1000`_)\n-   Add native ZSH autocompletion support. (`323`_, `865`_)\n-   Document that ANSI color info isn&#39;t parsed from bytearrays in\n    Python 2. (`334`_)\n-   Document byte-stripping behavior of ``CliRunner``. (`334`_,\n    `1010`_)\n-   Usage errors now hint at the ``--help`` option. (`393`_, `557`_)\n-   Implement streaming pager. (`409`_, `889`_)\n-   Extract bar formatting to its own method. (`414`_)\n-   Add ``DateTime`` type for converting input in given date time\n    formats. (`423`_)\n-   ``secho``&#39;s first argument can now be ``None``, like in ``echo``.\n    (`424`_)\n-   Fixes a ``ZeroDivisionError`` in ``ProgressBar.make_step``, when the\n    arg passed to the first call of ``ProgressBar.update`` is 0.\n    (`447`_, `1012`_)\n-   Show progressbar only if total execution time is visible. (`487`_)\n-   Added the ability to hide commands and options from help. (`500`_)\n-   Document that options can be ``required=True``. (`514`_, `1022`_)\n-   Non-standalone calls to ``Context.exit`` return the exit code,\n    rather than calling ``sys.exit``. (`533`_, `667`_, `1098`_)\n-   ``click.getchar()`` returns Unicode in Python 3 on Windows,\n    consistent with other platforms. (`537`_, `821`_, `822`_,\n    `1088`_, `1108`_)\n-   Added ``FloatRange`` type. (`538`_, `553`_)\n-   Added support for bash completion of ``type=click.Choice`` for\n    ``Options`` and ``Arguments``. (`535`_, `681`_)\n-   Only allow one positional arg for ``Argument`` parameter\n    declaration. (`568`_, `574`_, `1014`_)\n-   Add ``case_sensitive=False`` as an option to Choice. (`569`_)\n-   ``click.getchar()`` correctly raises ``KeyboardInterrupt`` on &quot;^C&quot;\n    and ``EOFError`` on &quot;^D&quot; on Linux. (`583`_, `1115`_)\n-   Fix encoding issue with ``click.getchar(echo=True)`` on Linux.\n    (`1115`_)\n-   ``param_hint`` in errors now derived from param itself. (`598`_,\n    `704`_, `709`_)\n-   Add a test that ensures that when an argument is formatted into a\n    usage error, its metavar is used, not its name. (`612`_)\n-   Allow setting ``prog_name`` as extra in ``CliRunner.invoke``.\n    (`616`_, `999`_)\n-   Help text taken from docstrings truncates at the ``\\f`` form feed\n    character, useful for hiding Sphinx-style parameter documentation.\n    (`629`_, `1091`_)\n-   ``launch`` now works properly under Cygwin. (`650`_)\n-   Update progress after iteration. (`651`_, `706`_)\n-   ``CliRunner.invoke`` now may receive ``args`` as a string\n    representing a Unix shell command. (`664`_)\n-   Make ``Argument.make_metavar()`` default to type metavar. (`675`_)\n-   Add documentation for ``ignore_unknown_options``. (`684`_)\n-   Add bright colors support for ``click.style`` and fix the reset\n    option for parameters ``fg`` and ``bg``. (`703`_, `809`_)\n-   Add ``show_envvar`` for showing environment variables in help.\n    (`710`_)\n-   Avoid ``BrokenPipeError`` during interpreter shutdown when stdout or\n    stderr is a closed pipe. (`712`_, `1106`_)\n-   Document customizing option names. (`725`_, `1016`_)\n-   Disable ``sys._getframes()`` on Python interpreters that don&#39;t\n    support it. (`728`_)\n-   Fix bug in test runner when calling ``sys.exit`` with ``None``.\n    (`739`_)\n-   Clarify documentation on command line options. (`741`_, `1003`_)\n-   Fix crash on Windows console. (`744`_)\n-   Fix bug that caused bash completion to give improper completions on\n    chained commands. (`754`_, `774`_)\n-   Added support for dynamic bash completion from a user-supplied\n    callback. (`755`_)\n-   Added support for bash completions containing spaces. (`773`_)\n-   Allow autocompletion function to determine whether or not to return\n    completions that start with the incomplete argument. (`790`_,\n    `806`_)\n-   Fix option naming routine to match documentation and be\n    deterministic. (`793`_, `794`_)\n-   Fix path validation bug. (`795`_, `1020`_)\n-   Add test and documentation for ``Option`` naming: functionality.\n    (`799`_)\n-   Update doc to match arg name for ``path_type``. (`801`_)\n-   Raw strings added so correct escaping occurs. (`807`_)\n-   Fix 16k character limit of ``click.echo`` on Windows. (`816`_,\n    `819`_)\n-   Overcome 64k character limit when writing to binary stream on\n    Windows 7. (`825`_, `830`_)\n-   Add bool conversion for &quot;t&quot; and &quot;f&quot;. (`842`_)\n-   ``NoSuchOption`` errors take ``ctx`` so that ``--help`` hint gets\n    printed in error output. (`860`_)\n-   Fixed the behavior of Click error messages with regards to Unicode\n    on 2.x and 3.x. Message is now always Unicode and the str and\n    Unicode special methods work as you expect on that platform.\n    (`862`_)\n-   Progress bar now uses stderr by default. (`863`_)\n-   Add support for auto-completion documentation. (`866`_, `869`_)\n-   Allow ``CliRunner`` to separate stdout and stderr. (`868`_)\n-   Fix variable precedence. (`873`_, `874`_)\n-   Fix invalid escape sequences. (`877`_)\n-   Fix ``ResourceWarning`` that occurs during some tests. (`878`_)\n-   When detecting a misconfigured locale, don&#39;t fail if the ``locale``\n    command fails. (`880`_)\n-   Add ``case_sensitive=False`` as an option to ``Choice`` types.\n    (`887`_)\n-   Force stdout/stderr writable. This works around issues with badly\n    patched standard streams like those from Jupyter. (`918`_)\n-   Fix completion of subcommand options after last argument (`919`_,\n    `930`_)\n-   ``_AtomicFile`` now uses the ``realpath`` of the original filename\n    so that changing the working directory does not affect it.\n    (`920`_)\n-   Fix incorrect completions when defaults are present (`925`_,\n    `930`_)\n-   Add copy option attrs so that custom classes can be re-used.\n    (`926`_, `994`_)\n-   &quot;x&quot; and &quot;a&quot; file modes now use stdout when file is ``&quot;-&quot;``.\n    (`929`_)\n-   Fix missing comma in ``__all__`` list. (`935`_)\n-   Clarify how parameters are named. (`949`_, `1009`_)\n-   Stdout is now automatically set to non blocking. (`954`_)\n-   Do not set options twice. (`962`_)\n-   Move ``fcntl`` import. (`965`_)\n-   Fix Google App Engine ``ImportError``. (`995`_)\n-   Better handling of help text for dynamic default option values.\n    (`996`_)\n-   Fix ``get_winter_size()`` so it correctly returns ``(0,0)``.\n    (`997`_)\n-   Add test case checking for custom param type. (`1001`_)\n-   Allow short width to address cmd formatting. (`1002`_)\n-   Add details about Python version support. (`1004`_)\n-   Added deprecation flag to commands. (`1005`_)\n-   Fixed issues where ``fd`` was undefined. (`1007`_)\n-   Fix formatting for short help. (`1008`_)\n-   Document how ``auto_envvar_prefix`` works with command groups.\n    (`1011`_)\n-   Don&#39;t add newlines by default for progress bars. (`1013`_)\n-   Use Python sorting order for ZSH completions. (`1047`_, `1059`_)\n-   Document that parameter names are converted to lowercase by default.\n    (`1055`_)\n-   Subcommands that are named by the function now automatically have\n    the underscore replaced with a dash. If you register a function\n    named ``my_command`` it becomes ``my-command`` in the command line\n    interface.\n-   Hide hidden commands and options from completion. (`1058`_,\n    `1061`_)\n-   Fix absolute import blocking Click from being vendored into a\n    project on Windows. (`1068`_, `1069`_)\n-   Fix issue where a lowercase ``auto_envvar_prefix`` would not be\n    converted to uppercase. (`1105`_)\n\n.. _202: https://github.com/pallets/click/issues/202\n.. _323: https://github.com/pallets/click/issues/323\n.. _334: https://github.com/pallets/click/issues/334\n.. _393: https://github.com/pallets/click/issues/393\n.. _409: https://github.com/pallets/click/issues/409\n.. _414: https://github.com/pallets/click/pull/414\n.. _423: https://github.com/pallets/click/pull/423\n.. _424: https://github.com/pallets/click/pull/424\n.. _447: https://github.com/pallets/click/issues/447\n.. _487: https://github.com/pallets/click/pull/487\n.. _500: https://github.com/pallets/click/pull/500\n.. _514: https://github.com/pallets/click/issues/514\n.. _533: https://github.com/pallets/click/pull/533\n.. _535: https://github.com/pallets/click/issues/535\n.. _537: https://github.com/pallets/click/issues/537\n.. _538: https://github.com/pallets/click/pull/538\n.. _553: https://github.com/pallets/click/pull/553\n.. _557: https://github.com/pallets/click/pull/557\n.. _568: https://github.com/pallets/click/issues/568\n.. _569: https://github.com/pallets/click/issues/569\n.. _574: https://github.com/pallets/click/issues/574\n.. _583: https://github.com/pallets/click/issues/583\n.. _598: https://github.com/pallets/click/issues/598\n.. _612: https://github.com/pallets/click/pull/612\n.. _616: https://github.com/pallets/click/issues/616\n.. _629: https://github.com/pallets/click/pull/629\n.. _650: https://github.com/pallets/click/pull/650\n.. _651: https://github.com/pallets/click/issues/651\n.. _664: https://github.com/pallets/click/pull/664\n.. _667: https://github.com/pallets/click/issues/667\n.. _675: https://github.com/pallets/click/pull/675\n.. _681: https://github.com/pallets/click/pull/681\n.. _684: https://github.com/pallets/click/pull/684\n.. _703: https://github.com/pallets/click/issues/703\n.. _704: https://github.com/pallets/click/issues/704\n.. _706: https://github.com/pallets/click/pull/706\n.. _709: https://github.com/pallets/click/pull/709\n.. _710: https://github.com/pallets/click/pull/710\n.. _712: https://github.com/pallets/click/pull/712\n.. _719: https://github.com/pallets/click/issues/719\n.. _725: https://github.com/pallets/click/issues/725\n.. _728: https://github.com/pallets/click/pull/728\n.. _739: https://github.com/pallets/click/pull/739\n.. _741: https://github.com/pallets/click/issues/741\n.. _744: https://github.com/pallets/click/issues/744\n.. _754: https://github.com/pallets/click/issues/754\n.. _755: https://github.com/pallets/click/pull/755\n.. _773: https://github.com/pallets/click/pull/773\n.. _774: https://github.com/pallets/click/pull/774\n.. _790: https://github.com/pallets/click/issues/790\n.. _793: https://github.com/pallets/click/issues/793\n.. _794: https://github.com/pallets/click/pull/794\n.. _795: https://github.com/pallets/click/issues/795\n.. _799: https://github.com/pallets/click/pull/799\n.. _801: https://github.com/pallets/click/pull/801\n.. _806: https://github.com/pallets/click/pull/806\n.. _807: https://github.com/pallets/click/pull/807\n.. _809: https://github.com/pallets/click/pull/809\n.. _816: https://github.com/pallets/click/pull/816\n.. _819: https://github.com/pallets/click/pull/819\n.. _821: https://github.com/pallets/click/issues/821\n.. _822: https://github.com/pallets/click/issues/822\n.. _825: https://github.com/pallets/click/issues/825\n.. _830: https://github.com/pallets/click/pull/830\n.. _842: https://github.com/pallets/click/pull/842\n.. _860: https://github.com/pallets/click/issues/860\n.. _862: https://github.com/pallets/click/issues/862\n.. _863: https://github.com/pallets/click/pull/863\n.. _865: https://github.com/pallets/click/pull/865\n.. _866: https://github.com/pallets/click/issues/866\n.. _868: https://github.com/pallets/click/pull/868\n.. _869: https://github.com/pallets/click/pull/869\n.. _873: https://github.com/pallets/click/issues/873\n.. _874: https://github.com/pallets/click/pull/874\n.. _877: https://github.com/pallets/click/pull/877\n.. _878: https://github.com/pallets/click/pull/878\n.. _880: https://github.com/pallets/click/pull/880\n.. _883: https://github.com/pallets/click/pull/883\n.. _887: https://github.com/pallets/click/pull/887\n.. _889: https://github.com/pallets/click/pull/889\n.. _918: https://github.com/pallets/click/pull/918\n.. _919: https://github.com/pallets/click/issues/919\n.. _920: https://github.com/pallets/click/pull/920\n.. _925: https://github.com/pallets/click/issues/925\n.. _926: https://github.com/pallets/click/issues/926\n.. _929: https://github.com/pallets/click/pull/929\n.. _930: https://github.com/pallets/click/pull/930\n.. _935: https://github.com/pallets/click/pull/935\n.. _949: https://github.com/pallets/click/issues/949\n.. _954: https://github.com/pallets/click/pull/954\n.. _962: https://github.com/pallets/click/pull/962\n.. _965: https://github.com/pallets/click/pull/965\n.. _967: https://github.com/pallets/click/pull/967\n.. _976: https://github.com/pallets/click/pull/976\n.. _990: https://github.com/pallets/click/pull/990\n.. _991: https://github.com/pallets/click/pull/991\n.. _993: https://github.com/pallets/click/pull/993\n.. _994: https://github.com/pallets/click/pull/994\n.. _995: https://github.com/pallets/click/pull/995\n.. _996: https://github.com/pallets/click/pull/996\n.. _997: https://github.com/pallets/click/pull/997\n.. _999: https://github.com/pallets/click/pull/999\n.. _1000: https://github.com/pallets/click/pull/1000\n.. _1001: https://github.com/pallets/click/pull/1001\n.. _1002: https://github.com/pallets/click/pull/1002\n.. _1003: https://github.com/pallets/click/pull/1003\n.. _1004: https://github.com/pallets/click/pull/1004\n.. _1005: https://github.com/pallets/click/pull/1005\n.. _1007: https://github.com/pallets/click/pull/1007\n.. _1008: https://github.com/pallets/click/pull/1008\n.. _1009: https://github.com/pallets/click/pull/1009\n.. _1010: https://github.com/pallets/click/pull/1010\n.. _1011: https://github.com/pallets/click/pull/1011\n.. _1012: https://github.com/pallets/click/pull/1012\n.. _1013: https://github.com/pallets/click/pull/1013\n.. _1014: https://github.com/pallets/click/pull/1014\n.. _1016: https://github.com/pallets/click/pull/1016\n.. _1020: https://github.com/pallets/click/pull/1020\n.. _1022: https://github.com/pallets/click/pull/1022\n.. _1027: https://github.com/pallets/click/pull/1027\n.. _1047: https://github.com/pallets/click/pull/1047\n.. _1055: https://github.com/pallets/click/pull/1055\n.. _1058: https://github.com/pallets/click/pull/1058\n.. _1059: https://github.com/pallets/click/pull/1059\n.. _1061: https://github.com/pallets/click/pull/1061\n.. _1068: https://github.com/pallets/click/issues/1068\n.. _1069: https://github.com/pallets/click/pull/1069\n.. _1088: https://github.com/pallets/click/issues/1088\n.. _1091: https://github.com/pallets/click/pull/1091\n.. _1098: https://github.com/pallets/click/pull/1098\n.. _1105: https://github.com/pallets/click/pull/1105\n.. _1106: https://github.com/pallets/click/pull/1106\n.. _1108: https://github.com/pallets/click/pull/1108\n.. _1115: https://github.com/pallets/click/pull/1115\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/click\n  - Changelog: https://pyup.io/changelogs/click/\n  - Homepage: https://palletsprojects.com/p/click/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 275,
                "title": "Add rule for missing period at end of last sentence in a paragraph",
                "labels": [
                    "easy"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 802,
                "title": "Simple regex checker for passive voice constructions",
                "labels": [],
                "description": "This is my first attempt to contribute, so please let me know if I need to do anything differently -- e.g. register the check with the application.\r\n\r\nI haven't tested the regex extensively, but it performed well on [this list](https://github.com/amperser/proselint/files/2096770/passive_voice_examples.txt).\r\n\r\nHere are the results on [Pythex](https://pythex.org/):\r\n\r\n[Passive voice regex test 2018-06-12.pdf](https://github.com/amperser/proselint/files/2096776/Passive.voice.regex.test.2018-06-12.pdf)\r\n\r\nHere is the regex itself -- I'm sure it can be improved, modularized into several regexes, etc. Happy to continue working on it when I can if you like the idea.\r\n\r\n```\r\n(\\b(?:be|am|is|are|was|were|have|has|had)\\b[\\w\\s]{,15}?(?:d|(?<!whe)n|ne|left|being)\\b(?: by\\b)?)\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 164,
                "title": "Beef up rule on comparing uncomparables",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Unique\n> This is one of a class of adjectives, sometimes called \u201cuncomparables\u201d, that can be a little tricky. Among other uncomparables are precise, exact, correct, entire, accurate, preferable, inevitable, possible, false; there are probably two dozen in all. These adjectives all describe absolute, non-negotiable states: something is either false or it\u2019s not; something is either inevitable or it\u2019s not. Many writers get careless and try to modify uncomparables with comparatives like more and less or intensives like very. But if you really think about them, the core assertions in sentences like \u201cWar is becoming increasingly inevitable as Middle East tensions rise\u201d; \u201cTheir cost estimate was more accurate than the other firms\u2019\u201d; and \u201cAs a mortician, he has a very unique attitude\u201d are nonsense. If something is inevitable, it is bound to happen; it cannot be bound to happen and then somehow even more bound to happen. Unique already means one-of-a-kind, so the adj. phrase very unique is at best redundant and at worst stupid, like \u201caudible to the ear\u201d or \u201crectangular in shape\u201d. You can blame the culture of marketing for some of this difficulty. As the number and rhetorical volume of US ads increase, we become inured to hyperbolic language, which then forces marketers to load superlatives and uncomparables with high-octane modifiers (special - very special - Super-special! - Mega-Special!!), and so on. A deeper issue implicit in the problem of uncomparables is the dissimilarities between Standard Written English and the language of advertising. Advertising English, which probably deserves to be studied as its own dialect, operates under different syntactic rules than SWE, mainly because AE\u2019s goals and assumptions are different. Sentences like \u201cWe offer a totally unique dining experience\u201d; \u201cCome on down and receive your free gift\u201d; and \u201cSave up to 50 per cent\u2026 and more!\u201d are perfectly OK in Advertising English \u2014 but this is because Advertising English is aimed at people who are not paying close attention. If your audience is by definition involuntary, distracted and numbed, then free gift and totally unique stand a better chance of penetrating \u2014 and simple penetration is what AE is all about. One axiom of Standard Written English is that your reader is paying close attention and expects you to have done the same.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 792,
                "title": "Online API",
                "labels": [],
                "description": "I am thinking of creating a standalone GUI for proselint. A simple alternative would be to simply send the text to http://proselint.com/write/ . Is there a plan to support this?"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 142,
                "title": "Add rule with technical dictionary",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "https://github.com/azu/technical-word-rules\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 133,
                "title": "Thing i haven't seen in any of the books but that is a weakening or condescending phrase",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "\"And we must remember\", \"And remember\",\u2026\n\nprobably can find a source for this somewhere but it made me roll my eyes when i read it, which suggests it's a problem.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 132,
                "title": "Add check for using the right name for groups of things",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "e.g., a group of cats is a \"glaring\".\n\nhttp://www.oxforddictionaries.com/us/words/what-do-you-call-a-group-of\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 122,
                "title": "Check for inflamatory language",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "http://rationalwiki.org/wiki/Inflammatory_language\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 22,
                "title": "Check for lexical illusions",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "https://github.com/btford/write-good/blob/master/lib/lexical-illusions.js\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 564,
                "title": "Detects gender bias despite gender neutral alternative term (from GetSiteControl)",
                "labels": [
                    "easy",
                    "false alarm"
                ],
                "description": "A user says:\n\n> Detects gender bias on 'chairperson' despite the term being the gender neutral alternative to gendered nouns.\n\nText that will trigger false positive: `They thought the chairperson was interesting.`\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 98,
                "title": "Add rule about starting paragraph with \"But\"",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "```\nJustin Jung\u00e9 to me\nShow more\nMar 23\nHi Jordan,\n\nI'm grading more tutorial essays and keep making a similar set of comments about a problem that proselint might be able to flag.  \n\nHere's one instance of the comment:\n\nDon't start a paragraph with \"but.\"\n\nEvery paragraph should be self-contained.  \"But\" implies referring back to the previous paragraph to know what contrast is being made. \n\nOn a similar note, the first sentence of a new paragraph should use nouns instead of pronouns.  Pronouns often require referring back to previous sentences, breaking self-containment.\n\nIn this particular case, \"but\" can simply be deleted, because the sentence is sufficiently informative (effectively self-contained).  I'm merely flagging this use to explain why style guides forbid using \"but\" at the start of a paragraph.\n\n\nFlagging paragraphs that start with \"but\" should be trivial to implement.  Recognizing paragraph first-sentences with only pronouns and no nouns also seems feasible, though it won't catch every version of the general infraction.  \n\u2026\n```\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 78,
                "title": "Add rule about email capitalization",
                "labels": [
                    "easy",
                    "rule"
                ],
                "description": "E.g., don't complain if it's all in lowercase.\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 458,
                "title": "Is there any documentation?",
                "labels": [
                    "enhancement"
                ],
                "description": "I've looked for proselint documentation here on Github and elsewhere and come up empty. Any chance we'll be getting something along those lines soon? Mainly I'm interested in the command line options. What does `--clean` do? What syntax do I use for `.proselintrc`?\n"
            },
            {
                "repo_url": "https://github.com/amperser/proselint",
                "id": 434,
                "title": "Extract Rules from The A.V. Club's Star Wars Style Guide",
                "labels": [
                    "extraction"
                ],
                "description": "Most of these are simple spelling and capitalization rules, but some of them apply to formatting, i.e. italicization. It doesn't seem to me that proselint takes this into account, but maybe a message could be raised.\nhttp://www.avclub.com/article/there-are-two-es-wookiee-damn-it-message-v-club-co-230029\n"
            }
        ]
    },
    "PyCQA/pycodestyle": {
        "all": [
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 745,
                "title": "The whl and egg package has pep8.py",
                "labels": [],
                "description": "When I install pycodestyle by pip, `pep8.py` was overwritten by pycodestyle installer.\r\nIs it correct behavior?\r\n\r\nI read #544 . This issues conclusion is following one.\r\n> All that said, I think we're all in agreement that we shouldn't break the pep8 package or CLI, so I'm closing this.\r\n\r\nThe following two packages have a `pep8.py` (version 1.7.1). \r\n- `pycodestyle-2.4.0-py2.py3-none-any.whl`\r\n- `pycodestyle-2.4.0-py3.6.egg`\r\n\r\n\r\nI can use `pip install --no-binary :all: pycodestyle` to avoid installing `pep8.py` because `pycodestyle-2.4.0.tar.gz` has no `pep8.py` .\r\n\r\n\r\nI want to use pycodestyle and *old* pep8 in same environment. I know workaround about this problem now. But, it was little bit complicated problem.\r\n\r\n\r\nP.S.\r\nI hope that all software uses pycodestyle instead of pep8 . But, some software still uses pep8. Thanks!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 744,
                "title": "URL in comments not ignored when max_line_length below 10",
                "labels": [],
                "description": "### Steps to Reproduce\r\n\r\n1. Write a python file with a comment with a long url i.e. \r\n`# https://github.com/PyCQA/pycodestyle/issues/new`\r\n2. Now run `pycodestyle filename.py --max-line-length=8`\r\n\r\n### Current behavior\r\nError E501 `E501 line too long (57 > 9 characters)`\r\n\r\n### Expected behavior\r\nNo errors\r\n\r\nIndeed this happens for any value of max-line-length below 10. Is there any minimum on the max-line-length value?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 739,
                "title": "Feature request: Command line option to pipe default configuration to stdout",
                "labels": [],
                "description": "Could we add a command line option to output the default configuration similar to how `pylint` does (to get a config file containing the default config with e.g. `pylint --generate-rcfile > .pylintrc`)?\r\n\r\n    pylint -h\r\n        --generate-rcfile   Generate a sample configuration file according to the\r\n                            current configuration. You can put other options\r\n                            before this one to get them in the generated\r\n                            configuration."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 743,
                "title": "E226 should not be reported for the + or \u2013 used in complex number constants",
                "labels": [],
                "description": "Complex numbers are rendered by Python as follows:\r\n```\r\nIn [1]: 3.2 + 4.5j\r\nOut[1]: (3.2+4.5j)\r\n```\r\n\r\n[PEP 8](https://www.python.org/dev/peps/pep-0008/#other-recommendations) does not demand spaces around all binary operators.\r\n\r\nTherefore, I think code like this:\r\n\r\n```\r\ndef test_resonance():\r\n    s, n = simulate_resonance(float_x(2.0))\r\n    for t, v in zip(np.arange(0, 1, 0.05),\r\n                    [0j, 0j, (2+0j), (1.464-1.064j), (0.506-1.557j),\r\n                     (-0.4579-1.409j), (-1.085-0.788j), (-1.213+1.06e-07j),\r\n                     (-0.888+0.6452j), (-0.3069+0.9446j), (0.2777+0.8547j),\r\n                     (0.6578+0.478j), (0.7358-1.286e-07j), (0.5386-0.3913j),\r\n                     (0.1861-0.5729j), (-0.1684-0.5184j), (-0.399-0.2899j),\r\n                     (-0.4463+1.064e-08j), (-0.3267+0.2373j),\r\n                     (-0.1129+0.3475j), ]):\r\n        s.seek_to_time(time_dtype(t))\r\n        accessor = s.historic_accessor()\r\n        assert_allclose(\r\n            accessor.get_components(n.signal_oscillating)[0, 0],\r\n            v,\r\n            atol=1e-3)\r\n```\r\n\r\nshould not be flagged by E226.\r\n\r\nIn fact, I think pycodestyle should ensure that complex numbers be written without a space."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 673,
                "title": "Inconsistent handling of kwarg with binary operator expression as value",
                "labels": [],
                "description": "I think pycodestyle's handling of binary operator expressions that are the values of kwargs could be improved.\r\n\r\nThere is a case that is a little ambiguous to me as to whether it should be a style error or not. Should calls where the binary operator subexpressions are aligned with the = of the kwarg be errors? Currently, this triggers E131.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n        b +\r\n        c\r\n)\r\n```\r\n\r\nOn the other side, dropping the lines indentation to the same as the kwarg is considered valid, which seems to me to go against the spirit of the pep8 guidelines.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n  b +\r\n  c\r\n)\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 741,
                "title": "AttributeError: 'module' object has no attribute 'break_around_binary_operator",
                "labels": [],
                "description": "2.4 release broke ```AttributeError: 'module' object has no attribute 'break_around_binary_operator'``` see https://travis-ci.org/EBI-Metagenomics/emgapi/jobs/364572048#L637"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 738,
                "title": "Problem with bad hanging & visual indents",
                "labels": [],
                "description": "While trying to work out the kinks in my attempted fix for issue #667, I realised the indentation checks are more broken than I expected.\r\n\r\nThis test is in the test suite: \r\n\r\n```\r\n#: E126 E126\r\nrv.update(dict.fromkeys((\r\n            'qualif_nr', 'reasonComment_en', 'reasonComment_fr',\r\n            'reasonComment_de', 'reasonComment_it'),\r\n        '?'),\r\n    \"foo\")\r\n```\r\n\r\nCurrently this test passes, but it shouldn't. With the following line numbers (don't know how to make line nums show up in github code blocks?):\r\n\r\n```\r\n1 rv.update(dict.fromkeys((\r\n2            'qualif_nr', 'reasonComment_en', 'reasonComment_fr',\r\n3            'reasonComment_de', 'reasonComment_it'),\r\n4        '?'),\r\n5    \"foo\")\r\n```\r\n\r\npycodestyle reports E126 (continuation line over-indented for hanging indent) for lines 2 and 4, and no other errors, and so the test passes. *But* looking at the PEP 8 guidelines on hanging indents:\r\n\r\n> When using a hanging indent the following should be considered; there should be no arguments on the first line...\r\n\r\nSince three bracketed blocks are opened on line 1, only the innermost one should qualify as a possible hanging indent. So lines 2 and 3 are over-indented hanging indents and should report E126 (currently 2 does and 3 doesn't).\r\n\r\nLines 4 and 5 can't be hanging indents as each of their bracket-blocks' first arguments begin on the same line as their opening bracket (i.e. line 1). Hence line 4 is erroneously reported as E126, and both of these lines should be reported as under-indented visual indents (E128), which neither of them currently are (5 gets no report, 4 gets the erroneous E126 as mentioned).\r\n\r\nAs a sanity-check, I ran pylint on the above file, which flagged \"wrong hanging indentation\" for lines 2 and 3, and \"wrong continued indentation\" for lines 4 and 5, which matches with my reasoning above.\r\n\r\nI think this might need a fairly substantial rewrite of the `continued_indentation` check and associated tests. I don't have any time in the next week, but if nobody else takes it on I would be happy to have a look at it when I have time."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 718,
                "title": "Missing E225 on \"z = x**y\"",
                "labels": [],
                "description": "Hi, if there are no whitespaces around ** no error is thrown (expected E225). `x **y` or `x** y` with one whitespace is throwing E225 as expected. Version is 2.3.1\r\nTobias"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 737,
                "title": "many blank lines inside argument lists not reported",
                "labels": [],
                "description": "maaaaany empty lines inside an argument list are not reported as a style violation, while it clearly is.\r\n\r\nexample:\r\n\r\n```\r\n$ cat heh.py \r\nprint(\r\n    ...,\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ...)\r\n\r\n$ flake8 heh.py && echo all is good\r\nall is good\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 804,
                "title": "Multiple statements on one line bug",
                "labels": [],
                "description": "Experienced a bug in pycodestyle 2.3.1, have not tested in latest.\r\n\r\nTest Case:\r\n`from typing import NamedTuple\r\n\r\n\r\nclass SomeInfo(NamedTuple):\r\n    internal_information_field: str\r\n    foreign_information_field: str\r\n    data: bytes\r\n\r\n\r\ntest = SomeInfo(\"test1\", \"test2\", b\"test3\")\r\n`\r\nGives an error \"../test.py:12:24: E701 multiple statements on one line (colon)\r\nI think it encounters the letter sequene \"for\" and it thinks it is a statement.\r\nIt was something I encountered on a project where we use pycodestyle, and I apologize for the brevity of my report."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 727,
                "title": "crash when concatenating multiple strings containing newlines without trailing newline at EoF",
                "labels": [],
                "description": "**Given**:\r\n```\r\ndef func(variable):\r\n    return \"\"\"\r\n\"\"\" + variable + \"\"\"\r\n\"\"\"\r\n```\r\n_without a trailing newline at EoF_.\r\n\r\n**When I run**:\r\npycodestyle file.py\r\nwith either python2.7 (pep8 v1.7.1) or python3.5 (pycodestyle v2.3.1)\r\n\r\n**Then I get** (quoted from python3.5, but same result in python2.7):\r\n> Traceback (most recent call last):\r\n>   File \"/usr/lib/python3.5/runpy.py\", line 184, in _run_module_as_main\r\n>     \"__main__\", mod_spec)\r\n>   File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n>     exec(code, run_globals)\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 2327, in <module>\r\n>     _main()\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 2309, in _main\r\n>     report = style_guide.check_files()\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 2010, in check_files\r\n>     runner(path)\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 2022, in input_file\r\n>     return fchecker.check_all(expected=expected, line_offset=line_offset)\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 1785, in check_all\r\n>     self.check_logical()\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 1663, in check_logical\r\n>     for offset, text in self.run_check(check, argument_names) or ():\r\n>   File \".../env3/lib/python3.5/site-packages/pycodestyle.py\", line 633, in continued_indentation\r\n>     rel_indent[end[0] - first_row] = rel_indent[row]\r\n> IndexError: list assignment index out of range\r\n\r\n**Expected**:\r\nA warning about a missing newline at EoF.\r\n\r\n**See also**:\r\nhttps://github.com/PyCQA/pycodestyle/issues/713\r\nThat appears to be related, but there are no escaped newlines here - only quoted newlines."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 711,
                "title": "Check inconsistent return statements",
                "labels": [],
                "description": "This implements the same as #431  #527 (requested in #399). This is about the best that can be done without importing the `ast` module, and therefore this PR is much smaller.\r\n\r\nPEP8:\r\n\r\n> Be consistent in return statements. Either all return statements in a\r\nfunction should return an expression, or none of them should. If any return\r\nstatement returns an expression, any return statements where no value is\r\nreturned should explicitly state this as return None, and an explicit\r\nreturn statement should be present at the end of the function (if\r\nreachable).\r\n\r\nThis:\r\n\r\n> Either all return statements in a\r\nfunction should return an expression, or none of them should. If any return\r\nstatement returns an expression, any return statements where no value is\r\nreturned should explicitly state this as return None."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 713,
                "title": "Crash on triple quoted string with line continuation",
                "labels": [],
                "description": "Given the file:\r\n\r\n```python\r\nfoo = \\\r\n    \"\"\"bar\r\n\"\"\"\r\n```\r\n\r\npycodestyle 2.3.1 crashes:\r\n\r\n```\r\n$ pycodestyle demo.py\r\nTraceback (most recent call last):\r\n  File \"/users/is/whughes/pyenvs/research3/bin/pycodestyle\", line 11, in <module>\r\n    sys.exit(_main())\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 2309, in _main\r\n    report = style_guide.check_files()\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 2010, in check_files\r\n    runner(path)\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 2022, in input_file\r\n    return fchecker.check_all(expected=expected, line_offset=line_offset)\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 1785, in check_all\r\n    self.check_logical()\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 1663, in check_logical\r\n    for offset, text in self.run_check(check, argument_names) or ():\r\n  File \"/users/is/whughes/pyenvs/research3/lib/python2.7/site-packages/pycodestyle.py\", line 633, in continued_indentation\r\n    rel_indent[end[0] - first_row] = rel_indent[row]\r\nIndexError: list assignment index out of range\r\n```\r\n\r\nThis looks like a regression on #388."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 657,
                "title": "Make tested code valid Python code",
                "labels": [],
                "description": "Playing with AST checks can be very tedious\r\nbecause of the amount of \"incorrect\" Python\r\ncode which raises E901 (or fail differently)\r\nwhen AST checks are enabled.\r\n\r\nAn easy solution is to fix the code but this\r\nis not always applicable.\r\n\r\nI've only performed the trivial changes."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 712,
                "title": "Blank line between \"class\" and \"def\" lines",
                "labels": [],
                "description": "Hi All,\r\n\r\nCould you please clarify if the following piece of code violates PEP8 and pycodestyle should report an error:\r\n\r\n```py\r\nclass A:\r\n    def func():\r\n        pass\r\n```\r\n\r\nI haven't found an example of this in the testsuite, and pycodestyle doesn't report any errors on this, though PEP8 states:\r\n> Method definitions inside a class are surrounded by a single blank line.\r\n\r\nThanks,\r\nMikhail\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 709,
                "title": "Issue696",
                "labels": [],
                "description": "Fixes #696"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 652,
                "title": " Pycodestyle complains when having two blank lines between imports and classes with a comment inbetween.",
                "labels": [],
                "description": "I use flake8 v3.3.0 which contains pycodestyle v2.3.1\r\n\r\nThis code fails:\r\n\r\n```python\r\nimport sys\r\n\r\n# Some classes\r\n\r\nclass One:\r\n    pass\r\n\r\n\r\nclass Two:\r\n    pass\r\n\r\n\r\n# Some other stuff\r\n\r\ndef foo():\r\n    print(sys.path)\r\n```\r\n\r\nIf I add a blank line between the import statement and the comment, flake8 runs correctly but isort fails. See https://github.com/timothycrosley/isort/issues/550.\r\n\r\nThe isort maintainer means that isort is correct according to PEP8.\r\n\r\nSee also https://gitlab.com/pycqa/flake8/issues/336 where is said that this is a pycodestyle issue."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 682,
                "title": "E701 with type annotation (false positive)",
                "labels": [],
                "description": "This line is marked as \r\n\r\n> E701  statements on one line (colon)\r\n\r\n`for_photo: int = photo * cls.price_for_photo`\r\n\r\n\r\nbut variable value assignment works fine:\r\n\r\n`additional_info: str = self.additional_info`\r\n\r\nI want to disable too complex variable assignment with type annotation but not multiple statements on one line. How I can achieve it?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 691,
                "title": "Prevent confusion with unintentional traling commas",
                "labels": [],
                "description": "There is the common programmer mistake to leave a trailing comma on a value, that leads that value unexpectedly treated as a tuple [[1]](http://www.logophile.org/blog/2011/06/04/pythons-trailing-comma-syntax) [[2]](https://twitter.com/DieGelassenheit/status/918783004448784384)\r\n\r\nPEP8 guide already warn on this\r\nhttps://www.python.org/dev/peps/pep-0008/#when-to-use-trailing-commas\r\n\r\n```\r\nYes:\r\n\r\nFILES = ('setup.cfg',)\r\nOK, but confusing:\r\n\r\nFILES = 'setup.cfg',\r\n\r\n```\r\n\r\nWhat you think about to allow `pycodestyle` tool to produce a warning message in that case?\r\n\r\nPylint has that check since [1.7](https://pylint.readthedocs.io/en/latest/whatsnew/1.7.html) version"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 671,
                "title": "E721 false positives",
                "labels": [],
                "description": "In https://github.com/trezor/python-trezor/pull/124, there are comparisons like `msg.type == types.PinMatrixRequestType_Current`, where `msg.type` and `types.PinMatrixRequestType_Current` are `int`.\r\n\r\n This gives a false positive because `COMPARE_TYPE_REGEX` does not check if `type` is a function call, and `PinMatrixRequestType_Current` contains the word `Type`."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 696,
                "title": "E712 is based on a misreading of PEP8",
                "labels": [],
                "description": "Quoth the specification,\r\n\r\n- Don't compare boolean values to True or False using ==.\r\n\r\n  ```\r\n  Yes:   if greeting:\r\n  No:    if greeting == True:\r\n  Worse: if greeting is True:\r\n  ```\r\n\r\npycodestyle considers both the \"yes\" and the \"worse\" case equivalently good; if anything, it should complain *more* about the \"Worse\" case than the \"Yes\" one.\r\n\r\nIt also complains, I believe spuriously, about SQLAlchemy's overridden use of `==` [as described in this Stack Overflow question](https://stackoverflow.com/questions/18998010/flake8-complains-on-boolean-comparison-in-filter-clause).\r\n\r\nCould this be restricted to just emitting the warning in the literal case of `if ... == True:`, or `is True:` which is probably redundant, and leaving more complex expressions alone?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 703,
                "title": "E722 (bare excepts) too strict",
                "labels": [],
                "description": "How I read PEP-8, it doesn't outlaw bare excepts, but merely recommends to catch more specific exceptions when possible. But what if there is no particular exception you want to catch, but when you just want to do some cleanup before propagating any exception?\r\n\r\n```python\r\ntry:\r\n    self.connection.send(...)\r\nexcept:\r\n    # We only close the connection on failure, otherwise we keep reusing it.\r\n    self.connection.close()\r\n    raise\r\n```\r\n\r\nUsing `try...finally` isn't an option here, since we want to reuse the resource on success, and only clean up on failure. I could just explicitly catch `BaseException` instead, but there is no indication in PEP-8 that this is preferable (otherwise why would bare except be supported in the first place).\r\n\r\nSo how about suppressing E722 if there is a `raise` statement in the `except` block?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 704,
                "title": "Wrong or non-existent column number",
                "labels": [],
                "description": "In some occasions, pycodestyle is returning the wrong or non-existent column number. We are facing some issues on [AtomLinter/linter-flake8](https://github.com/AtomLinter/linter-flake8) due to this problem. This issue happens when using extended characters.\r\n\r\nA simple reproduction:\r\n1. Create a file named foo.py and include the content below. Notice that there is a single whitespace after the special dot character.\r\n```\r\n\u2022 \r\n```\r\n2. Execute `pycodestyle foo.py`. The output is `foo.py:1:4: W291 trailing whitespace`. The message references line 1 and column 4. There is no column 4 in the file.\r\n\r\nThis seems to be some encoding issue. It seems that the character `\u2022` is being treated as multiple characters."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 705,
                "title": "Add check for over-indented blocks",
                "labels": [],
                "description": "In a project with all lines indented 4 spaces, I noticed pycodestyle was not catching code that was accidentally indented two levels (8 spaces). The over indentation was unintended and can be caught during static\r\nanalysis.\r\n\r\nFixes #430"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 677,
                "title": "Fails to enforce 2 blank lines between functions when defined with async",
                "labels": [],
                "description": "When a function is defined with Async, pep8 fails to enforce the rule of having 2 blank lines above the function definition."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 707,
                "title": "WIP: Fix up E741 for ambiguous identifiers",
                "labels": [
                    "do not merge",
                    "incomplete",
                    "wip"
                ],
                "description": "Closes #700"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 646,
                "title": "pycodestyle allows bracket with no space after in",
                "labels": [],
                "description": "The following pieces of code both pass pycodestyle:\r\n\r\n```python\r\ns = (1, 2, 3)\r\nfor g in(s):\r\n    print(g)\r\n```\r\n\r\n```python\r\n1 in(s)\r\n```\r\n\r\nNote the lack of space between the in and the opening bracket.\r\n\r\nThe first is arguably unspecified, but the second is [definitely forbidden](https://www.python.org/dev/peps/pep-0008/#other-recommendations) by PEP8, so arguably the first should be too for consistency."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 678,
                "title": "False positive E122",
                "labels": [],
                "description": "This:\r\n\r\n```python\r\ndictionary = {\r\n    'key1':\r\n        len('bar'),\r\n    'key2': [\r\n        'value',\r\n    ],\r\n}\r\n```\r\n\r\nresults in:\r\n\r\n```\r\ntest.py:6:5: E122 continuation line missing indentation or outdented\r\n```\r\n\r\nso the closing square bracket is misidentified as being incorrectly indented.\r\n\r\nWhich is weird. Weirder still: the warning disappears if the value of `key1` is changed to just `'bar'`, so I think it has something to do with the parentheses. The warning *also* disappears if the first key and value are put on the same line."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 658,
                "title": "pycodestyle incorrectly warns about missing whitespace around operators",
                "labels": [],
                "description": "Given the following `example.py`,\r\n\r\n```python\r\nmy_list = [1, 2, 3]\r\na = 2+2\r\nb = my_list[1:1+1]\r\n```\r\n\r\n`pycodestyle` incorrectly warns about the missing whitespace for the `+` operator inside the list slice:\r\n\r\n```\r\n\u00bb pycodestyle --select E226 ./example.py\r\n./example.py:2:6: E226 missing whitespace around arithmetic operator  # OK\r\n./example.py:3:16: E226 missing whitespace around arithmetic operator  # incorrect\r\n```\r\n\r\nThe first warning (line 2) is correct (line 2 should read `a = 2 + 2`); the second warning (line 3) is incorrect according to PEP-8:\r\n\r\n> Yes:\r\n>\r\n> ```python\r\n> ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\r\n> ham[lower:upper], ham[lower:upper:], ham[lower::step]\r\n> ham[lower+offset : upper+offset]\r\n> ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\r\n> ham[lower + offset : upper + offset]\r\n> ```\r\n>\r\n> No:\r\n>\r\n> ```python\r\n> ham[lower + offset:upper + offset]\r\n> ham[1: 9], ham[1 :9], ham[1:9 :3]\r\n> ham[lower : : upper]\r\n> ham[ : upper]\r\n> ```\r\n\r\nEdit: okay, I'm not so sure _I've_ got it 100%. The style I think is PEP-8 doesn't really seem to get listed anywhere, but even if I add spaces around the `:` (which _is_ listed), I still get lints."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 794,
                "title": "Add testing and document support for Python 3.7",
                "labels": [],
                "description": "Python 3.7 was released on June 27, 2018.\r\n\r\nhttps://docs.python.org/3/whatsnew/3.7.html"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 650,
                "title": "return and opening bracket without a space",
                "labels": [],
                "description": "Similar to https://github.com/PyCQA/pycodestyle/issues/570 , no space is required after `return` which allows `return[]` to be valid."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 803,
                "title": "No missing-whitespace when annotating function return type",
                "labels": [],
                "description": "When running on\r\n```\r\ndef foo(a: int)->int:\r\n    pass\r\n```\r\nI expect there to be a warning on the function defenition, according to [pep8](https://www.python.org/dev/peps/pep-0008/#other-recommendations):\r\n>\r\n\r\n> Function annotations should use the normal rules for colons and always have spaces around the -> arrow if present. (See Function Annotations below for more about function annotations.)\r\n> \r\n> Yes:\r\n> ```\r\n> def munge(input: AnyStr): ...\r\n> def munge() -> AnyStr: ...\r\n> ```\r\n> No:\r\n> ```\r\n> def munge(input:AnyStr): ...\r\n> def munge()->PosInt: ...\r\n> ```\r\nwhen running `pycodestyle` on that file, no warnings are issued"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 670,
                "title": "Be precise about the noqa comment",
                "labels": [
                    "do not merge"
                ],
                "description": "pydocstyle uses them as well, but they allow customization like `# noqa: D102`. We do not want those comments to enable unconditional noqa in pycodestyle."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 664,
                "title": "Is there a newline character style rule?",
                "labels": [],
                "description": "Hi, my apologies if this has been asked before. But how do I add a linter rule for making sure all files use one newline character? Say, I only want all of my files in the repo to use \\n instead of \\r\\n or \\r. Please shed some light. Thanks."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 659,
                "title": "Feature Request: Ability to Specify Ranges of Lines to Check",
                "labels": [],
                "description": "This would be helpful for automated code review based on diffs. \r\n\r\nIt's not entirely straightforward, as the diff could end in the middle of a block, leading to spurious errors.  These could either be automatically ignored, or the file checked until all current blocks are exited.  "
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 667,
                "title": "Missing lint for inconsistent indentation",
                "labels": [],
                "description": "I expect *some* kind of error here, but none is produced:\r\n\r\n```python\r\nf = x = y = z = 1\r\nf(x,\r\n    y,\r\n  z)\r\n```\r\n\r\nperhaps `E131 continuation line unaligned for hanging indent`?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 662,
                "title": "E721 mistake due to isidentifier() not considering '.'",
                "labels": [],
                "description": "E721 (do not compare types, use 'isinstance()') has an exception that allows comparison for types which are not obvious. It uses isidentifier() to determine whether it is a variable. This will miss the cases where '.' is included, such as 'type(self.member1)'. So the warning will appear while it shouldn't."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 680,
                "title": "\"continuation line over-indented\" when comprehension is an argument",
                "labels": [],
                "description": "Consider\r\n```\r\n[obj for obj in iterator\r\n if some_long_cond()\r\n    and some_other_cond()]\r\n(obj for obj in iterator\r\n if some_long_cond()\r\n    and some_other_cond())\r\nsorted(obj for obj in iterator\r\n       if some_long_cond()\r\n          and some_other_cond())\r\n```\r\n\r\nI would consider that this is a reasonable, and perhaps even *the* correct way to indent such expressions, assuming you adhere to the \"binary operators after linebreak\" school and also assuming that the expressions are too long to fit in a single line.\r\n\r\nInterestingly, pycodestyle is happy with the indenting of the first two expressions, but complains about the last one\r\n```\r\ntest.py:9:11: E127 continuation line over-indented for visual indent\r\n```\r\n(Note that it is able to recognize the correct amount of indenting needed in the first two expressions -- adding or removing a space before \"and\" results in the same warning as for the third expression.)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 645,
                "title": "cProfile?",
                "labels": [],
                "description": "Have anyone tried running pycodestyle under cProfile?\r\n\r\nI have hard times doing it: the `mod = inspect.getmodule(register_check)` returns the `cProfile` module, discovering no test function, any idea?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 665,
                "title": "\"E226 missing whitespace around arithmetic operator\" around high priority operator",
                "labels": [],
                "description": "According to [PEP8](https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements): \r\n\r\n> If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies)\r\n>    x = x*2 - 1\r\n\r\nI have this test program `t.py`: `y = x*x + 2`. When I run this under `flake8`:\r\n\r\n```\r\n$ flake8 --show-source --select=E226 t.py\r\n.py:3:6: E226 missing whitespace around arithmetic operator\r\ny = x*x + 2\r\n     ^\r\n```\r\n\r\nI wonder why I get an `E226` here? It seems to be in conflict with the PEP8 guidelines?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 371,
                "title": "No warning about missing space between closing parenthesis and keyword",
                "labels": [],
                "description": "The following code does not result in any warnings:\n\n```\nif a()and b():\n    pass\n\nif b()in [1, 2, 3]:\n    pass\n\nif c()or d():\n    pass\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 372,
                "title": "Suspicious E122 for arguments of method called on multiline glued string literal",
                "labels": [],
                "description": "This is kind of tricky case. Suppose I have the following Python snippet:\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n    foo='baz'))\n```\n\nEverything is fine here except warning \"7:5: E122 continuation line missing indentation or outdented\" about `foo` keyword argument of `format`. In fact the only indentation accepted by `pep8` for it is 4 spaces to the right relatively to the start of the string literal, i.e.\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n         foo='baz'))\n```\n\nWhat is suspicious to me is that for any other kind of first argument of `func` that spans several physical lines, there are _two_ positions for `foo` accepted by `pep8`: 4 characters to the right of previous physical line and 4 characters to the right relatively to `func`. E.g. for dict literal\n\n``` python\n# Both cases are valid for pep8\nfunc({'foo': 1,\n      'bar': 2}.update(\n    foo='baz'))\n\n\nfunc({'foo': 1,\n      'bar': 2}.update(\n          foo='baz'))\n```\n\nor `dict` constructor:\n\n``` python\n# Both cases are valid for pep8\nfunc(dict(foo=1,\n          bar=2).update(\n    foo='baz'))\n\n\nfunc(dict(foo=1,\n          bar=2).update(\n              foo='baz'))\n```\n\nMoreover if I merely wrap glued string literal in parenthesis, `pep8` doesn't complain about normal indentation anymore, i.e.\n\n``` python\n# It's ok however\nfunc(('{foo} '\n     'bar').format(\n    foo='baz'))\n```\n\nFour space indentation relative to the start of `func` seems more natural to me and in my opinion it doesn't violate any PEP-8 guidelines. Am I wrong? Is it done so intentionally?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 373,
                "title": "False positive \"E203 whitespace before ':' \" on list slice.",
                "labels": [
                    "needs patch"
                ],
                "description": "I've encountered the problem in the following code:\n\n``` python\na = [1, 2, 3, 4, 5]\nb = a[1+1 : 2+2]  # E203\nc = a[1 + 1 : 2 + 2]  # E203\nd = a[1+1:2+2]\n```\n\nHowever, PEP8 chapter https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements handles this as good style:\n\n> However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted.\n> \n> Yes:\n> \n> ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n> ham[lower:upper], ham[lower:upper:], ham[lower::step]\n> ham[lower+offset : upper+offset]\n> ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n> ham[lower + offset : upper + offset]\n> No:\n> \n> ham[lower + offset:upper + offset]\n> ham[1: 9], ham[1 :9], ham[1:9 :3]\n> ham[lower : : upper]\n> ham[ : upper]\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 376,
                "title": "erroneously checks indentation within triple-quoted strings",
                "labels": [
                    "needs patch"
                ],
                "description": "The following code\n\n``` python\nif True:\n    print(\"\"\"\n    tab at start of this line\n\"\"\")\n```\n\nproduces\n\n```\ntest.py:3:1: E101 indentation contains mixed spaces and tabs\ntest.py:3:1: W191 indentation contains tabs\n```\n\nBoth of these are wrong, I believe, because the string content is not part of the program indentation.\n\n `python -t` does not warn about this either.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 366,
                "title": "Does not report, that a blank line between classes is needed, if they're defined inside an if statement",
                "labels": [],
                "description": "As stated in [PEP8](https://www.python.org/dev/peps/pep-0008/#blank-lines):\n\n> Separate top-level function and class definitions with two blank lines.\n\n``` python\nif __name__ == '__main__':\n    class Pos:\n\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n    class Lifetime:\n\n        def __init__(self, lifetime):\n            if lifetime < 0:\n                raise ValueError('lifetime must be above 0')\n            self.lifetime = lifetime\n\n    class Name:\n\n        def __init__(self, name):\n            self.name = '\"' + name + '\"'\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 368,
                "title": "defined config overwritten by config further up directory tree",
                "labels": [],
                "description": "In the read_config function first the \"user\" config file is read then the directory tree is searched for \"local\" config files.  If any config files exist within the directory tree they overwrite what was defined in the file specified by using --config.   I've made a fork and plan on issuing a pull request soon.  BTW I have no idea what I'm doing.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 370,
                "title": "Check E228 only detects a missing whitespace on the left site of the modulo operator",
                "labels": [],
                "description": "At the moment `\"sometext %s\"%\"testing` will be detected by E228. This is correct.\n\nAt the moment `\"sometext %s\" %\"testing` will not be detected by E228. This is not correct.\n\nBecause of the description of E228 (`missing whitespace around modulo operator`) the check has to detect missing whitespaces on the left site and on the right site of the modulo operator.\n\nAt the moment E228 only detects missing whitespaces on the left site of the modulo operator.\n\nTested with latest PEP8 version (`1.5.7`).\n\n```\n% cat testing\n\"sometext %s\"%\"testing\"\nsometext %s\" %\"testing\"\nsometext %s\" % \"testing\"\n\n% pep8 --select E228 testing \ntesting:1:14: E228 missing whitespace around modulo operator\n```\n\nE225 is working like expected:\n\n```\n% pep8 --select E225 testing                                                                                                                            \ntesting:2:11: E225 missing whitespace around operator\ntesting:3:11: E225 missing whitespace around operator\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 344,
                "title": "Enforce 72 character docstring line width",
                "labels": [
                    "extension"
                ],
                "description": "PEP8 states:\n\n> For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.\n\nThe current implementation only enforces the maximum line length (`E501`). I'd like to suggest the addition of an `E503` error to enforce the restriction of these \"flowing long blocks of text.\"\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 681,
                "title": "Support for max line length for string and comment",
                "labels": [],
                "description": "I've found that luacheck has support for different types of max-line-length:\r\n\r\n> * New `--[no-]max-code-line-length`, `--[no-]max-string-line-length`,\r\n  `--[no-]max-comment-line-length` CLI options and corresponding\r\n  config and inline options that limit line length only for subsets of lines\r\n  based on line type: string lines have their line endings within a string,\r\n  comment lines have their line endings within a comment, other lines\r\n  are code lines\r\n\r\nIt would be nice if this was supported by pycodestyle in a similar way:\r\n\r\nGiven a max line length of 79, you often have to wrap long strings or comments (or append a `#  noqa` comment), which might result in e.g. an error message not being easily greppable.\r\n\r\nIt would be nice to have e.g. new options `max-string-line-length` and `max-comment-line-length` that would be applied for when the line ends with a string or comment, falling back to `max-line-length`.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 348,
                "title": "Exclusion takes preference over inclusion of a directory",
                "labels": [],
                "description": "Moving this over from #335.\n\n> .. apparently the exclude wins over the commandline include of the directory. Namely `pep8 --exclude .tox .tox` (exclude tox, but that then check it specifically) gives preference to the exclusion rather than the inclusion.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 351,
                "title": "Add error on imports inside class definitions",
                "labels": [
                    "extension",
                    "undecided",
                    "feature"
                ],
                "description": "Opening a new issue for this based on discussion from @ncoghlan on issue #304 .\n\n> Flagging module level imports that don't occur at the start of the file and imports inside class definitions as errors seem like reasonable additions to me. The latter is technically going beyond the text of the PEP itself, but I'd be incredibly surprised if anyone complained about you flagging it as an error - while imports at class scope are permitted by the language, deliberately adding a module as a class attribute would just be weird.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 365,
                "title": "W391 blank line at end of file introduces --> W292 no newline at end of file",
                "labels": [],
                "description": "Hi All,\n\nSeems like a contradiction, fixing W391 introduces W292\n\nMaybe there is an issue with the way I resolved W391\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 332,
                "title": "Randomly indented comment lines are not flagged",
                "labels": [
                    "needs patch"
                ],
                "description": "foo.py:\n\n```\nif True:\n    if True:\n            # bah\n        pass\n```\n\n$ pep8 foo.py\n\nOriginally posted on autopep8: https://github.com/hhatto/autopep8/issues/169 (I can't see that comment indentation is in PEP8 itself, so I understand if this isn't something that you want to flag!)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 334,
                "title": "E713 false negatives",
                "labels": [],
                "description": "I was looking into https://github.com/jcrocholl/pep8/issues/330, and I noticed that the following don't cause E713 when they should:\n\n```\nif not (X) in Y:\n    pass\n```\n\n```\nif not X() in Y:\n    pass\n```\n\nLooks like the regular expression is picking up the `(` between `not` and `in` and wrongly deciding that this is something of the form:\n\n```\nif not (X in Y or X is Z):\n    pass\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 338,
                "title": "E211 not detected in line with print statement/function",
                "labels": [
                    "undecided"
                ],
                "description": "pep8 doesn't detect E211 (whitespace before \u2018(\u2018 ) in this file\n\n```\nfrom __future__ import print_function\n\nprint ('abc')\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 293,
                "title": "Missing E133 test suite and E131 in E12 test suite",
                "labels": [
                    "needs patch"
                ],
                "description": "Hi, just to mention that for E133 there's no test in the test suite and the test for E131 is located in E12.py\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 301,
                "title": "E251 triggers on line continuations ",
                "labels": [],
                "description": "Unless I am missing something this should be allowed by E251. Since E251 is\n\n\" E251 unexpected spaces around keyword / parameter equals\" and there are no extra spaces here\n\n``` python\nfoo(bar=\n    1) \n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 642,
                "title": "Add --no-visual flag to disallow visual indentation",
                "labels": [],
                "description": "An proposal for allowing projects to enforce hanging indentation.\r\n\r\nAdds a flag which disallows code that is indented to align with the opening of the containing brackets:\r\n``` python\r\ndef function(argument_1,\r\n            argument_2,\r\n            argument_3):\r\n    pass\r\n```\r\nIt instead requires that the code be indented to a multiple of the indentation size:\r\n``` python\r\ndef function(\r\n    argument_1,\r\n    argument_2,\r\n):\r\n    pass\r\n```\r\nThis has a similar goal to #632 but is implemented by disabling the cases that accept visual indents, rather than accepting them initially but raising a new error type later.\r\nShould result in cleaner error messages, and does not require a separate pass through the code.\r\n\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 319,
                "title": "E501 line too long is not reported on line ending with a backslash",
                "labels": [],
                "description": "Apparently `pep8` is failing to detect E501 on a line ending with a backslash.\n\n``` python\nopen('long_long_long_long_long_long_long_long_long_long', mode='w+', buffering=1024) \\\n    or ''\n```\n\nTested with `1.6.0a0`, installed from master. \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 639,
                "title": "Conflicting E241 and E261",
                "labels": [
                    "incomplete",
                    "not-a-bug"
                ],
                "description": "**Version:** 2.3.1\r\n\r\n**Problem:**\r\nInline comments which are prepended with at least 2 spaces (as enforced by E261) are reported as violations of E241.\r\n\r\n**Expected:**\r\nThe E241 rule should only be enforced when the next character after `<comma><space><space>` sequence is not `'#'`.\r\n\r\n*Example*\r\n```python\r\n[\r\n    1,  # Inline comment\r\n    2,\r\n]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 321,
                "title": "False negative for extraneous whitespace around colon",
                "labels": [
                    "feature"
                ],
                "description": "@anthonymayer reported this in hhatto/autopep8#156.\n\n`example.py`:\n\n``` python\nx = [1, 2, 3, 4]\nx[1: 3]\n```\n\nI would expect a message about extraneous whitespace after the colon, but `pep8` seems to report nothing.\n\n```\n$ pep8 --version\n1.5.7\n$ pep8 example.py\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 636,
                "title": "Assumes 4 space indent.",
                "labels": [],
                "description": "I know that's the pep8 spec.. but we've got 2 space indent dictated at my work.  That breaks some things.  it'd be better to provide some sort of override rather than have magic numbers in the code... e.g. if hang > 4: on line 512."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 632,
                "title": "Option for detecting hanging indents",
                "labels": [],
                "description": "Some projects need to enforce hanging indents (rather than visual indents) in their codes. To facilitate this, added a check when some part is not in valid hanging indent format."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 231,
                "title": "Relaxing E701 and E302 -- allowing one-liners",
                "labels": [
                    "undecided",
                    "feature"
                ],
                "description": "PEP8 allows you to type a bunch of dummy one-liners like this:\n\n```\nclass CustomException(Exception): pass\nclass AnotherException(Exception): pass\nclass YetAnotherException(Exception): pass\n```\n\nBut this code raises E701 (compound statement) and E302 (two lines between classes) errors. I propose to leave compound statements intact if they are a bunch of class/def definitions. This is what I've done in this pull request of autopep8 project: https://github.com/hhatto/autopep8/pull/87, but it wasn't merged since pep8 seems to be a better place for that.\n\nThis is not easy to implement since the current framework doesn't allow you to look at the next logical line. This is necessary because you need to look at previous and next line to determine if a definition is alone or inside a bunch of definitions.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 631,
                "title": "Should this line trigger some sort of linting error?",
                "labels": [],
                "description": "I had a hard time finding something in pep8 that would forbid this (and pycodestyle itself doesn't trigger a lint) but deep down inside I feel it surely should :)\r\n\r\n```python\r\n[(a,)for a in y]\r\n```\r\n\r\nMaybe something like \"expected spaces around keyword `for`\"?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 232,
                "title": "Fixed #28 -- relaxed E301 for nested definitions",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 390,
                "title": "cannot combine `--select` and `--ignore`",
                "labels": [],
                "description": "This means that specifying a project that forbids E226 but allows W503 is _really_ tedious :).  I hope I'm just missing something, but `--select=W,E --ignore=W503` results in exactly the same behavior as just `--select=W,E`.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 615,
                "title": "Check if dunder variables are defined *after* imports",
                "labels": [],
                "description": "[PEP 8](https://www.python.org/dev/peps/pep-0008/#module-level-dunder-names) mandates that dunder variables be specified after docstring and `__future__` imports but before other imports (or other code). With #613, the old check was relaxed not to complain in the case that PEP 8 endorses, but pycodestyle should additionally complain if this is exactly *not* the case.\r\n\r\n(via https://github.com/PyCQA/pycodestyle/pull/523)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 248,
                "title": "'missing whitespace' introspection issue",
                "labels": [
                    "opinion"
                ],
                "description": "I'm getting \"PEP 8: missing whitespace around arithmetic operator\" introspection flag in cases where I should not, per this section of Pep 8:\n\n\"If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.\n\nYes:\n\ni = i + 1\nsubmitted += 1\nx = x_2 - 1\nhypot2 = x_x + y*y\nc = (a+b) \\* (a-b)\"\n\nThis may be to a change in Pep 8 that this tool hasn't caught up with:\n\nhttp://hg.python.org/peps/rev/37af28ad2972\nhttp://hg.python.org/peps/rev/16dd63848921\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 614,
                "title": "Add failing tests for E713 detection",
                "labels": [],
                "description": "E713 is meant to check that people use `not in` instead of `not ... in\r\n...`. Unfortunately it is missing some lines it should be catching.\r\n\r\nRelated-to gh-583"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 604,
                "title": "Nested indents are not correctly validated",
                "labels": [],
                "description": "Indentation in nested structures such as\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n    'item1', 'item2', 'item3'])\r\n```\r\nare not marked as incorrect.\r\n\r\nEven though PEP8 doesn't explicitly states this case, it's clear conflict of two indentations - outer (function args) and inner (second argument).\r\n\r\nCorrectly should be aligned\r\n```python\r\nfoo(very_long_name_of_first_argument,\r\n    ['item1', 'item2', 'item3'])\r\n```\r\nor\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n        'item1',\r\n        'item2',\r\n        'item3',\r\n    ])\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 600,
                "title": "enhance E101",
                "labels": [],
                "description": "It would be nice if E101 would be more concrete.\r\nFor example new codes could be:\r\n\r\nE102 docstring/comment contains mixed spaces and tabs:\r\n```\r\ndef foo():\r\n    ''''\r\n\t  test\r\n    '''\r\n```\r\n\r\nE103 multiline string contains mixed spaces and tabs:\r\n```\r\nfoo = ''''\r\n\t  test\r\n'''\r\n```\r\n\r\nThis would differentiate string content from real indentation."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 596,
                "title": "Exclude option no longer parsed from tox file",
                "labels": [],
                "description": "Passing the `--exclude=` parameter to the execute works, but the `tox.ini` support for exclude seems to have been removed."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 594,
                "title": "Except foo, bar:",
                "labels": [],
                "description": "If would be nice if `except foo, bar:` would be detected and suggested to change into `except foo as bar`."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 381,
                "title": "Add per file disabling of warnings",
                "labels": [
                    "feature"
                ],
                "description": "Per \"suggestion\" of @dubglan in https://github.com/jcrocholl/pep8/issues/264#issuecomment-73584055, add the ability to disable warnings on a per file basis (ala [pylint](http://docs.pylint.org/faq.html#is-there-a-way-to-disable-a-message-for-a-particular-module-only)). Something like: \n\n```\n# pep8: ignore=EXXX\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 590,
                "title": "[feature request] detect space after class definition",
                "labels": [],
                "description": "```\r\nprintf 'class Foo (Bar):\\n    pass\\n' | pycodestyle -\r\n                 ^\r\n```\r\nWith pycodestyle 2.0.0 and 2.1.0.dev0."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 588,
                "title": "E201 not detected for tab instead of space",
                "labels": [],
                "description": "`printf 'foo(\\tbar)\\n' | pep8 -`\n\u2192 nothing detected\n\nwhile\n`printf 'foo( bar)\\n' | pep8 -`\ndetects stdin:1:5: E201 whitespace after '('\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 586,
                "title": "E101 wrong line detected",
                "labels": [],
                "description": "[E101.txt](https://github.com/PyCQA/pycodestyle/files/558374/E101.txt)\n\n```\n$ pep8  --max-line-length=220 --select E101 /tmp/E101.txt \n/tmp/E101.txt:10:1: E101 indentation contains mixed spaces and tabs\n```\n\nIt tells line 10 is wrong while the actually wrong lines are 2,3,5,6.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 583,
                "title": "Missing lint errors for a few cases (E713)",
                "labels": [],
                "description": "This should flag three things but only flags one (code is changed a bit from the original problem for demonstration purposes)\n\n``` python\ndef f(x, y):\n    return x[y]\n\n\nns = {'a': 1, 'y': (2, 3)}\n\nif not f(ns, 'a') in f(ns, 'y'):\n    print('ohai')\n\nif not ns['a'] in ns['y']:\n    print('ohai2')\n\nif not 'a' in 'foo':\n    print('ohai3')\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 582,
                "title": "E261 ignores tab/space mix",
                "labels": [],
                "description": "```\nprintf 'foo = \"bar\" \\t# comment\\n' | pep8 -\n```\n\nI expected the following output but got nothing:\n\n```\nstdin:1:12: E261 at least two spaces before inline comment\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 581,
                "title": "Add option --follow-links to allow following symbolic links while sca\u2026",
                "labels": [],
                "description": "Add option **--follow-links** to allow following symbolic links while scanning a source folder.  Defaulting to False, not following symbolic links.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 570,
                "title": "if and opening bracket without a space",
                "labels": [],
                "description": "Expanding on https://github.com/PyCQA/pycodestyle/issues/371#issuecomment-137404784 by @methane, the following are not flagged as erroneous:\n\n``` python\nif(1 == 2):\n    pass\n\nif[1, 2]:\n    pass\n\nif{1, 2}:\n    pass\n\nfor(a, b) in [(1, 2), (3, 4)]:\n    pass\n```\n\npep8 doesnt appear to clearly reject the first two (parentheses), however it goes against the recommendation of `if (` in the line continuation section.\n\ni.e. the following is not appropriate according to pep8, but it doesnt use extremely strong wording regarding this.\n\n``` python\nif(foo or\n        bar):\n    pass\n```\n\npep8 says:\n\"When the conditional part of an `if` -statement is long enough to require that it be written across multiple lines, it's worth noting that the combination of a two character keyword (i.e. `if` ), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional.  This can produce a visual conflict with the indented suite of code nested inside the if -statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the if -statement.  Acceptable options in this situation include, but are not limited to:\" _(and then it includes examples all containing_ `if (` _.)_\n\nThe `further` there indicates that the `if (` is expected, and of course the examples throughout all use `if (`.\nIronically pycodestyle does take an explicit position on further visually distinguishing subsequent lines. \n\nFor the unassigned data-structures, there is less in pep8 regarding whether they should be surrounded by space.  A single space is required around `=`, `:`, and `,`, and prevented when immediately inside a function call, so that addresses most cases of unassigned data-structures.  But it doesnt address when unassigned data-structures are used immediately near a keyword like `if` or `for`.\n\nI suspect some revision to the pep8 style guide is appropriate, but the fine people here can surely help bring other perspectives to this aspect of the style guide before trying to refine the style guide.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 569,
                "title": "E127 on slightly modified PEP-8 approved example (multiline with)",
                "labels": [],
                "description": "I took the multiline with statement from PEP-8 and tested a few variations. I only get an error when the statement is inside a function and preceded by another statement. This seems related to #316 and #256. git bisect confirms: the first bad commit is 974748fd9a0ecdd494cdc51aeb16c54d38256d58.\n## Steps to reproduce\n\nRun pycodestyle on:\n\n```\ndef f1():\n    print('foo')\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n\n\ndef f2():\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n\nprint('foo')\nwith open('/path/to/some/file/you/want/to/read') as file_1, \\\n     open('/path/to/some/file/being/written', 'w') as file_2:\n    file_2.write(file_1.read())\n```\n## Result\n\n`test.py:4:10: E127 continuation line over-indented for visual indent`\n## Expected\n\nNo error, or at least the same behavior between all three versions. Before 974748fd9a0ecdd494cdc51aeb16c54d38256d58, pycodestyle reported E126 errors for the other two variations.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 559,
                "title": "Triple-Quoted string being checked for trailing whitespace and similar",
                "labels": [],
                "description": "This seems like a regression from the previous issue https://github.com/PyCQA/pycodestyle/issues/411:\n\nA triple-quoted string which contain a trailing whitespace is reported as W291:\n\n```\nfoo = \"\"\"Hello\nworld.   \nHow are you?\n\"\"\"\n```\n\n[ file test.py - The second line contains the trailing spaces. ]\n\n```\n$ pycodestyle test.py \ntest.py:2:7: W291 trailing whitespace\n\n$ pip freeze\nargparse==1.2.1\npycodestyle==2.0.0\nwsgiref==0.1.2\n```\n\nThe more detailed example given in https://github.com/PyCQA/pycodestyle/issues/411 also seems to break, with all four types of errors reported.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 553,
                "title": "spaces before attribute access not reported as violation",
                "labels": [
                    "needs patch"
                ],
                "description": "Code like this:\n\n``` python\nd = {}\nd     .items()\n```\n\nshould result in a warning about excessive whitespace.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 547,
                "title": "Handle ParsingErrors from configparser",
                "labels": [],
                "description": "In the event that the config file is mangled, we should should be able\nto recover from that without issue.\n\nCloses gh-506\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 531,
                "title": "Update (remove?) the GitHub project wiki",
                "labels": [],
                "description": "@SylvainDe [pointed out](https://github.com/PyCQA/pycodestyle/issues/518#issuecomment-223338961) in #518 that:\n\n> Also, wiki still has references to pep8 : https://github.com/PyCQA/pycodestyle/wiki . Not sure if better to  have one bug open to track all these issues or one bug per issue.\n\nThis made me think that perhaps the wiki content should be moved into other, better locations such as the pycodestyle docs themselves, and in the case of the related tools, possible the [PyCQA/meta](https://github.com/PyCQA/meta) repo which renders [here](http://meta.pycqa.org/en/latest/introduction.html)?\n\nAny objections to moving away from the wiki pages?\n\n/cc @sigmavirus24 \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 529,
                "title": "Fix cross-platfrom issues with test suite",
                "labels": [],
                "description": "Several minor issues related to test suite inhibit a smooth development workflow on Windows.\n\nThe commits are labelled appropriately with the changes.  They are independent.\n\nNotice the '*' logic is ignored on the windows test suite.  That edge case (feature) may or may not work depending on minor release of python. This is an assumption based on upstream usage. Testing for it, is more of a hassle than it's likely worth.\n\nThis was tested locally against 2.7, 3.4 and 3.5.  I'm counting on travis for the rest.\n\nI have a more strategic version of the normalize function, which I may finish later and send after this is merged.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 528,
                "title": "Adds E133 with --hang-closing test",
                "labels": [],
                "description": "Adds test for `E133` which is enabled by the optional flag `--hang-closing` for issues #293 \n\nPer the docs: \n\n> The check E133 is mutually exclusive with check E123.\n\nSpecifically this throws an `E133` error for \n\n``` py\na = [\n    12\n]\n```\n\nand is Okay for\n\n``` py\na = [\n    12\n    ]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 527,
                "title": "[DRAFT] Add support for checks on unconsistent returns",
                "labels": [],
                "description": "The original author is initially SylvainDe in https://github.com/PyCQA/pycodestyle/pull/431, which is a PR that has been inactive for over a year. In PyCon 2016 sprints, I've rebased & fixed all merge conflicts. The unit tests all pass.\n\nI'll be grateful for your feedback, thanks! \ud83c\udf86 \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 798,
                "title": "Correct ReStructuredText inline literal syntax in CONTRIBUTING.rst",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 526,
                "title": "Convert existing unit tests from unittest to pytest",
                "labels": [],
                "description": "This gist contains the abundantly verbose output of `python pycodestyle.py --testsuite testsuite`.\n\nIt's really hard to tell which of the test methods has failed because of style problems: \n\nhttps://gist.github.com/ArcTanSusan/c8b3bfcb12d393121c3708ebf4486b7c#L339\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 796,
                "title": "fix: update extraneous whitespace regex to match master",
                "labels": [],
                "description": "This is intended for a 2.3.2 release to prevent error messages while flake8 works on compatibility with pycodestyle==2.4.0"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 524,
                "title": " Support for custom indent sizes (tab widths) other than 4",
                "labels": [],
                "description": "Updates #206 so that it can be merged with current master\nAlso, adds unit tests and updates the docs properly\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 506,
                "title": "Some better handling of error in the configuration file",
                "labels": [
                    "needs patch"
                ],
                "description": "So, I have left some merge conflict markers in my `setup.cfg` and this how the pep8 (run through flake8) dealt with it:\n\n```\nConfigParser.py:546:_read:ParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nTraceback (most recent call last):\n  File \"/usr/bin/flake8\", line 9, in <module>\n    load_entry_point('flake8==2.0', 'console_scripts', 'flake8')()\n  File \"/usr/lib/python2.7/site-packages/flake8/main.py\", line 21, in main\n    flake8_style = get_style_guide(parse_argv=True, config_file=DEFAULT_CONFIG)\n  File \"/usr/lib/python2.7/site-packages/flake8/engine.py\", line 76, in get_style_guide\n    styleguide = StyleGuide(**kwargs)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1788, in __init__\n    arglist, parse_argv, config_file, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 2074, in process_options\n    options = read_config(options, args, arglist, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1999, in read_config\n    if config.read(os.path.join(parent, fn) for fn in PROJECT_CONFIG):\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 305, in read\n    self._read(fp, filename)\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 546, in _read\n    raise e\nParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nLocal variables in innermost frame:\nsectname: 'flake8'\ncursect: OrderedDict([('__name__', 'flake8'), ('ignore', ['E402,N806,N803,N802,E501']), ('tag_build', ['.dev']), ('tag_svn_revision', ['1'])])\ne: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\nfpname: '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg'\nvi: '='\nmo: None\noptname: 'tag_svn_revision'\nfp: <open file '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg', mode 'r' at 0x2d07b70>\nlineno: 12\nline: ''\nself: <ConfigParser.RawConfigParser instance at 0x2d522d8>\noptval: '1'\n```\n\nIs the traceback really the best solution, couldn't we have some civilized way of dealing with errors?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 495,
                "title": "Relax most extra-spacing errors when extra spacing is being used for horizontal alignment",
                "labels": [],
                "description": "When functions have lots and lots of keyword arguments, code is IMNSHO much more readable if you line up the equals signs, e.g.\n\n```\n    exits = get_exits(args.data_dir,\n                      country_code = args.countrycode,\n                      bad_exit     = args.badexit,\n                      good_exit    = args.goodexit,\n                      version      = args.version,\n                      nickname     = args.nickname,\n                      address      = args.address)\n```\n\ninstead of\n\n```\n    exits = get_exits(args.data_dir,\n                      country_code=args.countrycode,\n                      bad_exit=args.badexit,\n                      good_exit=args.goodexit,\n                      version=args.version,\n                      nickname=args.nickname,\n                      address=args.address)\n```\n\nThis also comes up when a function (often, but not always, `__init__`) needs to initialize a whole bunch of variables in a row:\n\n```\ndef __init__(self, queue, circ_id, socks_port, socks_addr=\"127.0.0.1\"):\n    self._queue           = queue\n    self._circ_id         = circ_id\n    self._socks_addr      = socks_addr\n    self._socks_port      = socks_port\n\n    self._orig_queue      = None\n    self._orig_circ_id    = None\n    self._orig_proxy_addr = None\n    self._orig_proxy_port = None\n    self._orig_socket     = None\n```\n\nor in the middle of complex conditionals:\n\n```\nif address or nickname or version or requested:\n    candidates = [\n        desc for desc in candidates\n        if ((not address   or address  in desc.address) and\n            (not nickname  or nickname in desc.nickname) and\n            (not version   or version  == str(desc.version)) and\n            (not requested or desc.fingerprint in requested))\n    ]\n```\n\nSo I request the addition of the following heuristic: Do not issue any of the \"extra spaces after/before X\" errors if the first non-whitespace character after the extra spaces is aligned with a first non-whitespace character on either the preceding or following line.  Additionally, disable the \"there should be _no_ whitespace around equals signs in parameter lists\" warning in this circumstance.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 493,
                "title": "Add file name switch for proper handling of STDIN",
                "labels": [],
                "description": "Add `--stdin-name` switch for specifying a file name for the `-` file (STDIN).\n\nUse the provided name for deciding if the file will be skipped.\n\nAvoid calling `os.path.isdir()` and filename matching on the `-` filename.\n\nExtensions, like flake8-putty, can use the provided name in name patterns,\nwhich wasn't possible before.\n\nSee for example [this issue](https://github.com/AtomLinter/linter-flake8/issues/174).\n\nThe first commit of this pull request is optional.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 789,
                "title": "E265 error on codecell separator #%% ",
                "labels": [],
                "description": "Cells are separated by lines starting with:\r\n\r\n    #%% (standard cell separator)\r\n    # %% (standard cell separator, when file has been edited with Eclipse)\r\n    # <codecell> (IPython notebook cell separator)\r\n\r\nBut `pycodestyle` consider `#%%` a block comment which should start as `#` and space by E265\r\n\r\nPlease consider. Thanks!\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 480,
                "title": "Allow noqa for all line checks",
                "labels": [
                    "needs patch"
                ],
                "description": "Up front, there has been a lot of discussion about this topic in issues (including but not limited to): #28 #180 #231 #376 #381 #472.\n\nWith the two largest types of responses having been: \"yes this definitely needs to be a feature\" and \"users should not add this much noise to their code\".\n\nI've thought about it quite a bit, and I believe that as a tool, it should be up to the user / developer to decide when it is appropriate to use these disables. Therefore I am creating this issue as a target to produce a pull request allowing noqa for any lines in a file / for all classes of errors, and will be closing the other issues which have (at least generally) not produced pull requests.\n\nNote that at a minimum, any pull request being considered should: pass all the tests, update the documentation accordingly, add no additional dependencies, and add no significant overhead to the performance of the code. With the stickiness of this issue, and the variety of feelings on the matter, expect that any proposed pull requests will likely get a good deal of scrutiny.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 786,
                "title": "test case failing when run with Python 3.7",
                "labels": [],
                "description": "In 2.4.0, I see one test case failing when run with Python 3.7. All tests succeed wihen run in 2.7.15 and 3.6.6.\r\n\r\nrunning build_ext\r\ntest_checkers_testsuite (testsuite.test_all.PycodestyleTestCase) ... /home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:13:1: W391:1:1 blank l\r\nine at end of file\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:14:1: error W292:1:5 not found\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:15:1: W391:1:1 blank line at end of file\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:16:1: error W292:1:27 not found\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:17:1: W391:1:1 blank line at end of file\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:18:1: error W292:3:22 not found\r\n/home/packages/tmp/pycodestyle-2.4.0/testsuite/W29.py:21:1: W391:3:1 blank line at end of file\r\nFAIL\r\ntest_doctest (testsuite.test_all.PycodestyleTestCase) ... ok\r\ntest_own_dog_food (testsuite.test_all.PycodestyleTestCase) ... /home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:292:13: W504 line break after \r\nbinary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:350:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:356:21: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:357:21: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:378:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:379:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:380:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:610:30: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:656:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:657:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:664:15: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:741:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:742:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:743:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:745:13: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:747:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1112:14: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1113:14: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1239:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1240:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1272:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1273:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1274:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1308:24: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1739:38: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:1860:45: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:2212:17: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:2275:22: W504 line break after binary operator\r\n/home/packages/tmp/pycodestyle-2.4.0/pycodestyle.py:2304:17: W504 line break after binary operator\r\nok\r\ntest_selftest (testsuite.test_all.PycodestyleTestCase) ... ok\r\ntest_check_nullbytes (testsuite.test_api.APITestCase) ... ok\r\ntest_check_unicode (testsuite.test_api.APITestCase) ... ok\r\ntest_register_ast_check (testsuite.test_api.APITestCase) ... ok\r\ntest_register_invalid_check (testsuite.test_api.APITestCase) ... ok\r\ntest_register_logical_check (testsuite.test_api.APITestCase) ... ok\r\ntest_register_physical_check (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_check_files (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_checks (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_continuation_line_outdented (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_excluded (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_ignore_code (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_init_report (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_options (testsuite.test_api.APITestCase) ... ok\r\ntest_styleguide_unmatched_triple_quotes (testsuite.test_api.APITestCase) ... ok\r\ntest_blank_line_between_decorator (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_blank_line_decorator (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_initial_lines_more_blank (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_initial_lines_one_blank (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_initial_lines_two_blanks (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_initial_no_blank (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_fewer_follow_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_less_blank_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_less_blank_lines_comment (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_more_blank_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_nested_fewer_follow_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_nested_less_class (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_method_nested_ok (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_top_level_fewer_blank_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_top_level_fewer_follow_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_top_level_fewer_follow_lines_comments (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_top_level_good_follow_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_top_level_more_blank_lines (testsuite.test_blank_lines.TestBlankLinesDefault) ... ok\r\ntest_initial_lines_one_blanks (testsuite.test_blank_lines.TestBlankLinesTwisted) ... ok\r\ntest_initial_lines_tree_blanks (testsuite.test_blank_lines.TestBlankLinesTwisted) ... ok\r\ntest_the_right_blanks (testsuite.test_blank_lines.TestBlankLinesTwisted) ... ok\r\ntest_top_level_fewer_blank_lines (testsuite.test_blank_lines.TestBlankLinesTwisted) ... ok\r\ntest_top_level_more_blank_lines (testsuite.test_blank_lines.TestBlankLinesTwisted) ... ok\r\ntest_multiline_ignore_parsing (testsuite.test_parser.ParserTestCase) ... ok\r\ntest_multiline_trailing_comma_ignore_parsing (testsuite.test_parser.ParserTestCase) ... ok\r\ntest_trailing_comma_ignore_parsing (testsuite.test_parser.ParserTestCase) ... ok\r\ntest_vanilla_ignore_parsing (testsuite.test_parser.ParserTestCase) ... ok\r\ntest_check_diff (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_check_noarg (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_check_non_existent (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_check_simple (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_check_stdin (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_print_usage (testsuite.test_shell.ShellTestCase) ... ok\r\ntest_normalize_paths (testsuite.test_util.UtilTestCase) ... ok\r\n\r\n======================================================================\r\nFAIL: test_checkers_testsuite (testsuite.test_all.PycodestyleTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/packages/tmp/pycodestyle-2.4.0/testsuite/test_all.py\", line 39, in test_checkers_testsuite\r\n    msg='%s failure(s)' % report.total_errors)\r\nAssertionError: 7 is not false : 7 failure(s)\r\n\r\n----------------------------------------------------------------------\r\nRan 53 tests in 0.698s\r\n\r\nFAILED (failures=1)\r\nTest failed: <unittest.runner.TextTestResult run=53 errors=0 failures=1>\r\nerror: Test failed: <unittest.runner.TextTestResult run=53 errors=0 failures=1>\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 473,
                "title": "False positive E302 if header of the top function spans more than two lines",
                "labels": [],
                "description": "If parameters of the first function defined in a file (no comments or other statements precede it) span more than two lines (with or without hanging indent) pep8.py falsely reports \"E302 expected 2 blank lines, found 0\" . However if the same function is reformatted so that its parameters are in row or occupy only two lines, there is no such warning.\n\nFor instance, no warning is given in the following cases\n\n``` python\ndef func(x, y, z):\n    pass\n```\n\n``` python\ndef func(\n        x, y, z):\n    pass\n```\n\n``` python\ndef func(x, \n         y, z):\n    pass\n```\n\nNonetheless, pep8.py complains about the first line in these cases:\n\n``` python\ndef func(x,  # E302 expected 2 blank lines, found 0 \n         y,\n         z):\n    pass\n```\n\n``` python\ndef func(  # E302 expected 2 blank lines, found 0\n        x,\n        y, z):\n    pass\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 785,
                "title": "Relax E127 with dictionary values: allow extra indent",
                "labels": [],
                "description": "Currently pycodestyle will complain about the following:\r\n\r\n```python\r\nmydict = {12345:\r\n              'foo'}\r\n```\r\n\r\n> t-61.py:2:15: E127 continuation line over-indented for visual indent\r\n\r\nWe are about to change this in https://github.com/Vimjas/vim-python-pep8-indent/pull/61, and there has been some discussion in https://github.com/python/peps/pull/113 - resulting in keeping this out of PEP8 itself (i.e. undefined).\r\n\r\nI think pycodestyle should handle this in a relaxed way, and allow for an extra indentation level for dictionary values (after `:` on the previous line)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 464,
                "title": "Issue# 430, Fixing Indentation levels",
                "labels": [],
                "description": "Fixed indentation level detection. Made the following changes.\n- Added error 117 and 118 to detect misuse of tabs or spaces depending on the initial tab\n- Added new variable initial_tab to hold and remember the initial tab type used\n- Changed tab detection from 8 spaces to \"\\t\" for consistency\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 458,
                "title": "Do not report E302 occurring on first logical line",
                "labels": [],
                "description": "67b8be8 introduced an exception for E302 if the\nfirst top level function or class was preceded\nwith only one comment line.\n\nPEP 263 explicitly allows for two lines of comments\nat the top of a module, in order to support a\nhash-bang and an encoding declaration.\n\nWhen the first top level function or class appears on the\nfirst logical line, i.e. preceded only by comments, E302\nshould not be reported as the pep8 utility typically\nignores comments appearing anywhere in the code being checked.\n\nFixes #412\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 767,
                "title": "E714 miscategorizes chained 'is not'",
                "labels": [],
                "description": "Python 3.6.5, pycodestyle 2.4.0\r\n\r\nMisinterprets the first `is not`'s `not` as part of a `not foo is ...` expression.\r\n\r\ntest.txt:\r\n```py\r\nfoo is not bar is not baz\r\n```\r\noutput:\r\n```\r\ntest:1:8: E714 test for object identity should be 'is not'\r\n```\r\n(not that chained `is not`s would ever appear in real/good code, but still worth noting)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 457,
                "title": "PEP 8 Inspection over-generalizes blank lines around functions",
                "labels": [],
                "description": "PEP 8 only requires blank lines around \"top-level function and class definitions\" and \"method definitions inside a class\". However, pep8 marks any function without a line above it as failing the rule.\n\nThis is especially troublesome for functions that are inside other functions or methods, because they are often short and have no reason for a line above:\n\n``` python\ndef test():\n    def success_callback():  # no need for blank line above\n        print('Success! A wonderful thing has completed!')\n    def error_callback():  # no need for blank line above\n        print('Error! The entire program is crashing around us!')\n    run_async_function(success_callback, error_callback)\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 448,
                "title": "pep8 has conflicting definitions of a docstring",
                "labels": [],
                "description": "pep8 has\n- `DOCSTRING_REGEX` (used by `blank_lines`) which only allows `u` & `r` prefixes.  pep257 doesnt appear to exclude `b`, but it also doesnt explicitly mention it as allowed.\n- `is_string_literal` (used by `module_imports_on_top_of_file`) which strictly matches the Python 2 string prefix pattern that includes `u`, `r` & `b`\n\n`DOCSTRING_REGEX` dates back to 58a7812c, and the same rough restriction goes back to d8ee2baf in 2009.\n\n`is_string_literal` is from 2014 (1ee296bc).  I dont see any discussion on https://github.com/PyCQA/pep8/pull/304 regarding why `r` should now be appropriate for a docstring, and should be different from `blank_lines`.\n\nConsider\n\n``` python\nb\"\"\"foo\"\"\"\n\n# `blank_lines` uses DOCSTRING_REGEX, which only allows `u` & `r` prefixes\n\nimport sys\n\n\nclass Foo(object):\n\n    b\"\"\"Foo.\"\"\"\n    def blah(self):\n        pass\n\n    r\"\"\"Foo.\"\"\"\n    def baz(self):\n        pass\n\n    a = 1\n    r\"\"\"Foo.\"\"\"\n    def hmmm(self):\n        pass\n```\n\nOnly one pep8 result:\n\n```\ntest.py:11:5: E301 expected 1 blank line, found 0\n    def blah(self):\n    ^\n```\n\nFirstly, I have not found the part of pep8 which allows a docstring on the line preceding a function.\n\nQuite the opposite actually.  Regarding docstrings, pep8 does say \"This comment should appear after the def line.\"\n\nIf there is reason for docstrings on the preceding line, I then cant see why `b` should be excluded according to pep8, or pep257 if read as literally as seems very common around here, but of course it is very silly and should be excluded for common sense reasons, in both `blank_lines` and `module_imports_on_top_of_file`, and anywhere else relating to docstrings.\n\nAnd finally regarding this segment of the `blank_lines` code, allowing `a = 1` above is clearly a bug.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 797,
                "title": "E122 reporting inconsistency",
                "labels": [],
                "description": "I think I've stumble upon E122 reporting inconsistency. Please consider following positive cases paying attention to `foo` argument:\r\n```Python3\r\ndict(\r\n    foo='{spam}, {sausage}, {spam}, {spam}, {spam},'\r\n        '{bacon}, {spam}, {tomato} and {spam}',\r\n    bar=[\r\n        'spam',\r\n        'ham',\r\n        'eggs'\r\n    ]\r\n)\r\n```\r\n\r\n```Python3\r\ndict(\r\n    foo='{spam}, {sausage}, {spam}, {spam}, {spam},'\r\n    '{bacon}, {spam}, {tomato} and {spam}',\r\n    bar=[\r\n        'spam',\r\n        'ham',\r\n        'eggs'\r\n    ]\r\n)\r\n```\r\n\r\n```Python3\r\ndict(\r\n    foo='{spam}, {sausage}, {spam}, {spam}, {spam},'\r\n    '{bacon}, {spam}, {tomato} and {spam}'.format(\r\n        spam='spam', sausage='sausage', bacon='bacon', tomato='tomato'),\r\n    bar=[\r\n        'spam',\r\n        'ham',\r\n        'eggs'\r\n    ]\r\n)\r\n```\r\n\r\nbut this causes an E122\r\n```Python3\r\ndict(\r\n    foo='{spam}, {sausage}, {spam}, {spam}, {spam},'\r\n        '{bacon}, {spam}, {tomato} and {spam}'.format(\r\n            spam='spam', sausage='sausage', bacon='bacon', tomato='tomato'),\r\n    bar=[\r\n        'spam',\r\n        'ham',\r\n        'eggs'\r\n    ]  # E122 is reported here\r\n)\r\n```\r\nI'm quite confused. If 4th case is incorrect I believe 1st also should be considered as such. Do I miss something? My current configuration is:\r\n```JSON\r\n{\r\n  \"dependencies\": [\r\n    {\r\n      \"dependency\": \"setuptools\",\r\n      \"version\": \"40.2.0\"\r\n    }\r\n  ],\r\n  \"platform\": {\r\n    \"python_implementation\": \"CPython\",\r\n    \"python_version\": \"3.6.5\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"plugins\": [\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"mccabe\",\r\n      \"version\": \"0.6.1\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pycodestyle\",\r\n      \"version\": \"2.3.1\"\r\n    },\r\n    {\r\n      \"is_local\": false,\r\n      \"plugin\": \"pyflakes\",\r\n      \"version\": \"1.6.0\"\r\n    }\r\n  ],\r\n  \"version\": \"3.5.0\"\r\n}\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 443,
                "title": "Attach the original source to the compiled tree",
                "labels": [],
                "description": "Issue:\n\nWhen flake8 is being piped a file, stdin is consumed by pep8. A checker is\nunable to evaluate the original source.\n\n`seek(0)` is not possible since it is illegal in a pipe.  Constructing the\nsource from the tree gives unreliable line numbers.\n\nThe goal here is to build an IDE plugin, working specially with Atom.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 799,
                "title": "Fix some spelling in CONTRIBUTING.rst",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 438,
                "title": "Blank lines between methods definitions",
                "labels": [],
                "description": "In pep8.py is:\n\"Method definitions inside a class are separeted by a single blank line\"\n\nbut in https://www.python.org/dev/peps/pep-0008/ is\n\"Method definitions inside a class are surrounded by a single blank line.\"\n\nMaybe pep8 should work in different way in same cases:\n\n```\nclass LogsViewer(main.Main):\n                                                 #<- is this line needed?\n    def validate(self):\n        pass\n```\n\nbecause separated != surrounded\n\n**Updated because of misunderstanding** @doismellburning \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 784,
                "title": "E211 not detected in class definition",
                "labels": [],
                "description": "Pycodestyle does not report any errors for this code snippet:\r\n```\r\nclass A   (object):\r\n    pass\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 434,
                "title": "if clause doesn't accept parenthesis-less visual indent while if statement accepts",
                "labels": [],
                "description": "#151 permits parenthesis-less visual indent for `if` statement:\n\n``` py\n# ok\nif x.a == a and \\\n   x.b == b:\n    ...\n```\n\nBut not for `if` clause:\n\n``` py\n# ng\nz = [a for a in aaa\n     if a.a == a and\n        a.b == b]\n\nz = [a for a in aaa if a.a == a and\n                       a.b == b]\n```\n\nIt seems lack of unity.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 775,
                "title": "E303 too many blank lines (2)",
                "labels": [],
                "description": "quoting PEP 8 : \r\n\"_Surround top-level function and class definitions with two blank lines._\r\n\r\n_Method definitions inside a class are surrounded by a single blank line._\r\n\r\n_Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)._\"\r\n\r\nWhich may be usefull, for example, if you are used to split your function in really small unit accordingly to the SRP (and Clean Code book of Robert C. Martin).\r\n\r\nFor example if you have a snippet like this one, with a lot more of subfunction : \r\n\r\n\r\n```\r\nclass foo():\r\n    def usefull_function(self):\r\n        _sub_function_a()\r\n        _sub_function_b()    \r\n\r\n    def _sub_function_a(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_b(self):\r\n        #do_stuff\r\n\r\n\r\n    def other_function_with_subfunction(self):   # Two blank lines before this might be cleaner.\r\n        _sub_function_c()\r\n        _sub_function_d()\r\n\r\n    def _sub_function_c(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_d(self):\r\n        #do_stuff\r\n```\r\n\r\nThis snippet is here to give an example of why this can be used, but anyway, the PEP states it's ok.\r\n\r\n**Question :**\r\n- Should pycodestyle allow more blank lines that the recommandation (and not restriction)?\r\n\r\n**Options that could be implemented**\r\n- Selecting the number of exception to the recommandation that can be applied to a class (enhance the \"sparingly\" in the PEP8 quotation)\r\n- Selecting the max number of extra blank line before class, top-level function and method.\r\n\r\n**Pros :** \r\n- Real check of the PEP8.\r\n- Let you more option for clean code.\r\n\r\n**Cons :** \r\n- In the main use case, you want only one blank line before a def, and it will allow some wrong blank space to sneak in the code."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 432,
                "title": "Option --select=E901 works incorrectly if AST checking is enabled, e.g. via flake8",
                "labels": [],
                "description": "Option `--select=E901` works incorrectly when compilation is failed in `check_ast` method.\n\nIn this case error E901 is reported, but option `--select=E901` magically suppresses it.\nThis could be easily reproduced using, for example, `flake8` utility (which triggers `check_ast` call).\n\nConsider following sample file. It produces E901 error by `flake8` (by compile exception of type SyntaxError in `check_ast`):\n\n```\ndef f()\n    pass\n```\n\nBy default, we see syntax error with code E901 (and some other pep8 errors, which are filtered quite good by `--select`):\n\n```\ntest.py:1:7: E901 SyntaxError: invalid syntax\ntest.py:2:5: E113 unexpected indentation\n```\n\nAnd, if we wish to show only syntax errors via\n`flake8 --select=E901 <file>`, we will see NO errors at all. This is very-very frustrating. Errors filtering is implemented in `pep8` core, so `flake8` is irrelevant here (see https://gitlab.com/pycqa/flake8/issues/86 fir details)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 790,
                "title": "E501 noqa on long broken line",
                "labels": [],
                "description": "Adding `# noqa`s as below has no effect on `pycodestyle`, which still complains about `E501` violation.\r\n```\r\n# noqa\r\nx = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \\\r\n    \"b\"  # noqa\r\n```\r\n(using long string of \"a\"s here just as an example, in reality it would be `SomeVeryLongClassName.withVeryLongMethod`)\r\n\r\n**Software version**: `pycodestyle==2.4.0`, `python 3.6.5`"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 431,
                "title": "Add checks for unconsistent returns",
                "labels": [],
                "description": "Added in PEP 8 :\n\"\"\"\nBe consistent in return statements. Either all return statements in a\nfunction should return an expression, or none of them should. If any\nreturn statement returns an expression, any return statements where no\nvalue is returned should explicitly state this as return None, and an\nexplicit return statement should be present at the end of the function\n(if reachable).\n\"\"\"\n\nChecking for unconsistent returns corresponds to implementing a check\nbased on ast tree. Given an AST tree, one can easily collect return\nstatements and check whether they return an explicit value or not.\nAlso, from the AST tree, one can try to check whether the end of\nthe function is reachable.\n\nWarning W740 is added for explicit inconsistent returns.\n\nWarning W741 is added for implicit inconsistent returns : when a\nfunctions explicitly returns a value at some point but does not\nat the (reachable) end of the function. If the end of a function\nis not reachable but warning is triggered, one might simply add a\n\"return None\" or an \"assert False\" : as one said : \"Explicit is\nbetter than implicit.\".\n\nRegarding the code :\nImplementation has been made as easy to understand as possible.\nThe new check itself has been implemented in a new class\nUnconsistentReturns which uses yet another class FlowAnalysis\nwhich serves as an holder for various helper methods.\nAlso, I took this chance to change a few details so that AST-tree\nchecks fit more easily. This changes a few APIs. I don't know if\nanyone is relying on those.\n\nRegarding the tests :\nAdding the first AST-tree based check leads to most of the\n(incorrect) test code to be parsed which leads to many SyntaxError\neither related to a single version of Python or to all of them. A\nA new symbol has been to be able to convey the fact that an error\nis expecting only for such or such version of Python.\nI've fixed all issues related to SyntaxError so that they are all\npassing all right. I hope I haven't changed what is actually tested.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 768,
                "title": "matmul operator is not checked for missing whitespace",
                "labels": [],
                "description": "Example:\r\n```\r\nx = 3\r\nx*x\r\nx@x\r\n```\r\nPycodestyle output:\r\n```\r\nhello.py:2:2: E226 missing whitespace around arithmetic operator\r\n```\r\nExpected output:\r\n```\r\nhello.py:2:2: E226 missing whitespace around arithmetic operator\r\nhello.py:3:2: E226 missing whitespace around arithmetic operator\r\n```\r\nVersion:\r\n```\r\n2.4.0\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 430,
                "title": "No complaint about inconsistent indentation levels",
                "labels": [],
                "description": "`pep8` neglects to complain about code with mismatched indentation levels, such as this snippet:\n\n```\nif True:\n        print 'yes'\nelse:\n    print 'no'\n```\n\nExample taken from a [complaint](https://stackoverflow.com/questions/32032206/pep8-has-no-option-to-force-same-indentation-in-whole-code) about this problem on StackOverflow.  `pylint` gives a reasonable error here, namely:\n\n> W:  2, 0: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)\n\nThe PEP 8 standard says simply:\n\n> Use 4 spaces per indentation level.\n\nAnd I would like to have a warning about any indentation level other than 4 spaces. Here's the [beginning of a fix](https://github.com/schmiddy/pep8/tree/issue-430). I think these errors might need to be separated based on:\n\n a. mixing different indentation levels, as in the example above\n b. using any indentation level other than 4 spaces (including tabs) \n\nIMO a.) should definitely be an error by default. I can see the case for b.) being off by default and/or just a warning, particularly since PEP 8 makes an allowance for tabs by saying:\n\n> Tabs should be used solely to remain consistent with code that is already indented with tabs.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 428,
                "title": "Triple-quoted string should use double quote #423",
                "labels": [],
                "description": "From https://www.python.org/dev/peps/pep-0008/#string-quotes\n\n\"For triple-quoted strings, always use double quote characters to be\nconsistent with the docstring convention in PEP 257 .\"\n\nError number is not very good at the moment.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 749,
                "title": "Contextual diff lines checked",
                "labels": [],
                "description": "`pycodestyle --diff` is great!  More programs should accept diffs as input.\r\n\r\nUnfortunately it appears to consider lines in the diff that are merely context.  Consider the following diff:\r\n\r\n```patch\r\ndiff --git a/example.py b/example.py\r\nindex 955628d..b6c2b66 100644\r\n--- a/example.py\r\n+++ b/example.py\r\n@@ -1,2 +1,5 @@\r\n def invalid_but_irrelevant():\r\n   print(\"I am invalid but also irrelevant\")\r\n+\r\n+def invalid_but_relevant():\r\n+  print(\"I am invalid and relevant\")\r\n```\r\n\r\n([Also available as a gist.](https://gist.github.com/markrwilliams/98f18739ab30fb69d6154364dc1eee7a))\r\n\r\nLine 2 (`print(\"I am invalid but also irrelevant\")`) was not added in this diff, but `pycodestyle` still finds the problem with its indentation:\r\n\r\n```\r\nuser@host:~/gists/98f18739ab30fb69d6154364dc1eee7a$ git diff HEAD~1 | pycodestyle --diff\r\n./example.py:2:3: E111 indentation is not a multiple of four\r\n./example.py:4:1: E302 expected 2 blank lines, found 1\r\n./example.py:5:3: E111 indentation is not a multiple of four\r\n```\r\n\r\nI expect `--diff` to only consider lines _added_ by a diff; otherwise code that's problematic but outside the scope of a change causes that change to fail linting checks."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 423,
                "title": "triple-quoted strings should always use double quote characters",
                "labels": [],
                "description": "From https://www.python.org/dev/peps/pep-0008/#string-quotes\n\n\"For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in PEP 257 .\"\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 750,
                "title": "URLs not allowed in first line of assigned multiline strings",
                "labels": [],
                "description": "New in pycodestyle 2.4, a long-unbroken-string (e.g. URL) in the first line of a multiline string is now an error.\r\n\r\nI suspect it is due to https://github.com/PyCQA/pycodestyle/pull/630 , as the most likely candidate due to it touching `E501`.\r\n\r\n```py\r\nv = \"\"\"http://www.thelongestdomainnameintheworldandthensomeandthensomemoreandmore.com/\r\nhttp://www.thelongestdomainnameintheworldandthensomeandthensomemoreandmore.com/\r\n\"\"\"\r\n```\r\n\r\n```sh\r\n$ pycodestyle longlines.py\r\nlonglines.py:1:80: E501 line too long (86 > 79 characters)\r\n```\r\n\r\nOddly, it has to be assigned, i.e. not a conventional docstring."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 422,
                "title": "% is not considered to be a binary operator for line breaks",
                "labels": [],
                "description": "``` py\nprint(\"%s\"\n      % \"text\")\n```\n\ndoes not emit W503.\n\nThe `%` operator is shown in the example for https://www.python.org/dev/peps/pep-0008/#multiline-if-statements, so it can be assumed that this is a recommendation, yet it is [excluded from the bin-op check](https://github.com/PyCQA/pep8/blob/151758ce8f29fd65e10dc0720446c5a3bb164602/pep8.py#L1026).\n\nEven though I hate this convention and do not follow it, this is inconsistent.\nMight want to consider adding this as a separate error code because this has been such a longstanding issue?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 752,
                "title": "Option to ignore E501 based on regular expressions",
                "labels": [],
                "description": "Pycodestyle already makes an exception for url's in docstrings and comments. I think a good option would be to allow arbitrary regexps to have more flexibility. One use case would be to ignore long urls in string literals by providing regex expressions such as `https?://`.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 412,
                "title": "Multiline comment before class at the beginning of file triggers E302",
                "labels": [],
                "description": "Possibly a duplicate of #174.\n\nI may be misunderstanding something, but I understood this to be fixed a while ago. I'm using pep8 1.5.7. If I begin a file with\n\n``` python\n# comment comment comment comment comment comment comment comment comment comment\nclass Foo(object):\n    pass\n```\n\nIt says there is no syntax error. But if I wrap it to:\n\n``` python\n# comment comment comment comment comment comment comment comment\n# comment comment\nclass Foo(object):\n    pass\n```\n\nI get \"E302 expected 2 blank lines, found 0\" for the \"class\" line.\n\nWas this fixed? Is there a config opt that turns it off? I couldn't find it in the docs.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 754,
                "title": "Making pycodestyle faster",
                "labels": [
                    "undecided",
                    "needs review"
                ],
                "description": "I've been on a Python performance optimization kick recently (see\r\nhttps://github.com/PyCQA/astroid/pull/497), and I'm a `pycodestyle`\r\nuser, so I figured I would give it a look and see if its performance\r\ncould be improved at all.\r\n\r\nOf course, `pycodestyle` is already pretty fast, so to give it some\r\nstress I'm testing it out by pointing it right at a large repo, namely\r\nZulip (https://github.com/zulip/zulip). In particular, my test command\r\nis `time ~/pycodestyle/pycodestyle.py -qq ~/zulip`.\r\n\r\nHere are the times from three runs of master:\r\n\r\n```\r\nreal\t2m10.664s\r\nuser\t0m55.333s\r\nsys\t1m15.249s\r\n\r\nreal\t2m11.376s\r\nuser\t0m55.545s\r\nsys\t1m15.745s\r\n\r\nreal\t2m11.588s\r\nuser\t0m55.500s\r\nsys\t1m16.044s\r\n\r\n```\r\n\r\nI used the `yappi` profiling library to see if there were any hotspots\r\nin the code. There were. Take a look at the graph below. The brighter\r\nthe box, the hotter the spot. In more detail, each box represents a\r\nfunction and has three numbers: 1) the percentage of total CPU time\r\nspent in that function, 2) the percentage of total CPU time spent in\r\nthat function but not its subcalls, and 3) the number of times the\r\nfunction was called.\r\n\r\n![pcs-master](https://user-images.githubusercontent.com/17630138/38784585-9c0b9c12-40d9-11e8-9cf0-7927edd71896.png)\r\n\r\nThe red box that sticks out is `Checker.run_check`. It is called well\r\nover two million times, and 27.7 of total CPU time is spent there,\r\nalmost all over which is in the function itself. This seems like an\r\nawful lot considering how short the function is:\r\n\r\n```\r\n    def run_check(self, check, argument_names):\r\n        \"\"\"Run a check plugin.\"\"\"\r\n        arguments = []\r\n        for name in argument_names:\r\n            arguments.append(getattr(self, name))\r\n        return check(*arguments)\r\n```\r\n\r\nSo why does it suck up so much time?\r\n\r\nI think I've worked out how it goes. When a check is registered (with\r\n`register_check`), its arguments are extracted with the `inspect`\r\nlibrary and stored as a list of strings. When a check is run,\r\n`run_check` iterates over its associated list of arguments,\r\ndynamically accesses those attributes of the `Checker`, and then\r\npasses those values to the check to actually run.\r\n\r\nThe problem here is that dynamic attribute access is slow, and doing\r\nit in tight loops is really slow (see\r\nhttps://github.com/PyCQA/astroid/pull/497 for a harrowing cautionary\r\ntale on this subject). My idea was to see if there was a way to do\r\naway with the dynamic attribute access, basically by \"compiling\" the\r\nattribute access into the code.\r\n\r\nIt turns out that this can be accomplished by passing the checker\r\ninstance into the check as an argument, and then call the attributes\r\ndirectly on the checker. Implementing this change involves a\r\nlarge-scale shuffling of arguments and strings, but other than that\r\nnot much changes. `register_check` has to take the check's argument\r\nnames as arguments now, since they are no longer the actual arguments.\r\n`run_check` itself can also be done away with, since all it would have\r\nto do would be to call the check with the checker as an argument, and\r\nthat can be done inline.\r\n\r\nThis change resulted in a substantial speedup:\r\n\r\n```\r\nreal\t1m28.057s\r\nuser\t0m40.340s\r\nsys\t0m47.669s\r\n\r\nreal\t1m27.843s\r\nuser\t0m39.910s\r\nsys\t0m47.901s\r\n\r\nreal\t1m28.258s\r\nuser\t0m40.379s\r\nsys\t0m47.849s\r\n```\r\n\r\nHere is the resulting `yappi` graph:\r\n\r\n![pcs-check](https://user-images.githubusercontent.com/17630138/38784588-ab9b00a0-40d9-11e8-80b2-f8016fd1e6cb.png)\r\n\r\nThis graph is a lot more colorful than the last one. This means that\r\nthe work is spread out more evenly among the various functions and\r\nthere isn't one overwhelmingly critical hotspot.\r\n\r\nOne function that stuck out to me was `Checker.init_checker_state`.\r\nAfter some experimentation, it appeared that despite taking up almost\r\n6% of total CPU time, the function didn't do much. Cutting it provided\r\na non-negligible speed improvement:\r\n\r\n```\r\nreal\t1m19.463s\r\nuser\t0m36.857s\r\nsys\t0m42.565s\r\n\r\nreal\t1m19.837s\r\nuser\t0m36.469s\r\nsys\t0m43.329s\r\n\r\nreal\t1m19.521s\r\nuser\t0m36.462s\r\nsys\t0m43.026s\r\n\r\n```\r\n\r\nA little further poking around revealed that `run_check` and\r\n`init_checker_state` were the only consumers of the \"argument names\",\r\nso I cut those out too. This led to some nice code simplification and\r\nan ever-so-slight speedup:\r\n\r\n```\r\nreal\t1m19.686s\r\nuser\t0m36.516s\r\nsys\t0m43.129s\r\n\r\nreal\t1m18.466s\r\nuser\t0m36.196s\r\nsys\t0m42.227s\r\n\r\nreal\t1m19.063s\r\nuser\t0m36.188s\r\nsys\t0m42.846s\r\n```\r\n\r\nHere is the `yappi` graph after these changes:\r\n\r\n![pcs-check-init](https://user-images.githubusercontent.com/17630138/38784592-b65a5a04-40d9-11e8-9806-975b84cb0c28.png)\r\n\r\nThe major hotspot is now `tokenize.tokenize`, which is part of the\r\nstandard library. This is good, as it suggests that `pycodestyle` is\r\nnearing the point of being as fast as it can be. After that, the next\r\nmost expensive functions are\r\n\r\n* `check_logical`,\r\n* `generate_tokens`,\r\n* `build_tokens_line`,\r\n* `check_all`,\r\n* `maybe_check_physical`, and\r\n* `_is_eol_token_`.\r\n\r\nThese functions all feel to me like they are doing something\r\ninefficiently, but I don't understand them well enough to say what.\r\n\r\nThese measurements were all taken running master with\r\n\r\n```\r\nPython 3.6.5 (default, Mar 30 2018, 06:42:10)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 408,
                "title": "false positive: E122 continuation line missing indentation or outdented",
                "labels": [],
                "description": "It seems there's a false positive for E122.\n\nConsider the following snippet\n\n``` python\n# pep8test.py\ndef foo(bar):\n    pass\n\n# valid:\n{\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n# valid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n}\n\n# valid:\n{\n    'time_london':\n        'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello',\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n\n# invalid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n```\n\nWhen running pep8 I get:\n\n```\npep8test.py:37:5: E122 continuation line missing indentation or outdented\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 758,
                "title": "E127: bugs?",
                "labels": [],
                "description": "New to Python, so sorry if I missed something, but E127 gives me trouble on two (probably related) occasions:\r\n\r\n### continuing a statement after backslash\r\n```\r\nassert self.foobar in ['bar', 'baz', 'befoozle'], \\\r\n        'Invalid foobar: {0}'.format(self.foobar)\r\nif demo:\r\n    normal_indent = 4 * space\r\n```\r\nHere, the continuation of ``assert`` is double-indented, in line with the usual practice of distinguishing indents due to breaks from those that follow program logic (as also discussed in PEP8 with slightly different examples). Is there a good reason ``pycodestyle`` doesn't like this (E127)?\r\n\r\n### aligning operators after backslash\r\n```\r\nself.foozle_timeout = max(self.foozles_left, 1) * foozle_time \\\r\n                      + self.foozle_tolerance\r\n```\r\nI understand that PEP8 recommends using parentheses/brackets/braces when possible, eliminating the need of a backslash. But still, it seems wrong that this is turned down (it follows the same operator alignment as in the PEP8 Knuth discussion, but without parentheses). If ``pycodestyle`` really wants to insist on using parentheses instead of a backslash here, it should do so explicitly, not by issuing E127.\r\n\r\nEDIT: Maybe I don't strictly have a cause to complain in the second issue, as this type of \"visual\" indent is discussed in PEP8 only in the context of aligning with opening delimiters. But I am not certain it should be forbidden, and the first issue seems unaffected."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 406,
                "title": "E501 on links should allow \u201cintroduction\u201d",
                "labels": [],
                "description": "The line length checker excepts URL only lines because of #224 which is sensible. But usually there is some introduction like:\n\nSo maybe there is a way to allow something before an URL when it's a comment or doc string. The question is now what is sensible. Maybe something like `[^ ]+:` so it would allow the above line or something like:\n\n See: https://example.com/a-very-very-very\u2026\n\nIt wouldn't allow \u201cSee also:\u201d so maybe it should just strip the URL and check the rest of the line?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 403,
                "title": "\"E262 inline comment should start with '# '\" even though inline comment does start with '# '",
                "labels": [],
                "description": "to reproduce:\n\n```\n$ echo 'l = 1  #  foobar' | pep8 -\nstdin:1:8: E262 inline comment should start with '# '\n```\n\nThough evidently, the inline comment does start with `#` (hash followed by a space).\n\nPep8 itself also does not forbid an inline comment to have two spaces before the actual text starts.\n\nMy actual use case for starting an inline comment with two spaces after the hash are a snippet like the following:\n\n```\nl = [\n    \"foo\",  #  1\n    \"bar\",  #  2\n    ...\n    \"baz\",  # 10\n    ...\n]\n```\n\nThis is a minimal example which should demonstrate that allowing an inline comment with two leading spaces is useful in case one wants to right-align numbers. Having each line commented like above is useful because in case an error happens, the error will point out the element in the list from where the error originated. Since the list is several hundred elements long and its elements are not just simple strings as above, the comments make it easier to find the right element.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 771,
                "title": "pycodestyle handles an extra closing parenthesis very poorly",
                "labels": [],
                "description": "Take, for example, this Python:\r\n\r\n```python\r\nasync def main():\r\n    foobar = await asyncio.gather(\r\n        bar, baz, qux,\r\n    ))  # N.b., an extra ) is here, by mistake.\r\n\r\n    core.init(warp)\r\n    http_session = aiohttp.client.ClientSession()\r\n\r\n    async def thunk(messages):\r\n        await process_messages(\r\n            messages,\r\n            warp_core,\r\n        )\r\n\r\n    consumer = \\\r\n        consume_messages(client, warp, core, thunk)\r\n```\r\n\r\n`pycodestyle` will emit the following:\r\n\r\n```\r\n./pycodestyle-weird-error.py:6:5: E122 continuation line missing indentation or outdented\r\n./pycodestyle-weird-error.py:7:5: E122 continuation line missing indentation or outdented\r\n./pycodestyle-weird-error.py:7:17: E251 unexpected spaces around keyword / parameter equals\r\n./pycodestyle-weird-error.py:7:19: E251 unexpected spaces around keyword / parameter equals\r\n./pycodestyle-weird-error.py:9:5: E122 continuation line missing indentation or outdented\r\n./pycodestyle-weird-error.py:11:13: E113 unexpected indentation\r\n./pycodestyle-weird-error.py:13:9: E901 IndentationError: unindent does not match any outer indentation level\r\n```\r\n\r\nI initially started trying to tackle the `IndentationError`, since that seemed the most egregious of the lot, and would prevent the code from running at all, as opposed to a mere stylistic violation. It took me a considerable while to figure out `pycodestyle` had sent me on a wild goose chase.\r\n\r\nThe actual error here is that there is an extra `)`, which attempts to close a `(` that was never opened. As a layman, it seems like that error (a mismatched parenthesis) should be easy to catch, and certainly, the situation would be a _lot_ clearer to me as a user if `pycodestyle` could emit the singular error message\r\n```\r\n\u2026:4:?: E??? unmatched / extra closing parenthesis\r\n```\r\n\r\nor something along those lines.\r\n\r\nThat one character (`)`) is the only actual violation in the example. Removing it causes the file to pass `pycodestyle` without error.\r\n\r\n(Now, my understanding is that some parser algorithms actually make this sort of good error reporting rather hard to do. So, this might all be very non-trivial.)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 399,
                "title": "Consistent use of \"return None\" in functions",
                "labels": [
                    "needs patch",
                    "feature"
                ],
                "description": "Could you add this rule to pep8? I just updated the official PEP 8 to include this (I'm surprised it wasn't already there):\n- Be consistent in return statements. Either all return statements in a\n  function should return an expression, or none of them should. If any return\n  statement returns an expression, any return statements where no value is\n  returned should explicitly state this as return None, and an explicit\n  return statement should be present at the end of the function (if\n  reachable).\n\n```\n   Yes:\n\n   def foo(x):\n       if x >= 0:\n           return math.sqrt(x)\n       else:\n           return None\n\n   def bar(x):\n       if x < 0:\n           return None\n       return math.sqrt(x)\n\n   No:\n\n   def foo(x):\n       if x >= 0:\n           return math.sqrt(x)\n\n   def bar(x):\n       if x < 0:\n           return\n       return math.sqrt(x)\n```\n\nhttps://mail.python.org/pipermail/python-dev/2015-April/139054.html\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 765,
                "title": "Simultaneous E127 & E122 violation",
                "labels": [
                    "incomplete"
                ],
                "description": "_**Python version** 3.6.5, **pycodestyle version** 2.4.0._\r\n\r\n(I *think* this is distinct from the other E127-related issues, like #758.)\r\n\r\nRun pycodestyle on the following snippet, noting the position of the plus symbol in each block:\r\n\r\n```py\r\ndef hmm():\r\n    at_least_one_extra_line_needs_to_be_here: None\r\n    (\r\n      'an expression'\r\n      'chopped up'\r\n      'into lines'\r\n      ) \\\r\n      + 'another expression'\r\n\r\n\r\ndef hm():\r\n    at_least_one_extra_line_needs_to_be_here: None\r\n    (\r\n      'an expression'\r\n      'chopped up'\r\n      'into lines'\r\n      ) \\\r\n    + 'another expression'\r\n\r\n```\r\n\r\nResult:\r\n```\r\n~$ pycodestyle test.py\r\ntest.py:8:7: E127 continuation line over-indented for visual indent\r\ntest.py:18:5: E122 continuation line missing indentation or outdented\r\n~$ \r\n```\r\n\r\nI'd expect at least one of them to pass (because the errors contradict each other), and indeed the E127 on line 8 does not appear under the following conditions:\r\n\r\n```py\r\ndef hmm():\r\n    # no preceding line(s)\r\n    (\r\n      'an expression'\r\n      'chopped up'\r\n      'into lines'\r\n      ) \\\r\n      + 'another expression'\r\n```\r\n```py\r\n# no indentation\r\nat_least_one_extra_line_needs_to_be_here: None\r\n(\r\n  'an expression'\r\n  'chopped up'\r\n  'into lines'\r\n  ) \\\r\n  + 'another expression'\r\n\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 396,
                "title": "Allow \"empty\" file to have a \\n character",
                "labels": [],
                "description": "W292 and W391 are conflicting when it comes to \"empty\" files. Normally empty files are not that useful. However in Python, it's often useful to have an empty `__init__.py` to declare a folder as a package without necessarily putting any logic there (In a perfect world those file would contain a docstring).\n\nWe could debate whether or not an \"empty\" file should contain a `\\n` or not. However, I don't see any real practical implication and think pep8 should simply accept both.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 770,
                "title": "W293 emitted for multi-line strings in pycodestyle2.3.1",
                "labels": [],
                "description": "Looks like `W293` (trailing whitespace on empty line) is getting triggered for string literals. I'd imagine that this is undesired behavior since the space might have semantic meaning?\r\n\r\n```\r\n# a.py\r\na = \"\"\"\r\n  \r\n\"\"\"\r\n$ pycodestyle --version\r\n2.4.0\r\n$ pycodestyle a.py\r\na.py:2:1: W293 blank line contains whitespace\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 395,
                "title": "Python2 now detects encoding according to PEP263",
                "labels": [],
                "description": "This adds support for detecting source file encoding as defined in PEP263 in Python2.\n- inlined python's 3 codecs.detect_encoding to make python2 recognize\n  PEP 263 encodings the same way as the python3 implementation does\n- simplified readlines implementation a little bit, to share the code\n  between 2 and 3\n- added the test case mentioned in the issue, and a shift-jis variant\n- build passing at https://travis-ci.org/miszobi/pep8/builds/55316861\n- fixes #391 \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 795,
                "title": "Checking for invalid escape sequences in docstrings yields negative column numbers",
                "labels": [],
                "description": "```\r\n/tmp/test \u0394 cat test.py\r\ndef func():\r\n    \"\"\"this is a\r\n    long-ish docstring\r\n    with invalid \\d escapes\r\n    \"\"\"\r\n    pass\r\n\r\n/tmp/test \u039b pycodestyle test.py\r\ntest.py:5:-12: W605 invalid escape sequence '\\d'\r\n ?=1\r\n/tmp/test $ pycodestyle --version\r\n2.4.0\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 391,
                "title": "Variable-length encoding (like UTF-8) confuses E128",
                "labels": [],
                "description": "E128 gets confused with variable-lenght (with multi-byte) encoding, such as UTF-8. Using a multi-byte character makes PEP8 return an E128 warning of under-indent. Tests show that it expects one more space for each multi-byte character, consistent with UTF-8 double-bytes for the extended I'm using.\n\nApparently PEP8 is either ignoring the shebang line or using len() directly with UTF-8 string without converting to unicode first (even with the 'u' prefix).\n\nExample `pep8utf8.py`:\n\n``` python\n# -*- coding: utf-8 -*-\n_EPSILON = {'pressao': {'psig': 1,\n                        'kPag': 5},  # No error here\n            'press\u00e3o': {'psig': 1,\n                        'kPag': 5},  # Error\n            }\n\n```\n\nRunning `pep8 --show-source pep8utf8.py` yields:\n\n```\npep8utf8.py:5:25: E128 continuation line under-indented for visual indent\n                        'kPag': 5},  # Error\n                        ^\n```\n\n**Note 1:** I have tried using unicode strings, but the error is still there.\n**Note 2:** Python 2.7.6 |Anaconda 2.1.0 (32-bit)| (default, Nov 11 2013, 10:50:31) [MSC v.1500 32 bit (Intel)] on win32\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 746,
                "title": "E228 doesn't warn on whitespace either side of %",
                "labels": [],
                "description": "I get the following output when supplying the different test cases shown below. Why doesn't it report E228 when there is whitespace missing on the right-hand side of the modulo operator? An alternative question is: why does E228 exist in addition to E225?\r\n\r\n```\r\n$ cat > foo.py\r\nx = 10%2\r\n$ flake8 foo.py\r\nfoo.py:1:7: E228 missing whitespace around modulo operator\r\n$ cat > foo.py\r\nx = 10 %2\r\n$ flake8 foo.py\r\nfoo.py:1:9: E225 missing whitespace around operator\r\n```\r\n\r\nI would expect E228 should apply until there is correct whitespace either side of `%'?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 801,
                "title": "Keep compability with stdlib tokenize.py changes",
                "labels": [],
                "description": "https://github.com/python/cpython/commit/c4ef4896eac86a6759901c8546e26de4695a1389\r\nis not yet part of any release of Python but has been backported to all\r\nversions in Git (includeing 2.7!). It causes the tokenize.py module to\r\nemit a synthetic NEWLINE token for files that do not in fact end with a\r\nnewline, which confuses pycodestyle's checks for blank lines at the end\r\nof a file. Fortunately the synthetic NEWLINE tokens are easy to detect\r\n(the token text is \"\").\r\n\r\nFixes #786"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 745,
                "title": "The whl and egg package has pep8.py",
                "labels": [],
                "description": "When I install pycodestyle by pip, `pep8.py` was overwritten by pycodestyle installer.\r\nIs it correct behavior?\r\n\r\nI read #544 . This issues conclusion is following one.\r\n> All that said, I think we're all in agreement that we shouldn't break the pep8 package or CLI, so I'm closing this.\r\n\r\nThe following two packages have a `pep8.py` (version 1.7.1). \r\n- `pycodestyle-2.4.0-py2.py3-none-any.whl`\r\n- `pycodestyle-2.4.0-py3.6.egg`\r\n\r\n\r\nI can use `pip install --no-binary :all: pycodestyle` to avoid installing `pep8.py` because `pycodestyle-2.4.0.tar.gz` has no `pep8.py` .\r\n\r\n\r\nI want to use pycodestyle and *old* pep8 in same environment. I know workaround about this problem now. But, it was little bit complicated problem.\r\n\r\n\r\nP.S.\r\nI hope that all software uses pycodestyle instead of pep8 . But, some software still uses pep8. Thanks!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 673,
                "title": "Inconsistent handling of kwarg with binary operator expression as value",
                "labels": [],
                "description": "I think pycodestyle's handling of binary operator expressions that are the values of kwargs could be improved.\r\n\r\nThere is a case that is a little ambiguous to me as to whether it should be a style error or not. Should calls where the binary operator subexpressions are aligned with the = of the kwarg be errors? Currently, this triggers E131.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n        b +\r\n        c\r\n)\r\n```\r\n\r\nOn the other side, dropping the lines indentation to the same as the kwarg is considered valid, which seems to me to go against the spirit of the pep8 guidelines.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n  b +\r\n  c\r\n)\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 712,
                "title": "Blank line between \"class\" and \"def\" lines",
                "labels": [],
                "description": "Hi All,\r\n\r\nCould you please clarify if the following piece of code violates PEP8 and pycodestyle should report an error:\r\n\r\n```py\r\nclass A:\r\n    def func():\r\n        pass\r\n```\r\n\r\nI haven't found an example of this in the testsuite, and pycodestyle doesn't report any errors on this, though PEP8 states:\r\n> Method definitions inside a class are surrounded by a single blank line.\r\n\r\nThanks,\r\nMikhail\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 691,
                "title": "Prevent confusion with unintentional traling commas",
                "labels": [],
                "description": "There is the common programmer mistake to leave a trailing comma on a value, that leads that value unexpectedly treated as a tuple [[1]](http://www.logophile.org/blog/2011/06/04/pythons-trailing-comma-syntax) [[2]](https://twitter.com/DieGelassenheit/status/918783004448784384)\r\n\r\nPEP8 guide already warn on this\r\nhttps://www.python.org/dev/peps/pep-0008/#when-to-use-trailing-commas\r\n\r\n```\r\nYes:\r\n\r\nFILES = ('setup.cfg',)\r\nOK, but confusing:\r\n\r\nFILES = 'setup.cfg',\r\n\r\n```\r\n\r\nWhat you think about to allow `pycodestyle` tool to produce a warning message in that case?\r\n\r\nPylint has that check since [1.7](https://pylint.readthedocs.io/en/latest/whatsnew/1.7.html) version"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 696,
                "title": "E712 is based on a misreading of PEP8",
                "labels": [],
                "description": "Quoth the specification,\r\n\r\n- Don't compare boolean values to True or False using ==.\r\n\r\n  ```\r\n  Yes:   if greeting:\r\n  No:    if greeting == True:\r\n  Worse: if greeting is True:\r\n  ```\r\n\r\npycodestyle considers both the \"yes\" and the \"worse\" case equivalently good; if anything, it should complain *more* about the \"Worse\" case than the \"Yes\" one.\r\n\r\nIt also complains, I believe spuriously, about SQLAlchemy's overridden use of `==` [as described in this Stack Overflow question](https://stackoverflow.com/questions/18998010/flake8-complains-on-boolean-comparison-in-filter-clause).\r\n\r\nCould this be restricted to just emitting the warning in the literal case of `if ... == True:`, or `is True:` which is probably redundant, and leaving more complex expressions alone?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 704,
                "title": "Wrong or non-existent column number",
                "labels": [],
                "description": "In some occasions, pycodestyle is returning the wrong or non-existent column number. We are facing some issues on [AtomLinter/linter-flake8](https://github.com/AtomLinter/linter-flake8) due to this problem. This issue happens when using extended characters.\r\n\r\nA simple reproduction:\r\n1. Create a file named foo.py and include the content below. Notice that there is a single whitespace after the special dot character.\r\n```\r\n\u2022 \r\n```\r\n2. Execute `pycodestyle foo.py`. The output is `foo.py:1:4: W291 trailing whitespace`. The message references line 1 and column 4. There is no column 4 in the file.\r\n\r\nThis seems to be some encoding issue. It seems that the character `\u2022` is being treated as multiple characters."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 677,
                "title": "Fails to enforce 2 blank lines between functions when defined with async",
                "labels": [],
                "description": "When a function is defined with Async, pep8 fails to enforce the rule of having 2 blank lines above the function definition."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 665,
                "title": "\"E226 missing whitespace around arithmetic operator\" around high priority operator",
                "labels": [],
                "description": "According to [PEP8](https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements): \r\n\r\n> If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies)\r\n>    x = x*2 - 1\r\n\r\nI have this test program `t.py`: `y = x*x + 2`. When I run this under `flake8`:\r\n\r\n```\r\n$ flake8 --show-source --select=E226 t.py\r\n.py:3:6: E226 missing whitespace around arithmetic operator\r\ny = x*x + 2\r\n     ^\r\n```\r\n\r\nI wonder why I get an `E226` here? It seems to be in conflict with the PEP8 guidelines?\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 372,
                "title": "Suspicious E122 for arguments of method called on multiline glued string literal",
                "labels": [],
                "description": "This is kind of tricky case. Suppose I have the following Python snippet:\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n    foo='baz'))\n```\n\nEverything is fine here except warning \"7:5: E122 continuation line missing indentation or outdented\" about `foo` keyword argument of `format`. In fact the only indentation accepted by `pep8` for it is 4 spaces to the right relatively to the start of the string literal, i.e.\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n         foo='baz'))\n```\n\nWhat is suspicious to me is that for any other kind of first argument of `func` that spans several physical lines, there are _two_ positions for `foo` accepted by `pep8`: 4 characters to the right of previous physical line and 4 characters to the right relatively to `func`. E.g. for dict literal\n\n``` python\n# Both cases are valid for pep8\nfunc({'foo': 1,\n      'bar': 2}.update(\n    foo='baz'))\n\n\nfunc({'foo': 1,\n      'bar': 2}.update(\n          foo='baz'))\n```\n\nor `dict` constructor:\n\n``` python\n# Both cases are valid for pep8\nfunc(dict(foo=1,\n          bar=2).update(\n    foo='baz'))\n\n\nfunc(dict(foo=1,\n          bar=2).update(\n              foo='baz'))\n```\n\nMoreover if I merely wrap glued string literal in parenthesis, `pep8` doesn't complain about normal indentation anymore, i.e.\n\n``` python\n# It's ok however\nfunc(('{foo} '\n     'bar').format(\n    foo='baz'))\n```\n\nFour space indentation relative to the start of `func` seems more natural to me and in my opinion it doesn't violate any PEP-8 guidelines. Am I wrong? Is it done so intentionally?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 373,
                "title": "False positive \"E203 whitespace before ':' \" on list slice.",
                "labels": [
                    "needs patch"
                ],
                "description": "I've encountered the problem in the following code:\n\n``` python\na = [1, 2, 3, 4, 5]\nb = a[1+1 : 2+2]  # E203\nc = a[1 + 1 : 2 + 2]  # E203\nd = a[1+1:2+2]\n```\n\nHowever, PEP8 chapter https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements handles this as good style:\n\n> However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted.\n> \n> Yes:\n> \n> ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n> ham[lower:upper], ham[lower:upper:], ham[lower::step]\n> ham[lower+offset : upper+offset]\n> ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n> ham[lower + offset : upper + offset]\n> No:\n> \n> ham[lower + offset:upper + offset]\n> ham[1: 9], ham[1 :9], ham[1:9 :3]\n> ham[lower : : upper]\n> ham[ : upper]\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 370,
                "title": "Check E228 only detects a missing whitespace on the left site of the modulo operator",
                "labels": [],
                "description": "At the moment `\"sometext %s\"%\"testing` will be detected by E228. This is correct.\n\nAt the moment `\"sometext %s\" %\"testing` will not be detected by E228. This is not correct.\n\nBecause of the description of E228 (`missing whitespace around modulo operator`) the check has to detect missing whitespaces on the left site and on the right site of the modulo operator.\n\nAt the moment E228 only detects missing whitespaces on the left site of the modulo operator.\n\nTested with latest PEP8 version (`1.5.7`).\n\n```\n% cat testing\n\"sometext %s\"%\"testing\"\nsometext %s\" %\"testing\"\nsometext %s\" % \"testing\"\n\n% pep8 --select E228 testing \ntesting:1:14: E228 missing whitespace around modulo operator\n```\n\nE225 is working like expected:\n\n```\n% pep8 --select E225 testing                                                                                                                            \ntesting:2:11: E225 missing whitespace around operator\ntesting:3:11: E225 missing whitespace around operator\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 344,
                "title": "Enforce 72 character docstring line width",
                "labels": [
                    "extension"
                ],
                "description": "PEP8 states:\n\n> For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.\n\nThe current implementation only enforces the maximum line length (`E501`). I'd like to suggest the addition of an `E503` error to enforce the restriction of these \"flowing long blocks of text.\"\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 332,
                "title": "Randomly indented comment lines are not flagged",
                "labels": [
                    "needs patch"
                ],
                "description": "foo.py:\n\n```\nif True:\n    if True:\n            # bah\n        pass\n```\n\n$ pep8 foo.py\n\nOriginally posted on autopep8: https://github.com/hhatto/autopep8/issues/169 (I can't see that comment indentation is in PEP8 itself, so I understand if this isn't something that you want to flag!)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 338,
                "title": "E211 not detected in line with print statement/function",
                "labels": [
                    "undecided"
                ],
                "description": "pep8 doesn't detect E211 (whitespace before \u2018(\u2018 ) in this file\n\n```\nfrom __future__ import print_function\n\nprint ('abc')\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 321,
                "title": "False negative for extraneous whitespace around colon",
                "labels": [
                    "feature"
                ],
                "description": "@anthonymayer reported this in hhatto/autopep8#156.\n\n`example.py`:\n\n``` python\nx = [1, 2, 3, 4]\nx[1: 3]\n```\n\nI would expect a message about extraneous whitespace after the colon, but `pep8` seems to report nothing.\n\n```\n$ pep8 --version\n1.5.7\n$ pep8 example.py\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 636,
                "title": "Assumes 4 space indent.",
                "labels": [],
                "description": "I know that's the pep8 spec.. but we've got 2 space indent dictated at my work.  That breaks some things.  it'd be better to provide some sort of override rather than have magic numbers in the code... e.g. if hang > 4: on line 512."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 231,
                "title": "Relaxing E701 and E302 -- allowing one-liners",
                "labels": [
                    "undecided",
                    "feature"
                ],
                "description": "PEP8 allows you to type a bunch of dummy one-liners like this:\n\n```\nclass CustomException(Exception): pass\nclass AnotherException(Exception): pass\nclass YetAnotherException(Exception): pass\n```\n\nBut this code raises E701 (compound statement) and E302 (two lines between classes) errors. I propose to leave compound statements intact if they are a bunch of class/def definitions. This is what I've done in this pull request of autopep8 project: https://github.com/hhatto/autopep8/pull/87, but it wasn't merged since pep8 seems to be a better place for that.\n\nThis is not easy to implement since the current framework doesn't allow you to look at the next logical line. This is necessary because you need to look at previous and next line to determine if a definition is alone or inside a bunch of definitions.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 631,
                "title": "Should this line trigger some sort of linting error?",
                "labels": [],
                "description": "I had a hard time finding something in pep8 that would forbid this (and pycodestyle itself doesn't trigger a lint) but deep down inside I feel it surely should :)\r\n\r\n```python\r\n[(a,)for a in y]\r\n```\r\n\r\nMaybe something like \"expected spaces around keyword `for`\"?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 604,
                "title": "Nested indents are not correctly validated",
                "labels": [],
                "description": "Indentation in nested structures such as\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n    'item1', 'item2', 'item3'])\r\n```\r\nare not marked as incorrect.\r\n\r\nEven though PEP8 doesn't explicitly states this case, it's clear conflict of two indentations - outer (function args) and inner (second argument).\r\n\r\nCorrectly should be aligned\r\n```python\r\nfoo(very_long_name_of_first_argument,\r\n    ['item1', 'item2', 'item3'])\r\n```\r\nor\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n        'item1',\r\n        'item2',\r\n        'item3',\r\n    ])\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 588,
                "title": "E201 not detected for tab instead of space",
                "labels": [],
                "description": "`printf 'foo(\\tbar)\\n' | pep8 -`\n\u2192 nothing detected\n\nwhile\n`printf 'foo( bar)\\n' | pep8 -`\ndetects stdin:1:5: E201 whitespace after '('\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 586,
                "title": "E101 wrong line detected",
                "labels": [],
                "description": "[E101.txt](https://github.com/PyCQA/pycodestyle/files/558374/E101.txt)\n\n```\n$ pep8  --max-line-length=220 --select E101 /tmp/E101.txt \n/tmp/E101.txt:10:1: E101 indentation contains mixed spaces and tabs\n```\n\nIt tells line 10 is wrong while the actually wrong lines are 2,3,5,6.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 582,
                "title": "E261 ignores tab/space mix",
                "labels": [],
                "description": "```\nprintf 'foo = \"bar\" \\t# comment\\n' | pep8 -\n```\n\nI expected the following output but got nothing:\n\n```\nstdin:1:12: E261 at least two spaces before inline comment\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 570,
                "title": "if and opening bracket without a space",
                "labels": [],
                "description": "Expanding on https://github.com/PyCQA/pycodestyle/issues/371#issuecomment-137404784 by @methane, the following are not flagged as erroneous:\n\n``` python\nif(1 == 2):\n    pass\n\nif[1, 2]:\n    pass\n\nif{1, 2}:\n    pass\n\nfor(a, b) in [(1, 2), (3, 4)]:\n    pass\n```\n\npep8 doesnt appear to clearly reject the first two (parentheses), however it goes against the recommendation of `if (` in the line continuation section.\n\ni.e. the following is not appropriate according to pep8, but it doesnt use extremely strong wording regarding this.\n\n``` python\nif(foo or\n        bar):\n    pass\n```\n\npep8 says:\n\"When the conditional part of an `if` -statement is long enough to require that it be written across multiple lines, it's worth noting that the combination of a two character keyword (i.e. `if` ), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional.  This can produce a visual conflict with the indented suite of code nested inside the if -statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the if -statement.  Acceptable options in this situation include, but are not limited to:\" _(and then it includes examples all containing_ `if (` _.)_\n\nThe `further` there indicates that the `if (` is expected, and of course the examples throughout all use `if (`.\nIronically pycodestyle does take an explicit position on further visually distinguishing subsequent lines. \n\nFor the unassigned data-structures, there is less in pep8 regarding whether they should be surrounded by space.  A single space is required around `=`, `:`, and `,`, and prevented when immediately inside a function call, so that addresses most cases of unassigned data-structures.  But it doesnt address when unassigned data-structures are used immediately near a keyword like `if` or `for`.\n\nI suspect some revision to the pep8 style guide is appropriate, but the fine people here can surely help bring other perspectives to this aspect of the style guide before trying to refine the style guide.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 531,
                "title": "Update (remove?) the GitHub project wiki",
                "labels": [],
                "description": "@SylvainDe [pointed out](https://github.com/PyCQA/pycodestyle/issues/518#issuecomment-223338961) in #518 that:\n\n> Also, wiki still has references to pep8 : https://github.com/PyCQA/pycodestyle/wiki . Not sure if better to  have one bug open to track all these issues or one bug per issue.\n\nThis made me think that perhaps the wiki content should be moved into other, better locations such as the pycodestyle docs themselves, and in the case of the related tools, possible the [PyCQA/meta](https://github.com/PyCQA/meta) repo which renders [here](http://meta.pycqa.org/en/latest/introduction.html)?\n\nAny objections to moving away from the wiki pages?\n\n/cc @sigmavirus24 \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 506,
                "title": "Some better handling of error in the configuration file",
                "labels": [
                    "needs patch"
                ],
                "description": "So, I have left some merge conflict markers in my `setup.cfg` and this how the pep8 (run through flake8) dealt with it:\n\n```\nConfigParser.py:546:_read:ParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nTraceback (most recent call last):\n  File \"/usr/bin/flake8\", line 9, in <module>\n    load_entry_point('flake8==2.0', 'console_scripts', 'flake8')()\n  File \"/usr/lib/python2.7/site-packages/flake8/main.py\", line 21, in main\n    flake8_style = get_style_guide(parse_argv=True, config_file=DEFAULT_CONFIG)\n  File \"/usr/lib/python2.7/site-packages/flake8/engine.py\", line 76, in get_style_guide\n    styleguide = StyleGuide(**kwargs)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1788, in __init__\n    arglist, parse_argv, config_file, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 2074, in process_options\n    options = read_config(options, args, arglist, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1999, in read_config\n    if config.read(os.path.join(parent, fn) for fn in PROJECT_CONFIG):\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 305, in read\n    self._read(fp, filename)\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 546, in _read\n    raise e\nParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nLocal variables in innermost frame:\nsectname: 'flake8'\ncursect: OrderedDict([('__name__', 'flake8'), ('ignore', ['E402,N806,N803,N802,E501']), ('tag_build', ['.dev']), ('tag_svn_revision', ['1'])])\ne: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\nfpname: '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg'\nvi: '='\nmo: None\noptname: 'tag_svn_revision'\nfp: <open file '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg', mode 'r' at 0x2d07b70>\nlineno: 12\nline: ''\nself: <ConfigParser.RawConfigParser instance at 0x2d522d8>\noptval: '1'\n```\n\nIs the traceback really the best solution, couldn't we have some civilized way of dealing with errors?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 480,
                "title": "Allow noqa for all line checks",
                "labels": [
                    "needs patch"
                ],
                "description": "Up front, there has been a lot of discussion about this topic in issues (including but not limited to): #28 #180 #231 #376 #381 #472.\n\nWith the two largest types of responses having been: \"yes this definitely needs to be a feature\" and \"users should not add this much noise to their code\".\n\nI've thought about it quite a bit, and I believe that as a tool, it should be up to the user / developer to decide when it is appropriate to use these disables. Therefore I am creating this issue as a target to produce a pull request allowing noqa for any lines in a file / for all classes of errors, and will be closing the other issues which have (at least generally) not produced pull requests.\n\nNote that at a minimum, any pull request being considered should: pass all the tests, update the documentation accordingly, add no additional dependencies, and add no significant overhead to the performance of the code. With the stickiness of this issue, and the variety of feelings on the matter, expect that any proposed pull requests will likely get a good deal of scrutiny.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 785,
                "title": "Relax E127 with dictionary values: allow extra indent",
                "labels": [],
                "description": "Currently pycodestyle will complain about the following:\r\n\r\n```python\r\nmydict = {12345:\r\n              'foo'}\r\n```\r\n\r\n> t-61.py:2:15: E127 continuation line over-indented for visual indent\r\n\r\nWe are about to change this in https://github.com/Vimjas/vim-python-pep8-indent/pull/61, and there has been some discussion in https://github.com/python/peps/pull/113 - resulting in keeping this out of PEP8 itself (i.e. undefined).\r\n\r\nI think pycodestyle should handle this in a relaxed way, and allow for an extra indentation level for dictionary values (after `:` on the previous line)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 458,
                "title": "Do not report E302 occurring on first logical line",
                "labels": [],
                "description": "67b8be8 introduced an exception for E302 if the\nfirst top level function or class was preceded\nwith only one comment line.\n\nPEP 263 explicitly allows for two lines of comments\nat the top of a module, in order to support a\nhash-bang and an encoding declaration.\n\nWhen the first top level function or class appears on the\nfirst logical line, i.e. preceded only by comments, E302\nshould not be reported as the pep8 utility typically\nignores comments appearing anywhere in the code being checked.\n\nFixes #412\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 457,
                "title": "PEP 8 Inspection over-generalizes blank lines around functions",
                "labels": [],
                "description": "PEP 8 only requires blank lines around \"top-level function and class definitions\" and \"method definitions inside a class\". However, pep8 marks any function without a line above it as failing the rule.\n\nThis is especially troublesome for functions that are inside other functions or methods, because they are often short and have no reason for a line above:\n\n``` python\ndef test():\n    def success_callback():  # no need for blank line above\n        print('Success! A wonderful thing has completed!')\n    def error_callback():  # no need for blank line above\n        print('Error! The entire program is crashing around us!')\n    run_async_function(success_callback, error_callback)\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 448,
                "title": "pep8 has conflicting definitions of a docstring",
                "labels": [],
                "description": "pep8 has\n- `DOCSTRING_REGEX` (used by `blank_lines`) which only allows `u` & `r` prefixes.  pep257 doesnt appear to exclude `b`, but it also doesnt explicitly mention it as allowed.\n- `is_string_literal` (used by `module_imports_on_top_of_file`) which strictly matches the Python 2 string prefix pattern that includes `u`, `r` & `b`\n\n`DOCSTRING_REGEX` dates back to 58a7812c, and the same rough restriction goes back to d8ee2baf in 2009.\n\n`is_string_literal` is from 2014 (1ee296bc).  I dont see any discussion on https://github.com/PyCQA/pep8/pull/304 regarding why `r` should now be appropriate for a docstring, and should be different from `blank_lines`.\n\nConsider\n\n``` python\nb\"\"\"foo\"\"\"\n\n# `blank_lines` uses DOCSTRING_REGEX, which only allows `u` & `r` prefixes\n\nimport sys\n\n\nclass Foo(object):\n\n    b\"\"\"Foo.\"\"\"\n    def blah(self):\n        pass\n\n    r\"\"\"Foo.\"\"\"\n    def baz(self):\n        pass\n\n    a = 1\n    r\"\"\"Foo.\"\"\"\n    def hmmm(self):\n        pass\n```\n\nOnly one pep8 result:\n\n```\ntest.py:11:5: E301 expected 1 blank line, found 0\n    def blah(self):\n    ^\n```\n\nFirstly, I have not found the part of pep8 which allows a docstring on the line preceding a function.\n\nQuite the opposite actually.  Regarding docstrings, pep8 does say \"This comment should appear after the def line.\"\n\nIf there is reason for docstrings on the preceding line, I then cant see why `b` should be excluded according to pep8, or pep257 if read as literally as seems very common around here, but of course it is very silly and should be excluded for common sense reasons, in both `blank_lines` and `module_imports_on_top_of_file`, and anywhere else relating to docstrings.\n\nAnd finally regarding this segment of the `blank_lines` code, allowing `a = 1` above is clearly a bug.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 438,
                "title": "Blank lines between methods definitions",
                "labels": [],
                "description": "In pep8.py is:\n\"Method definitions inside a class are separeted by a single blank line\"\n\nbut in https://www.python.org/dev/peps/pep-0008/ is\n\"Method definitions inside a class are surrounded by a single blank line.\"\n\nMaybe pep8 should work in different way in same cases:\n\n```\nclass LogsViewer(main.Main):\n                                                 #<- is this line needed?\n    def validate(self):\n        pass\n```\n\nbecause separated != surrounded\n\n**Updated because of misunderstanding** @doismellburning \n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 775,
                "title": "E303 too many blank lines (2)",
                "labels": [],
                "description": "quoting PEP 8 : \r\n\"_Surround top-level function and class definitions with two blank lines._\r\n\r\n_Method definitions inside a class are surrounded by a single blank line._\r\n\r\n_Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)._\"\r\n\r\nWhich may be usefull, for example, if you are used to split your function in really small unit accordingly to the SRP (and Clean Code book of Robert C. Martin).\r\n\r\nFor example if you have a snippet like this one, with a lot more of subfunction : \r\n\r\n\r\n```\r\nclass foo():\r\n    def usefull_function(self):\r\n        _sub_function_a()\r\n        _sub_function_b()    \r\n\r\n    def _sub_function_a(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_b(self):\r\n        #do_stuff\r\n\r\n\r\n    def other_function_with_subfunction(self):   # Two blank lines before this might be cleaner.\r\n        _sub_function_c()\r\n        _sub_function_d()\r\n\r\n    def _sub_function_c(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_d(self):\r\n        #do_stuff\r\n```\r\n\r\nThis snippet is here to give an example of why this can be used, but anyway, the PEP states it's ok.\r\n\r\n**Question :**\r\n- Should pycodestyle allow more blank lines that the recommandation (and not restriction)?\r\n\r\n**Options that could be implemented**\r\n- Selecting the number of exception to the recommandation that can be applied to a class (enhance the \"sparingly\" in the PEP8 quotation)\r\n- Selecting the max number of extra blank line before class, top-level function and method.\r\n\r\n**Pros :** \r\n- Real check of the PEP8.\r\n- Let you more option for clean code.\r\n\r\n**Cons :** \r\n- In the main use case, you want only one blank line before a def, and it will allow some wrong blank space to sneak in the code."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 432,
                "title": "Option --select=E901 works incorrectly if AST checking is enabled, e.g. via flake8",
                "labels": [],
                "description": "Option `--select=E901` works incorrectly when compilation is failed in `check_ast` method.\n\nIn this case error E901 is reported, but option `--select=E901` magically suppresses it.\nThis could be easily reproduced using, for example, `flake8` utility (which triggers `check_ast` call).\n\nConsider following sample file. It produces E901 error by `flake8` (by compile exception of type SyntaxError in `check_ast`):\n\n```\ndef f()\n    pass\n```\n\nBy default, we see syntax error with code E901 (and some other pep8 errors, which are filtered quite good by `--select`):\n\n```\ntest.py:1:7: E901 SyntaxError: invalid syntax\ntest.py:2:5: E113 unexpected indentation\n```\n\nAnd, if we wish to show only syntax errors via\n`flake8 --select=E901 <file>`, we will see NO errors at all. This is very-very frustrating. Errors filtering is implemented in `pep8` core, so `flake8` is irrelevant here (see https://gitlab.com/pycqa/flake8/issues/86 fir details)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 412,
                "title": "Multiline comment before class at the beginning of file triggers E302",
                "labels": [],
                "description": "Possibly a duplicate of #174.\n\nI may be misunderstanding something, but I understood this to be fixed a while ago. I'm using pep8 1.5.7. If I begin a file with\n\n``` python\n# comment comment comment comment comment comment comment comment comment comment\nclass Foo(object):\n    pass\n```\n\nIt says there is no syntax error. But if I wrap it to:\n\n``` python\n# comment comment comment comment comment comment comment comment\n# comment comment\nclass Foo(object):\n    pass\n```\n\nI get \"E302 expected 2 blank lines, found 0\" for the \"class\" line.\n\nWas this fixed? Is there a config opt that turns it off? I couldn't find it in the docs.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 408,
                "title": "false positive: E122 continuation line missing indentation or outdented",
                "labels": [],
                "description": "It seems there's a false positive for E122.\n\nConsider the following snippet\n\n``` python\n# pep8test.py\ndef foo(bar):\n    pass\n\n# valid:\n{\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n# valid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n}\n\n# valid:\n{\n    'time_london':\n        'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello',\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n\n# invalid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n```\n\nWhen running pep8 I get:\n\n```\npep8test.py:37:5: E122 continuation line missing indentation or outdented\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 758,
                "title": "E127: bugs?",
                "labels": [],
                "description": "New to Python, so sorry if I missed something, but E127 gives me trouble on two (probably related) occasions:\r\n\r\n### continuing a statement after backslash\r\n```\r\nassert self.foobar in ['bar', 'baz', 'befoozle'], \\\r\n        'Invalid foobar: {0}'.format(self.foobar)\r\nif demo:\r\n    normal_indent = 4 * space\r\n```\r\nHere, the continuation of ``assert`` is double-indented, in line with the usual practice of distinguishing indents due to breaks from those that follow program logic (as also discussed in PEP8 with slightly different examples). Is there a good reason ``pycodestyle`` doesn't like this (E127)?\r\n\r\n### aligning operators after backslash\r\n```\r\nself.foozle_timeout = max(self.foozles_left, 1) * foozle_time \\\r\n                      + self.foozle_tolerance\r\n```\r\nI understand that PEP8 recommends using parentheses/brackets/braces when possible, eliminating the need of a backslash. But still, it seems wrong that this is turned down (it follows the same operator alignment as in the PEP8 Knuth discussion, but without parentheses). If ``pycodestyle`` really wants to insist on using parentheses instead of a backslash here, it should do so explicitly, not by issuing E127.\r\n\r\nEDIT: Maybe I don't strictly have a cause to complain in the second issue, as this type of \"visual\" indent is discussed in PEP8 only in the context of aligning with opening delimiters. But I am not certain it should be forbidden, and the first issue seems unaffected."
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 403,
                "title": "\"E262 inline comment should start with '# '\" even though inline comment does start with '# '",
                "labels": [],
                "description": "to reproduce:\n\n```\n$ echo 'l = 1  #  foobar' | pep8 -\nstdin:1:8: E262 inline comment should start with '# '\n```\n\nThough evidently, the inline comment does start with `#` (hash followed by a space).\n\nPep8 itself also does not forbid an inline comment to have two spaces before the actual text starts.\n\nMy actual use case for starting an inline comment with two spaces after the hash are a snippet like the following:\n\n```\nl = [\n    \"foo\",  #  1\n    \"bar\",  #  2\n    ...\n    \"baz\",  # 10\n    ...\n]\n```\n\nThis is a minimal example which should demonstrate that allowing an inline comment with two leading spaces is useful in case one wants to right-align numbers. Having each line commented like above is useful because in case an error happens, the error will point out the element in the list from where the error originated. Since the list is several hundred elements long and its elements are not just simple strings as above, the comments make it easier to find the right element.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 396,
                "title": "Allow \"empty\" file to have a \\n character",
                "labels": [],
                "description": "W292 and W391 are conflicting when it comes to \"empty\" files. Normally empty files are not that useful. However in Python, it's often useful to have an empty `__init__.py` to declare a folder as a package without necessarily putting any logic there (In a perfect world those file would contain a docstring).\n\nWe could debate whether or not an \"empty\" file should contain a `\\n` or not. However, I don't see any real practical implication and think pep8 should simply accept both.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pycodestyle",
                "id": 391,
                "title": "Variable-length encoding (like UTF-8) confuses E128",
                "labels": [],
                "description": "E128 gets confused with variable-lenght (with multi-byte) encoding, such as UTF-8. Using a multi-byte character makes PEP8 return an E128 warning of under-indent. Tests show that it expects one more space for each multi-byte character, consistent with UTF-8 double-bytes for the extended I'm using.\n\nApparently PEP8 is either ignoring the shebang line or using len() directly with UTF-8 string without converting to unicode first (even with the 'u' prefix).\n\nExample `pep8utf8.py`:\n\n``` python\n# -*- coding: utf-8 -*-\n_EPSILON = {'pressao': {'psig': 1,\n                        'kPag': 5},  # No error here\n            'press\u00e3o': {'psig': 1,\n                        'kPag': 5},  # Error\n            }\n\n```\n\nRunning `pep8 --show-source pep8utf8.py` yields:\n\n```\npep8utf8.py:5:25: E128 continuation line under-indented for visual indent\n                        'kPag': 5},  # Error\n                        ^\n```\n\n**Note 1:** I have tried using unicode strings, but the error is still there.\n**Note 2:** Python 2.7.6 |Anaconda 2.1.0 (32-bit)| (default, Nov 11 2013, 10:50:31) [MSC v.1500 32 bit (Intel)] on win32\n"
            }
        ]
    },
    "PyCQA/pydocstyle": {
        "all": [
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 326,
                "title": "Use module filepath basename sans ext in is_public",
                "labels": [],
                "description": "See issue #323\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 185,
                "title": "Check __doc__ assignments",
                "labels": [],
                "description": "Is it worth checking runtime assignments to `__doc__`?\n\nOne obscure case which could be an error is explicit setting of `__doc__` to a literal where an implicit docstring would suffice.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 319,
                "title": "Add recognition of non-numpy section names and warn about them",
                "labels": [],
                "description": "Numpy has a set of supported section names. We should warn about non-numpy ones, such as:\r\n```\r\nProgrammer Remarks\r\n------------------\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 275,
                "title": "Add Google docstring convention ",
                "labels": [],
                "description": "There are lots of projects out there using the google docstring convention. Given numpy has been recently added under #129, this is a request to add the google docstring convention.\r\n\r\nComparison between the two can be found [here](http://sphinxcontrib-napoleon.readthedocs.io/en/latest/index.html#google-vs-numpy)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 152,
                "title": "Handle PEP263-Style Encoding Directive",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 159,
                "title": "Invalid syntax in function and class definition does not report invalid syntax but raise AttributeError",
                "labels": [],
                "description": "If there is invalid syntax pep257 may report \"invalid syntax in file test.py\". \n\nHowever, with syntax error in the function of class definition an AttributeError is raised: \n\n```\n$ pep257 test.py\nTraceback (most recent call last):\n  File \"/usr/local/bin/pep257\", line 11, in <module>\n    sys.exit(main())\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 1605, in main\n    sys.exit(run_pep257())\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 1275, in run_pep257\n    errors.extend(check((filename,), select=checked_codes))\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 1216, in check\n    for error in PEP257Checker().check_source(source, filename):\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 1313, in check_source\n    module = parse(StringIO(source), filename)\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 259, in __call__\n    return self.parse_module()\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 409, in parse_module\n    children = list(self.parse_definitions(Module, all=True))\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 348, in parse_definitions\n    yield self.parse_definition(class_._nest(self.current.value))\n  File \"/usr/local/lib/python2.7/dist-packages/pep257.py\", line 445, in parse_definition\n    if self.current.kind in (tk.NEWLINE, tk.COMMENT):\nAttributeError: 'NoneType' object has no attribute 'kind'\n```\n\n`test.py` could be: \n\n```\ndef function()\n    pass\n```\n\nor \n\n```\nclass Class()\n    pass\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 163,
                "title": "How to use pep257 with user-provided docstrings (e.g. from C extensions)?",
                "labels": [],
                "description": "I'd like to verify docstrings from C extensions, if possible with pep257. Is there a (simple) way to do this?\n\nI guess that I should first build and import the C extension, which is not a problem in my case. Can I somehow pass a docstring (e.g. from an imported module) to a checker function in pep257? I know that pep257 is designed as a static code checker but it would be nice to use it in other circumstances as well, even if that involves a little hacking.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 166,
                "title": "quotation mark at start or end of docstring",
                "labels": [
                    "Minor (New Feature)"
                ],
                "description": "The new D403 (#165) triggers an error when an extra quotation mark is in the docstring, such as `\"\"\"\"...\"\"\"`\n\nIf the docstring has an extra quotation mark at the end ( `\"\"\"...\"\"\"\"`) it will trigger D400, only if it is a one-line docstring.\n\nThe following does not generate a pep257 error:\n\n```\ndef blah():\n    \"\"\"Foo.\n\n    Extra line.\n    \"\"\"\"\n```\n\nI think it would be useful to have a separate error code for either of those, as they are a specific case that is more of an error than a style issue, and there is less chance that the new code would be included in an ignore list.\n\nI've found (and fixed) these quad-quotes in many projects that have large development teams and quality code review, [even in cpython](http://bugs.python.org/issue25494).  And I am guilty of adding one.  They slip through because they are hard to spot, by the coder and by reviewers; over-quotation-blindness or something.\n\nfwiw, there is also a [pep8 PR](https://github.com/PyCQA/pep8/pull/428) which will catch these, but again it is an indirect error rather than a specific check.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 171,
                "title": "Allow to filter some method names too (like files or dirs)",
                "labels": [],
                "description": "This will allow the tool to be used in groups where have the convention of not documenting methods like **init**, or \"private_*\", or whatever weird name they may use.\n\nSo, being able to pass something like \"--ignore-methods=foo_\" or \"--ignore-methods=___\" would be great.\n\nThanks!\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 195,
                "title": "support stdin",
                "labels": [],
                "description": "If `pydocstyle` could be invoked with `-` to indicate to read the content which should be linted from `stdin` that would enable better integration of the tool in various editors. E.g. on-the-fly linting (with now need to save the file explicitly) in Atom: AtomLinter/linter-pydocstyle#34\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 177,
                "title": "tests break in Python 3 environment",
                "labels": [],
                "description": "Hi, `test_integration` breaks in a Python 3 environment:\n\n```\n--- a/src/tests/test_integration.py\n+++ b/src/tests/test_integration.py\n@@ -100,7 +100,7 @@\n @pytest.yield_fixture(scope=\"module\")\n def install_package(request):\n     cwd = os.path.join(os.path.dirname(__file__), '..', '..')\n-    install_cmd = \"python setup.py develop\"\n+    install_cmd = \"python3 setup.py develop\"\n     uninstall_cmd = install_cmd + ' --uninstall'\n     subprocess.check_call(shlex.split(install_cmd), cwd=cwd)\n     yield\n```\n\nBTW a new Debian package of pydocstyle is coming up.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 189,
                "title": "Allow special handling of __init__ methods",
                "labels": [],
                "description": "When rendering documentation using [Sphinx autodoc](http://www.sphinx-doc.org/en/stable/ext/autodoc.html), the `__init__` method is handled in a special way. The way it is handled depends on the value of [`autoclass_content`](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#confval-autoclass_content).\n\nConsider the following simple class:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nIf `autoclass_content` is set to `both`, this seems very legitimate. However, `pep257` complains about this:\n\n```\n$ pep257 spam.py \nspam.py:17 in public method `__init__`:\n        D400: First line should end with a period (not ':')\nspam.py:17 in public method `__init__`:\n        D205: 1 blank line required between summary line and description (found 0)\n```\n\nInstead, `autoclass_content` can be set to `class` and everything can be moved into the class docstring.\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    Args:\n        bar: the bar to handle using foo.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        ...\n```\n\nBut this will trigger the following warning:\n\n```\nspam.py:20 in public method `__init__`:\n        D102: Missing docstring in public method\n```\n\nAnd the last variant:\n\n``` py\nclass Foo:\n    def __init__(self, bar):\n        \"\"\"\n        A class for handling all sorts of foos and bars.\n\n        Because foos and bars are complicated enough.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\ntriggers this:\n\n```\n$ pep257 spam.py \nspam.py:9 in public class `Foo`:\n        D101: Missing docstring in public class\n```\n\nAs a workaround I've applied this:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Initialize the foo.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nBut I think that's simply very ugly.\n\nI think `__init__` should not be treated as a magic or public method, but as a separate use case.\n\nAdditionally I think it makes sense to add a rule to forbid a docstring on `__init__` methods. This makes sense when using the `class` value for `autoclass_content`, which is the default.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 274,
                "title": "Automatic inheritance of docstrings",
                "labels": [],
                "description": "I am using [custom_inherit](https://github.com/meowklaski/custom_inherit) package to automatically inherit docstrings. It would be great if pydocstyle could somehow detect that and not issue a D102 error on such methods.\r\n\r\nI think this could be done by some simple heuristic and configuration:\r\n* allowing to specify a list of decorators, which if they are applied to a method make D102 not be made\r\n* allow to list name of a base class/metaclass used, and if it is used, D102 is not made\r\n\r\nThis might be simpler than #185 and would require only a basic check without really do dynamic analysis of the code."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 318,
                "title": "Numpy sections order should be verified",
                "labels": [],
                "description": "http://www.numpy.org/devdocs/docs/howto_document.html:\r\n\r\n>  Each heading should be underlined in hyphens, and the section ordering should be consistent with the description below"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 344,
                "title": "Type Hints!",
                "labels": [],
                "description": "Adding type hints to the codebase."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 268,
                "title": "Command-line option to show active checks",
                "labels": [],
                "description": "As discussed in issue #267, there is currently no easy way to interrogate the command-line tool to ask what checks are active. Please add such an option.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 272,
                "title": "WIP: Use Pipenv instead of pip and requirements.txt",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 271,
                "title": "improve experience when attempting install on python2.6",
                "labels": [],
                "description": "follow up to https://github.com/PyCQA/pydocstyle/issues/206\r\n\r\n- [ ] add `python_requires='>=2.7` to `setup.py` https://stackoverflow.com/a/42792413/1585509\r\n- [ ] try to fail early with nice message if installed with older pip/setuptools ?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 252,
                "title": "Include documentation and tests in source distribution",
                "labels": [],
                "description": "This will make the source distribution on PyPI (e.g.: [pydocstyle-2.0.0.zip](https://pypi.python.org/packages/b0/33/52e2fa5662fbb2a8bc9bdfe31327cd58c2f856b31851b73fc5baf86a2a14/pydocstyle-2.0.0.zip#md5=2be57712e2743d23949bafed957d8c86)) complete and stand-alone.\r\n\r\nAlso, this would be very useful for distribution packages of pydocstyle since one could run the tests against the currently installed version of pydocstyle while building the package.\r\n\r\nIn addition, one could also build and include the documentation if desired.\r\n\r\nFor a wider perspective, see [my Fedora review request for pydocstyle](https://bugzilla.redhat.com/show_bug.cgi?id=1409654)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 265,
                "title": "Support stdin via hyphen as filename.",
                "labels": [],
                "description": "Originally, I was looking to use pydocstyle in vim without using other plugins, and couldn't find a good way to pipe stdin. Eventually noticed that this was raised already in [issues/195](https://github.com/PyCQA/pydocstyle/issues/195). Proposed behavior is to use `-` as a 'filename' argument to notify that stdin is being piped. This might be too hacky, feel free to decline if this is the case!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 255,
                "title": "Use PEP 257 parsing algorithm for docstring",
                "labels": [],
                "description": "PEP 257 has a [specification of how tools should parse a docstring](https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation). This includes:\r\n\r\n* Leading and trailing blank lines is ignored.\r\n* Leading and trailing white space is ignored.\r\n* Determine the first line after stripping leading and trailing space and blank lines.\r\n\r\nThe \u201cD210\u201d check currently violates this; it complains when the docstring contains leading or trailing space. Such docstrings are explicitly supported by the PEP 257 specification.\r\n\r\nPlease ensure the tool parses a docstring using an algorithm conformant with the PEP 257 specification.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 249,
                "title": "Tool to automatically fix pydocstyle identified issues? autopep257",
                "labels": [],
                "description": "Just like ``pycodestyle`` (formerly known as ``pep8``) has a sister tool ``autopep8`` (https://github.com/hhatto/autopep8), is there anyone working on a sister tool to ``pydocstyle`` which can automatically fix some of the issues this reports?\r\n\r\nIf the BDFL does not object, it could be called ``autopep257`` :grin:"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 224,
                "title": "Display number of violations per file",
                "labels": [],
                "description": "(First: excellent tool, thanks for making it!)\r\n\r\nWe have a large code base in python that I am trying to clean up every now and then. \r\n\r\nI'd like the feature to suppress normal output and print number of violations per file so that I can sort and start working on the worst one. \r\n\r\nWhat I would like is:\r\n\r\n    $ pydocstyle -c *.py\r\n    file1.py:0\r\n    file2.py:2\r\n    file3.py:14\r\n    [...]\r\n\r\nCompare with grep:\r\n\r\n    # 1 - normal usage\r\n    $ grep pattern *.txt\r\n    file2.txt:pattern\r\n    file2.txt:pattern\r\n    file3.txt:pattern\r\n    [...]\r\n\r\n    # 2 - from man page: \"Suppress normal output; instead print a count...\"\r\n    $ grep -c pattern *.txt\r\n    file1.txt:0\r\n    file2.txt:2\r\n    file3.txt:14\r\n\r\n    # 3 - with some command line magic I get a top list:\r\n    $ grep -c pattern *.txt | tr ':' '\\ ' | awk '{print $2 \" \" $1}' | sort -n -r\r\n    14 file3.txt\r\n    2 file2.txt\r\n    0 file1.txt\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 323,
                "title": "Publicity and privacy derived from modules seems wrong",
                "labels": [],
                "description": "Based on the current implementation, the module `_private.py` here is considered public\r\n\r\n```\r\npublicpackage\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 _private.py  # D100 for no docstring\r\n\u2514\u2500\u2500 public.py\r\n```\r\n\r\nsince `publicpackage` is considered public. With the current definition of a private module, it is impossible to have them under any public top-level package namespace. Should this be the case, though?\r\n\r\nFurthermore, let's consider a single private module `_module.py` with the contents\r\n\r\n```python\r\n# _module.py\r\ndef not_public():  # I get a D103 error.\r\n    pass\r\n```\r\n\r\nThe function `not_public` should not require a docstring because its only parent is private; however, `pydocstyle _module.py` would still yield a `D103` error.\r\n\r\nI will note that I can get around this by defining `__all__` to be empty, which is more explicit and probably a good practice even inside of a private module. That is, I can change `_module.py` to contain\r\n\r\n```python\r\n# _module.py\r\n__all__ = []  # Export nothing.\r\n\r\ndef not_public():  # No more D103!\r\n    passs\r\n```\r\n\r\nand I won't get the `D103` error anymore. That being said, this still isn't the behavior outlined [in the documentation](https://github.com/PyCQA/pydocstyle/blob/master/docs/snippets/publicity.rst).\r\n\r\nIt'd be nice to not get yelled at by `pydocstyle` while I'm working on an idea inside of a private submodule of my public package!\r\n\r\nThank you!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 299,
                "title": "Accept args to config.parse()",
                "labels": [],
                "description": "The `parse()` method could accept args that it can proxy to `_parse_args(args)` which would allow pydocstyle to more easily be run in-process.\r\n\r\nRight now it's hard to correctly parse the config, without pydocstyle reading `sys.argv`\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 240,
                "title": "WIP: Use Jedi as the underlying parser",
                "labels": [],
                "description": "WIP, description to come."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 331,
                "title": "Added PEP526-Styled ```__all__``` Support",
                "labels": [],
                "description": "PyDocStyle fails to run if the file it scans uses an ```__all__``` that is structured like ```__all__: list = [...]```. Since variable annotations ([PEP526](https://www.python.org/dev/peps/pep-0526/)) are permitted in Python, PyDocStyle should not fail to run due to an annotated ```__all__```."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 229,
                "title": "Add check for 79 character line length",
                "labels": [],
                "description": "This is a pull request from #228 \r\n\r\nThis is really a PEP8 conformance, and even then this isn't checking strict conformance (72 character doc strings), but I thought maybe 79 character length strings wouldn't be to controversial."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 282,
                "title": "Update index.rst documentation",
                "labels": [],
                "description": "Update documentation"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 208,
                "title": "Add CLI option for custom config file paths",
                "labels": [],
                "description": "Added a section in the docs for it too. It overrides the generic-named config files in the custom file's folder.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 221,
                "title": "Strip whitespace in _fix_set_options",
                "labels": [],
                "description": "This allows to specify e.g. \"ignore\" on multiple lines, without adding\r\nadditional commas:\r\n\r\n    [pydocstyle]\r\n    ignore = D100,D101,D102,D103,\r\n      # \"1 blank line required before class docstring\"\r\n      # Disabled by default, conflicts with D211.\r\n      D203,\r\n      # \"Multi-line docstring summary should start at the second line\" (vs. D212).\r\n      D213,\r\n\r\nCurrently you would have to use:\r\n\r\n    ignore = D100,\r\n        ,D101,\r\n        ,D102,\r\n\r\nTODO:\r\n - [ ] doc\r\n - [ ] test"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 219,
                "title": "Provide `flake8` Plugin",
                "labels": [
                    "Minor (New Feature)"
                ],
                "description": "I was thinking that we should provide our own plugin to `flake8` instead of `flake8-docstrings`. It would solve issues like #207 where we break `flake8-docstrings` by accident.\n\nAlso, there is an issue that bothers me with the current `flake8` plugin - it ignores `pydocstyle` configuration files. While other projects might use configuration files as just a handy way of typing less, in `pydocstyle` the configuration files allow for flexible styles over different directories in a project. I personally don't use `flake8` over `pydocstyle` at work because of this issue. \n\nThere is an issue of how error selection might work in conjunction with `flake8`. If a `pydocstyle` config file specifies `ignore=D100`, would the plugin simply not yield D100 errors? What happens when `flake8` is run with `select=D100`? It would not have any effect. Another option is using the configuration files' selection _unless_ `flake8` is used with `pydocstyle` error selection. Yet another way is to treat `flake8`'s selections as `add-*` so that it amends the selection in the configuration files instead of replacing or masking them.\n\n@sigmavirus24 Any thoughts? I'm currently leaning toward the last one - i.e., `pydocstyle` config file is read, then amended by `flake8` CLI (or config files).\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 295,
                "title": "You forgot to mark the latest tags as releases",
                "labels": [],
                "description": "It looks like the 2.1.1 and 2.1.0 tags were intended to be marked as releases, however you forgot to mark them as such. As a result:\r\n\r\n- https://github.com/pyenv/pyenv/releases shows 2.0.0 with the \"Latest release\" badge, not 2.1.1.\r\n- Other tools that use GitHub Releases instead of tags also think 2.0.0 is the latest release, e.g. https://sibbell.com/github/PyCQA/pydocstyle/releases/\r\n\r\nAfter this is fixed for these particular tags, you can automate this for future tags using e.g. https://docs.travis-ci.com/user/deployment/releases/ so it doesn't accidentally happen again.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 198,
                "title": "Separate error for missing docstring on nested (Meta) classes",
                "labels": [],
                "description": "In django the usage of a nested Meta class is pretty common, however adding docstrings to those classes is just silly.\n\nWould be nice to have it separated from normal classes so we could turn off the need for a docstring there.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 298,
                "title": "Add style checker rule to make sure we have the blank line before starting doctests.",
                "labels": [],
                "description": "Add style checker test to make sure we have the blank line before starting doctests."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 117,
                "title": "Command line argument to specify config file",
                "labels": [
                    "Hacktoberfest",
                    "Minor (New Feature)"
                ],
                "description": "It would be nice to be able to select a config file via a command argument. A feature like this exists for pep8 so something similar would be nice.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 339,
                "title": "Add pypy3",
                "labels": [],
                "description": "Thanks for submitting a PR!\r\n\r\nPlease make sure to check for the following items:\r\n- [ ] Add unit tests and integration tests where applicable.  \r\n      If you've added an error code or changed an error code behavior,\r\n      you should probably add or change a test case file under `tests/test_cases/` and add \r\n      it to the list under `tests/test_definitions.py`.  \r\n      If you've added or changed a command line option,\r\n      you should probably add or change a test in `tests/test_integration.py`.\r\n- [ ] Add a line to the release notes (docs/release_notes.rst) under \"Current Development Version\".  \r\n      Make sure to include the PR number after you open and get one.\r\n   \r\nPlease don't get discouraged as it may take a while to get a review.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 301,
                "title": "D401 should be avoided for property",
                "labels": [],
                "description": "`pydocstyle` yields \r\n\r\n> D401 First line should be in imperative mood\r\n\r\nfor properties docstrings such as\r\n```\r\n    @property\r\n    def config(self):\r\n        \"\"\"Configuration dictionary.\"\"\"\r\n        return {'x': self.x, 'y': self.y}\r\n```\r\nOf course the docstring could be changed to \r\n`Return the configuration dictionary.`, or `Get the configuration dictionary.`,\r\nbut this imperative mood seems less natural, \r\nbecause properties are used as attributes, not functions.\r\n\r\nThis was already mentioned in\thttps://github.com/PyCQA/pydocstyle/issues/68#issuecomment-51980479, but lost below other considerations.\r\n\r\nSome ignore D401 altogether because of this issue: https://github.com/flycheck/flycheck/commit/79e5cd45e69cfed89048a47e0a922e0ef781a611\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 328,
                "title": "Validate docstrings set in property function's doc argument",
                "labels": [],
                "description": "pydocstyle (and the associated flake8-docstyle plugin) do not check the ``doc`` argument of the ``property`` function.\r\n\r\nhttps://docs.python.org/2/library/functions.html#property\r\n\r\nhttps://docs.python.org/3/library/functions.html#property\r\n\r\nThe ``doc`` argument will be used as the docstring of the new object's property, and therefore would ideally be written following the same conventions as the rest of the code base.\r\n\r\nI would therefore like pydocstyle to valid the ``doc`` argument like other docstrings.\r\n\r\nTest Case\r\n=========\r\n\r\n```python\r\n\"\"\"Minimal test case for pydocstyle and property function.\"\"\"\r\n\r\nimport random\r\n\r\n\r\nclass Dog(object):\r\n    \"\"\"Minimal test class for pydocstyle and property function.\"\"\"\r\n\r\n    def __init__(self):\r\n        \"\"\"Initialize a Dog instance.\"\"\"\r\n        pass\r\n\r\n    def _pick_noise(self):\r\n        try:\r\n            return self._noise\r\n        except AttributeError:\r\n            self._noise = random.choice([\"woof\", \"bark\", \"whine\", \"howl\"])\r\n        return self._noise\r\n\r\n    def _set_noise(self, value):\r\n        self._noise = value\r\n\r\n    noise = property(fget=_pick_noise, fset=_set_noise,\r\n                     doc=\"Returns a dog noise, picked at random at first use\")\r\n\r\n\r\ndogs = [Dog(), Dog(), Dog()]\r\nprint(\"The dogs go: %s\" % \", \".join(d.noise for d in dogs))\r\n# Confirm once picked the random noise is the same,\r\nprint(\"Every day these dogs go: %s\" % \", \".join(d.noise for d in dogs))\r\n```\r\n\r\nActual result\r\n=============\r\n\r\n```\r\n$ pydocstyle --version\r\n2.1.1\r\n$ pydocstyle example.py ; echo \"Return code $?\"\r\nReturn code 0\r\n```\r\n\r\nExpected result\r\n===============\r\n\r\nSomething like this:\r\n\r\n```\r\n$ pydocstyle example.py ; echo \"Return code $1\"\r\nexample.py:23 in public property `noise`:\r\n        D400: First line should end with a period (not 'e')\r\nReturn code 1\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 305,
                "title": "Please give us feedback about AST change in Python 3.7 ",
                "labels": [],
                "description": "In Python 3.6, docstring was expression in AST.\r\n\r\n    FunctionDef(name='foo', ..., body=[Expr(value=Str(s='docstring'))], ...)\r\n\r\nSince docstring is special and it's unclear that expression is docstring or not, we changed AST in 3.7a1.\r\ndocstring is moved from body to field. ([bpo-29463](https://bugs.python.org/issue29463))\r\n\r\n    FunctionDef(name='foo', ..., body=[], ..., docstring='docstring')\r\n\r\nBut it removed syntactic information about docstring (e.g. lineno).  We are considering changing it again.  Docstring is moved back to body, but it is special statement named `DocString(s)`. `Expr(value=Str(s))` is not docstring. ([bpo-32911](https://bugs.python.org/issue32911))\r\n\r\n    FunctionDef(name='foo', ..., body=[DocString(s='docstring')], ...)\r\n\r\nIt means tools broken by 3.7a1 will be broken again.  But 3.7b3 will be the last chance to change AST.\r\n\r\nHow do you think about it?  Please give comment / vote on [the issue tracker](https://bugs.python.org/issue32911)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 307,
                "title": "Feature request: Command line option to pipe default configuration to stdout",
                "labels": [
                    "Minor (New Feature)"
                ],
                "description": "Could we add a command line option to output the default configuration similar to how `pylint` does (to get a config file containing the default config with e.g. `pylint --generate-rcfile > .pylintrc`)?\r\n\r\n    pylint -h\r\n        --generate-rcfile   Generate a sample configuration file according to the\r\n                            current configuration. You can put other options\r\n                            before this one to get them in the generated\r\n                            configuration."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 22,
                "title": "Ignore test files even if they are not in the top level",
                "labels": [],
                "description": "Currently, pep258 only ignores files if they are in the same directory in which pep257.  This ignores all test files in subdirectories as well.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 329,
                "title": "Issues recognizing __all__ if PEP484 is applied",
                "labels": [],
                "description": "If [PEP484](https://www.python.org/dev/peps/pep-0484/) ( https://www.python.org/dev/peps/pep-0484/ ) type hints are applied to `__all__`, PyDocStyle does not see `__all__: list`. PyDocStyle should be modified to recognize `__all__` even with type hints applied ([PEP484](https://www.python.org/dev/peps/pep-0484/)).\r\n\r\n`WARNING: Error in file /media/collier/PROJECTS/PyBooster/pylib/astronomy.py: Could not evaluate contents of __all__.`"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 70,
                "title": "File encoding should be detected correctly",
                "labels": [],
                "description": "pep257 fails to open a file with an unicode arrow:\n\n```\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 17236: character maps to <undefined>\n```\n\nThis is because Windows uses the cp1252 encoding by default, but my source file is encoded as utf-8.\n\nInstead of just calling `open()` on the file, it should detect the correct encoding according to [PEP263](http://legacy.python.org/dev/peps/pep-0263/) and open it with that encoding.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 310,
                "title": "WIP: run checks in parallel",
                "labels": [],
                "description": "Using multiprocessing.Pool to run tests in parallel. For me, it cut the time to run pydocstyle from 30 seconds to 5.\r\n\r\nWIP because I don't think this should be the default mode, but wasn't sure what would be good configuration/command line flags to use.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 111,
                "title": "Files passed as arguments ignored by --match",
                "labels": [],
                "description": "It looks like when you pass specific filenames to pep257, it ignores if you have set the `--match` option.\n\nFor example:\n\n```\npep257 foo.py bar.py --match='(?!foo).*\\.py'\n```\n\n Will still check foo.py and bar.py. While I understand why this makes sense, since there is a default match pattern that ignores 'test_._', and you want to be able to easily use pep257 on a file prefixed with 'test_._' if desired, iit means that pep257 doesn't perform as one might expect when using something like xargs to pass a bunch of files into it.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 294,
                "title": "pytdocstyle.org blocked as harmful",
                "labels": [],
                "description": "Charter Spectrum blocked the website as harmful.  Any idea what's going on?\r\nHarmful web site blocked\r\nhttp://pydocstyle.org\r\nThis web site has been reported as harmful. \r\nWe recommend that you do not visit this web site.\r\n\r\n https://transparencyreport.google.com/safe-browsing/search?url=pydocstyle.org doesn't report any issues."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 178,
                "title": "Check for D302 if at Python 3.3+ and using explicit unicode prefix.",
                "labels": [],
                "description": "Since Python 3.3, Unicode string literal prefixes have been reintroduced, but D302 is exclusively reported for Python 2.\n\nThis proposes an implementation to report D302 if and only if a Unicode prefix has been explicitly added to the docstring for Python 3. The behavior of D302 for Python 2 is not changed.\n\nThis also adds some test cases to the already existing Unicode integration test (pypy3 currently implements Python 3.2, only). To avoid code duplication, this has been implemented as a single test case with multiple checks. Let me know if you would like to see those in separate tests.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 284,
                "title": "False negatives for D402",
                "labels": [],
                "description": "The following function fails the D402 check with version 0.7.0:\r\n\r\n```py\r\ndef subclasses(cls):\r\n    \"\"\"Retrieve all subclasses (direct and transitive) from `cls`.\r\n\r\n    :param cls: The class to search.\r\n    :type cls: ``type``\r\n\r\n    :returns: A generator of subclasses.\r\n    :rtype: ``iter`` of ``type``\r\n    \"\"\"\r\n    for subclass in cls.__subclasses__():\r\n        for subsubclass in subclasses(subclass):\r\n            yield subsubclass\r\n        yield subclass\r\n```\r\n\r\nPresumably the D402 rule just sees the method name followed by an lparen?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 188,
                "title": "Adding D405 and D406 to check return values/args",
                "labels": [],
                "description": "D405 will error if a function has a return statement but does not\ndefine a return value in the docstring.\n\nD406 will error if a function has arguments defined but not mentioned\nin the docstring.\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 189,
                "title": "Allow special handling of __init__ methods",
                "labels": [],
                "description": "When rendering documentation using [Sphinx autodoc](http://www.sphinx-doc.org/en/stable/ext/autodoc.html), the `__init__` method is handled in a special way. The way it is handled depends on the value of [`autoclass_content`](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#confval-autoclass_content).\n\nConsider the following simple class:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nIf `autoclass_content` is set to `both`, this seems very legitimate. However, `pep257` complains about this:\n\n```\n$ pep257 spam.py \nspam.py:17 in public method `__init__`:\n        D400: First line should end with a period (not ':')\nspam.py:17 in public method `__init__`:\n        D205: 1 blank line required between summary line and description (found 0)\n```\n\nInstead, `autoclass_content` can be set to `class` and everything can be moved into the class docstring.\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    Args:\n        bar: the bar to handle using foo.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        ...\n```\n\nBut this will trigger the following warning:\n\n```\nspam.py:20 in public method `__init__`:\n        D102: Missing docstring in public method\n```\n\nAnd the last variant:\n\n``` py\nclass Foo:\n    def __init__(self, bar):\n        \"\"\"\n        A class for handling all sorts of foos and bars.\n\n        Because foos and bars are complicated enough.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\ntriggers this:\n\n```\n$ pep257 spam.py \nspam.py:9 in public class `Foo`:\n        D101: Missing docstring in public class\n```\n\nAs a workaround I've applied this:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Initialize the foo.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nBut I think that's simply very ugly.\n\nI think `__init__` should not be treated as a magic or public method, but as a separate use case.\n\nAdditionally I think it makes sense to add a rule to forbid a docstring on `__init__` methods. This makes sense when using the `class` value for `autoclass_content`, which is the default.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 274,
                "title": "Automatic inheritance of docstrings",
                "labels": [],
                "description": "I am using [custom_inherit](https://github.com/meowklaski/custom_inherit) package to automatically inherit docstrings. It would be great if pydocstyle could somehow detect that and not issue a D102 error on such methods.\r\n\r\nI think this could be done by some simple heuristic and configuration:\r\n* allowing to specify a list of decorators, which if they are applied to a method make D102 not be made\r\n* allow to list name of a base class/metaclass used, and if it is used, D102 is not made\r\n\r\nThis might be simpler than #185 and would require only a basic check without really do dynamic analysis of the code."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 252,
                "title": "Include documentation and tests in source distribution",
                "labels": [],
                "description": "This will make the source distribution on PyPI (e.g.: [pydocstyle-2.0.0.zip](https://pypi.python.org/packages/b0/33/52e2fa5662fbb2a8bc9bdfe31327cd58c2f856b31851b73fc5baf86a2a14/pydocstyle-2.0.0.zip#md5=2be57712e2743d23949bafed957d8c86)) complete and stand-alone.\r\n\r\nAlso, this would be very useful for distribution packages of pydocstyle since one could run the tests against the currently installed version of pydocstyle while building the package.\r\n\r\nIn addition, one could also build and include the documentation if desired.\r\n\r\nFor a wider perspective, see [my Fedora review request for pydocstyle](https://bugzilla.redhat.com/show_bug.cgi?id=1409654)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 229,
                "title": "Add check for 79 character line length",
                "labels": [],
                "description": "This is a pull request from #228 \r\n\r\nThis is really a PEP8 conformance, and even then this isn't checking strict conformance (72 character doc strings), but I thought maybe 79 character length strings wouldn't be to controversial."
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 282,
                "title": "Update index.rst documentation",
                "labels": [],
                "description": "Update documentation"
            },
            {
                "repo_url": "https://github.com/PyCQA/pydocstyle",
                "id": 117,
                "title": "Command line argument to specify config file",
                "labels": [
                    "Hacktoberfest",
                    "Minor (New Feature)"
                ],
                "description": "It would be nice to be able to select a config file via a command argument. A feature like this exists for pep8 so something similar would be nice.\n"
            }
        ]
    },
    "PyCQA/pyflakes": {
        "all": [
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 370,
                "title": "Detect broken string interpolation and formatting",
                "labels": [],
                "description": "Verify simple cases, such as: `\"%s: %s\" % (foo, bar, baz)` and `\"{foo}: {bar}\".format(foo=\"foo\", baaar=\"baz\")`. \r\n\r\nThis is done by asking Python to do the formatting, filling in the arguments with dummy objects.\r\n\r\nThe testing for `.format` string is skipped for Python3 but should be rather easy to add; I want to get an idea of whether you like the current approach first.\r\n\r\nResolves #148 "
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 280,
                "title": "Unreported undefined name in __all__",
                "labels": [],
                "description": "Pyflakes was unable to detect undefined name in `__all__` when there exist undefined name outside of it. This make me need to use pyflakes 2 times to really detect all the errors. \r\n\r\nFor example, given this code...\r\n\r\n```python\r\nfrom math import * # contain sin, cos, and csc\r\n__all__ = ['sin', 'cos']\r\ncsc(1)\r\n```\r\n\r\nPyflakes will report \r\n\r\n```\r\ntest.py:1: 'from math import *' used; unable to detect undefined names\r\ntest.py:5: 'csc' may be undefined, or defined from star imports: math\r\n```\r\n\r\nAccording to that, the code just have 2 \"error\", which is usage of `*` import and `csc` is undefined.\r\nIf I then fix the code \r\n\r\n```python\r\nfrom math import csc\r\n__all__ = ['sin', 'cos']\r\ncsc(1)\r\n```\r\n\r\nThen additional error shown up\r\n\r\n```\r\ntest.py:3: undefined name 'cos' in __all__\r\ntest.py:3: undefined name 'sin' in __all__\r\n```\r\n\r\nWhich then could finally fixed by\r\n\r\n```python\r\nfrom math import csc, cos, sin\r\n__all__ = ['sin', 'cos']\r\ncsc(1)\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 175,
                "title": "False positive undefined name after del in branch",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [dimaqq](https://launchpad.net/~dimaqq) (@dimaqq?) on [Launchpad](https://bugs.launchpad.net/bugs/1308508):*\n\n------------------------------------\n\nConsider this test code:\n\n```python\ndef foo():\n    bar = 1\n    if 0:\n        del bar\n    else:\n        del bar\n```\n\npyflakes reports test.py:6: undefined name 'bar', that is 2nd `del bar` is considered in error.\n\nunderstandably it is impossible to analyse all code paths in general case, so how about tagging `bar` as `uncertain if label is present` and allowing to `del` it?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 170,
                "title": "\"Dead code\" after a return",
                "labels": [
                    "enhancement"
                ],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1274566):*\n\n------------------------------------\n\nIs there a reason pyflakes doesn't warn on \"dead code\", i.e., code that cannot possibly be run because it comes after a return or a raise in the same block, like\n\n```python\ndef f():\n    return\n    g() # cannot be reached\n```\n\nI think return, raise, break, and continue are all such statements.  \n\nIn a similar vein (should this be a separate issue?), what about unnecessary pass, like\n\n```python\nif x:\n    pass\n    f()\n```\n\nInline non-string literals or bare variable names might also fit into this category, although the latter can be a useful way to squash incorrect \"unused variable\" warnings.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 249,
                "title": "global/local syntax errors not caught",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1590549):*\n\n------------------------------------\n\nThis is perhaps a bit obscure, but here's a class of syntax errors that aren't caught by pyflakes\n\n```\n$ cat test.py\ndef test(x):\n    global x\n$ pyflakes test.py\n$ python test.py\n  File \"test.py\", line 2\n    global x\nSyntaxError: name 'x' is parameter and global\n```\n\nI'm unsure what the full set of possible errors are here. One would need to check the Python source. I know there are some others relating to the Python 3 \"nonlocal\" keyword as well.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 367,
                "title": "Python 3.8: AttributeError: 'Checker' object has no attribute 'CONSTANT'",
                "labels": [],
                "description": "pyflakes is completely broken when run against Python 3.8 (not released yet, built from git master):\n\n```console\n$ echo 24 | python3.8 -m pyflakes\nTraceback (most recent call last):\n  File \".../lib/python3.8/runpy.py\", line 192, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \".../lib/python3.8/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \".../lib/python3.8/site-packages/pyflakes/__main__.py\", line 5, in <module>\n    main(prog='pyflakes')\n  File \".../lib/python3.8/site-packages/pyflakes/api.py\", line 203, in main\n    warnings = check(sys.stdin.read(), '<stdin>', reporter)\n  File \".../lib/python3.8/site-packages/pyflakes/api.py\", line 73, in check\n    w = checker.Checker(tree, filename)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 533, in __init__\n    self.handleChildren(tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 881, in handleChildren\n    self.handleNode(node, tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 928, in handleNode\n    handler(node)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 881, in handleChildren\n    self.handleNode(node, tree)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 927, in handleNode\n    handler = self.getNodeHandler(node.__class__)\n  File \".../lib/python3.8/site-packages/pyflakes/checker.py\", line 749, in getNodeHandler\n    self._nodeHandlers[node_class] = handler = getattr(self, nodeType)\nAttributeError: 'Checker' object has no attribute 'CONSTANT'\n```\n\nRelevant Python bug: https://bugs.python.org/issue32892"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 139,
                "title": "Detect misuse of except",
                "labels": [
                    "python2"
                ],
                "description": "\n*Original report by [mithrandi](https://launchpad.net/~mithrandi) (@mithrandi?) on [Launchpad](https://bugs.launchpad.net/bugs/848455):*\n\n------------------------------------\n\nIt would be nice if pyflakes could detect mistakes like this:\n\n       try:\n           oldtime = os.path.getmtime(fname)\n       except OSError, IOError:\n           oldtime = 0\n\nIn the general case, it's obviously difficult to tell whether this is an error or not; but I suspect that handling the exception variable name as a binding would give you a \"redefinition of Foo\" warning in most of the cases where a mistake has been made.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 357,
                "title": "Some syntax errors are not reported when linting from stdin",
                "labels": [],
                "description": "Minimal reproduction (at least for Python 2.7.12 on Ubuntu 16.04 using pyflakes 2.0.0):\r\n\r\n```python\r\nmax(1 for i in range(10), key=lambda x: x+1)\r\n```\r\n\r\nwill not report the syntax error \"Generator expression must be parenthesized if not sole argument\" if piped into stdin as follows:\r\n\r\n```bash\r\necho 'max(1 for i in range(10), key=lambda x: x+1)' | pyflakes\r\n```\r\n\r\ninstead failing with a decoding error. However, this is not handled well by many integrations which parse pyflakes output for a lineno and offset.\r\n\r\nIt looks like there was an assumption in 2009 (from b73a3d12) that if `text is None`, then it's necessarily a decoding issue. I've yet to debug exactly why this specific class of syntax error does not include the text when reading from stdin.\r\n\r\nEDIT: just confirmed this affects python3 as well (using Python 3.7.0 on Alpine 3.8 using pyflakes 2.0.0)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 246,
                "title": "undefined name 'unicode' in \"wrong\" sys.version_info branch",
                "labels": [
                    "enhancement"
                ],
                "description": "\n*Original report by [cboltz](https://launchpad.net/~cboltz) (@cboltz?) on [Launchpad](https://bugs.launchpad.net/bugs/1585991):*\n\n------------------------------------\n\npyflakes makes it hard to check code that works on python 2 and 3 because some names are only defined in one version.\n\nFor example, take this little module:\n\n```python\nimport sys\n\ndef type_is_str(var):\n    ''' returns True if the given variable is a str (or unicode string when using python 2)'''\n    if type(var) == str:\n        return True\n    elif sys.version_info[0] < 3 and type(var) == unicode:  # python 2 also uses the 'unicode' type\n        return True\n    else:\n        return False\n```\n\npyflakes3 errors out with\n    undefined name 'unicode'\nwhile pyflakes2 validates this code successfully (because unicode is a valid name in py2).\n\nCan you make pyflakes a bit more intelligent so that it skips branches for the \"wrong\" version? Or, if that is too hard, add a way to skip a line marked with a special comment like\n    # PYFLAKES:IGNORE\n?\n\n(The py3 testing was done with python3-pyflakes-1.2.3.)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 267,
                "title": "finds mangled globals and freevars undefined/unused",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [tagrain](https://launchpad.net/~tagrain) on [Launchpad](https://bugs.launchpad.net/bugs/1675153):*\n\n------------------------------------\n\n*Please describe how you installed Flake8*\n\nExample:\n\n```\npython3 -m venv ~/.virtualenvs/flake8\nworkon flake8\npip install -U pip setuptools wheel\npip install flake8 flake8-commas\n```\n\n*Please provide the exact, unmodified output of `flake8 --bug-report`*\n\nnah\n\n*Please describe the problem or feature*\nflake8 thinks that mangled globals or freevars are undefined in:\n\n```python\ndef _Ham__spam(value):\n     value + ' yes mangling really works like this'\n\nclass Ham:\n     def foo(self, value):\n        return __spam(value)\n```\n\n*If this is a bug report, please explain with examples (and example code) what you expected to happen and what actually happened.*\n\nI expected __spam to be considered defined, because it is.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 248,
                "title": "F401 erroneously raised with \"import as\"",
                "labels": [],
                "description": "\n*Original report by [mforbes-physics](https://launchpad.net/~mforbes-physics) on [Launchpad](https://bugs.launchpad.net/bugs/1589186):*\n\n------------------------------------\n\nThe following code raises an F401 error.\n\n```python\nimport scipy.optimize\nimport scipy as sp\n\nprint(sp.optimize)\n```\n\nI don't see any obvious workaround.  I used to do:\n\n```python\nimport scipy.optimize\nsp = scipy\n\nimport numpy\n\nprint(sp.optimize)\n```\n\nbut now flake8 correctly flags the line \"sp = scipy\" as E402 module level import not at top of file, so this workaround is less useful.  (One could put all the module assignments at the end, but this is not very good for reading the code.)\n\nI seem to recall discussing this at some point but cannot find the old discussion.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 298,
                "title": "Incorrect unused import warning with `as`",
                "labels": [],
                "description": "If a package is imported with an alias, and a submodule of that package is imported separately, pyflakes does not understand when a use of the submodule occurs.\r\n\r\nThis is related to #137, but the opposite problem. Warnings are reported when they shouldn't.\r\n\r\nConsider this code:\r\n\r\n```python\r\nimport scipy as sp\r\nimport scipy.spatial.distance\r\n\r\nsp.spatial.distance.cdist(\r\n    [(1, 2), (3, 4)],\r\n    [(5, 6), (7, 8)],\r\n)\r\n```\r\n\r\nPyflakes incorrectly claims that `scipy.spatial.distance` is unused, despite being used on line 4:\r\n\r\n```\r\n$ pyflakes < ~/Desktop/pyflakes_import.py \r\n<stdin>:2: 'scipy.spatial.distance' imported but unused\r\n```\r\n\r\nDetails:\r\n```\r\n$ pyflakes --version\r\n1.6.0\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 247,
                "title": "Detect type hint comments: PEP484",
                "labels": [],
                "description": "\n*Original report by [w-thomas-q](https://launchpad.net/~w-thomas-q) on [Launchpad](https://bugs.launchpad.net/bugs/1587170):*\n\n------------------------------------\n\nHi,\n\nthanks for this really great tool!\nOne issues I stumbled upon was that type hints seem to be ignored / not detected.\nFor example, we have an import at the top of a file:\n\n    from typing import List\n\nAnd then later in an `__init__` function something like this:\n\n    self.scripts = []  # type: List[script.Script]\n\n\nNow running pyflakes (through flake8) gives me this error:\n\n    foo.py:4:1: F401 'List' imported but unused\n\n\nPEP484 defines this kind of type comments.\nIs there an option to enable type hint detection?\nOr can we have that as feature request? I guess I'm fine with type comments only for the time being, but of course a fully PEP484 compliant solution would be greatly appreciated :)\n\nThanks!\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 276,
                "title": "Incorrect F401/F822 results when `__all__` is defined from concatenated lists",
                "labels": [],
                "description": "Using Python 2.7.13 & pyflakes 1.5.0, and this testcase (extracted from [this file from isort](https://github.com/timothycrosley/isort/blob/0aca83884667f1b20605e3bbef48bacf4f8b77fa/isort/pie_slice.py)):\r\n```python\r\nimport sys\r\n\r\nPY2 = sys.version_info[0] == 2\r\nPY3 = sys.version_info[0] == 3\r\n\r\ncommon_exports = ['PY2', 'PY3', 'this_does_not_exist']\r\n\r\nif PY2:\r\n    from itertools import ifilter as filter\r\n    __all__ = common_exports + ['filter', 'this_does_not_exist_either']\r\nelse:\r\n    __all__ = common_exports\r\n```\r\n\r\n**Expected:**\r\n* `F822 undefined name 'this_does_not_exist' in __all__`\r\n* `F822 undefined name 'this_does_not_exist_either' in __all__`\r\n\r\n**Actual:**\r\n* No F822 errors displayed (when there should be two).\r\n* A false positive `F401 'itertools.ifilter as filter' imported but unused`.\r\n\r\nIt appears that flake8 ignores the `__all__` export entirely if it is defined from concatenated lists. ie:\r\n```python \r\n__all__ = [] + ['this_will_be_ignored']\r\n\r\n__all__ = ['so_will_this'] + []\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 235,
                "title": "Warn on \"raise StopIteration\"",
                "labels": [],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1515396):*\n\n------------------------------------\n\nPEP 479 (https://www.python.org/dev/peps/pep-0479/) changes \"raise StopIteration\" inside a generator to cause RuntimeError to be raised (previously, it would stop the generator, same as \"return None\").\n\nThis feature is so far only available as a `__future__` import in Python 3.5. \n\nDue to the way `__future__` imports work, it's not possible to use \"from __future__ import generator_stop\" and support Python < 3.5 at the same time.  Hence, a check on the source, i.e., pyflakes, is a good workaround (I guess there's also a deprecation warning which can be enabled, but checking code without running it is still useful). \n\nOne thing I'm still a little unclear about is if you'd ever still want to raise StopIteration legitimately, even with the new behavior. The fact that it's now a RuntimeError + a deprecation warning seems to indicate no to me, but I could be wrong.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 251,
                "title": "Programs in UTF-8 with no declared coding are accepted",
                "labels": [
                    "python2"
                ],
                "description": "\n*Original report by [aaroncrane](https://launchpad.net/~aaroncrane) on [Launchpad](https://bugs.launchpad.net/bugs/1608595):*\n\n------------------------------------\n\nIf a program's source uses UTF-8, but the file's encoding is not declared using a `coding` declaration, Pyflakes accepts the program as valid, even though Python itself refuses it.\n\n```\n$ file coding.py\ncoding.py: UTF-8 Unicode text\n$ cat coding.py\nprint \"\u00a1this file contains \u016dnicode!\"\n$ pyflakes --version\n1.2.3\n$ pyflakes coding.py\n$ python coding.py\n  File \"coding.py\", line 1\nSyntaxError: Non-ASCII character '\\xc2' in file coding.py on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n$\n```\n\nExpected outcome: Pyflakes should report a syntax error for such files.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 237,
                "title": "Warn on Unassigned `==` Expression as Statement",
                "labels": [],
                "description": "*Original report by [scoutoss](https://launchpad.net/~scoutoss) on [Launchpad](https://bugs.launchpad.net/bugs/1523001):*\r\n\r\n------------------------------------\r\n\r\nWorking with some NumPy code recently, I accidentally wrote this:\r\n\r\n```\r\n<build output array>\r\n<build mask array>\r\n\r\nout[mask] == NaN  # This should have been a single `=`, not a ==.\r\nreturn out\r\n```\r\n\r\nAfter a few minutes of debugging my NaN-less array, I realized that I had accidentally written `==` instead of `=`, turning my assignment statement into no-op comparison operator.\r\n\r\nI'd be nice if PyFlakes gave a warning for a statement that's just an expression performing an equality comparison.  There are very few cases where I'd expect that something like this is doing what the author intended.\r\n\r\nA more aggressive version of this check would be to warn on any expression that's just a binary operator.  The assumption there would be that the \"statement\" `a + b` is at best dead code, and at worst an operator with a highly non-obvious side-effect.\r\n\r\nI'd be happy to work on either version of this if there's support for it.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 236,
                "title": "detect \"referenced before assignment\" variables",
                "labels": [
                    "enhancement"
                ],
                "description": "\n*Original report by [spaceone](https://launchpad.net/~spaceone) (@spaceone?) on [Launchpad](https://bugs.launchpad.net/bugs/1522024):*\n\n------------------------------------\n\nAssume the following code:\n\n```python\ntry:\n    fd = open(filename, 'r')\nfinally:\n    if fd is not None:\n        fd.close()\n```\n\nThis would raise \"UnboundLocalError: local variable 'fd' referenced before assignment\" if opening the file fails e.g. because of no permissions/not existing files/etc..\nIt would be very nice if pyflakes detect this kind of error and warn about the use of 'fd' in the finally block if 'fd' is created inside of the try-block.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 231,
                "title": "maximum recursion depth exceeded in 1050 string join",
                "labels": [],
                "description": "\n*Original report by [jayvdb](https://launchpad.net/~jayvdb) (@jayvdb?) on [Launchpad](https://bugs.launchpad.net/bugs/1507827):*\n\n------------------------------------\n\nRunning current pyflakes on astroid results in maximum recursion depth exceeded on a test module.\n\nhttps://bitbucket.org/logilab/astroid/src/6d4e198bdc7091f36c2c24d911c5ee92b64847c2/astroid/tests/testdata/python2/data/joined_strings.py\n\n```\n$ pyflakes  astroid/tests/testdata/python2/data/joined_strings.py\nTraceback (most recent call last):\n  File \"/usr/bin/pyflakes\", line 9, in <module>\n    load_entry_point('pyflakes==1.0.0', 'console_scripts', 'pyflakes')()\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/api.py\", line 172, in main\n    warnings = checkRecursive(args, reporter)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/api.py\", line 129, in checkRecursive\n    warnings += checkPath(sourcePath, reporter)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/api.py\", line 96, in checkPath\n    return check(codestr, filename, reporter)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/api.py\", line 57, in check\n    w = checker.Checker(tree, filename)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 294, in __init__\n    self.handleChildren(tree)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 567, in handleChildren\n    self.handleNode(node, tree)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 609, in handleNode\n    handler(node)\n...\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 609, in handleNode\n    handler(node)\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 566, in handleChildren\n    for node in iter_child_nodes(tree, omit=omit):\n  File \"/usr/lib/python2.7/site-packages/pyflakes-1.0.0-py2.7.egg/pyflakes/checker.py\", line 80, in iter_child_nodes\n    if isinstance(field, ast.AST):\nRuntimeError: maximum recursion depth exceeded while calling a Python object\n```\n\nSetting sys.setrecursionlimit(2500) fixes the problem\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 355,
                "title": "Fix del builtin",
                "labels": [],
                "description": "The recent builtin rewrite had one regression, in that it allowed them to be deleted.\r\n\r\nThe first commit fixes that, but there are several builtins which can be deleted.\r\n\r\nThe second commit allows those builtins to be deleted without an UndefinedName being reported , which is an enhancement.\r\n\r\nThis also adds a test rig for determining which builtins can be deleted."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 209,
                "title": "shadowed variables not noticed after list comprehension",
                "labels": [
                    "python2"
                ],
                "description": "*Original report by [warner](https://launchpad.net/~warner) (@warner?) on [Launchpad](https://bugs.launchpad.net/bugs/1373143):*\r\n\r\n------------------------------------\r\n\r\nWith pyflakes-0.8.1 and python-2.7.8, the following test program gets the expected complaint:\r\n\r\n```python\r\nimport foo\r\nfoo()\r\ndef bar():\r\n\u00a0\u00a0\u00a0\u00a0a = 0\r\n\u00a0\u00a0\u00a0\u00a0#a = [1 for foo in []]\r\n\u00a0\u00a0\u00a0\u00a0for foo in []:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\r\n\u00a0\u00a0\u00a0\u00a0del a\r\n```\r\n\r\npyflakes t.py\r\nt.py:6: import 'foo' from line 1 shadowed by loop variable\r\n\r\nBut if you uncomment the list comprehension, the pyflakes complaints go away.\r\n\r\nI think the presence of the list comprehension should actually *increase* the number of complaints: \"foo\" is being shadowed in both the list comprehension and the for-loop.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 348,
                "title": "PyPy 5.10+ offset fixes",
                "labels": [],
                "description": "Fixes https://github.com/PyCQA/pyflakes/issues/346"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 289,
                "title": "Subtle output flushing issue in Python 3.4",
                "labels": [],
                "description": "I just tracked down and annoying behavior change that we got in using Pyflakes when we upgraded from Python 2 to Python 3 in the Zulip project.  It's related to interleaving stdout and stderr from pyflakes.  \r\n\r\nBasically we have a little pyflakes wrapper, `check_pyflakes`, that excludes certain warnings we're not interested in, by sending stdout and stderr to a pipe.  It suddenly stopped filtering lines correctly when we switched to Python 3, because we were interleaving the stdout/stderr output from `pyflakes`, and apparently in Python 3, the newline characters in the pyflakes output got interleaved wrong, and so the filtering filtered the wrong thing.  i.e. with code like `p = subprocess.Pipe([\"pyflakes\", ...], stdout=subprocess.PIPE, stderr=subprocess.STDOUT); for ln in p.readlines(): print(p)`, you'll end up with lines of pyflakes output like this:\r\n\r\n`b\"zproject/settings.py:95: 'from .prod_settings import *' used; unable to detect undefined nameszerver/views/users.py:49:39: invalid syntax\\n\"`\r\n\r\n(there should have been a `\\n` in `nameszerver`).\r\n\r\nHere's the commit I just merged into Zulip working around this issue, with details on the specifics:  https://github.com/zulip/zulip/commit/6de77db93fe20d747541309d952035f070a157f6\r\n\r\nSince I have found that needing to add a `sys.stdout.flush()` is a common type of new bug when switching to Python 3, I figured I'd report this, since I think the reason this stopped working is that Pyflakes needs such a statement added somewhere, and fixing this might save other folks moving to Python 3 some pain.\r\n\r\nI'm happy to provide more details on how to reproduce, but I think it should be easy to do with the `subprocess` invocation that we have in the pre-6de77db9 world.\r\n\r\nThanks for a great tool, and I hope this report helps!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 224,
                "title": "Highlighting decorators AND function declaration",
                "labels": [],
                "description": "\n*Original report by [pradyunsg](https://launchpad.net/~pradyunsg) (@pradyunsg?) on [Launchpad](https://bugs.launchpad.net/bugs/1489540):*\n\n------------------------------------\n\nI'm proposing marking ALL decorators AND function declaration on decorated duplicate declaration.\n\nSee https://github.com/DamnWidget/anaconda/issues/363 for context.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 222,
                "title": "--exclude flag to the command line",
                "labels": [],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1481052):*\n\n------------------------------------\n\nI know that pyflakes doesn't want to add support for excluding errors inside of scripts, but would you be open to adding the --exclude flag to the pyflakes command to exclude files? My situation is this. I want to run pyflakes automatically in the test suite (on Travis CI). However, there are some files that should be ignored (e.g., a compat.py file with a bunch of Python 2/3 compatibility importat that pyflakes gives a bunch of unused import and undefined name warnings for, and a bundled library that uses * imports, but which I'd rather just leave alone).  I tried using extended globbing in bash, but it seems it's not so easy to mix multiple !() globs, even with globstar enabled. Anyway, I couldn't figure out how to do it.\n\nI know I can use flake8, but it seems that flake8 --select=F doesn't actually include all pyflakes errors (like syntax errors).  I also kind of want to avoid flake8 just to reduce the temptation to test for pep8 errors. \n\nWould it be OK to add --exclude, like flake8 and pep8, which excludes files or directories, to the flake8 command? The --exclude flag in flake8/pep8 accepts a comma separate list of values, which seems kind of dumb to me (it makes more sense to just accept files from the command line, like \"pyflakes --exclude compat.py stuff/\", which could then be globbed), but I'm OK with keeping it that way if cross-compatibility is a concern.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 366,
                "title": "Exclude \"import ... as _\" from unused-imports",
                "labels": [],
                "description": "Similarly to #202/#335 (excluding `_` from unused-variable checks), it would be appreciated if `import ... as _` was excluded from unused-import checks.\r\n\r\nAn example use case is when the module is imported solely for side-effects, see e.g. https://github.com/matplotlib/matplotlib/pull/12249.\r\n\r\nExample repro (pyflakes 2.0 and master):\r\n```\r\n$ python -mpyflakes <(printf 'from foo import bar as _\\n')\r\n/proc/self/fd/11:1: 'foo.bar as _' imported but unused\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 178,
                "title": "Warn about defining a loop variable that steps on an outer variable.",
                "labels": [],
                "description": "\n*Original report by [wsanchez](https://launchpad.net/~wsanchez) (@wsanchez?) on [Launchpad](https://bugs.launchpad.net/bugs/1408774):*\n\n------------------------------------\n\nThis code may be worth a warning:\n\n```python\nfoo = 1\n\nfor foo in (2,3,4):\n    pass\n```\n\nIt's easy to accidentally step on a variable in a for loop, where usually one only uses the loop variable within the loop.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 297,
                "title": "Ignore unused imports in a try block with except ImportError",
                "labels": [
                    "enhancement"
                ],
                "description": "A common pattern is to try to import a module to see if it is installed, so code can fail early with a nice error message when it isn't. Something like\r\n\r\n```py\r\ntry:\r\n    import matplotlib\r\nexcept ImportError:\r\n    raise ImportError(\"matplotlib is required\")\r\n```\r\n\r\nThe `raise ImportError` could also be some code that uses a fallback. \r\n\r\nUnfortunately pyflakes gives an unused import warning for blocks like this. You can silence them by rewriting like\r\n\r\n```py\r\ntry:\r\n    import matplotlib\r\n    del matplotlib\r\nexcept ImportError:\r\n    raise ImportError(\"matplotlib is required\")\r\n```\r\n\r\nbut I think this pattern is common enough that pyflakes should just ignore unused imports if the import is inside a try block with an \"except ImportError\". \r\n\r\nIs there any risk of false negative here? As far as I can tell, the only point of \"unused import\" warnings is to avoid importing a module that you never actually use, which could add import times and unnecessary dependencies. But in this case, the import is very clearly done intentionally. "
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 346,
                "title": "Multiple test failures w/ pypy{,3}-6.0.0",
                "labels": [],
                "description": "```\r\n$ tox -e pypy\r\nGLOB sdist-make: /tmp/pyflakes/setup.py\r\npypy create: /tmp/pyflakes/.tox/pypy\r\npypy inst: /tmp/pyflakes/.tox/dist/pyflakes-2.0.0.zip\r\npypy installed: cffi==1.11.5,greenlet==0.4.13,pyflakes==2.0.0,readline==6.2.4.1\r\npypy runtests: PYTHONHASHSEED='444501725'\r\npypy runtests: commands[0] | pip install flake8==2.1.0 pep8==1.5.6\r\nCollecting flake8==2.1.0\r\n  Downloading https://files.pythonhosted.org/packages/8c/a7/bce19129cb750a4f0720440801de328eafb18dd6bb94638d7bd350a8eead/flake8-2.1.0.tar.gz\r\nCollecting pep8==1.5.6\r\n  Downloading https://files.pythonhosted.org/packages/c5/de/5bfd80ea3b7e3fdf76ba12c832be60b886a2651cb9badd11848ebd9d0d11/pep8-1.5.6-py2.py3-none-any.whl\r\nRequirement already satisfied: pyflakes>=0.7.3 in ./.tox/pypy/site-packages (from flake8==2.1.0) (2.0.0)\r\nCollecting mccabe>=0.2.1 (from flake8==2.1.0)\r\n  Using cached https://files.pythonhosted.org/packages/87/89/479dc97e18549e21354893e4ee4ef36db1d237534982482c3681ee6e7b57/mccabe-0.6.1-py2.py3-none-any.whl\r\nBuilding wheels for collected packages: flake8\r\n  Running setup.py bdist_wheel for flake8 ... done\r\n  Stored in directory: /home/mgorny/.cache/pip/wheels/1a/4c/c1/2126020602d3f40be5eed59aaf25c5decc4593de41a985312d\r\nSuccessfully built flake8\r\nInstalling collected packages: pep8, mccabe, flake8\r\nSuccessfully installed flake8-2.1.0 mccabe-0.6.1 pep8-1.5.6\r\npypy runtests: commands[1] | flake8 --version\r\n2.1.0 (pep8: 1.5.6, mccabe: 0.6.1, pyflakes: 2.0.0) PyPy 2.7.13 on Linux\r\npypy runtests: commands[2] | python setup.py test -q\r\nrunning test\r\nrunning egg_info\r\nwriting pyflakes.egg-info/PKG-INFO\r\nwriting dependency_links to pyflakes.egg-info/dependency_links.txt\r\nwriting entry points to pyflakes.egg-info/entry_points.txt\r\nwriting top-level names to pyflakes.egg-info/top_level.txt\r\nreading manifest file 'pyflakes.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwriting manifest file 'pyflakes.egg-info/SOURCES.txt'\r\nrunning build_ext\r\n.s....s.........................ss.........s....sss..ss.....s...sss.............s.......s........s.......s..............ss...sssssssssss.s.........s.......s..s......s....................s....................ss................................................................................................................s...F......F..F....................ss........................................................................................s.......s........s.......s..............ss...s....s.........................ss.........s....sss..ss.....s...sss.....s.......s......................Fs....F.....F...........F........\r\n======================================================================\r\nFAIL: test_indentationErrorInDoctest (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 358, in test_indentationErrorInDoctest\r\n    self.assertEqual(exc.col, 13)\r\nAssertionError: 14 != 13\r\n\r\n======================================================================\r\nFAIL: test_offsetWithMultiLineArgs (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 376, in test_offsetWithMultiLineArgs\r\n    self.assertEqual(exc1.col, 19)\r\nAssertionError: 20 != 19\r\n\r\n======================================================================\r\nFAIL: test_syntaxErrorInDoctest (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 330, in test_syntaxErrorInDoctest\r\n    self.assertEqual(exc.col, 26)\r\nAssertionError: 27 != 26\r\n\r\n======================================================================\r\nFAIL: test_eofSyntaxErrorWithTab (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 471, in test_eofSyntaxErrorWithTab\r\n    \"\"\" % (sourcePath, column, last_line)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, '/tmp/tmpzLc7m6:2:6: inval... != (1, '/tmp/tmpzLc7m6:2:5: inval...\r\n\r\nFirst differing element 1:\r\n'/tmp/tmpzLc7m6:2:6: invalid syntax\\n\\tfoo =\\n\\t    ^\\n'\r\n'/tmp/tmpzLc7m6:2:5: invalid syntax\\n\\tfoo =\\n\\t   ^\\n'\r\n\r\n- (1, '/tmp/tmpzLc7m6:2:6: invalid syntax\\n\\tfoo =\\n\\t    ^\\n')\r\n?                       ^                                -\r\n\r\n+ (1, '/tmp/tmpzLc7m6:2:5: invalid syntax\\n\\tfoo =\\n\\t   ^\\n')\r\n?                       ^\r\n\r\n\r\n======================================================================\r\nFAIL: test_multilineSyntaxError (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 431, in test_multilineSyntaxError\r\n    \"\"\" % (sourcePath, message)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, \"/tmp/tmpKVtrN2:8:11: end ... != (1, \"/tmp/tmpKVtrN2:8:11: EOF ...\r\n\r\nFirst differing element 1:\r\n\"/tmp/tmpKVtrN2:8:11: end of file (EOF) while scanning triple-quoted string literal\\n    '''quux'''\\n          ^\\n\"\r\n\"/tmp/tmpKVtrN2:8:11: EOF while scanning triple-quoted string literal\\n    '''quux'''\\n          ^\\n\"\r\n\r\n  (1,\r\n-  \"/tmp/tmpKVtrN2:8:11: end of file (EOF) while scanning triple-quoted string literal\\n    '''quux'''\\n          ^\\n\")\r\n?                        -------------   -\r\n\r\n+  \"/tmp/tmpKVtrN2:8:11: EOF while scanning triple-quoted string literal\\n    '''quux'''\\n          ^\\n\")\r\n\r\n======================================================================\r\nFAIL: test_errors_syntax (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 749, in test_errors_syntax\r\n    self.assertEqual(d, ('', error_msg, True))\r\nAssertionError: Tuples differ: ('', '/tmp/tmpJSmDhI/temp:1:6:... != ('', '/tmp/tmpJSmDhI/temp:1:5:...\r\n\r\nFirst differing element 1:\r\n'/tmp/tmpJSmDhI/temp:1:6: invalid syntax\\nimport\\n     ^\\n'\r\n'/tmp/tmpJSmDhI/temp:1:5: invalid syntax\\nimport\\n    ^\\n'\r\n\r\n- ('', '/tmp/tmpJSmDhI/temp:1:6: invalid syntax\\nimport\\n     ^\\n', 1)\r\n?                             ^                              -      ^\r\n\r\n+ ('', '/tmp/tmpJSmDhI/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n?                             ^                                    ^^^^\r\n\r\n\r\n======================================================================\r\nFAIL: test_errors_syntax (pyflakes.test.test_api.TestMain)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 749, in test_errors_syntax\r\n    self.assertEqual(d, ('', error_msg, True))\r\nAssertionError: Tuples differ: ('', '/tmp/tmp6iJma3/temp:1:6:... != ('', '/tmp/tmp6iJma3/temp:1:5:...\r\n\r\nFirst differing element 1:\r\n'/tmp/tmp6iJma3/temp:1:6: invalid syntax\\nimport\\n     ^\\n'\r\n'/tmp/tmp6iJma3/temp:1:5: invalid syntax\\nimport\\n    ^\\n'\r\n\r\n- ('', '/tmp/tmp6iJma3/temp:1:6: invalid syntax\\nimport\\n     ^\\n', True)\r\n?                             ^                              -\r\n\r\n+ ('', '/tmp/tmp6iJma3/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n?                             ^\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 626 tests in 4.000s\r\n\r\nFAILED (failures=7, skipped=65)\r\nTest failed: <unittest.runner.TextTestResult run=626 errors=0 failures=7>\r\nerror: Test failed: <unittest.runner.TextTestResult run=626 errors=0 failures=7>\r\nERROR: InvocationError: '/tmp/pyflakes/.tox/pypy/bin/python setup.py test -q'\r\n_____________________________________________________________________ summary _____________________________________________________________________\r\nERROR:   pypy: commands failed\r\n```\r\n\r\n```\r\n$ tox -e pypy3\r\nGLOB sdist-make: /tmp/pyflakes/setup.py\r\npypy3 create: /tmp/pyflakes/.tox/pypy3\r\npypy3 inst: /tmp/pyflakes/.tox/dist/pyflakes-2.0.0.zip\r\npypy3 installed: cffi==1.11.5,greenlet==0.4.13,pyflakes==2.0.0,readline==6.2.4.1\r\npypy3 runtests: PYTHONHASHSEED='3614297916'\r\npypy3 runtests: commands[0] | pip install flake8==2.1.0 pep8==1.5.6\r\nCollecting flake8==2.1.0\r\n  Cache entry deserialization failed, entry ignored\r\n  Using cached https://files.pythonhosted.org/packages/8c/a7/bce19129cb750a4f0720440801de328eafb18dd6bb94638d7bd350a8eead/flake8-2.1.0.tar.gz\r\nCollecting pep8==1.5.6\r\n  Cache entry deserialization failed, entry ignored\r\n  Using cached https://files.pythonhosted.org/packages/c5/de/5bfd80ea3b7e3fdf76ba12c832be60b886a2651cb9badd11848ebd9d0d11/pep8-1.5.6-py2.py3-none-any.whl\r\nRequirement already satisfied: pyflakes>=0.7.3 in ./.tox/pypy3/site-packages (from flake8==2.1.0) (2.0.0)\r\nCollecting mccabe>=0.2.1 (from flake8==2.1.0)\r\n  Cache entry deserialization failed, entry ignored\r\n  Using cached https://files.pythonhosted.org/packages/87/89/479dc97e18549e21354893e4ee4ef36db1d237534982482c3681ee6e7b57/mccabe-0.6.1-py2.py3-none-any.whl\r\nBuilding wheels for collected packages: flake8\r\n  Running setup.py bdist_wheel for flake8 ... done\r\n  Stored in directory: /home/mgorny/.cache/pip/wheels/1a/4c/c1/2126020602d3f40be5eed59aaf25c5decc4593de41a985312d\r\nSuccessfully built flake8\r\nInstalling collected packages: pep8, mccabe, flake8\r\nSuccessfully installed flake8-2.1.0 mccabe-0.6.1 pep8-1.5.6\r\npypy3 runtests: commands[1] | flake8 --version\r\n2.1.0 (pep8: 1.5.6, mccabe: 0.6.1, pyflakes: 2.0.0) PyPy 3.5.3 on Linux\r\npypy3 runtests: commands[2] | python setup.py test -q\r\nrunning test\r\nrunning egg_info\r\nwriting pyflakes.egg-info/PKG-INFO\r\nwriting dependency_links to pyflakes.egg-info/dependency_links.txt\r\nwriting entry points to pyflakes.egg-info/entry_points.txt\r\nwriting top-level names to pyflakes.egg-info/top_level.txt\r\nreading manifest file 'pyflakes.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwriting manifest file 'pyflakes.egg-info/SOURCES.txt'\r\nrunning build_ext\r\n.....................................s...........ss..s.........s.s.sss..................s..................s......s.................s....s....................s......s.....................................s...s.............s...............................s...................................................................s...F......F..F................s...s.............s...............................s...................................................s..................s......s..............................................s...........ss..s.........s.s.....s.......s.......................Fs....FFF...F...........F........\r\n======================================================================\r\nFAIL: test_indentationErrorInDoctest (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 358, in test_indentationErrorInDoctest\r\n    self.assertEqual(exc.col, 13)\r\nAssertionError: 14 != 13\r\n\r\n======================================================================\r\nFAIL: test_offsetWithMultiLineArgs (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 376, in test_offsetWithMultiLineArgs\r\n    self.assertEqual(exc1.col, 19)\r\nAssertionError: 20 != 19\r\n\r\n======================================================================\r\nFAIL: test_syntaxErrorInDoctest (pyflakes.test.test_doctests.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_doctests.py\", line 330, in test_syntaxErrorInDoctest\r\n    self.assertEqual(exc.col, 26)\r\nAssertionError: 27 != 26\r\n\r\n======================================================================\r\nFAIL: test_eofSyntaxErrorWithTab (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 471, in test_eofSyntaxErrorWithTab\r\n    \"\"\" % (sourcePath, column, last_line)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, '/tmp/tmpucswcorh:2:6: invalid syntax\\n\\tfoo =\\n\\t    ^\\n') != (1, '/tmp/tmpucswcorh:2:5: invalid syntax\\n\\tfoo =\\n\\t   ^\\n')\r\n\r\nFirst differing element 1:\r\n'/tmp/tmpucswcorh:2:6: invalid syntax\\n\\tfoo =\\n\\t    ^\\n'\r\n'/tmp/tmpucswcorh:2:5: invalid syntax\\n\\tfoo =\\n\\t   ^\\n'\r\n\r\n- (1, '/tmp/tmpucswcorh:2:6: invalid syntax\\n\\tfoo =\\n\\t    ^\\n')\r\n?                         ^                                -\r\n\r\n+ (1, '/tmp/tmpucswcorh:2:5: invalid syntax\\n\\tfoo =\\n\\t   ^\\n')\r\n?                         ^\r\n\r\n\r\n======================================================================\r\nFAIL: test_multilineSyntaxError (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 431, in test_multilineSyntaxError\r\n    \"\"\" % (sourcePath, message)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, \"[18 chars]:11: end of file (EOF) while scanning triple-q[48 chars]^\\n\") != (1, \"[18 chars]:11: EOF while scanning triple-quoted string l[34 chars]^\\n\")\r\n\r\nFirst differing element 1:\r\n\"/tmp[14 chars]:11: end of file (EOF) while scanning triple-q[47 chars] ^\\n\"\r\n\"/tmp[14 chars]:11: EOF while scanning triple-quoted string l[33 chars] ^\\n\"\r\n\r\n  (1,\r\n-  '/tmp/tmpnla8400t:8:11: end of file (EOF) while scanning triple-quoted string '\r\n?                          -------------   -\r\n\r\n+  '/tmp/tmpnla8400t:8:11: EOF while scanning triple-quoted string literal\\n'\r\n?                                                                  +++++++++\r\n\r\n-  'literal\\n'\r\n   \"    '''quux'''\\n\"\r\n   '          ^\\n')\r\n\r\n======================================================================\r\nFAIL: test_nonDefaultFollowsDefaultSyntaxError (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 491, in test_nonDefaultFollowsDefaultSyntaxError\r\n    %s\"\"\" % (sourcePath, column, last_line)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, '[14 chars]5r:1:7: non-default argument follows default a[39 chars]^\\n') != (1, '[14 chars]5r:1:8: non-default argument follows default a[40 chars]^\\n')\r\n\r\nFirst differing element 1:\r\n'/tmp/tmphse0k15r:1:7: non-default argument follows default a[38 chars] ^\\n'\r\n'/tmp/tmphse0k15r:1:8: non-default argument follows default a[39 chars] ^\\n'\r\n\r\n  (1,\r\n-  '/tmp/tmphse0k15r:1:7: non-default argument follows default argument\\n'\r\n?                      ^\r\n\r\n+  '/tmp/tmphse0k15r:1:8: non-default argument follows default argument\\n'\r\n?                      ^\r\n\r\n   'def foo(bar=baz, bax):\\n'\r\n-  '      ^\\n')\r\n+  '       ^\\n')\r\n?   +\r\n\r\n\r\n======================================================================\r\nFAIL: test_nonKeywordAfterKeywordSyntaxError (pyflakes.test.test_api.CheckTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 516, in test_nonKeywordAfterKeywordSyntaxError\r\n    %s\"\"\" % (sourcePath, column, message, last_line)])\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 349, in assertHasErrors\r\n    (count, err.getvalue()), (len(errorList), ''.join(errorList)))\r\nAssertionError: Tuples differ: (1, '[15 chars]i:1:12: positional argument follows keyword ar[38 chars]^\\n') != (1, '[15 chars]i:1:13: positional argument follows keyword ar[39 chars]^\\n')\r\n\r\nFirst differing element 1:\r\n'/tmp/tmps7dat83i:1:12: positional argument follows keyword ar[37 chars] ^\\n'\r\n'/tmp/tmps7dat83i:1:13: positional argument follows keyword ar[38 chars] ^\\n'\r\n\r\n  (1,\r\n-  '/tmp/tmps7dat83i:1:12: positional argument follows keyword argument\\n'\r\n?                       ^\r\n\r\n+  '/tmp/tmps7dat83i:1:13: positional argument follows keyword argument\\n'\r\n?                       ^\r\n\r\n   'foo(bar=baz, bax)\\n'\r\n-  '           ^\\n')\r\n+  '            ^\\n')\r\n?   +\r\n\r\n\r\n======================================================================\r\nFAIL: test_errors_syntax (pyflakes.test.test_api.IntegrationTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 749, in test_errors_syntax\r\n    self.assertEqual(d, ('', error_msg, True))\r\nAssertionError: Tuples differ: ('', '/tmp/tmpeb455z9q/temp:1:6: invalid syntax\\nimport\\n     ^\\n', 1) != ('', '/tmp/tmpeb455z9q/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n\r\nFirst differing element 1:\r\n'/tmp/tmpeb455z9q/temp:1:6: invalid syntax\\nimport\\n     ^\\n'\r\n'/tmp/tmpeb455z9q/temp:1:5: invalid syntax\\nimport\\n    ^\\n'\r\n\r\n- ('', '/tmp/tmpeb455z9q/temp:1:6: invalid syntax\\nimport\\n     ^\\n', 1)\r\n?                               ^                              -      ^\r\n\r\n+ ('', '/tmp/tmpeb455z9q/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n?                               ^                                    ^^^^\r\n\r\n\r\n======================================================================\r\nFAIL: test_errors_syntax (pyflakes.test.test_api.TestMain)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/pyflakes/pyflakes/test/test_api.py\", line 749, in test_errors_syntax\r\n    self.assertEqual(d, ('', error_msg, True))\r\nAssertionError: Tuples differ: ('', '/tmp/tmpt5zbfcfr/temp:1:6: invalid syntax\\nimport\\n     ^\\n', True) != ('', '/tmp/tmpt5zbfcfr/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n\r\nFirst differing element 1:\r\n'/tmp/tmpt5zbfcfr/temp:1:6: invalid syntax\\nimport\\n     ^\\n'\r\n'/tmp/tmpt5zbfcfr/temp:1:5: invalid syntax\\nimport\\n    ^\\n'\r\n\r\n- ('', '/tmp/tmpt5zbfcfr/temp:1:6: invalid syntax\\nimport\\n     ^\\n', True)\r\n?                               ^                              -\r\n\r\n+ ('', '/tmp/tmpt5zbfcfr/temp:1:5: invalid syntax\\nimport\\n    ^\\n', True)\r\n?                               ^\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 626 tests in 6.249s\r\n\r\nFAILED (failures=9, skipped=37)\r\nTest failed: <unittest.runner.TextTestResult run=626 errors=0 failures=9>\r\nerror: Test failed: <unittest.runner.TextTestResult run=626 errors=0 failures=9>\r\nERROR: InvocationError: '/tmp/pyflakes/.tox/pypy3/bin/python setup.py test -q'\r\n_____________________________________________________________________ summary _____________________________________________________________________\r\nERROR:   pypy3: commands failed\r\n\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 369,
                "title": "Make the code and tests compatible with 3.8-dev.",
                "labels": [],
                "description": "Closes #367."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 198,
                "title": "package imports \u2192 undefined name",
                "labels": [],
                "description": "\n*Original report by [spaceone](https://launchpad.net/~spaceone) (@spaceone?) on [Launchpad](https://bugs.launchpad.net/bugs/1270169):*\n\n------------------------------------\n\n```\nimport foo.bar.baz\nbaz.blah()\n\nfoo/bar/__init__.py:1: 'foo' imported but unused\nfoo/bar/__init__.py:2: undefined name 'baz'\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 179,
                "title": "warn on locals()",
                "labels": [],
                "description": "\n*Original report by [jayvdb](https://launchpad.net/~jayvdb) (@jayvdb?) on [Launchpad](https://bugs.launchpad.net/bugs/1507216):*\n\n------------------------------------\n\nWhen locals() is encountered, unused variable detection is repressed.\nUse of locals() should cause a warning to occur, indicating that unused variable can not be detected.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 345,
                "title": "Python 3 UnboundLocalError not detected when variable referenced after shadowed by exception variable",
                "labels": [
                    "python3"
                ],
                "description": "For \r\n```py\r\ndef a():\r\n    e = 1\r\n    try:\r\n        raise RuntimeError('forced error')\r\n    except Exception as e:\r\n        print(e)\r\n    print(e)\r\n\r\na()\r\n```\r\n\r\nIn both Python 2 and 3, exception variable `e` shadows the local variable `e`, and is not being reported.\r\n\r\nIn python3, `e` is unbound after the exception block, and a `UnboundLocalError` occurs when the local variable `e` is referenced because it was disappeared."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 265,
                "title": "erroneous 'undefined name' in exception handling + lambda",
                "labels": [],
                "description": "\n*Original report by [toikarin](https://launchpad.net/~toikarin) (@toikarin?) on [Launchpad](https://bugs.launchpad.net/bugs/1669713):*\n\n------------------------------------\n\n```\n$ cat pyflakes-test.py \ntry:\n    raise Exception(\"test\")\nexcept Exception as e:\n    print(e)\n    x = lambda: e\n    print(x)\n    print(x())\n\n$ pyflakes --version\n1.5.0\n\n$ pyflakes pyflakes-test.py\npyflakes-test.py:5: undefined name 'e'\n\nrunning this with older pyflakes seems to work OK:\n\n$ pyflakes --version\n0.8.1\n\n$ pyflakes pyflakes-test.py && echo $?\n0\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 177,
                "title": "contribute checking for \"miscaptured\" variables in loops",
                "labels": [],
                "description": "\n*Original report by [daira](https://launchpad.net/~daira) (@daira?) on [Launchpad](https://bugs.launchpad.net/bugs/1357096):*\n\n------------------------------------\n\nTahoe-LAFS, a large Python codebase implementing a distributed filesystem, uses a script called \"check-miscaptures\" ( https://tahoe-lafs.org/trac/tahoe-lafs/browser/trunk/misc/coding_tools/check-miscaptures.py) to catch a class of errors resulting in unexpected behaviour when capturing variables in loops.\n\nAn example of incorrect code that it would catch is:\n\n```python\n  a = [None]*10\n  for i in range(0, 10):\n       a[i] = lambda x: x+i\n\n  # The programmer expected a[x](y) to be equivalent to x+y\n\n\n  print a[2](2)  # not 4, but 11\n```\n\nThis happens because all of the a[i] capture the same mutable variable i, which is 9 after the loop when the lambda is called.\n\nFor this example, the output of check-miscaptures is:\n\n  Checking miscapture.py...\n  miscapture.py:3 <lambda> captures 'i' assigned at line 2\n  1 suspiciously captured variables in 1 out of 1 file(s).\n\nChanging the loop body to \"a[i] = lambda x, i=i: x+i\" fixes the problem, and check-miscaptures will not report a warning for the fixed code (it rarely gives false positives, and when it does they are easy to suppress).\n\nThe same problem can happen with named functions rather than lambdas, and with other kinds of loop or list comprehensions. More realistic examples are common in programs that define lots of callback functions, for example when using asynchronous libraries such as Twisted.\n\nThis ticket is to integrate the checking done by this script into pyflakes.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 344,
                "title": "Simplify Python 3 except scope",
                "labels": [],
                "description": "The existing variable with the same name given to the exception can only be in the same scope.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 137,
                "title": "Missing import warnings when importing fully-qualified modules",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "*Original report by [gward](https://launchpad.net/~gward) (@gward?) on [Launchpad](https://bugs.launchpad.net/bugs/1421013):*\r\n\r\n------------------------------------\r\n\r\nImporting modules using fully-qualified paths appears to confuse pyflakes. Example 1:\r\n\r\n```\r\n$ cat pyflakes-missed-unused-import.py\r\nimport somepackage.mod1\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-unused-import.py\r\n```\r\n\r\nExpected output: an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n\r\nExample 2:\r\n\r\n```\r\n$ cat pyflakes-missed-missing-import.py\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-missing-import.py\r\n```\r\n\r\nExpected output: a \"missing import\" error about somepackage.mod1 *and* an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 371,
                "title": "Exempt typing.overload from duplicate detection",
                "labels": [],
                "description": "Resolves #320"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 283,
                "title": "`pyflakes --version` should indicate the version of the interpreter as well",
                "labels": [],
                "description": "At the moment if someone provides\r\n\r\n```\r\n$ pyflakes --version\r\n1.5.0\r\n```\r\n\r\nAs output, there's no easy way to know what version of Python they've installed PyFlakes onto. Let's also include something like `flake8 --version`\r\n\r\n```\r\n3.2.1 (pyflakes: 1.3.0, flake8-docstrings: 1.0.2, pydocstyle: 1.1.1, pycodestyle: 2.2.0, mccabe: 0.5.3) CPython 2.7.13 on Linux\r\n```\r\n\r\nWe don't need to necessarily worry about plugins but having the interpreter, its version, and the OS would be useful debugging information."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 286,
                "title": "Add a warning when the return value of an `async def` is ignored.",
                "labels": [],
                "description": "Example:\r\n\r\n```\r\nasync def foo():\r\n    print(\"hi\")\r\nasync def bar():\r\n    foo()  # This should have been 'await foo()'\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 159,
                "title": "\"import as\" can cause spurious \"imported but unused\" warnings",
                "labels": [],
                "description": "\n*Original report by [bcs26](https://launchpad.net/~bcs26) on [Launchpad](https://bugs.launchpad.net/bugs/1162031):*\n\n------------------------------------\n\nPyflakes will generate a spurious \"imported but unused\" warning for the following code:\n\nimport selenium as se\nimport selenium.webdriver\n\nse.webdriver.Firefox(\"foo\")\n\nNote that Pyflakes will, correctly, *not* generate such a warning for the following:\n\nimport selenium\nimport selenium.webdriver\n\nse = selenium\n\nse.webdriver.Firefox(\"foo\")\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 372,
                "title": "F811 redefinition of unused incorrectly triggered for `__class__`",
                "labels": [],
                "description": "```\r\nclass A:\r\n    @property\r\n    def __class__(self):\r\n        return int\r\n\r\n    @__class__.setter\r\n    def __class__(self, __type):\r\n        raise NotImplementedError()\r\n\r\n    @property\r\n    def blah(self):\r\n        return int\r\n\r\n    @blah.setter\r\n    def blah(self, __type):\r\n        raise NotImplementedError()\r\n```\r\n\r\nThis fails like this:\r\n```\r\n$ pyflakes foo.py \r\nfoo.py:6: redefinition of unused '__class__' from line 2\r\n```\r\n\r\nI included a 2nd property definition to show that it wasn't happening normally.  (Seems to be a special situation for `__class__`\r\n\r\n```\r\n$ pyflakes --version\r\n2.0.0\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 333,
                "title": "regression in 2.0.0: add test for false warning about unused exception when using locals()",
                "labels": [],
                "description": "This patch adds a test for a case which worked with the previous release (1.6.0, no warning) but fails with the latest release (2.0.0, false warning about unused `e`).\r\n\r\nSince I don't know where / when between the releases the behavior regressed I created this test to cover that use case. Once the bug has been fixed the test should pass again."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 268,
                "title": "Imports and methods fall in the same namespace?",
                "labels": [
                    "bug"
                ],
                "description": "\n*Original report by [lelegaifax](https://launchpad.net/~lelegaifax) on [Launchpad](https://bugs.launchpad.net/bugs/1675659):*\n\n------------------------------------\n\nConsider the following script:\n\n```python\nimport bar\n\nclass Foo:\n    def bar(self):\n        pass\n```\n\nPyflakes emits:\n\n```\n$ pyflakes foo.py \nfoo.py:1: 'bar' imported but unused\nfoo.py:4: redefinition of unused 'bar' from line 1\n```\n\nBoth disappears if `bar` is actually used, so the following is clean:\n\n```python\nimport bar\n\nclass Foo:\n    def bar(self):\n        pass\n\ncoffee = bar.Espresso()\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 252,
                "title": "False positive undefined name, which is defined in branch",
                "labels": [],
                "description": "*Original report by [afg984](https://launchpad.net/~afg984) (@afg984?) on [Launchpad](https://bugs.launchpad.net/bugs/1612066):*\r\n\r\n------------------------------------\r\n\r\nthis code gives: undefined name 'j'\r\n\r\n```python\r\nfor i in range(10):\r\n\u00a0\u00a0\u00a0\u00a0if i % 3 == 0:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j += i\r\n\u00a0\u00a0\u00a0\u00a0else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = 0\r\n\u00a0\u00a0\u00a0\u00a0print(j)\r\n```\r\n\r\nwhile the following emits nothing\r\n\r\n```python\r\nfor i in range(10):\r\n\u00a0\u00a0\u00a0\u00a0if not i % 3 == 0:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = 0\r\n\u00a0\u00a0\u00a0\u00a0else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j += i\r\n\u00a0\u00a0\u00a0\u00a0print(j)\r\n```\r\n\r\n\r\npyflakes --version\r\n1.2.3\r\n\r\nI'm creating a new report besides issue 1431099 and issue 1308508 because this is not related to the del statement\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 144,
                "title": "Incorrect line numbers for decorated functions",
                "labels": [],
                "description": "\n*Original report by [yatc18ks0-9a-ngeefk4xa](https://launchpad.net/~yatc18ks0-9a-ngeefk4xa) on [Launchpad](https://bugs.launchpad.net/bugs/879945):*\n\n------------------------------------\n\nIn the code:\n\n```python\ndef decorator(func):\n    return func\n\n\n@decorator\ndef defined_twice():\n    pass\n\n\n@decorator\ndef defined_twice():\n    pass\n```\n\nPyflakes gives the error: twice.py:10: redefinition of function 'defined_twice' from line 5\n\nIt ought to be: twice.py:11: redefinition of function 'defined_twice' from line 6\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 141,
                "title": "Warn about string exceptions",
                "labels": [],
                "description": "\n*Original report by [mithrandi](https://launchpad.net/~mithrandi) (@mithrandi?) on [Launchpad](https://bugs.launchpad.net/bugs/848470):*\n\n------------------------------------\n\nThese can take several forms:\n\n   raise \"shouldn't happen\"\n   raise 'Cannot determine type of callable: '+repr(callableObject)\n   raise \"Can't read input parameters file : %s\" % options.input_file\n\nSome of these will be harder to detect than others.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 136,
                "title": "inconsistent behavior with locals(), comprehensions and the unused local variable warning",
                "labels": [
                    "python2"
                ],
                "description": "*Original report by [fawio](https://launchpad.net/~fawio) on [Launchpad](https://bugs.launchpad.net/bugs/1325966):*\r\n\r\n------------------------------------\r\n\r\nHi,\r\nAs far as I know, bug 872503 (#142) was meant to fix the issue of code using locals() not being recognized as using local variables and indeed the code\r\n\r\n```python\r\n# No warning\r\ndef test():\r\n    a = 5\r\n    return locals()\r\n```\r\n\r\ndoes not raise any warnings, but I've noticed that using locals() in the context of a comprehension (except a list comprehension) will incorrectly make pyflakes assume that the locals are not being used.\r\n\r\nUsing code as an example,\r\n\r\n```python\r\n# No warning\r\ndef test():\r\n    a = 5\r\n    return [i for i in locals().values()]\r\n```\r\n\r\ndoes not raise a warning but the following generator expression:\r\n\r\n```python\r\n# local variable 'a' is assigned to but never used\r\ndef test():\r\n    a = 5\r\n    return (i for i in locals().values())\r\n```\r\n\r\nset comprehension:\r\n\r\n```python\r\n# local variable 'a' is assigned to but never used\r\ndef test():\r\n    a = 5\r\n    return {i for i in locals().values()}\r\n```\r\n\r\nand dict comprehension:\r\n\r\n```python\r\n# local variable 'a' is assigned to but never used\r\ndef test():\r\n    a = 5\r\n    return {k: v for k, v in locals().items()}\r\n\r\n```\r\nall raise the unused local variable warning, which is pretty inconsistent with the previous behavior.\r\n\r\nThis is not a hugely critical bug but it's annoying and it could imply some bugs in the comprehensions elsewhere. Thanks for reading."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 148,
                "title": "Detect broken string templates that will raise ValueError when interpolated",
                "labels": [],
                "description": "\n*Original report by [jkakar](https://launchpad.net/~jkakar) (@jkakar?) on [Launchpad](https://bugs.launchpad.net/bugs/950369):*\n\n------------------------------------\n\nFor example, code like this will break:\n\n  >>> \"%(foo)\" % {\"foo\": \"bar\"}\n  Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n  ValueError: incomplete format\n\nIt'd be awesome if Pyflakes told me about that kind of issue.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 349,
                "title": "In Python 3.6 unused variables in f-strings show line number 1",
                "labels": [],
                "description": "I don't know if this is fixable or not, but in Python 3.6, f-strings with unused variables show the line number as 1. This is very annoying as I use an editor plugin that highlights lines that have errors. \r\n\r\nThe issue seems to be fixed in Python 3.7. \r\n\r\n```\r\n$cat test.py\r\ndef test():\r\n    f\"{b}\"\r\n```\r\n\r\n**Python 3.6**\r\n\r\n```\r\n$PYTHONPATH=~/Documents/pyflakes python -m pyflakes test.py\r\ntest.py:1: undefined name 'b'\r\n```\r\n\r\n**Python 3.7**\r\n```\r\n$PYTHONPATH=~/Documents/pyflakes python -m pyflakes test.py\r\ntest.py:2: undefined name 'b'\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 110,
                "title": "inconsistent redefinition complaint, despite 'del'",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [warner](https://launchpad.net/~warner) (@warner?) on [Launchpad](https://bugs.launchpad.net/bugs/1461208):*\n\n------------------------------------\n\nWith the new pyflakes-0.9.0, and python-2.7.10, the following program:\n\n```python\nif 1:\n    name = 1   # line 2\n    del name\n    [ name for name in [] ]  # line 4\n\nother = 1  # line 6\ndel other\n[ other for other in [] ]  # line 8\n```\n\nreports:\n\n /tmp/pf.py:4: list comprehension redefines 'name' from line 2\n\nI see two problems:\n\n* the 'del name' on line 3 should probably prevent the warning. (this sample\n  is a stripped-down version of a larger file, in which I added the 'del\n  name' to hush an earlier pyflakes complaint)\n\n* the same pattern on lines 6+8 was not reported, the only difference being\n  that it occurred at the top-level scope and not in a function scope.\n\nthanks!\n -Brian\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 153,
                "title": "[Feature] Add hosted docs",
                "labels": [],
                "description": "\n*Original report by [icordasc](https://launchpad.net/~icordasc) (@sigmavirus24?) on [Launchpad](https://bugs.launchpad.net/bugs/1113692):*\n\n------------------------------------\n\nGiven that pyflakes now has an API, it might be worthwhile to add documentation somewhere and since you're already hosting the source on GitHub, ReadTheDocs is an option.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 70,
                "title": "Flatten handlers",
                "labels": [],
                "description": "pyflakes has traditionally recursed with a handler for every\nlevel of the ast.  The ast depth can become very large, especially\nfor an expression containing many binary operators.\n\nPython has a maximum recursion limit, defaulting to a low number\nlike 1000, which resulted in a RuntimeError for the ast of:\n\n```\nx = 1 + 2 + 3 + ... + 1001\n```\n\nThis change avoids recursing for nodes that do not have a specific\nhandler.\n\nChecker.nodeDepth and node.depth change from always being the\nast depth, which varied based on Python version due to ast differences,\nto being the number of nested handlers within pyflakes.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 356,
                "title": "F821 Error with Forward Reference and `from __future__ import annotations`",
                "labels": [],
                "description": "With this example file:\r\n\r\n```python\r\n# test.py\r\nfrom __future__ import annotations\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass MyData:\r\n    member: MyMember\r\n\r\n@dataclass\r\nclass MyMember:\r\n    value: int\r\n```\r\n\r\nI get an F821 error:\r\n```shell\r\n$ flake8 --select=F test.py\r\ntest.py:8:13: F821 undefined name 'MyMember'\r\n```\r\n\r\nI suppose the error is correct, but forward references in this form are explicitly supported with the `annotations` future and I think this should be changed in some manner."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 69,
                "title": "Run pyflakes against all code in the virtualenv",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 154,
                "title": "allow to specify checker mixins",
                "labels": [],
                "description": "\n*Original report by [ronny-pfannschmidt-deactivatedaccount](https://launchpad.net/~ronny-pfannschmidt-deactivatedaccount) on [Launchpad](https://bugs.launchpad.net/bugs/1114708):*\n\n------------------------------------\n\nthis would allow to do propper support for framework specific extra checks/bindings outside of pyflakes\n\nfor example, instead of the execnet support, i could pass in a mixin that overrides the check\nor instead of the ErrorReturn check, that could also be a mixin\n\nsame goes for supporting `__tracebackhide__`\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 363,
                "title": "'local variable 'blah' is assigned to but never used' inconsistent with use of del",
                "labels": [],
                "description": "## Problem Description\r\n\r\nThe warning \"local variable 'blah' is assigned to but never used' is inconsistently triggered when using `del`.\r\n\r\n### What steps reproduce the problem?\r\n\r\nConsider the following function:\r\n\r\n```\r\ndef test():\r\n    color = 1\r\n    del color\r\n```\r\n\r\nPyflakes returns nothing in this case, yet\r\n\r\n```\r\ndef test():\r\n    if True:\r\n        color = 1\r\n        del color\r\n```\r\n\r\ngives: \"local variable 'color' is assigned to but never used\"\r\n\r\n### What is the expected output? What do you see instead?\r\n\r\nThe warning should be produced in all similar circumstances, yet it seems to be only triggered for limited cases right now.\r\n\r\n## Versions\r\n\r\npython = 2.7.14\r\npyflakes = 1.6.0 & 2.0.0\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 343,
                "title": "Track locals()",
                "labels": [],
                "description": "Fixes #136\r\nFixes #333"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 68,
                "title": "Manage recursion limit preventing RuntimeError",
                "labels": [],
                "description": "pyflakes has traditionally recursed with a handler for every\nlevel of the ast.  The ast depth can become very large, especially\nfor an expression containing many binary operators.\n\nPython has a maximum recursion limit, defaulting to a low number\nlike 1000, which resulted in a RuntimeError for the ast of:\n\n```\nx = 1 + 2 + 3 + ... + 1001\n```\n\nTo workaround this problem, pyflakes now increases the recursion\nlimit at runtime when it knows it will be exceeded.\n\nFixes lp:1507827\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 57,
                "title": "Check bare raise occurs in except clause",
                "labels": [],
                "description": "Fixes lp:1528539\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 342,
                "title": "Limit differentForks to the current scope",
                "labels": [],
                "description": "Alternate if & try forks are always in the same scope.\r\n\r\nRearranging the code a little allows for differentForks\r\nto only be called on redefinitions within the same scope,\r\nand inside differentForks the use of getCommonAncestor\r\ncan be limited to finding ancestors only when in current\r\nscope."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 55,
                "title": "Report unassigned expressions",
                "labels": [],
                "description": "Resolves lp:1523001\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 161,
                "title": "Add option to select scope for doctests",
                "labels": [],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1178807):*\n\n------------------------------------\n\ntest.py:\n\n```python\nimport sys\n\nimport sys\n\ndef func():\n    \"\"\"\n    A docstring\n    >>> import sys\n    >>> sys.path\n    \"\"\"\n\n    return 1\n```\n\nThe pyflakes output is\n\n```\ntest.py:1: 'sys' imported but unused\ntest.py:6: redefinition of unused 'sys' from line 1\n```\n\nThe line 6 \"redefinition of unused 'sys' from line 1\" is incorrect, because the doctest scope is separate from the module scope. \n\nI can't figure out how to reproduce it with a small file, but in this file: https://github.com/sympy/sympy/blob/master/sympy/physics/mechanics/functions.py, the output is\n\n```\nsympy/physics/mechanics/functions.py:160: redefinition of unused 'diff' from line 27\nsympy/physics/mechanics/functions.py:200: redefinition of unused 'dynamicsymbols' from line 19\nsympy/physics/mechanics/functions.py:261: redefinition of unused 'dynamicsymbols' from line 19\nsympy/physics/mechanics/functions.py:458: redefinition of unused 'Point' from line 26\nsympy/physics/mechanics/functions.py:508: redefinition of unused 'Point' from line 26\n```\n\nThat is, it complains about the imports in the doctests, but not the imports themselves (because they actually are used in the file).\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 347,
                "title": "Improve error message: RecursionError ",
                "labels": [],
                "description": "pyflakes may fail with a RecursionError when run on large directories (e.g. a conda install) by accident. Below excerpt shows the current error message.\r\n\r\nIt would be more helpful to show which file / module caused the RecursionError.\r\n\r\nThanks!\r\n\r\n```\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 863, in handleNode\r\n\r\n    handler(node)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 816, in handleChildren\r\n\r\n    self.handleNode(node, tree)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 855, in handleNode\r\n\r\n    if self.futuresAllowed and not (isinstance(node, ast.ImportFrom) or\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/pyflakes/checker.py\", line 541, in futuresAllowed\r\n\r\n    for scope in self.scopeStack):\r\n\r\nRecursionError: maximum recursion depth exceeded\r\n\r\n\"\"\"\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/bin/flake8\", line 11, in <module>\r\n\r\n    load_entry_point('flake8==3.5.0', 'console_scripts', 'flake8')()\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/main/cli.py\", line 16, in main\r\n\r\n    app.run(argv)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/main/application.py\", line 396, in run\r\n\r\n    self._run(argv)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/main/application.py\", line 384, in _run\r\n\r\n    self.run_checks()\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/main/application.py\", line 310, in run_checks\r\n\r\n    self.file_checker_manager.run()\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/checker.py\", line 319, in run\r\n\r\n    self.run_parallel()\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/site-packages/flake8/checker.py\", line 288, in run_parallel\r\n\r\n    for ret in pool_map:\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/multiprocessing/pool.py\", line 347, in <genexpr>\r\n\r\n    return (item for chunk in result for item in chunk)\r\n\r\n  File \"/var/lib/jenkins/workspace/gluon-nlp-lint/conda/lint/lib/python3.6/multiprocessing/pool.py\", line 735, in next\r\n\r\n    raise value\r\n\r\nRecursionError: maximum recursion depth exceeded\r\n\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 53,
                "title": "Report unused assignments in doctest",
                "labels": [],
                "description": "Assignment to '_' is not reported as unused.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 340,
                "title": "Undefined name error for unimported type hints written as string",
                "labels": [],
                "description": "PEP484 explicitly allows unimported types to be specified as a string. pyflakes 2.0.0 tries to parse these strings and is unable to find the correct typedefs and reports an unexpected error.\r\n\r\n```\r\ndef hello(a: \"Unknown\") -> str:\r\n    return str(a)\r\n```\r\n\r\ngenerates the pyflakes error\r\n\r\n```\r\nfoo.py:1: undefined name 'Unknown'\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 45,
                "title": "Always report imports shadowed by another import",
                "labels": [],
                "description": "Previously only unused imports redefined by another\nimports were reported as RedefinedWhileUnused.\n\nA new ImportShadowedByImport message now always\nreports the re-import except when an import in the\ndoctest scope shadows an import in the module scope.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 37,
                "title": "Better del support",
                "labels": [],
                "description": "Detect Python 3.2 and lower SyntaxError for deleting\nvariable referenced in nested scope.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 304,
                "title": "Unused local variable raised in async for loops.",
                "labels": [
                    "enhancement"
                ],
                "description": "```\r\nasync def coro(it):\r\n    async for _ in it:  # <- local variable '_' is assigned to but never used\r\n        pass\r\n```\r\n\r\nThis doesn't match the behavior of synchronous for loops."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 317,
                "title": "Redundant list comprehensions should be flagged",
                "labels": [
                    "enhancement"
                ],
                "description": "Functions like \"sum\" expect an iterable, so code like sum( [ o for o in objs ] ) should be flagged for having a redundant list comprehension."
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 253,
                "title": "detect compare used instead of an iterable",
                "labels": [],
                "description": "\n*Original report by [jayvdb](https://launchpad.net/~jayvdb) (@jayvdb?) on [Launchpad](https://bugs.launchpad.net/bugs/1614338):*\n\n------------------------------------\n\nThe following will always result in\n   TypeError: 'bool' object is not iterable\n\n```python\nfor a in (1 == 2):\n    pass\n```\n\nIt is fairly easy to detect as it is a compare in a for loop.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 320,
                "title": "F811 (redefinition of unused variable) incorrectly triggered with @overload decorator",
                "labels": [],
                "description": "PEP 484 [introduced](https://www.python.org/dev/peps/pep-0484/#function-method-overloading) the `@overload` decorator for type annotations.\r\n\r\n> [...] a series of `@overload`-decorated definitions must be followed by exactly one non-@overload-decorated definition (for the same function/method). The `@overload`-decorated definitions are for the benefit of the type checker only, since they will be overwritten by the non-`@overload`-decorated definition, while the latter is used at runtime but should be ignored by a type checker.\r\n\r\nThe following should pass PyFlakes without errors, but currently triggers F811 errors:\r\n\r\n```python\r\nfrom typing import overload\r\n\r\n\r\n@overload\r\ndef utf8(value: None) -> None:\r\n    pass\r\n\r\n\r\n@overload\r\ndef utf8(value: bytes) -> bytes:\r\n    pass\r\n\r\n\r\n@overload\r\ndef utf8(value: str) -> bytes:\r\n    pass\r\n\r\n\r\ndef utf8(value):\r\n    pass  # actual implementation\r\n```\r\n```\r\ntest.py:9:1: F811 redefinition of unused 'utf8' from line 4\r\ntest.py:14:1: F811 redefinition of unused 'utf8' from line 9\r\ntest.py:19:1: F811 redefinition of unused 'utf8' from line 14\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 323,
                "title": "Warn on unreachable code:",
                "labels": [
                    "enhancement"
                ],
                "description": "It would be nice if pyflakes could warn on the following code:\r\n\r\n```python\r\ndef foo():\r\n    return 1\r\n    print(1) # unreachable\r\n\r\ndef bar():\r\n    raise Exception('oh no')\r\n    print(1) # unreachable\r\n```\r\n\r\nIdeally, it would also cover cases like this:\r\n\r\n```python\r\ndef foo(x):\r\n    if x:\r\n        return 1\r\n    else:\r\n        return 2\r\n    print(1) # unreachable\r\n```\r\n\r\nand possibly even this:\r\n\r\n```python\r\ndef foo(x):\r\n    if False:\r\n        print(1) # unreachable\r\n```\r\n\r\n(although I know mypy can use `if False: import foo` for type definitions that aren't used at runtime.)\r\n\r\nWould you be willing to accept a patch to pyflakes that added this?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 324,
                "title": "Catch usage of undefined name with global statement ",
                "labels": [],
                "description": "Related to #249"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 330,
                "title": "WIP: Parse type annotations",
                "labels": [],
                "description": "Here is a proof of concept of parsing type annotations.\r\n\r\nIt adds a dependency which is implicit and needs Python 3.x to work, since typed_ast does not work on Python 2.7 (not properly checked).\r\n\r\nIf you think this is worthwhile I can spend some more time fixing it up so that it checks for the right modules and python versions.\r\n\r\nThis should fix issue 247."
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 370,
                "title": "Detect broken string interpolation and formatting",
                "labels": [],
                "description": "Verify simple cases, such as: `\"%s: %s\" % (foo, bar, baz)` and `\"{foo}: {bar}\".format(foo=\"foo\", baaar=\"baz\")`. \r\n\r\nThis is done by asking Python to do the formatting, filling in the arguments with dummy objects.\r\n\r\nThe testing for `.format` string is skipped for Python3 but should be rather easy to add; I want to get an idea of whether you like the current approach first.\r\n\r\nResolves #148 "
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 175,
                "title": "False positive undefined name after del in branch",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [dimaqq](https://launchpad.net/~dimaqq) (@dimaqq?) on [Launchpad](https://bugs.launchpad.net/bugs/1308508):*\n\n------------------------------------\n\nConsider this test code:\n\n```python\ndef foo():\n    bar = 1\n    if 0:\n        del bar\n    else:\n        del bar\n```\n\npyflakes reports test.py:6: undefined name 'bar', that is 2nd `del bar` is considered in error.\n\nunderstandably it is impossible to analyse all code paths in general case, so how about tagging `bar` as `uncertain if label is present` and allowing to `del` it?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 249,
                "title": "global/local syntax errors not caught",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1590549):*\n\n------------------------------------\n\nThis is perhaps a bit obscure, but here's a class of syntax errors that aren't caught by pyflakes\n\n```\n$ cat test.py\ndef test(x):\n    global x\n$ pyflakes test.py\n$ python test.py\n  File \"test.py\", line 2\n    global x\nSyntaxError: name 'x' is parameter and global\n```\n\nI'm unsure what the full set of possible errors are here. One would need to check the Python source. I know there are some others relating to the Python 3 \"nonlocal\" keyword as well.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 267,
                "title": "finds mangled globals and freevars undefined/unused",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [tagrain](https://launchpad.net/~tagrain) on [Launchpad](https://bugs.launchpad.net/bugs/1675153):*\n\n------------------------------------\n\n*Please describe how you installed Flake8*\n\nExample:\n\n```\npython3 -m venv ~/.virtualenvs/flake8\nworkon flake8\npip install -U pip setuptools wheel\npip install flake8 flake8-commas\n```\n\n*Please provide the exact, unmodified output of `flake8 --bug-report`*\n\nnah\n\n*Please describe the problem or feature*\nflake8 thinks that mangled globals or freevars are undefined in:\n\n```python\ndef _Ham__spam(value):\n     value + ' yes mangling really works like this'\n\nclass Ham:\n     def foo(self, value):\n        return __spam(value)\n```\n\n*If this is a bug report, please explain with examples (and example code) what you expected to happen and what actually happened.*\n\nI expected __spam to be considered defined, because it is.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 222,
                "title": "--exclude flag to the command line",
                "labels": [],
                "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1481052):*\n\n------------------------------------\n\nI know that pyflakes doesn't want to add support for excluding errors inside of scripts, but would you be open to adding the --exclude flag to the pyflakes command to exclude files? My situation is this. I want to run pyflakes automatically in the test suite (on Travis CI). However, there are some files that should be ignored (e.g., a compat.py file with a bunch of Python 2/3 compatibility importat that pyflakes gives a bunch of unused import and undefined name warnings for, and a bundled library that uses * imports, but which I'd rather just leave alone).  I tried using extended globbing in bash, but it seems it's not so easy to mix multiple !() globs, even with globstar enabled. Anyway, I couldn't figure out how to do it.\n\nI know I can use flake8, but it seems that flake8 --select=F doesn't actually include all pyflakes errors (like syntax errors).  I also kind of want to avoid flake8 just to reduce the temptation to test for pep8 errors. \n\nWould it be OK to add --exclude, like flake8 and pep8, which excludes files or directories, to the flake8 command? The --exclude flag in flake8/pep8 accepts a comma separate list of values, which seems kind of dumb to me (it makes more sense to just accept files from the command line, like \"pyflakes --exclude compat.py stuff/\", which could then be globbed), but I'm OK with keeping it that way if cross-compatibility is a concern.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 137,
                "title": "Missing import warnings when importing fully-qualified modules",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "*Original report by [gward](https://launchpad.net/~gward) (@gward?) on [Launchpad](https://bugs.launchpad.net/bugs/1421013):*\r\n\r\n------------------------------------\r\n\r\nImporting modules using fully-qualified paths appears to confuse pyflakes. Example 1:\r\n\r\n```\r\n$ cat pyflakes-missed-unused-import.py\r\nimport somepackage.mod1\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-unused-import.py\r\n```\r\n\r\nExpected output: an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n\r\nExample 2:\r\n\r\n```\r\n$ cat pyflakes-missed-missing-import.py\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-missing-import.py\r\n```\r\n\r\nExpected output: a \"missing import\" error about somepackage.mod1 *and* an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 110,
                "title": "inconsistent redefinition complaint, despite 'del'",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "\n*Original report by [warner](https://launchpad.net/~warner) (@warner?) on [Launchpad](https://bugs.launchpad.net/bugs/1461208):*\n\n------------------------------------\n\nWith the new pyflakes-0.9.0, and python-2.7.10, the following program:\n\n```python\nif 1:\n    name = 1   # line 2\n    del name\n    [ name for name in [] ]  # line 4\n\nother = 1  # line 6\ndel other\n[ other for other in [] ]  # line 8\n```\n\nreports:\n\n /tmp/pf.py:4: list comprehension redefines 'name' from line 2\n\nI see two problems:\n\n* the 'del name' on line 3 should probably prevent the warning. (this sample\n  is a stripped-down version of a larger file, in which I added the 'del\n  name' to hush an earlier pyflakes complaint)\n\n* the same pattern on lines 6+8 was not reported, the only difference being\n  that it occurred at the top-level scope and not in a function scope.\n\nthanks!\n -Brian\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pyflakes",
                "id": 153,
                "title": "[Feature] Add hosted docs",
                "labels": [],
                "description": "\n*Original report by [icordasc](https://launchpad.net/~icordasc) (@sigmavirus24?) on [Launchpad](https://bugs.launchpad.net/bugs/1113692):*\n\n------------------------------------\n\nGiven that pyflakes now has an API, it might be worthwhile to add documentation somewhere and since you're already hosting the source on GitHub, ReadTheDocs is an option.\n"
            }
        ]
    },
    "PyCQA/pylint": {
        "all": [
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2436,
                "title": "False positive E1130 invalid-unary-operand-type for Numpy array",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "Pylint emits a false positive E1130 invalid-unary-operand-type error for Numpy arrays:\r\n```\r\nimport numpy as np\r\na = np.array([1, 2])\r\nb = -a\r\n```\r\nActually, in this case, it emits two:\r\n```\r\n$ pylint test.py  -E\r\n************* Module test\r\ntest.py:3:4: E1130: bad operand type for unary -: recarray (invalid-unary-operand-type)\r\ntest.py:3:4: E1130: bad operand type for unary -: list (invalid-unary-operand-type)\r\n```\r\n\r\nThis is not just for np.array, I get a similar false positive for np.atleast_1d, which also returns Numpy arrays. But np.array is super common in scientific Python projects.\r\n\r\n```\r\n$ pylint --version\r\npylint 2.2.0\r\nastroid 2.0.4\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n```\r\n\r\nThis issue was already mentioned in #1472 and #1497 , but @PCManticore you suggested to split out a new issue with a simple test case that doesn't involve flow control in https://github.com/PyCQA/pylint/issues/1472#issuecomment-355814591 , so there you have it.\r\n\r\n:-)\r\n\r\nThanks for all your work on pylint, it's a huge help!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2410,
                "title": "function-redefined false positive",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. cat sample6.py\r\n```\r\nimport csv\r\n\r\ndef create_csv(output_file, columns, rows, transform_func=None, as_dict=False):\r\n    if transform_func is None:\r\n        def transform_func(x):\r\n            return x\r\n\r\n    if not as_dict:\r\n        with open(output_file, 'w') as f:\r\n            writer = csv.writer(f)\r\n            writer.writerow(columns)\r\n\r\n            for row in rows:\r\n                row = transform_func(row)\r\n                if not isinstance(row, (tuple, list)):\r\n                    row = (row,)\r\n                writer.writerow(row)\r\n\r\n```\r\n2. pylint sample6.py\r\n\r\n\r\n### Current behavior\r\n************* Module sample6\r\n/home/sussolan/git_repos/pylint/sample6.py:5:8: E0102: function already defined line 3 (function-redefined)\r\n\r\n-----------------------------------\r\nYour code has been rated at 6.43/10\r\n\r\n\r\n### Expected behavior\r\nThere should not be function-redefined error as originally transform_func is an argument and moreover function is defined only when the argument's value is None. Therefore function is defined only once.\r\n\r\n### pylint --version output\r\npylint 2.2.0\r\nastroid 2.0.1\r\nPython 3.6.4 (default, Jan  7 2018, 15:53:53)\r\n[GCC 6.4.0]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2562,
                "title": "False positive not-callable on type-annotated post-initialized class member",
                "labels": [],
                "description": "\r\n### Steps to reproduce\r\n\r\nInsert the following python code into a file `x.py`\r\n\r\n```python\r\nclass C:\r\n    X = None  # type: C\r\n    def __call__(self, *args, **kwargs):\r\n        return self\r\nC.X = C()\r\n\r\n_ = C.X(5)\r\n```\r\n\r\n2. Run pylint with `not-callable` enabled\r\n\r\n`pylint --disable=all --enable=not-callable --score=no x.py`\r\n\r\n### Current behavior\r\n\r\nPylint outputs an error\r\n\r\n```\r\n************* Module x\r\nx.py:8:4: E1102: C.X is not callable (not-callable)\r\n```\r\n\r\nThis is likely because pylint is looking at the temporary value `None` instead of trusting the type annotation `type: C`. (Note that `mypy` trusts the type annotation.)\r\n\r\n### Expected behavior\r\n\r\nConsider not outputing an error in this case, in order to make it possible to work around the fact that it is not possible to initialize class variables of the same type as the enclosing class until after the class is initialized, so it is necessary to have some sort of placeholder of an incorrect type.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```\r\n\r\nand separately\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2440,
                "title": "False positive not-async-context-manager for asynccontextmanager",
                "labels": [
                    "python 3.7",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n\r\nRun `pylint -E` for the following code.\r\n\r\n```python\r\nfrom contextlib import asynccontextmanager\r\n\r\n\r\n@asynccontextmanager\r\nasync def acm(n):\r\n    yield n\r\n\r\n\r\nasync with acm(42) as ans:\r\n    assert ans == 42\r\n```\r\n\r\n### Current behavior\r\n\r\n`E1701: Async context manager 'generator' doesn't implement __aenter__ and __aexit__. (not-async-context-manager)`\r\n\r\n### Expected behavior\r\n\r\nIt should recognize the decorated async generator.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Aug 22 2018, 15:59:19)\r\n[Clang 9.1.0 (clang-902.0.39.2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2404,
                "title": "add new check redundant-else",
                "labels": [
                    "work in progress"
                ],
                "description": "add test cases for redundant_else check\r\n\r\nadd entry in ChangeLog\r\nfix test cases\r\n\r\n### Fixes / new features\r\n- #2327 \r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2419,
                "title": "Class '_Union' has no '__args__' member (no-member)",
                "labels": [
                    "bug"
                ],
                "description": "Hi,\r\nFrom this code :\r\n```\r\nfrom typing import Union\r\nNumericTypes = Union[int, float, Decimal]\r\ni = 42\r\nprint( isinstance(i, NumericTypes.__args__) )\r\n```\r\n\r\nI got a false positive:\r\n```\r\nE1101: Class '_Union' has no '__args__' member (no-member)\r\n```\r\n\r\n```\r\n$ ~/.local/bin/pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```\r\n\r\nHave a good day !"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2418,
                "title": "False postive for undefined variable",
                "labels": [
                    "needs-backport",
                    "bug"
                ],
                "description": "    class Parent(object):\r\n        class Child(object):\r\n            NAME = \"foo\"\r\n        CHILD_LAMBDAS = [lambda: Parent.Child.NAME]\r\n\r\n    print Parent.CHILD_LAMBDAS[0]()\r\n\r\n### Steps to reproduce\r\n1. Run pylint on the code above\r\n\r\n### Current behavior\r\n``[E0602(undefined-variable), Parent.<lambda>] Undefined variable 'Parent'``\r\n\r\n### Expected behavior\r\nNo errors\r\n\r\n### pylint --version output\r\npylint 1.9.2\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2435,
                "title": "False positive E1111 assignment-from-no-return",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "I'm getting false positives E1111 assignment-from-no-return from pylint for this project: https://github.com/gammapy/gammapy\r\n\r\nHere's a minimal example to reproduce:\r\n```\r\nimport numpy as np\r\n\r\n\r\nclass MyArray(np.ndarray):\r\n    pass\r\n\r\n\r\na = np.ndarray((2,), buffer=np.array([1, 2, 3]), offset=np.int_().itemsize, dtype=int)\r\nb = a.flatten()\r\nprint(b)\r\n\r\nc = MyArray((2,), buffer=np.array([1, 2, 3]), offset=np.int_().itemsize, dtype=int)\r\nd = c.flatten()\r\nprint(d)\r\n```\r\n\r\nThe error reported is this:\r\n```\r\n$ pylint test.py -E\r\n************* Module test\r\ntest.py:8:56: E1120: No value for argument 'value' in constructor call (no-value-for-parameter)\r\ntest.py:12:53: E1120: No value for argument 'value' in constructor call (no-value-for-parameter)\r\ntest.py:13:0: E1111: Assigning to function call which doesn't return (assignment-from-no-return)\r\n```\r\n\r\nThe E1111 is a false positive, `c.flatten()` does return:\r\n```\r\n$ python test.py \r\n[2 3]\r\n[2 3]\r\n```\r\n\r\nThis is for current astroid and pylint master, which reports like this:\r\n```\r\n$ pylint --version\r\npylint 2.2.0\r\nastroid 2.0.4\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n```\r\n\r\nIt's weird that the same false positive doesn't appear for the equivalent `a.flatten()` call.\r\n\r\nAlso, the message is cryptic:\r\n> Assigning to function call which doesn't return\r\n\r\nI'm not assigning to a function call. \r\nI'm making a function call `c.flatten()` and assign the return value to a local variable `d`."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2420,
                "title": "pylint doesn't understand that typing.Dict extends dict",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Run pylint over this file:\r\n\r\n```\r\n\"\"\"Extend dict and Dict.\"\"\"\r\n\r\nfrom typing import Dict\r\n\r\nclass LittleDDict(dict):\r\n    \"\"\"An embellished dict.\"\"\"\r\n\r\n    def embellishment(self) -> None:\r\n        \"\"\"Extra functionality over dict.\"\"\"\r\n        print(\"I have %d items\" % len(self))\r\n\r\n\r\nclass BigDDict(Dict[int, str]):\r\n    \"\"\"An embellished Dict.\"\"\"\r\n\r\n    def embellishment(self) -> None:\r\n        \"\"\"Extra functionality over Dict.\"\"\"\r\n        print(\"I have %d items\" % len(self))\r\n\r\n\r\ndef _main() -> None:\r\n    little_d = LittleDDict()\r\n    little_d[3] = \"three\"\r\n    little_d.setdefault(4, \"four\")\r\n    little_d.embellishment()\r\n\r\n    big_d = BigDDict()\r\n    big_d[3] = \"three\"\r\n    big_d.setdefault(4, \"four\")\r\n    big_d.embellishment()\r\n\r\nif __name__ == '__main__':\r\n    _main()\r\n\r\n```\r\n\r\n### Current behavior\r\n```\r\n$ pylint --reports=n --persistent=n extend_dict.py \r\n************* Module extend_dict\r\nextend_dict.py:13:0: R0903: Too few public methods (1/2) (too-few-public-methods)\r\nextend_dict.py:28:4: E1137: 'big_d' does not support item assignment (unsupported-assignment-operation)\r\nextend_dict.py:29:4: E1101: Instance of 'BigDDict' has no 'setdefault' member (no-member)\r\n\r\n-----------------------------------\r\nYour code has been rated at 3.89/10\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n```\r\n$ pylint --reports=n --persistent=n extend_dict.py \r\nYour code has been rated at 10.00/10\r\n```\r\n\r\n\r\n\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.5 (default, Jul  5 2018, 03:28:36) \r\n[GCC 8.1.0]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2439,
                "title": "Pylint wrongly detects alias properties in slotted classes",
                "labels": [
                    "bug"
                ],
                "description": "Hi, we encountered the issue in our CI which runs a pylint -E.\r\nThe issue does not happen in non-slotted classes, as far as I am aware.\r\n\r\n### Steps to reproduce\r\n\r\nRun pylint -E on the following file:\r\n\r\n```python\r\nclass TestClass:\r\n    __slots__ = ['_i']\r\n    def __init__(self):\r\n        self._i = 0\r\n\r\n    @property\r\n    def i(self):\r\n        return self._i\r\n\r\n    @i.setter\r\n    def i(self, v):\r\n        self._i = v\r\n\r\n    other = i\r\n\r\ninstance = TestClass()\r\ninstance.other = 42\r\nprint(instance.i)\r\n```\r\n\r\n### Current behavior\r\n```\r\n************* Module test\r\ntest.py:17:0: E0237: Assigning to attribute 'other' not defined in class slots (assigning-non-slot)\r\n```\r\n(and other errors in the code using that class)\r\n\r\n### Expected behavior\r\n\r\nNo error\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jul 15 2018, 10:44:58) \r\n[GCC 8.1.1 20180531]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2416,
                "title": "unsubscriptable-object error reported incorrectly",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun Pylint on the following code:\r\n```python\r\nfrom typing import Generic, TypeVar\r\n\r\nT = TypeVar(\"T\")\r\n\r\nclass Test(Generic[T]):  # error is reported here\r\n    pass\r\n```\r\n\r\n### Current behavior\r\nPylint reports the following error:\r\n```E1136: Value 'Generic' is unsubscriptable (unsubscriptable-object)```\r\n\r\n### Expected behavior\r\nNo error should be reported. Python documentation for [`Generic`](https://docs.python.org/3/library/typing.html#typing.Generic) explicitly lists use cases where `Generic` is subscripted.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 27 2018, 14:40:03) \r\n[GCC 8.1.0]\r\n```\r\n\r\nThis issue is *not* reproducible with Python 3.6. Might be related to issue #2377, which is only reproducible with Python 3.6."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2428,
                "title": "Using argparse.Namespace under certain conditions causes E1101(no-member), but for str",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\nRun pylint on this code:\r\n```\r\n# pylint: disable=missing-docstring, invalid-name, blacklisted-name, unused-argument, unused-variable, too-many-function-args\r\nimport argparse\r\n\r\n\r\ndef create_parser_a(foo, bar):\r\n    parser = argparse.ArgumentParser()\r\n\r\n    parser.add_argument('my_key')\r\n\r\n    args, _ = parser.parse_known_args()\r\n    return args\r\n\r\ndef create_parser_b(foo):\r\n    parser = argparse.ArgumentParser()\r\n\r\n    parser.add_argument('my_key')\r\n\r\n    args, _ = parser.parse_known_args()\r\n    return args\r\n\r\ndef create_parser_c(foo, bar):\r\n    parser = argparse.ArgumentParser()\r\n\r\n    parser.add_argument('my_key')\r\n\r\n    args = parser.parse_args()\r\n    return args\r\n\r\n\r\nmy_ns_a = create_parser_a('foo', 'bar')\r\nprint(my_ns_a.my_key)\r\n\r\nmy_ns_b = create_parser_b('foo')\r\nprint(my_ns_b.my_key)\r\n\r\nmy_ns_c = create_parser_c('foo', 'bar')\r\nprint(my_ns_c.my_key)\r\n\r\nmy_ns_d = create_parser_b('foo', 'bar')\r\nprint(my_ns_d.my_key)\r\n```\r\n\r\n### Current behavior\r\n```\r\n$ pipenv run pylint example.py \r\n************* Module example\r\nexample.py:31:6: E1101: Instance of 'str' has no 'my_key' member (no-member)\r\nexample.py:40:6: E1101: Instance of 'str' has no 'my_key' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nE1101 should not be raised in any instance, but especially not for `'str'`\r\nWhat baffles me is that, if I have fewer than two arguments to my namespace-creating function, or I use `parse_args` instead of `parse_known_args`, the problem goes away. The problem returns if I *call* the one-arg function with two arguments, as well.\r\n\r\nThis might be related to #2413, but seemed interesting and distinct enough to merit its own issue\r\n\r\npossible also related to #2425 \r\n\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 28 2018, 08:59:52) \r\n[GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2441,
                "title": "False positive E1124 redundant-keyword-arg in complex subclassing scenario",
                "labels": [
                    "bug"
                ],
                "description": "This issue was first mentioned in https://github.com/PyCQA/pylint/issues/2335#issuecomment-415055075 and is similar.\r\n\r\nI get a similar error when subclassing this class:\r\n\r\nhttps://github.com/astropy/astropy/blob/ba8f644694d77865f7ba1376e7f0447fec5929b6/astropy/units/quantity.py#L196\r\n\r\nWith this example:\r\n```\r\nfrom astropy.units import Quantity\r\n\r\n\r\nclass Energy(Quantity):\r\n    def __new__(cls, energy, unit=None, dtype=None, copy=True):\r\n        self = super(Energy, cls).__new__(cls, energy, unit, dtype=dtype, copy=copy)\r\n        return self\r\n```\r\nI get this error:\r\n```\r\n$ pylint -E test.py\r\n************* Module test\r\ntest.py:6:15: E1124: Argument 'dtype' passed by position and keyword in classmethod call (redundant-keyword-arg)\r\n```\r\n\r\nThe error makes no sense to me, on that line I pass `dtype=dtype` and it's not passed by position.\r\n\r\nThis is with astroid and pylint master from today.\r\n```\r\n$ pylint --version\r\npylint 2.2.0\r\nastroid 2.0.4\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2443,
                "title": " python3.7 - Pylint crashes with astroid.exceptions.DuplicateBasesError when using Generic types",
                "labels": [
                    "crash",
                    "bug"
                ],
                "description": "With python3.7, the pylint crashes on following minified example:\r\n```python\r\nfrom typing import Generic, TypeVar\r\n\r\nIN = TypeVar('IN', contravariant=True)\r\nOUT = TypeVar('OUT', covariant=True)\r\n\r\n\r\nclass Service:\r\n    pass\r\n\r\n\r\nclass ConsumingMixin(Generic[IN]):\r\n    pass\r\n\r\n\r\nclass ProducingMixin(Generic[OUT]):\r\n    pass\r\n\r\n\r\nclass StreamingMixin(Generic[IN, OUT], ConsumingMixin[IN], ProducingMixin[OUT]):\r\n    pass\r\n\r\n\r\nclass Example(StreamingMixin[str, int], Service):\r\n    pass\r\n\r\n\r\nprint(Example.__mro__)\r\n```\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0b3 (default, Mar 30 2018, 04:35:22) \r\n[GCC 7.3.0]\r\n```\r\n\r\n### However, python3.6 environment is working:\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.5 (default, Apr  1 2018, 05:46:30) \r\n[GCC 7.3.0]\r\n```\r\n\r\n\r\n### Steps to reproduce\r\n1. copy provided snippet into \"dupbases.py\"\r\n2. run \"python dupbases.py\" to see there is no actuall error\r\n3. run \"pylint dupbases.py\" to notice an exception traceback\r\n\r\n### Current behavior\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/klass/venvs/pylint/bin/pylint\", line 11, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/__init__.py\", line 19, in run_pylint\r\n    Run(sys.argv[1:])\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/lint.py\", line 1394, in __init__\r\n    linter.check(args)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/lint.py\", line 801, in check\r\n    self._do_check(files_or_modules)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/lint.py\", line 938, in _do_check\r\n    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/lint.py\", line 1018, in check_astroid_module\r\n    walker.walk(ast_node)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/utils.py\", line 1159, in walk\r\n    cb(astroid)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/pylint/checkers/typecheck.py\", line 755, in visit_attribute\r\n    if not [n for n in owner.getattr(node.attrname)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 2309, in getattr\r\n    result = [self.special_attributes.lookup(name)]\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/interpreter/objectmodel.py\", line 110, in lookup\r\n    return getattr(self, \"py\" + name)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/interpreter/objectmodel.py\", line 414, in py__mro__\r\n    mro = self._instance.mro()\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 2735, in mro\r\n    return self._compute_mro(context=context)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 2716, in _compute_mro\r\n    _verify_duplicates_mro(unmerged_mro, self, context)\r\n  File \"/home/klass/venvs/pylint/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 94, in _verify_duplicates_mro\r\n    mros=sequences, cls=cls, context=context)\r\nastroid.exceptions.DuplicateBasesError: Duplicates found in MROs (Example), (StreamingMixin, Generic, ConsumingMixin, Generic, ProducingMixin, Generic, object), (Service, object), (StreamingMixin, Service) for <ClassDef.Example l.22 at 0x7f82d9ec49b0>.\r\n```\r\n\r\n### Expected behavior\r\nNo crash\r\n\r\n### Notes:\r\nremoving `Generic[IN, OUT], ` from `StreamingMixin` is also working python code, but does not resolve pylint crash\r\n\r\nThis 3.7 change is possibly related:\r\nhttps://docs.python.org/3/whatsnew/3.7.html#pep-560-core-support-for-typing-module-and-generic-types\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2425,
                "title": "False positive no-member for class attributes",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n\nRun `pylint -E` against this code:\n\n```python\nclass A:\n    d = 'foo bar baz'\n    d = set(d.split())\n\nA.d.remove('foo')\n```\n\n### Current behavior\n\n```\ntest.py:5:0: E1101: Instance of 'str' has no 'remove' member (no-member)\n```\n\n### Expected behavior\n\nNo complaints about missing member.\n\n### pylint --version output\n\n```\npylint 2.1.1\nastroid 2.0.4\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \n[GCC 6.3.0 20170118]\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2409,
                "title": "no-init not emitted",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. cat sample5.py\r\n```\r\nclass Fake_1:\r\n    def meth(self, a):\r\n        pass\r\n\r\nclass Fake_2(object):\r\n    def meth(self, a):\r\n        pass\r\n```\r\n2. $ pylint ../sample5.py --disable=useless-object-inheritance\r\n\r\n### Current behavior\r\n\r\nYour code has been rated at 10.00/10 (previous run: 8.33/10, +1.67)\r\n\r\n### Expected behavior\r\n\r\nno-init message should be emitted.\r\n### pylint --version output\r\n\r\npylint 2.2.0\r\nastroid 2.0.1\r\nPython 3.6.4 (default, Jan  7 2018, 15:53:53)\r\n[GCC 6.4.0]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1536,
                "title": "Spurious `no-name-in-module, import-error` with `py`",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\n`pip install pylint py`\r\n\r\nCreate a file with the following content:\r\n\r\n```\r\n\"\"\"\r\nExample file for pylint.\r\n\"\"\"\r\n\r\nfrom py.path import local\r\n\r\nprint(local('/etc/example.txt'))\r\n```\r\n\r\nRun `pylint` on this file.\r\n\r\n### Current behavior\r\n\r\n`no-name-in-module` error is given.\r\n`import-error` is given.\r\n\r\n### Expected behavior\r\n\r\nNo error is given - this file works in Python.\r\n\r\n### pylint --version output\r\n\r\n```\r\nNo config file found, using default configuration\r\npylint 1.7.1,\r\nastroid 1.5.3\r\nPython 3.6.1 (default, Apr  4 2017, 09:40:21)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1524,
                "title": "Incorrect no-name-in-module error ",
                "labels": [
                    "bug"
                ],
                "description": "I have the [ProxyTypes](https://pypi.python.org/pypi/ProxyTypes) package installed and have a file `mymodule.py` that imports it like:\r\n\r\n    from peak.util.proxies import CallbackProxy\r\n\r\nHowever, pylint throws this false error for it:\r\n\r\n    E:  8, 0: No name 'util' in module 'mymodule.peak' (no-name-in-module)\r\n\r\nPylint should reference the `peak` package installed into my virtualenv, and not assume it's a local non-existent module."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1510,
                "title": "false positive for property",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n\r\n    class Runner:\r\n        '''callable class that might take work to construct'''\r\n        def __call__(self, *args, **kwargs):\r\n            print('called with {} {}'.format(args, kwargs))\r\n\r\n    class Runstuff:\r\n        def __init__(self):\r\n            self._runner = None\r\n\r\n        def dostuff(self):\r\n            '''call the runner class'''\r\n            self.runner('hello world')\r\n\r\n        @property\r\n        def runner(self):\r\n            '''constructs Runner and returns it'''\r\n            if self._runner is None:\r\n                self._runner = Runner()\r\n            return self._runner\r\n\r\n### Current behavior\r\nE: 13, 8: self.runner is not callable (not-callable)\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### pylint --version output\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 3.5.3 (default, Apr 24 2017, 13:32:13) \r\n[GCC 6.3.1 20161221 (Red Hat 6.3.1-1)]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1508,
                "title": "pylint manpage refers to nonexistent /usr/share/doc/pythonX.Y-pylint/",
                "labels": [
                    "documentation",
                    "discussion"
                ],
                "description": "Hello,\r\nthis was reported to Debian as http://bugs.debian.org/825187\r\n\r\n```\r\npylint(1) manpage reads:\r\n\r\nSEE ALSO\r\n      /usr/share/doc/pythonX.Y-pylint/\r\n\r\nbut no such directories exist.\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1502,
                "title": "W9006: missing-raises-doc false positive",
                "labels": [
                    "contributor friendly",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Make any method that throws an exception external or internally created.\r\n2. Uses google style add `Raises` section.\r\n3. If we simply mention the name of the exception, it works but if we mention the full path of the exception with :exc: like \r\n```python\r\nRaises:\r\n    :exc:`exceptions.IOException`: it says missing raises doc for the given error.\r\n```\r\n\r\n### Current behavior\r\nGives false positive.\r\n\r\n### Expected behavior\r\nIt should be able to realise internal, external linking.\r\n\r\n### pylint --version output\r\n1.7.1\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1498,
                "title": "False positive with E1136 unsubscriptable-object",
                "labels": [
                    "topic-control-flow",
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. Create file `z.py`\r\n```python\r\na = None\r\nwhile True:\r\n    if a is None or a[\"1\"] == 0:\r\n        a = {\"1\":1}\r\n    else:\r\n        break\r\nprint \"Done\"\r\n```\r\n2. run `pylint z.py`\r\n\r\n### Current behavior\r\n\r\n```\r\nE:  3,20: Value 'a' is unsubscriptable (unsubscriptable-object)\r\n```\r\n\r\n### Expected behavior\r\n\r\nno errors, no warnings\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.13 (default, Dec 18 2016, 07:03:39) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1497,
                "title": "Pylint thinks sklearn.metrics.log_loss returns a tuple",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. create file with\r\n```\r\nimport sklearn.metrics\r\nfoo = sklearn.metrics.log_loss(...)\r\nbar = - foo\r\n```\r\n2. Run it through `pylint`\r\n\r\n### Current behavior\r\n```\r\n (E1130, invalid-unary-operand-type, myfile) bad operand type for unary -: tuple\r\n```\r\n\r\n### Expected behavior\r\n\r\nno errors, no warnings\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.13 (default, Dec 18 2016, 07:03:39) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1496,
                "title": "Raise error if an attribute on a coroutine is accessed it doesn't have",
                "labels": [
                    "enhancement"
                ],
                "description": "Some people forget to use `await`, so it might be useful to error in cases such as this:\r\n\r\n```py\r\nasync def my_coro(*args):\r\n    result = other_coro(*args)  # whoops, we didn't await\r\n    x = result.some_attr  # error, coroutines don't have the some_attr attribute\r\n    y = result[\"key\"]  # error, coroutines don't have keys. The same applies to result[0]\r\n    return result  # valid, coroutines can be returned as result sometimes.\r\n```\r\nI'd love to see this implemented in pylint at least for coroutines, and maybe for other awaitables too.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1495,
                "title": "Excessive memory usage to scan big projects",
                "labels": [
                    "topic-performance",
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. git clone github.com/buildbot/buildbot\r\n2. cd buildbot\r\n3. make virtualenv\r\n4. . .venv/bin/activate\r\n5. make pylint\r\n6. top\r\n\r\n### Current behavior\r\npylint consumes up to 1GB of memory\r\n\r\n### Expected behavior\r\npylint should use less memory\r\n\r\n### pylint --version output\r\npylint 1.7.1,\r\nastroid 1.5.2\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10)\r\n[GCC 5.4.0 20160609]\r\n\r\n\r\nWe are looking for tips to improve the situation as our CI docker machines starts to be randomly killed by OOM.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1493,
                "title": "False-positive E1102 (not-callable) with list of functions",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\nRun pylint on this code\r\n```\r\ncfg = [\r\n        {'v': [0, 1], 'f': None},\r\n        {'v': [1, 2], 'f': sum}\r\n    ]\r\n\r\nif __name__ == '__main__':\r\n    for c in cfg:\r\n        if c['f'] is not None:\r\n            c['f'](c['v'])\r\n```\r\n\r\n### Current behavior\r\n\r\nError on the last line:\r\n`test.py:9: [E1102(not-callable), ] c['f'] is not callable`\r\n\r\nOnly the first item of the list is test to figure out if it is callable or not. If `cfg` is changed to\r\n```\r\ncfg = [\r\n        {'v': [1, 2], 'f': sum},\r\n        {'v': [0, 1], 'f': None}\r\n    ]\r\n```\r\nthen there is no error.\r\n\r\n### Expected behavior\r\n\r\nNo error\r\n\r\n### pylint --version output\r\n\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1482,
                "title": "arguments-differ and default parameters",
                "labels": [
                    "contributor friendly",
                    "bug"
                ],
                "description": "For methods having hard-to-reach default values, their parameters may be hard to immitate, they sometimes even leak internal details that we do not want to imitate. I'm thinking of `collections.OrderedDict.__setitem__` but there may be a others:\r\n\r\n```\r\ndef __setitem__(self, key, value, dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):\r\n```\r\n\r\nI think having a `*args, **kwargs` should be a sign of \"I'm trying hard to be compatible, without depending on implementation details\".\r\n\r\nExample:\r\n\r\n```\r\n# Module A\r\n\r\nIMPLEMENTATION_DETAIL = object()\r\n\r\n\r\nclass OkestClassname:\r\n    \"\"\"OKest docstring.\r\n    \"\"\"\r\n    def method_name(self, arg1, impl_detail=IMPLEMENTATION_DETAIL):\r\n        \"\"\"OKest docstring.\r\n        \"\"\"\r\n\treturn 42\r\n\r\n\r\n# Module B\r\n\r\n\r\nclass SecondClassname(OkestClassname):\r\n    \"\"\"OKest docstring.\r\n    \"\"\"\r\n    def method_name(self, arg1, *args, **kwargs):\r\n        \"\"\"OKest docstring.\r\n        \"\"\"\r\n\treturn 2 ** super().method_name(arg1, *args, **kwargs)\r\n```\r\n\r\nThis one (obviously) whines about `arguments-differ`, yet I'm doing everything to allow the implementation details to change while staying compatible. I'm not even loosing semantical information as I'm only obscursing implementation details.\r\n\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1480,
                "title": "Inconsistent detection of invalid-sequence-index",
                "labels": [
                    "bug"
                ],
                "description": "Using pylint version 1.7.1 with the following file:\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\"\"\"OKest docstring.\r\n\"\"\"\r\n\r\n\r\ndef not_foo():\r\n    \"\"\"OKest docstring.\r\n    \"\"\"\r\n    random_dict = not_bar()\r\n\r\n    # invalid-sequence-index:\r\n    print([value[\"a\"] for key, value in random_dict.items()])\r\n\r\n    # No error:\r\n    print([value[\"a\"] for value in random_dict.values()])\r\n\r\n    for key, value in random_dict.items():\r\n        # invalid-sequence-index:\r\n        print(key, value[\"a\"])\r\n\r\n    # No error:\r\n    for value in random_dict.values():\r\n        print(value[\"a\"])\r\n\r\n    # No error:\r\n    for key in random_dict:\r\n        print(random_dict[key][\"a\"])\r\n\r\n\r\ndef not_bar():\r\n    \"\"\"OKest docstring.\r\n    \"\"\"\r\n    return {\"Oh look\": \"A string\"}\r\n```\r\nI'm getting:\r\n\r\n```\r\nE: 14, 0: Sequence index is not an int, slice, or instance with __index__ (invalid-sequence-index)\r\nE: 21, 0: Sequence index is not an int, slice, or instance with __index__ (invalid-sequence-index)\r\n```\r\n\r\nAs the code obviouslly touches `[\"a\"]` every time I expected the error to be reported consistently in each cases.\r\n\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1472,
                "title": "invalid-unary-operand-type error false positive",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. create a file called test.py containing the following:\r\n```\r\ndef frob(value=None):\r\n    if value is not None:\r\n        return -value\r\n    return value\r\n```\r\n2. `pylint test.py`\r\n\r\n### Current behavior\r\npylint output contains `E:  3,15: bad operand type for unary -: NoneType (invalid-unary-operand-type)`\r\n\r\n### Expected behavior\r\nThere should be no invalid-unary-operator-type error for this line because it is not possible for value to be None here\r\n\r\n### pylint --version output\r\n```\r\npete@dev:~$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.6 (default, Oct 26 2016, 20:30:19) \r\n[GCC 4.8.4]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1470,
                "title": "Cannot find module if source file is a symbolic link",
                "labels": [
                    "bug"
                ],
                "description": "Somewhere between versions 1.5.5 and 1.7.1 the behaviour concerning modules using symbolic links to install files in the module directory has changed. Running `pylint` on such a module gives the following error:\r\n\r\n```\r\n$ pylint pyMyTool\r\nNo config file found, using default configuration\r\nTraceback (most recent call last):\r\n  File \"/XXX/.local/bin/pylint\", line 11, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/__init__.py\", line 13, in run_pylint\r\n    Run(sys.argv[1:])\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/lint.py\", line 1300, in __init__\r\n    linter.check(args)\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/lint.py\", line 726, in check\r\n    self._do_check(files_or_modules)\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/lint.py\", line 837, in _do_check\r\n    for descr in self.expand_files(files_or_modules):\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/lint.py\", line 869, in expand_files\r\n    self.config.black_list_re)\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/utils.py\", line 894, in expand_modules\r\n    modpath = _modpath_from_file(subfilepath, is_namespace)\r\n  File \"/XXX/.local/lib/python2.7/site-packages/pylint/utils.py\", line 833, in _modpath_from_file\r\n    return modutils.modpath_from_file_with_callback(filename, is_package_cb=_is_package_cb)\r\n  File \"/XXX/.local/lib/python2.7/site-packages/astroid/modutils.py\", line 310, in modpath_from_file_with_callback\r\n    filename, ', \\n'.join(sys.path)))\r\nImportError: Unable to find module for /tmp/yyy/py/git/pyBinding/module/_func.py in /tmp/yyy/py,\r\n.,\r\n/XXX/.local/bin,\r\n/tmp/yyy/py/install/pyLib,\r\n/opt/rh/devtoolset-3/root/usr/lib64/python2.6/site-packages,\r\n/opt/rh/devtoolset-3/root/usr/lib/python2.6/site-packages,\r\n/opt/rh/python27/root/usr/lib64/python27.zip,\r\n/opt/rh/python27/root/usr/lib64/python2.7,\r\n/opt/rh/python27/root/usr/lib64/python2.7/plat-linux2,\r\n/opt/rh/python27/root/usr/lib64/python2.7/lib-tk,\r\n/opt/rh/python27/root/usr/lib64/python2.7/lib-old,\r\n/opt/rh/python27/root/usr/lib64/python2.7/lib-dynload,\r\n/XXX/.local/lib/python2.7/site-packages,\r\n/opt/rh/python27/root/usr/lib64/python2.7/site-packages,\r\n/opt/rh/python27/root/usr/lib/python2.7/site-packages,\r\n/XXX/.local/lib/python2.7/site-packages/astroid/brain\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nConsider the following directory structure:\r\n```\r\n/tmp/yyy/py/install/pyLib/pyMyTool/\r\n    __init__.py ->../../../git/pyBinding/module/__init__.py (symbolic link)\r\n    _func.py -> ../../../git/pyBinding/module/_func.py (symbolic link)\r\n/tmp/yyy/py/git/pyBinding/module/\r\n    __init__.py\r\n    _func.py\r\n```\r\nwith `__init__.py` containing:\r\n```\r\nfrom _func import func\r\n```\r\nand `_func.py` containing:\r\n```\r\ndef func():\r\n    return 1\r\n```\r\n\r\nThe directory `/tmp/yyy/py/install/pyLib` is included in the environment variable `PYTHONPATH`. Importing the module `pyMyTool` in Python works and has the expected result:\r\n\r\n```\r\n$ python\r\nPython 2.7.5 (default, Jun  5 2014, 14:38:05)\r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyMyTool\r\n>>> pyMyTool.func()\r\n1\r\n>>>\r\n```\r\n\r\n### Current behavior\r\n\r\nRunning `pylint pyMyTool` prints the aforementioned error message.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint pyMyTool` should run its tests.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.7.1,\r\nastroid 1.5.2\r\nPython 2.7.5 (default, Jun  5 2014, 14:38:05)\r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)]\r\n```\r\n\r\nPlease let me know in case you need additional information."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1469,
                "title": "pylint doesn't recognize asyncio.subprocess",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Using this test file, `example.py`:\r\n   ```python\r\n   from asyncio import subprocess\r\n\r\n   subprocess.create_subprocess_exec('echo', 'hi')\r\n   ```\r\n\r\n2. Run `pylint example.py`\r\n\r\n### Current behavior\r\n\r\nThe following output:\r\n\r\n```\r\n\u00bb pylint example.py\r\nNo config file found, using default configuration\r\n************* Module example\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nE:  3, 0: Module 'subprocess' has no 'create_subprocess_exec' member (no-member)\r\n\r\n[ more irrelevant output follows ]\r\n```\r\n\r\n### Expected behavior\r\nThe following warning is emitted:\r\n```\r\nE:  3, 0: Module 'subprocess' has no 'create_subprocess_exec' member (no-member)\r\n```\r\n\r\nBut the \"`subprocess`\" (`asyncio.subprocess`) module _does_ have that member. It appears to be getting confused with the non-async `subprocess` module: if I do `subprocess.Popen(\u2026)`, that _doesn't_ emit a warning, and should. The import `from asyncio import subprocess` isn't exactly trying to throw Pylint off the scent here.\r\n\r\n### pylint --version output\r\n```\r\n\u00bb pylint --version\r\nNo config file found, using default configuration\r\npylint 1.6.5,\r\nastroid 1.4.9\r\nPython 3.6.1 (default, Mar 23 2017, 16:49:06)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1457,
                "title": "Similarities in the same file",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. Create a file with repeated code: code.py\r\n2. pylint --disable=all --enable=similarities code.py \r\n\r\n### Current behavior\r\nDo not show code repeated in the same file,\r\n\r\n### Expected behavior\r\nShow code repeated in the same file.\r\n\r\n### pylint --version output\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1439,
                "title": "False positive with scipy/scikit-learn",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Put the following code in a file\r\n```python\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\n\r\ndef average_tfidf(sents):\r\n    vec = TfidfVectorizer()\r\n    # convert raw text to scipy sparse matrix (csr) of tfidf values\r\n    word_tfidf = vec.fit_transform(sents)\r\n    result = []\r\n    for sent in word_tfidf:\r\n        avg = sent.sum() / sent.getnnz()\r\n        result.append(avg)\r\n    return result\r\n```\r\n2. Run pylint on the file\r\n\r\n### Current behavior\r\nThe `avg = sent.sum() / sent.getnnz()` produces four errors:\r\n```\r\nE: 22,14: Instance of 'float' has no 'sum' member (no-member)\r\nE: 22,14: Instance of 'str' has no 'sum' member (no-member)\r\nE: 22,27: Instance of 'float' has no 'getnnz' member (no-member)\r\nE: 22,27: Instance of 'str' has no 'getnnz' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nNo errors should be produced.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.6.5,\r\nastroid 1.4.9\r\nPython 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1437,
                "title": "Using contextlib.closing() \u201dremoves\u201d all attributes from argument",
                "labels": [
                    "bug"
                ],
                "description": "Given this source:\r\n\r\n```python\r\nimport sqlite3\r\nfrom contextlib import closing\r\n\r\nwith closing(sqlite3.connect(':memory:')) as connection:\r\n    cursor = connection.cursor()\r\n```\r\n\r\nPylint 1.7.1 finds:\r\n\r\n```\r\n$ pylint test.py\r\nNo config file found, using default configuration\r\n************* Module test\r\nC:  5, 0: Trailing whitespace (trailing-whitespace)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  5, 4: Invalid constant name \"cursor\" (invalid-name)\r\nE:  5,13: Instance of 'closing' has no 'cursor' member (no-member)\r\n```\r\n\r\nThe last error wasn't there with Pylint 1.6.3.  It seems the `closing()` wrapper \u201dremoves\u201d all attributes from its argument although it is just a wrapper that virtually _adds_ the context manager magic methods.  This repeats with the cursor object if used with `with` and `closing()`, resulting in a block of lines covered in false positives non-existent attributes.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.9 (default, Aug 13 2016, 17:56:53) \r\n[GCC 4.9.2]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1433,
                "title": "False positive when list is extended via augmented assign operator",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```\r\n# pylint: disable=missing-docstring,invalid-name\r\nimport xml.etree.ElementTree as ET\r\n\r\nxml_text = \"<root><a><name>A</name></a><b><name>B</name></b></root>\"\r\ntree = ET.fromstring(xml_text)\r\nxml_nodes = []\r\nfor search_path in ['./a', './b']:\r\n    xml_nodes += tree.findall(search_path)\r\n\r\nfor node in xml_nodes:\r\n    text = node.find('name').text\r\n    print(text)\r\n```\r\n\r\n### Current behavior\r\n```\r\nE: 10,16: Instance of 'list' has no 'find' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nNo violations reported.\r\n\r\n### pylint --version output\r\n```\r\n(pyve) C:\\Users\\lrogalsk\\Repo\\autobench_next-gpva>pylint --version\r\nNo config file found, using default configuration\r\npylint 1.7.1,\r\nastroid 1.5.2\r\nPython 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1432,
                "title": "False negative for SyntaxError::text",
                "labels": [
                    "contributor friendly",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```\r\ntry:\r\n  pass\r\nexcept SyntaxError as ex:\r\n  ex.text.rstrip()\r\n```\r\n\r\n### Current behavior\r\nE:  4, 2: Class 'text' has no 'rstrip' member (no-member)\r\n\r\n### Expected behavior\r\nNo issue\r\n\r\n### pylint --version output\r\npylint 1.7.1,\r\nastroid 1.5.2\r\nPython 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)]pylint \r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1431,
                "title": "Subprocess returncode invalid-unary-operand-type false positive when psutil is present",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nMake sure `psutil` is installed.\r\n\r\nCreate `test.py` with following content:\r\n```py\r\nimport subprocess\r\nimport psutil\r\nprocess = subprocess.Popen(['ls'])\r\nprocess.communicate()\r\nprocess_signal = -process.returncode\r\n```\r\n\r\n### Current behavior\r\n```\r\npylint -E test.py\r\n************* Module test\r\nE:  5,17: bad operand type for unary -: NoneType (invalid-unary-operand-type)\r\nE:  5,17: bad operand type for unary -: NoneType (invalid-unary-operand-type)\r\nE:  5,17: bad operand type for unary -: NoneType (invalid-unary-operand-type)\r\nE:  5,17: bad operand type for unary -: NoneType (invalid-unary-operand-type)\r\n```\r\n\r\nIf `import psutil` is commented, pylint reports no errors.\r\n\r\n### Expected behavior\r\n\r\nNo errors regardless of `psutil`.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.1, \r\nastroid 1.5.2\r\nPython 2.7.12 (default, Sep 20 2016, 14:04:58) \r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1428,
                "title": "Relative imports don't work if processed after empty package",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Create the following directory tree:\r\n```\r\n./a\r\n./a/src\r\n./a/src/__init__.py\r\n./b\r\n./b/src\r\n./b/src/__init__.py\r\n./b/src/test\r\n./b/src/test/foo.py\r\n./b/src/test/test.py\r\n./b/src/test/__init__.py\r\n```\r\n2. All `__init__.py` files are empty.\r\n3. Contents of `./b/src/test/test.py`:\r\n```\r\nfrom .foo import bar\r\n\r\nbar()\r\n```\r\n\r\n4. Contents of `./b/src/test/foo.py`:\r\n```\r\ndef bar():\r\n    print \"bar\"\r\n```\r\n\r\n### Current behavior\r\n```\r\n$ pylint -E -j 2 a/src b/src/test/test.py\r\n************* Module src.test.test\r\nE:  1, 0: Unable to import 'src.test.foo' (import-error)\r\n$ pylint -E -j 2 b/src/test/test.py a/src  # reversed order\r\n# no errors\r\n$ pylint -E -j 2 b/src/test/test.py\r\n# no errors\r\n```\r\nI get the same error without `-j 2` as well.\r\n\r\n### Expected behavior\r\n`pylint -E -j 2 a/src b/src/test/test.py` should print no errors the same as `pylint -E -j 2 b/src/test/test.py a/src`\r\n\r\n### pylint --version output\r\n```\r\npylint 1.6.5, \r\nastroid 1.4.9\r\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \r\n[GCC 4.8.2]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1416,
                "title": "Make PyLint faster by providing a way to reuse ASTs and avoid startup time.",
                "labels": [
                    "discussion"
                ],
                "description": "The main issue here is that using PyLint is actually slow compared to IDEs, and I believe a great deal in that is that PyLint always has to start from zero all the time and reparse all files available to analyze a module, whereas IDEs are able to have an instance open where they reuse the contents of such modules if they haven't changed on disk (which is most of the time as the user is usually working in a single module with many other modules being used).\r\n\r\ni.e.: if a module has 400 dependencies, all those dependencies may need to be parsed by PyLint to actually do its analysis, always starting from scratch.\r\n\r\nSo, ideally there'd be a way to start a PyLint process, ask it to analyze a module (by giving it a module name and contents which may be dirty in the IDE) and keep that same process open and ask to analyze the same module again with different contents (and it could reuse the cached modules for any file which hasn't changed on disk). Having a single process on all the time would also alleviate the startup time, which has to be paid again on each new invocation.\r\n\r\nIf someone would be willing to add such a behavior to PyLint, I'd be available to integrate such improvements in PyDev ;)\r\n\r\nEven people using it from the command line could benefit if a client in the command line could do that work (i.e.: start the server if it's not there and ask it to analyze a file and upon a new invocation, connect to the existing server to analyze another file).\r\n\r\nNot sure how hard it'd be in the PyLint side for that to happen though, but thought asking for the feature couldn't hurt ;)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1414,
                "title": "report filename being checked",
                "labels": [
                    "enhancement"
                ],
                "description": "For debugging `pylint` crashes and hangs, it is convenient to make it report the filename that is being processed.\r\n\r\nhttp://stackoverflow.com/questions/43076534/report-filename-that-is-being-checked/43084405#43084405\r\n\r\n### pylint --version output\r\n(1,4,1)\r\nhttps://chromium.googlesource.com/chromium/tools/depot_tools.git/+/master/third_party/pylint/__pkginfo__.py\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1412,
                "title": "E1101 on tensorflow.variable_scope()",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. just run `pylint` on the following python snippet:\r\n```python\r\nimport tensorflow as tf\r\nnext(tf.variable_scope('MyScope').gen)\r\n```\r\n\r\n### Current behavior\r\nFor short, the error is `E:  2, 5: Generator 'generator' has no 'gen' member (no-member)`.  \r\nHere follows the full `pylint` output.\r\n\r\n```bash\r\npetrux@machine:~$ cat scratch.py \r\nimport tensorflow as tf\r\nnext(tf.variable_scope('MyScope').gen)\r\n\r\npetrux@machine:~$ pylint scratch.py \r\nNo config file found, using default configuration\r\n************* Module liteflow.scratch\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nE:  2, 5: Generator 'generator' has no 'gen' member (no-member)\r\n\r\n\r\nReport\r\n======\r\n2 statements analysed.\r\n\r\nStatistics by type\r\n------------------\r\n\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|type     |number |old number |difference |%documented |%badname |\r\n+=========+=======+===========+===========+============+=========+\r\n|module   |1      |1          |=          |0.00        |0.00     |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|class    |0      |0          |=          |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|method   |0      |0          |=          |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|function |0      |0          |=          |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n\r\n\r\n\r\nExternal dependencies\r\n---------------------\r\n::\r\n\r\n    tensorflow (liteflow.scratch)\r\n\r\n\r\n\r\nRaw metrics\r\n-----------\r\n\r\n+----------+-------+------+---------+-----------+\r\n|type      |number |%     |previous |difference |\r\n+==========+=======+======+=========+===========+\r\n|code      |2      |66.67 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|docstring |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|comment   |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|empty     |1      |33.33 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n\r\n\r\n\r\nDuplication\r\n-----------\r\n\r\n+-------------------------+------+---------+-----------+\r\n|                         |now   |previous |difference |\r\n+=========================+======+=========+===========+\r\n|nb duplicated lines      |0     |0        |=          |\r\n+-------------------------+------+---------+-----------+\r\n|percent duplicated lines |0.000 |0.000    |=          |\r\n+-------------------------+------+---------+-----------+\r\n\r\n\r\n\r\nMessages by category\r\n--------------------\r\n\r\n+-----------+-------+---------+-----------+\r\n|type       |number |previous |difference |\r\n+===========+=======+=========+===========+\r\n|convention |1      |1        |=          |\r\n+-----------+-------+---------+-----------+\r\n|refactor   |0      |0        |=          |\r\n+-----------+-------+---------+-----------+\r\n|warning    |0      |0        |=          |\r\n+-----------+-------+---------+-----------+\r\n|error      |1      |1        |=          |\r\n+-----------+-------+---------+-----------+\r\n\r\n\r\n\r\nMessages\r\n--------\r\n\r\n+------------------+------------+\r\n|message id        |occurrences |\r\n+==================+============+\r\n|no-member         |1           |\r\n+------------------+------------+\r\n|missing-docstring |1           |\r\n+------------------+------------+\r\n\r\n\r\nGlobal evaluation\r\n-----------------\r\nYour code has been rated at -20.00/10\r\n```\r\n\r\n### Expected behavior\r\nNo error.\r\n\r\n### pylint --version output\r\n```bash\r\npetrux@machine:~$ which pylint\r\n/usr/bin/pylint\r\n\r\npetrux@machine:~$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.5.2, \r\nastroid 1.4.4\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609]\r\n\r\npetrux@machine:~$ which python\r\n/usr/bin/python\r\n\r\npetrux@machine:~$ ls -la /usr/bin/python\r\nlrwxrwxrwx 1 root root 9 dic 10  2015 /usr/bin/python -> python2.7\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1410,
                "title": "Pylint crashes with stackoverflow",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Download attached zip and unzip two files into a folder [twofiles.zip](https://github.com/PyCQA/pylint/files/900005/twofiles.zip)\r\n2. Run `pylint --rcfile=pylintrc ./compiler.py `\r\n\r\n### Current behavior\r\nIt fails with `RuntimeError: maximum recursion depth exceeded while calling a Python object`\r\n\r\n### Expected behavior\r\nIt should succeed analysis\r\n\r\n### pylint --version output\r\npylint 1.6.5, \r\nastroid 1.4.9\r\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 26 2016, 12:10:39) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n\r\n### Initial finding\r\nIt does not like this line: `rv.identifiers = object.__new__(self.identifiers.__class__)`\r\nif that line is commented, it goes ok\r\n\r\n#################\r\nFull traceback is here:\r\n[pylintTraceback.txt](https://github.com/PyCQA/pylint/files/900011/pylintTraceback.txt)\r\n\r\nIs this related to: https://github.com/PyCQA/astroid/issues/204\r\n\r\n\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1387,
                "title": "Number of jobs affects score",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nI don't know if this bug happens with all code but it happens with the Taskenizer code tree:\r\n$ fossil clone https://www.suckmore.uk/cgi-bin/repo/Taskenizer ~/tasrepo.fossil\r\n$ mkdir taskenizer\r\n$ cd taskenizer\r\n$ fossil open ~/tasrepo.fossil \r\n$ pylint3 --rcfile='pylintrc' taskenizer/\r\n\r\nNow edit the jobs to 1 in pylintrc and run again\r\n\r\n### Current behavior\r\nScore changes\r\n\r\n### Expected behavior\r\nChanging number of jobs should not affect score.\r\n\r\n### pylint --version output\r\npylint3 1.5.2,\r\nastroid 1.4.4\r\nPython 3.4.2 (default, Oct  8 2014, 10:45:20)\r\n[GCC 4.9.1]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1375,
                "title": "False negative global-variable-not-assigned (while respective functional test passes correctly)",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nTry to lint following code:\r\n```python\r\na = 1\r\ndef foo():\r\n\tglobal a\r\n\tprint(a)\r\n```\r\n\r\n### Current behavior\r\n```\r\nNo config file found, using default configuration\r\n************* Module test\r\nW:  3, 0: Found indentation with tabs instead of spaces (mixed-indentation)\r\nW:  4, 0: Found indentation with tabs instead of spaces (mixed-indentation)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  1, 0: Invalid constant name \"a\" (invalid-name)\r\nC:  2, 0: Black listed name \"foo\" (blacklisted-name)\r\nC:  2, 0: Missing function docstring (missing-docstring)\r\nC:  3, 1: Invalid constant name \"a\" (invalid-name)\r\nW:  3, 1: Using the global statement (global-statement)\r\n```\r\n\r\n### Expected behavior\r\n```\r\nW:  3, 1: Using global for 'a' but no assignment is done (global-variable-not-as\r\nsigned)\r\n```\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.0,\r\nastroid 1.5.0\r\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 07:18:10) [MSC v.1900 32 bit (In\r\ntel)]\r\n```\r\n\r\nIt is reported correctly in pylint 1.6.5.\r\n```\r\nNo config file found, using default configuration\r\n************* Module test\r\nW:  3, 0: Found indentation with tabs instead of spaces (mixed-indentation)\r\nW:  4, 0: Found indentation with tabs instead of spaces (mixed-indentation)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  1, 0: Invalid constant name \"a\" (invalid-name)\r\nC:  2, 0: Black listed name \"foo\" (blacklisted-name)\r\nC:  2, 0: Missing function docstring (missing-docstring)\r\nW:  3, 1: Using global for 'a' but no assignment is done (global-variable-not-as\r\nsigned)\r\nC:  3, 1: Invalid constant name \"a\" (invalid-name)\r\n```\r\n```\r\n__main__.py 1.6.5,\r\nastroid 1.4.9\r\nPython 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (In\r\ntel)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1368,
                "title": "Add keyword-argument to no-space-check option",
                "labels": [
                    "proposal",
                    "enhancement"
                ],
                "description": "This is a feature request. \r\n\r\nCurrently \"no-space-check\" option accepts \"dict-separator\" to allow spaces beside \":\"\r\n```python\r\n# valid\r\n{\r\n\t\"a\": \"...\",\r\n\t\"bb\": \"...\",\r\n\t\"ccc\": \"...\"\r\n}\r\n# valid with no-space-check=dict-separator\r\n{\r\n\t\"a\":   \"...\",\r\n\t\"bb\":  \"...\",\r\n\t\"ccc\": \"...\"\r\n}\r\n{\r\n\t\"a\"  : \"...\",\r\n\t\"bb\" : \"...\",\r\n\t\"ccc\": \"...\"\r\n}\r\n```\r\nHow about to allow spaces for keyword arguments?\r\n```python\r\n# valid\r\ndict(\r\n\ta=\"...\",\r\n\tbb=\"...\",\r\n\tccc=\"...\"\r\n)\r\n# valid with no-space-check=keyword-argument\r\ndict(\r\n\ta = \"...\",\r\n\tbb = \"...\",\r\n\tccc = \"...\"\r\n)\r\ndict(\r\n\ta =   \"...\",\r\n\tbb =  \"...\",\r\n\tccc = \"...\"\r\n)\r\ndict(\r\n\ta   = \"...\",\r\n\tbb  = \"...\",\r\n\tccc = \"...\"\r\n)\r\n```\r\nThen the user won't need to disable entire \"bad-whitespace\" if they want to allow spaces between \"=\" for keyword arguments.\r\n\r\n### pylint --version output\r\n\r\n```\r\nNo config file found, using default configuration\r\npylint 1.7.0,\r\nastroid 1.5.0\r\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 07:18:10) [MSC v.1900 32 bit (In\r\ntel)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1361,
                "title": "How should I correctly lint an implicit namespace package?",
                "labels": [
                    "crash",
                    "bug"
                ],
                "description": "I am trying to lint a namespace package (PEP420), but I can't get it to work without getting `import-error`. I am not sure my approach is correct, so I'd appreciate some pointers. In the example below I just  want to lint `org.company.package2`.\r\n\r\n### Steps to reproduce\r\n```\r\n# mkdir -p org/company/package1\r\n# mkdir -p org/company/package2\r\n# touch org/company/package1/__init__.py\r\n# echo \"class Module:\\n    pass\\n\" >> org/company/package1/module.py\r\n# touch org/company/package2/__init__.py\r\n# echo \"from org.company.package1.module import Module\\n\" >> org/company/package2/module.py\r\n# python\r\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from org.company.package1.module import Module\r\n>>> \r\n```\r\n### Current behavior\r\nSpecifying the package does not work at all\r\n```\r\n# pylint org.company.package2\r\nNo config file found, using default configuration\r\n************* Module org.company.package2\r\nF:  1, 0: No module named org.company.package2 (fatal)\r\n```\r\nSpecifying the path gives me an `import-error`\r\n```\r\n# pylint -r -n org/company/package2 \r\nNo config file found, using default configuration\r\n************* Module package2.module\r\nC:  2, 0: Trailing newlines (trailing-newlines)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nE:  1, 0: Unable to import 'org.company.package1.module' (import-error)\r\nW:  1, 0: Unused Module imported from org.company.package1.module (unused-import)\r\n```\r\n\r\n### pylint --version output\r\n```\r\npylint 1.6.5, \r\nastroid 1.4.9\r\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \r\n[GCC 5.4.0 20160609]\r\n```\r\n\r\n### With master version of pylint and astroid\r\nThis seems to work correctly but is not what I want\r\n```\r\n# ~/workspace/venv/bin/pylint org       \r\nNo config file found, using default configuration\r\n************* Module company.package1.module\r\nC:  3, 0: Trailing newlines (trailing-newlines)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  1, 0: Missing class docstring (missing-docstring)\r\nR:  1, 0: Too few public methods (0/2) (too-few-public-methods)\r\n************* Module company.package2.module\r\nC:  2, 0: Trailing newlines (trailing-newlines)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nW:  1, 0: Unused Module imported from org.company.package1.module (unused-import)\r\n```\r\nThis doesn't seem to be doing anything\r\n```\r\n# ~/workspace/venv/bin/pylint org.company       \r\nNo config file found, using default configuration\r\n```\r\nand this apparently crashes\r\n```\r\n# ~/workspace/venv/bin/pylint org.company.package       \r\nNo config file found, using default configuration\r\nTraceback (most recent call last):\r\n  File \"/home/dalai/workspace/venv/bin/pylint\", line 9, in <module>\r\n    load_entry_point('pylint==1.7.0', 'console_scripts', 'pylint')()\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/__init__.py\", line 13, in run_pylint\r\n    Run(sys.argv[1:])\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/lint.py\", line 1300, in __init__\r\n    linter.check(args)\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/lint.py\", line 726, in check\r\n    self._do_check(files_or_modules)\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/lint.py\", line 837, in _do_check\r\n    for descr in self.expand_files(files_or_modules):\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/lint.py\", line 869, in expand_files\r\n    self.config.black_list_re)\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/utils.py\", line 894, in expand_modules\r\n    modpath = _modpath_from_file(subfilepath, is_namespace)\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg/pylint/utils.py\", line 833, in _modpath_from_file\r\n    return modutils.modpath_from_file_with_callback(filename, is_package_cb=_is_package_cb)\r\n  File \"/home/dalai/workspace/venv/lib/python3.5/site-packages/astroid-1.5.0-py3.5.egg/astroid/modutils.py\", line 310, in modpath_from_file_with_callback\r\n    filename, ', \\n'.join(sys.path)))\r\nImportError: Unable to find module for /home/dalai/workspace/org/company/package2/module.py in /home/dalai/workspace, \r\n., \r\n/home/dalai/workspace/venv/bin, \r\n/home/dalai/workspace/venv/lib/python3.5/site-packages/pylint-1.7.0-py3.5.egg, \r\n/home/dalai/workspace/venv/lib/python3.5/site-packages/editdistance-0.3.1-py3.5-linux-x86_64.egg, \r\n/home/dalai/workspace/venv/lib/python3.5/site-packages/astroid-1.5.0-py3.5.egg, \r\n/usr/lib/python35.zip, \r\n/usr/lib/python3.5, \r\n/usr/lib/python3.5/plat-x86_64-linux-gnu, \r\n/usr/lib/python3.5/lib-dynload, \r\n/home/dalai/workspace/venv/lib/python3.5/site-packages, \r\n/home/dalai/workspace/venv/lib/python3.5/site-packages/astroid-1.5.0-py3.5.egg/astroid/brain\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1353,
                "title": "pylint default disabled checkers should be a separate parameter from user-defined",
                "labels": [
                    "discussion"
                ],
                "description": "as a child from #1352\r\n\r\n### Steps to reproduce\r\n1. run : \"python -m pylint --generate-rcfile | grep disable=\"\r\n2. users then either:\r\n    a) wipe that list, and define their own custom disabled checkers\r\n    b) append to that list and never think about it again\r\n    c) they dont' change it\r\n    d) meticulously maintain diffs\r\n\r\n### Current behavior\r\n\r\nFor users (c) that do not use a rcfile with \"disable=\", when pylint adds new default disabled checkers, they benefit from the optimization.\r\n\r\nBut for (a) or (b) users, they'll never benefit from future additions/removals from the pylint project for this list.\r\n\r\nThis current list is documented : https://pylint.readthedocs.io/en/latest/reference_guide/features.html#messages-control-options\r\n\r\n### Expected behavior\r\n\r\nTBD\r\n\r\nI was thinking, as an enhancement, to support a /new/ (hidden?) parameter like \"default-disable=...\".\r\nLet users specify their own disabled checkers without wiping or having to manage the built-in pylint disabled checkers;\r\n\r\nIf a user /DOES/ want to run a checker which is disabled by default, they can just have \"enable=<FOO>\" after it.\r\n\r\n### pylint --version output\r\n\r\n$ python35 -m pylint --version\r\nNo config file found, using default configuration\r\nmain.py 1.5.5,\r\nastroid 1.4.5\r\nPython 3.5.1 (default, Dec 11 2015, 13:17:22)\r\n[GCC 4.8.3 20140911 (Red Hat 4.8.3-9)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1290,
                "title": "typing module leads to lots of invalid-name warnings",
                "labels": [
                    "python 3.6"
                ],
                "description": "Here's an example:\r\n```\r\nfrom typing import Union, Dict\r\n\r\nMyDict = Dict[str, str]\r\nMyOptions = Union[int, str]\r\n```\r\n\r\nThere are lots more, Generic[], Callable[], Tuple[], Optional[], NewType(), NamedTuple()\r\n\r\n### Current behavior\r\nC:  3, 0: Invalid constant name \"MyDict\" (invalid-name)\r\nC:  4, 0: Invalid constant name \"MyOptions\" (invalid-name)\r\n\r\n### Expected behavior\r\nNo errors?\r\n\r\n### pylint --version output\r\npylint 1.6.5, \r\nastroid 1.4.9\r\nPython 2.7.12 (default, Jun 29 2016, 14:05:02) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n\r\nI have some ideas about how to fix this.  One involves adding a brain to astroid so that Dict[X] and Union[X] return ClassDefs but I'm not sure if that's the correct thing to do."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1289,
                "title": "PyLint does not respect lazy evaluation strategies",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. Run pylint with the following source:\r\n\r\n```{python}\r\narr = None\r\nif arr and arr[0]:\r\n    print(\"Never reached\")\r\n```\r\n\r\n### Current behavior\r\n\r\n````\r\n************* Module test\r\nE:  3,11: Value 'arr' is unsubscriptable (unsubscriptable-object)\r\n````\r\n\r\n### Expected behavior\r\nNo warning, or a warning about using this pattern at all.  Maybe a warning about unreachable code in cases like this where `arr` is known to be falsy.\r\n\r\n### pylint --version output\r\n````\r\npylint 1.6.4, \r\nastroid 1.4.9\r\nPython 3.6.0 (default, Jan 16 2017, 12:12:55) \r\n[GCC 6.3.1 20170109]\r\n````\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1285,
                "title": "RecursionError on this small Django snippet",
                "labels": [
                    "crash",
                    "bug"
                ],
                "description": "Hi,\r\n\r\n### Steps to reproduce\r\n1. virtualenv -p /usr/bin/python3 temp  # Works with Python 2\r\n2. cd temp\r\n3. pylint test.py  # See attachment\r\n\r\n### Current behavior\r\n\r\n``RecursionError: maximum recursion depth exceeded while calling a Python object``\r\n\r\nYou would understand I don't paste the whole traceback. ^^\"\r\n\r\n### Expected behavior\r\n\r\nThe same versions of pylint, astroid, mccabe... but on the Python 2 venv \r\n\r\nproduce the expected result.\r\n\r\n### pylint --version output\r\n\r\n```bash\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.6.5, \r\nastroid 1.4.9\r\nPython 3.6.0 (default, Jan 16 2017, 12:12:55) \r\n[GCC 6.3.1 20170109]\r\n```\r\nPlus mccabe 0.6.0."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1276,
                "title": "False positive on no-member for inferred classes that are ignored",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. get some code that end up having an instance that can be one of multiple classes, at least one of them being ignored for typecheck (using `ignored-modules` or `ignored-classes`), then use a non existent member on this instance. E.g.[`schroedinger.py` example file](https://gist.github.com/pcorpet/a0eaa282754a95273bccacd07419d1f7)\r\n2. run the commandline with pylint and make sure you ignore one of the classes (here I've added extra commandline flags to make sure nothing interferes with the result) \r\n```sh\r\npylint --rcfile=/dev/null --ignored-classes=MyVeryOwnError --reports=no --disable=R schroedinger.py\r\n```\r\n\r\n### Current behavior\r\nA `no-member` error is shown for the culprit line and mentions only the inferred classes that are not ignored.\r\n```\r\nE: 26,14: Instance of 'ValueError' has no 'node' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nNo error at all.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.6.4, \r\nastroid 1.4.8\r\nPython 3.5.2 (default, Nov 17 2016, 22:42:56) \r\n[GCC 4.9.2]\r\n```\r\n\r\n### My Guess\r\n\r\nI believe that what happens is that the [continue](https://github.com/PyCQA/pylint/blob/69f480dfe698b17756f97ca61cd7c6390e3e7f66/pylint/checkers/typecheck.py#L627) statement which covers for ignored owners should validate the member instead of trusting other inferred owers to know better. So I would replace it by a `break`. Any thoughts?\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1245,
                "title": "New checker: consider iterating file",
                "labels": [
                    "astroid",
                    "blocked",
                    "work in progress"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1191,
                "title": "disabling too-many-arguments in-line when parent class is specified still produces warning",
                "labels": [
                    "bug"
                ],
                "description": "If the parent class is explicitly specified, when using an inline comment to disable `too-many-arguments`, the issue is still reported. It does not matter if the parent class is `object` or a class defined in the file. `too-many-arguments` is reported as being disabled, but the warning is still displayed.\r\n\r\n### Steps to reproduce\r\n```\r\n# pylint: disable=missing-docstring,too-few-public-methods\r\n\r\nclass NoParentClass:  # pylint: disable=too-many-arguments\r\n    def __init__(self, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6):\r\n        self.arg_1 = arg_1\r\n        self.arg_2 = arg_2\r\n        self.arg_3 = arg_3\r\n        self.arg_4 = arg_4\r\n        self.arg_5 = arg_5\r\n        self.arg_6 = arg_6\r\n\r\n\r\nclass ChildOfObject(object):  # pylint: disable=too-many-arguments\r\n    def __init__(self, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6):\r\n        self.arg_1 = arg_1\r\n        self.arg_2 = arg_2\r\n        self.arg_3 = arg_3\r\n        self.arg_4 = arg_4\r\n        self.arg_5 = arg_5\r\n        self.arg_6 = arg_6\r\n\r\n\r\nclass Base:\r\n    pass\r\n\r\n\r\nclass ChildOfBass(Base):  # pylint: disable=too-many-arguments\r\n    def __init__(self, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6):\r\n        self.arg_1 = arg_1\r\n        self.arg_2 = arg_2\r\n        self.arg_3 = arg_3\r\n        self.arg_4 = arg_4\r\n        self.arg_5 = arg_5\r\n        self.arg_6 = arg_6\r\n```\r\n\r\n### Current behavior\r\n```\r\nNo config file found, using default configuration\r\n************* Module too_many_arguments\r\nI:  1, 0: Locally disabling missing-docstring (C0111) (locally-disabled)\r\nI:  1, 0: Locally disabling too-few-public-methods (R0903) (locally-disabled)\r\nI:  3, 0: Locally disabling too-many-arguments (R0913) (locally-disabled)\r\nI: 13, 0: Locally disabling too-many-arguments (R0913) (locally-disabled)\r\nI: 27, 0: Locally disabling too-many-arguments (R0913) (locally-disabled)\r\nR: 14, 4: Too many arguments (7/5) (too-many-arguments)\r\nR: 28, 4: Too many arguments (7/5) (too-many-arguments)\r\n```\r\n\r\n### Expected behavior\r\n`too-many-arguments` is disabled for the scope of the class in all cases and no warnings are displayed.\r\n\r\n### pylint --version output\r\n```\r\npylint --version\r\nNo config file found, using default configuration\r\npylint 1.6.4, \r\nastroid 1.4.8\r\nPython 3.5.1 (default, Feb  7 2016, 15:03:27) \r\n[GCC 4.8.4]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1187,
                "title": "Feature request: linting from stdin",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi there,\r\n\r\npylint is one of the few checkers supported by [Flycheck](https://github.com/flycheck/flycheck/) that doesn't support checking input passed on stdin. Could this feature be added?\r\n\r\nConcretely, the proposal is that one would be able to call pylint this way:\r\n\r\n   cat /home/clement/test.py | pylint --stdin-file-name /home/clement/test.py - \r\n\r\ninstead of \r\n\r\n    pylint /home/clement/test.py\r\n\r\n\r\nAt first, it may not be clear what advantages this may have.  Here's a short explanation.\r\n\r\n* Flycheck checks files (buffer contents): it doesn't need the file to be saved.  Since pylint requires the file to be checked to exist on disk, however, Flycheck must save the buffer.\r\n\r\n* When this happens with other linters, we usually just write the temporary file to `/tmp`; with pylint, however, we can't do that: saving to /tmp breaks relative imports.\r\n\r\n* Instead, we're forced to save a temporary copy of the file *in the same folder* as the original file.  So we save our temporary as `/home/clement/flycheck_test.py` in the example above.\r\n\r\n* Unfortunately, this approach is invasive: if the user calls e.g. `grep` while a check is in progress, grep will find matches in the temporary file.  If the code is on a backed-up folder (dropbox, owncloud, \u2026), the back-up application might pop up a window saying \"uploading new file flycheck_test.py`. etc.  A concrete example of this problem is at https://github.com/flycheck/flycheck/issues/1173\r\n\r\nMoving to stdin solves this problem neatly: we can pass pylint the contents of the unsaved buffer without saving first, while tipping it about the file name.  This has worked nicely with many other checkers (jshint and luacheck have `--filename`, rubocop has `--stdin`, scss has `--stdin-file-path`, jshint has `--stdin-filename`, flake8 has `--stdin-display-name`, etc.)\r\n\r\nHow hard would it be to implement such a feature?  Someone over at http://stackoverflow.com/questions/27862659/pylint-read-from-stdin asked for the same thing, and apparently on GNU/Linux passing /dev/stdin to pylint seems to work OK (except of course for imports), so hopefully the required amount of work should be relatively low?\r\n\r\nThanks!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1179,
                "title": "Indentation Off with Multi-Line Strings",
                "labels": [
                    "enhancement"
                ],
                "description": "When `pylint` calculates the correct indentation of a line following a multi-line string it uses the last non-space character in the multi-line string rather than basing it off of the code preceding the string. In the following example, I would expect the indentation of `some` and `string` to be four spaces, because that's the correct indentation based off of the `_ = \"\"\"Dear Guido,` line. But `pylint` wants it to be four spaces beyond the start of `Bill\"\"\"`, which makes the code less readable IMO.\r\n\r\n### Steps to reproduce\r\n```\r\n1. cat > /tmp/z.py\r\n_ = \"\"\"Dear Guido,\r\n\r\nPython is pretty awesome, but there's something annoying with the linter.\r\n\r\n                                 Sincerely,\r\n                                 Bill\"\"\".format(\r\n    some=variable_with_a_long_name,\r\n    strings=another_variable_with_a_really_long_name)\r\n2. pylint /tmp/z.py\r\n```\r\n\r\n### Current behavior\r\nOutputs the following message:\r\n```\r\n************* Module z\r\nC:  7, 0: Wrong hanging indentation (add 33 spaces).\r\n    some=variable_with_a_long_name,\r\n    ^                                | (bad-continuation)\r\nC:  8, 0: Wrong hanging indentation (add 33 spaces).\r\n    strings=another_variable_with_a_really_long_name)\r\n    ^                                | (bad-continuation)\r\n```\r\n### Expected behavior\r\nThis should have been acceptable.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.0.0, \r\nastroid 1.5.0\r\nPython 3.5.0 (default, Nov 18 2015, 12:09:02) \r\n[GCC 4.8.4]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1175,
                "title": "undefined-loop-variable false positive related to for with \"else\" that raises an exception",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "The following code produces an undefined-loop-variable false positive:\r\n\r\n```python\r\nfor x in some_iterable:\r\n    if matches(x):\r\n        break\r\nelse:\r\n    raise Exception\r\n```\r\n\r\nSince the \"else\" clause unconditionally raises an exception, the loop variable will never be undefined if it is used later. This is a common pattern in for loops that are searching for an item in an operable. This is similar to an earlier fix for a false positive in pylint which handles the case of the index variable being assigned in the \"else\" clause.\r\n\r\nHere's my pylint --version output:\r\n\r\npylint-3.5 1.5.6, \r\nastroid 1.4.6\r\nPython 3.5.2 (default, Oct 11 2016, 15:01:25) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1173,
                "title": "Disable module inspection for specific platforms",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "It is often the case that the inspection of a file does only make sense on a certain platform.\r\n\r\nMy suggestion would be\r\n```\r\n# pylint: skip-if(platform=='win32')\r\n```\r\nand for block control:\r\n```\r\n# pylint: disable-if(platform=='win32')=no-member\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1164,
                "title": "Breaking down C0111(Missing Docstring) into multiple \"Convention\" messages",
                "labels": [
                    "enhancement"
                ],
                "description": " As of now C0111 can be multiple thing : \r\n- Missing module docstring\r\n- Missing class docstring\r\n- Missing method docstring\r\n- Missing function docstring\r\n\r\nI wanted to disable \"Missing module docstring\" specifically, because I use one class by module and documenting the module when the class is already documented look like duplication of information. So in order to be able to do that, I think it would be nice if there was a distinction between those various C0111.\r\n\r\nApparently I'm not the only one who want to do this : see [this question on stackOverflow](http://stackoverflow.com/questions/7877522/how-do-i-disable-missing-docstring-warnings-at-a-file-level-in-pylint).\r\n\r\nSeeing the message it gives, it seems that Pylint can already do the distinction and that the biggest problem would be retro compatibility and preventing users that want to get rid of all C0111 in one disable from being forced to disable 4 of them.\r\n\r\nMaybe add C0111-A to C0111-D so you can use C0111 as a generic disabler ? Any idea ?\r\n\r\nRegards,\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1162,
                "title": "pylint might consider understand isinstance",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. Use `pylint -E` on a file containing this piece of code:\r\n```python\r\nclass FoobarException(Exception):\r\n    foobar = None\r\n\r\ntry:\r\n    pass\r\nexcept Exception as ex:\r\n    if isinstance(ex, FoobarException):\r\n        ex.foobar\r\n```\r\n\r\n### Current behavior\r\nThis error message is displayed:\r\n`Instance of 'Exception' has no 'foobar' member (no-member)`\r\n\r\n### Expected behavior\r\nNo error message at all.\r\n\r\nI am aware that this code do not use python good practices. A `except FoobarException as ex` would have been the right thing to do in that particular case.\r\n\r\nStill, beeing inside the `if` condition implies that `ex` type is `FoobarException` and not just `Exception`.\r\n\r\nThat would not be the case with the following piece of code for instance:\r\n```python\r\nclass FoobarException(Exception):\r\n    foobar = None\r\n\r\ntry:\r\n    pass\r\nexcept Exception as ex:\r\n    if isinstance(ex, FoobarException) or someRandomResultFunction():\r\n        ex.foobar\r\n```\r\n\r\n### pylint --version output\r\n```\r\npylint 1.6.4, \r\nastroid 1.4.8\r\nPython 2.7.12 (default, Sep 29 2016, 13:30:34) \r\n[GCC 6.2.1 20160916 (Red Hat 6.2.1-2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1160,
                "title": "Unexpected errors with future library imports",
                "labels": [
                    "enhancement",
                    "discussion"
                ],
                "description": "Thanks for such a great library!\r\n\r\nI've run into an issue after upgrading from v1.5.5 to v1.6.4 where I'm getting a lot of `wrong-import-position` errors for imports which occur after importing the and installing the `standard_library` from the `future` library (as described [here](http://python-future.org/imports.html#aliased-imports), this needs to happen *before* imports of the standard library code).\r\n\r\n### Steps to reproduce\r\n1. Create a file like [this](https://gist.github.com/jscn/8eb050aed40abb9953ce0ac5eb91a873)\r\n2. Run `pylint` on the file\r\n\r\n### Current behavior\r\nUsing no config file at all, `pylint` reports the following errors:\r\n```\r\nC:  9, 0: Import \"from collections import namedtuple\" should be placed at the top of the module (wrong-import-position)\r\nC:  9, 0: standard import \"from collections import namedtuple\" comes before \"from future import standard_library\" (wrong-import-order)\r\n\r\n```\r\n\r\n### Expected behavior\r\nI'd love for `pylint` to just ignore the `future` imports when it's doing the import order/position checks (i.e., it should still report whether non-`future` library imports occur in the correct order *relative to each other*, but should totally ignore the `future` library imports themselves). But I understand it may be out of scope for `pylint` to have special knowledge of `future`.\r\n\r\nIf that's the case, then I'd like to be able to tell pylint to ignore a block of import statements entirely. It may already be possible to do this but I couldn't see how from the documentation. My only option as I understand it is to turn off the `wrong-import-position` check for the entire block of import statements. But I *want* pylint to tell me if my non-`future` related imports are ordered incorrectly!\r\n\r\nSo something like:\r\n```python\r\n# pylint: disable=something-or-other\r\nfrom future import standard_library\r\nstandard_library.install_aliases()\r\n# pylint: enable=something-or-other\r\n\r\nfrom datetime import datetime\r\nfrom collections import namedtuple\r\n```\r\nshould still report `wrong-import-order` for the the `datetime` and `collections` imports, but should not report any `wrong-import-position` errors.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.6.4, \r\nastroid 1.4.8\r\nPython 2.7.9 (default, Jun 29 2016, 13:08:31) \r\n[GCC 4.9.2]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1159,
                "title": "protected-access and @classmethod cls",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n```\r\nclass C(object):\r\n  _Foo = 12\r\n\r\n  @classmethod\r\n  def Enable(cls):\r\n    x = cls()\r\n    print x._Foo  # protected-access warning\r\n```\r\n\r\n### Current behavior\r\n`W:  7,10: Access to a protected member _Foo of a client class (protected-access)\r\n`\r\n### Expected behavior\r\nSeems like this should be allowed, for consistency with regular methods\r\n\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 2.0.0, \r\nastroid 1.5.0\r\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \r\n[GCC 4.8.2]\r\n\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1148,
                "title": "\"Wrong hanging indentation\" with tabs",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n1. Take the following piece code (test.py):\n\n```\nclass MainFrame(object):\n    def init_ui(self):\n        self.m_notebook.ChangeSelection(\n            self.m_notebook.FindPage(self.m_panelComponents))\n```\n\nNote, the indentation is made via tabs, not spaces.\n2. `pylint.exe --indent-string='\\t' --indent-after-paren=1 --reports=no test.py`\n### Current behavior\n\n```\nC:  4, 0: Wrong hanging indentation (add 14 spaces).\n                        self.m_notebook.FindPage(self.m_panelComponents))\n   ^             | (bad-continuation)\n```\n\nAdding more tabs or spaces at the beginning of the hanging line doesn't help.\n### Expected behavior\n\nI would expect that pylint considers this hanging indentation correct. When the function is placed outside the class, the \"Wrong hanging indentation\" warning is not reported.\n### pylint --version output\n\n```\nNo config file found, using default configuration\npylint 1.6.4,\nastroid 1.4.8\nPython 2.7.8 (default, Jul  2 2014, 19:48:49) [MSC v.1500 64 bit (AMD64)]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1144,
                "title": "Fail to find NameError for undefined functions",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n\nrun pylint on code:\n\n```\n# coding=utf-8\nprint(calculate(1.01, 2))\n\ndef calculate(value1: int, value2: float) -> int:\n    return (value1+value2)\n```\n### Current behavior\n\nError is not issued.\n### Expected behavior\n\nE:  nn, nn: Undefined function 'calculate' (undefined-function)\n### pylint --version output\n\npylint.EXE 1.6.4,\nastroid 1.4.8\nPython 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)]\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1127,
                "title": "False positive: no-member on \"property\"-like decorator",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n1. Have Pylint (1.6.4) evaluate the following snippet:\n   \n   ``` python\n   class prop(object):\n       def __init__(self, fn):\n           self.value = 5\n   \n   class my_class(object):\n       @prop\n       def my_property(self):\n           pass\n   \n   print(my_class().my_property.value)\n   ```\n### Current behavior\n\nPylint returns the following, even with `prop` added to `property_classes`:\n    `E: 10, 6: Method 'my_property' has no 'value' member (no-member)`\n### Expected behavior\n\nNo `no-member` errors. A decorated function should not be assumed to be a function.\n### `pylint --version` output\n\n```\n    No config file found, using default configuration\n    pylint 1.6.4, \n    astroid 1.4.8\n    Python 3.5.2 (default, Jun 28 2016, 08:46:01) \n    [GCC 6.1.1 20160602]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1123,
                "title": "False positives when using methods that pylint saw being once overridden at instance level",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "### Steps to reproduce\n\n1 Have the following file (`xyz.py`):\n\n``` python\nclass A:\n    def get_stuff(self, x):\n        return x\n\n\ndef test1():\n    def g():\n        pass\n    a = A()\n    a.get_stuff = g\n\n\ndef test2():\n    a = A()\n    value = a.get_stuff(1)\n```\n\n2 Run `pylint -f parseable xyz 2> /dev/null | grep \"\\[E\"`\n### Current behavior\n\nPylint detects errors where it shouldn't:\n\n```\nxyz.py:15: [E1111(assignment-from-no-return), test2] Assigning to function call which doesn't return\nxyz.py:15: [E1121(too-many-function-args), test2] Too many positional arguments for function call\n```\n### Expected behavior\n\nNo errors reported (well, maybe pylint could detect incompatible type on `a.get_stuff = g` assignment)\n### pylint --version output\n\n```\nNo config file found, using default configuration\npylint 1.6.4, \nastroid 1.4.8\nPython 3.5.2 (default, Jun 29 2016, 13:43:58) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\n```\n\nKeywords for visibility: type inference\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1118,
                "title": "Overridden no-member causes pylint to ignore an assignment",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n\n``` python\ntry:\n  raise ValueError()\nexcept ValueError as ex:\n  print(ex)\ntry:\n  pass\nexcept pyVmomi.vim.fault.InvalidLogin as ex:  # pylint: disable=no-member\n  print(ex.msg)\n```\n### Current behavior\n\n```\n[E1101(no-member), main] Instance of 'ValueError' has no 'msg' member\n```\n### Expected behavior\n\n(no error)\n- Note: The expected behavior should be the same as when `ex` is not reused:\n  \n  ``` python\n  try:\n    raise ValueError()\n  except ValueError as exc:\n    print(exc)\n  try:\n    pass\n  except pyVmomi.vim.fault.InvalidLogin as ex:  # pylint: disable=no-member\n    print(ex.msg)\n  ```\n### pylint --version output\n\n```\npylint 1.6.4, \nastroid 1.4.8\nPython 2.7.9 (default, Jun 29 2016, 13:08:31) \n[GCC 4.9.2]\n```\n\n```\npylint 1.6.4, \nastroid 1.4.8\nPython 3.4.2 (default, Oct  8 2014, 10:45:20) \n[GCC 4.9.1]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1110,
                "title": "No emit message in \"missing whitespace around operator\"",
                "labels": [
                    "help wanted",
                    "minor"
                ],
                "description": "### Steps to reproduce\n1. Use the following code `var = 3+0`\n2. Run `flake8 --show-source --select=E226 file.py`\n3. See the outuput: `file.py:1:6: E226 missing whitespace around arithmetic operator`\n4. Run `pylint -d invalid-name,missing-docstring file.py`\n### Current behaviour\n\nNot emit messages.\n### Expected behaviour\n\nShould we emit the message of `missing whitespace around operator`?\n### pylint --version output\n\n``` bash\npylint 1.6.4,\nastroid 1.4.8\nPython 2.7.10 (default, Oct 23 2015, 19:19:21)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1104,
                "title": "pytz.UTC.localize false positive for no-value-for-parameter",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n\npylint the following program\n\n```\nimport pytz\n\n\ndef example(datetime_obj):\n    return pytz.UTC.localize(datetime_obj)\n```\n### Current behavior\n\n```\nE:  5,11: No value for argument 'dt' in unbound method call (no-value-for-parameter)\n```\n### Expected behavior\n\npylint not complaining about `no-value-for-parameter`. `pytz.UTC` is a singleton instance.\n### pylint --version output\n\n```\nNo config file found, using default configuration\npylint 1.6.4, \nastroid 1.4.8\nPython 2.7.11 (default, Jan 22 2016, 08:28:37) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1082,
                "title": "used-before-assignment and undefined-loop-variable false positives with regard to function annotation",
                "labels": [
                    "bug"
                ],
                "description": "Given a function such as the following, we are getting used-before-assignment and undefined-loop-variable for the annotation, while we should retrieve an undefined-variable message, since the variable is actually not defined there.\n\n```\n\ndef test(a:x):\n   if x == 2:\n      for x in [1, 2]:\n          pass\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1078,
                "title": "\"Method '[...]' has no '__doc__' member (no-member)\" when using augmented assignment in class body",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\n1. Create a method with a docstring.\n2. Access the method's docstring through its __doc__ member.\n### Current behavior\n\nCode executes fine, pylint generates an Error message: \"Method '[...]' has no '__doc__' member (no-member)\"\n### Expected behavior\n\nPylint should not generate an error message for the __doc__ member, because it is in fact defined. (Even if there's no docstring, it's still None.)\n### pylint --version output\n\nNo config file found, using default configuration\npylint 1.6.4,\nastroid 1.4.8\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\n\n(Edited the title to reflect the reproduction below.)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1077,
                "title": "Add warning for an imported method with the same name as a submodule",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\n1. Create an **init**.py file with `from .send import send`.\n2. Create a send.py file with the definition of a method called `send`.\n3. Lint the folder.\n### Current behavior\n\nNothing\n### Expected behavior\n\npylint should warn that the \"send\" submodule cannot be imported because the method \"send\" exists on the module.\n### pylint --version output\n\nmaster\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1070,
                "title": "Support output to a file to support tox on CI servers",
                "labels": [
                    "enhancement"
                ],
                "description": "Currently [`tox` cannot redirect commands to files](https://bitbucket.org/hpk42/tox/issues/73/pipe-output-of-command-into-file), which means when running Pylint from within `tox` there seems to be no way to output the results to a single (for example HTML) file that a CI server can store for display.\n\n`--file-output=y` used to be close to what is needed, but it [was removed in 2.0](https://docs.pylint.org/en/latest/whatsnew/changelog.html#what-s-new-in-pylint-2-0), and also created a different file for each module which is difficult to navigate.\n\nHere is the [StackOverflow question](https://stackoverflow.com/questions/10439481/save-pylint-message-to-a-file) that relates to this.\n\n`flake8` added this feature for the same reason: https://gitlab.com/pycqa/flake8/issues/15\n\n> ...however my main usage of flake8 is from within tox running under jenkins (using the violations plugin). Since tox doesn't support shell redirection...\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1064,
                "title": "Disable 'misplaced-comparison-constant' checker by default by moving it to extensions",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\n1.  Write a comparison such as `if 5 < a:...`\n### Current behavior\n\nPylint complains with 'misplaced-comparison-constant'.\n### Expected behavior\n\nNo issue.\n\nIn other languages, so-called [\"Yoda expressions\"](https://en.wikipedia.org/wiki/Yoda_conditions) can be used as a code guard to prevent an accident assignment when an equality comparison was indented. (i.e. `if (42 = x) { /* in C, this causes a compile time error error */ }` In Python, we cannot use assignments when a boolean expression is expected, so let's not dwell on this use case any further.\n\nHowever, that is not my reason for using this style of comparison. I prefer to avoid using the greater-than symbol (`>`). Instead, I'll always use the less-than (`<`) or the less-than-equal (`<=`). I'll yield to Dijkstra's explanation for the best way to describe ranges in his paper ['Why numbering should start at zero'](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html).\n\nGiven we are talking Python, that paper is, actually, very interesting because Python is one of the very few languages that the range expression is a valid boolean expression; i.e. `2 <= x < 13`. So, I'll cynically ask, \"Is that half-good, half-bad?\"\n\nA quick test against pylint tells me that the range expression is handled appropriately.\n\nSo, why do we even care?\n\nReadability!? If so, that seems inane to me. Force the nitpickers to enable `misplaced-comparison-constant` rather than ding those that aren't so easily confused.\n\nOther rationale!? I can't think of some use case that may invoke some rare peculiarity as one may find with overloaded operators in C++. That is to say, Python will use reflection to handle equality of unlike objects; assuming the objects make use of `NotImplemented`.\n\nExample:\n\n``` python\n\"\"\"This example is intentionally absurd.\"\"\"\n\nclass MyClass(object):\n    def __eq__(self, other):\n        if isintance(other, int):\n            return other == 42\n        return NotImplemented\n\nclass MyOtherClass(object):\n    def __eq__(self, other):\n        return isinstance(other, MyClass)\n\nMyClass() == 42  # True\n42 == MyClass()  # True\n\nMyOtherClass() == MyClass()  # True\nMyClass() == MyOtherClass()  # True\n```\n### pylint --version output\n\n```\n$ pylint --version\nNo config file found, using default configuration\npylint 1.6.4,\nastroid 1.4.7\nPython 2.7.11 (default, Mar 15 2016, 09:47:58)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1060,
                "title": "Runs of pylint on the same codebase produce different results",
                "labels": [
                    "bug"
                ],
                "description": "Here are two builds once run using my own gitlab runner and on gitlab's shared runners.\nMy runner results in passing tests, while the shared runner fails. It doesn't seem to related to the runners. Two devs ran the tests locally and they passed, another got the error.\nhttps://gitlab.com/thelinuxguy/hyperkitty/builds/2814491\nhttps://gitlab.com/thelinuxguy/hyperkitty/builds/2814452\n\nHere is the actual code\nhttps://gitlab.com/thelinuxguy/hyperkitty/blob/master/hyperkitty/models/email.py#L208\n\nand this is how we run our tests\nhttps://gitlab.com/thelinuxguy/hyperkitty/blob/master/tox.ini\n\nSince we are using tox, we always use the latest released version of pylint.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1056,
                "title": "Document each rule separately",
                "labels": [
                    "documentation",
                    "minor"
                ],
                "description": "We can do a better job at documenting our rules. Currently we're employing an automatic approach, in which we generate a restructuredText document from the help messages of the rules, but this means we can't explain them properly, we can't put actual examples in the help messages and we can't version them (when they were added, removed etc)\n\nWe can take same inspiration from how the folks from ESLint are doing things: http://eslint.org/docs/rules/\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1005,
                "title": "Enhancements to linting rules",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi! I installed pylint last night to add to one of my Python projects in an attempt to create a requirement of maintaining lint-free code when contributing. I was really impressed with the number of rules that pylint has built into it, but also found it very difficult to work out how to configure the settings. \n### Background\n\nI have a lot of experience working in C-based languages and use a tool called [clang-format](http://clang.llvm.org/docs/ClangFormat.html) for maintaining style and lint-free code in my C/C++/Objective-C projects. This tool has a fair number of options and ways you can tweak the rules it uses to match however you want your project to be formatted. You can check out the various options available [here](http://clang.llvm.org/docs/ClangFormatStyleOptions.html).\n### Enhancements\n\nThe major thing that stood out to me about clang-format vs pylint is that pylint has a lot of, what i might call \"higher level\" directives -- stuff that would be caught in C-style languages by the compiler rather than a linter. So while I find the options in pylint to be much more comprehensive in doing analysis on my code, I did find the ability to tweak the behavior of many of the options to be lacking.\n\nFor example, having an option to enable or disable the `trailing-whitespace` check for comment lines would be extremely useful to me. While I do care about extra trailing whitespace on code-lines, I don't care about trailing whitespace that is part of a comment line. Those results throw up false positives a report that can hide more serious issues with the way the code is written.\n\nA number of the options, such as the formatting for method/function/class/variable/etc names, currently uses regex to set the expectations of behavior. I think that a number of built-in default patterns should be able to be used for these in addition to the custom regex rules. I would argue that the vast majority of projects that use pylint would use a handful of common naming conventions that could be standardized across projects. \n\nAnother example of an issue i ran into was that my print statements are formatted as `print('some string')` in order to support compatibility between Python 2 and 3. However, pylint raises a warning on this for unnecessary parenthesis being used. I would rather not disable that linter option but it will give false-positives that actually break the code's intended compatibility with Python 3.\n\nI don't have many other specific examples of enhancements that could be made because I'm still learning how to use pylint and the myriad of options that are available to me with it, but many of the settings could use some more fine-grain control with sets of defaults or optionally enforced parameters. One of the maintainers asked me on Twitter to open an issue about this so there could be some conversation about how these improvements might taken into consideration. I'm curious to know your thoughts about this.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 654,
                "title": "Add new checks for the new coroutines added in PEP 492 and Python 3.5",
                "labels": [
                    "contributor friendly",
                    "enhancement",
                    "help wanted"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\r\n\r\n---\r\n\r\nWould be useful to have some of these at least:\r\n1. await accepts only an awaitable\r\n2. type error if **await** returns anything else than an iterator\r\n3. syntax error if await is used outside of an async def\r\n4. **aenter** and **aexit** must return an awaitable\r\n5. syntax error to use async with out side of async def\r\n6. error to pass an object without **anter** and **aexit** to async with\r\n\r\nSimilar to for async for.\r\n\r\n---\r\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/654\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 994,
                "title": "Feature request - pipe the dot code of a pylint/pyreverse package or class diagram into the stdout stream",
                "labels": [
                    "topic-pyreverse"
                ],
                "description": "Could you pipe the dot code of a pylint/pyreverse package or class diagram into the stdout stream (~ option in addition or alternatively to creating a .dot file)?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 987,
                "title": "-j0 hides duplicate-code",
                "labels": [
                    "bug"
                ],
                "description": "When I have two files like this:\n\n``` python\ndef fun1():\n    pass\n\ndef fun2():\n    pass\n\ndef fun3():\n    pass\n```\n\nAnd I run pylint (1.5.0 or current master) without `-j`, I get `duplicate-code` as expected:\n\n```\n$ pylint 1.py 2.py -rn --disable=all --enable=duplicate-code    \nNo config file found, using default configuration\n************* Module 2\nR:  1, 0: Similar lines in 2 files\n[...]\n```\n\nAdding `-j0` hides the error:\n\n```\n$ pylint 1.py 2.py -rn --disable=all --enable=duplicate-code -j0\nNo config file found, using default configuration\n\n-------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 9.17/10, +0.83)\n```\n\nI figured this out because I got the message on AppVeyor but not on Travis, so this might be a Linux-only issue?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 982,
                "title": "Shadowing not detected in comprehensions within comprehensions",
                "labels": [
                    "enhancement"
                ],
                "description": "Pylint correctly detects variable shadowing in 1-deep list comprehensions but fails in list comprehensions within list comprehensions.\n\nThe following works without warning:\n\n``` python\ndef test():\n    var = 1\n    [var[\"a\"] for var in []]\n```\n\nHowever, the following:\n\n``` python\ndef test():\n    var = 1\n    #  \u2193\u2193\u2193\n    [[ var[\"a\"] for i in range(0, 10)] for var in []]\n```\n\nWarns that `Value 'var' is unsubscriptable (unsubscriptable-object)`.\n### pylint --version output\n\n```\npylint 1.5.6, \nastroid 1.4.6\nPython 3.5.2 (default, Jun 28 2016, 08:46:01) \n[GCC 6.1.1 20160602]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 981,
                "title": "Incorrect no-member for overridden alternate constructor classmethods",
                "labels": [
                    "bug"
                ],
                "description": "There are lots of no-member warnings and I'm not sure if this one has been reported yet or if it is related to one of the others, so feel free to close as a dupe....\n### Steps to reproduce\n1. Run pylint on the following code:\n\n``` py\n\"\"\"Module docstring.\"\"\"\n\nclass Foo(object):\n    \"\"\"Foo class.\"\"\"\n\n    @classmethod\n    def bar_clsmethod(cls):\n        \"\"\"Bar method.\"\"\"\n        return cls()\n\n    def a_public_method(self):\n        \"\"\"A public method.\"\"\"\n        print('Hello world.  I am:', self)\n\n\nclass Bar(Foo):\n    \"\"\"Bar class.\"\"\"\n\n    @classmethod\n    def bar_clsmethod(cls):\n        instance = super(Bar, cls).bar_clsmethod()\n        instance.a_public_method()\n        instance.method()  # no-member\n        return instance\n\n    def method(self):\n        \"\"\"Say hello to the world.\"\"\"\n        print('Hello World', self)\n```\n### Current behavior\n\nYou'll get a `no-member` error at the line  `instance.method()  # no-member` because pylint thinks that `instance` is of type `Foo`.  However, since `bar_clsmethod` is a class method that returns an instance of the class and it is being called from `Bar`, then `instance` is an instance of `Bar`.\n### Expected behavior\n\nI expect there to be no \"no-member\" warnings since the classes/instances all have the members that I'm using.\n### pylint --version output\n\nNo config file found, using default configuration\npylint 1.5.6, \nastroid 1.4.6\nPython 2.7.10 (default, Oct 23 2015, 19:19:21) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 971,
                "title": "Generate a Pylint configuration interactively",
                "labels": [
                    "enhancement"
                ],
                "description": "Pylint's configurations tend to be extremely verbose, since we have plenty of options for users to choose from. At this point, I think it would be a good idea to have a command, something as `pylint --quickstart`, which can help generating a new configuration, interactively, by suggesting potential areas where an user can look into. I will come up with some more details later.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 959,
                "title": "hmac imported from cwd",
                "labels": [
                    "bug"
                ],
                "description": "### Current behavior\n\nIf you use the `-j` option, a module named `hmac` from the current working directory may be imported:\n\n```\n$ echo 'raise RuntimeError(\"BAD PYLINT!\")' > hmac.py\n$ touch test.py\n$ pylint -j2 test.py\nNo config file found, using default configuration\nTraceback (most recent call last):\n  File \"/usr/local/bin/pylint\", line 11, in <module>\n    sys.exit(run_pylint())\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/__init__.py\", line 23, in run_pylint\n    Run(sys.argv[1:])\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 1316, in __init__\n    linter.generate_reports()\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 1136, in fix_import_path\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 1315, in __init__\n    linter.check(args)\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 739, in check\n    self._parallel_check(files_or_modules)\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 124, in _patch_sysmodules\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 739, in check\n    self._parallel_check(files_or_modules)\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 807, in _parallel_check\n    for result in self._parallel_task(files_or_modules):\n  File \"/usr/local/lib/python3.5/dist-packages/pylint/lint.py\", line 763, in _parallel_task\n    tasks_queue = manager.Queue()\n  File \"/usr/lib/python3.5/multiprocessing/managers.py\", line 628, in temp\n    token, exp = self._create(typeid, *args, **kwds)\n  File \"/usr/lib/python3.5/multiprocessing/managers.py\", line 520, in _create\n    conn = self._Client(self._address, authkey=self._authkey)\n  File \"/usr/lib/python3.5/multiprocessing/connection.py\", line 493, in Client\n    answer_challenge(c, authkey)\n  File \"/usr/lib/python3.5/multiprocessing/connection.py\", line 730, in answer_challenge\n    import hmac\n  File \"/home/jwilk/badpylint/hmac.py\", line 1, in <module>\n    raise RuntimeError(\"BAD PYLINT!\")\nRuntimeError: BAD PYLINT!\n```\n### Expected behavior\n\npylint should not let any modules be imported from cwd (unless it was asked to do so).\n### pylint --version output\n\n```\nNo config file found, using default configuration\npylint 1.5.6,\nastroid 1.4.6\nPython 3.5.2rc1 (default, Jun 13 2016, 09:33:26)\n[GCC 5.4.0 20160609]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 945,
                "title": "# pylint: disable=wrong-spelling-in-comment does not work",
                "labels": [
                    "bug",
                    "minor"
                ],
                "description": "### Steps to reproduce\n1. Create test.py\n   \n   ``` python\n   \"\"\"\n   This is a test file\n   \"\"\"\n   print \"Hello World\"\n   # pylint: disable=wrong-spelling-in-comment\n   # I probably have some mipeled words\n   ```\n2. run pylint\n   \n   ``` console\n   $ pylint test --spelling-dict=en_US\n   ```\n### Current behavior\n\n```\nI:  5, 0: Locally disabling wrong-spelling-in-comment (C0401) (locally-disabled)\nC:  6, 0: Wrong spelling of a word 'mipeled' in a comment:\n# I probably have some mipeled words\n```\n### Expected behavior\n\n```\nI:  5, 0: Locally disabling wrong-spelling-in-comment (C0401) (locally-disabled)\n```\n### pylint --version output\n\n```\nNo config file found, using default configuration\npylint 1.5.5, \nastroid 1.4.5\nPython 2.7.11 (default, Mar 31 2016, 20:46:51) \n[GCC 5.3.1 20151207 (Red Hat 5.3.1-2)]\n```\n\nThis is important because I could have blocks of commented code that should not be spellchecked\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2444,
                "title": "Fixme should be triggered only in comments",
                "labels": [
                    "reviewed-waiting-updates"
                ],
                "description": "Done at #PyconPL2018\r\n\r\nFeel free to review, I'll prepare suitable PR with changelog and docs entries in a few days."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 938,
                "title": "Keep the messages states per file",
                "labels": [
                    "topic-per-directory-config"
                ],
                "description": "This issue is circumstantial with https://github.com/PyCQA/pylint/issues/618, which proposes making PyLinter classes as lightweight as possible, targeting one file.\n\nCurrently, we have some problems related to the fact that the messages stores and states are for the current analyzed file and not for all the files that Pylint should analyze. This means that currently, we can't have the information about a pragma disable in another file, which would be useful for solving #214 for instance.\n\nMoving to a global message store for all the files seems in line with #618. The changes that this issue involves, without taking in consideration #618 for now, could be to move the token checker outside of PyLinter class and creating one per file, parsing the files to get the AST and for getting the pragmas, holding the pragmas and other relevant information somewhere where the checkers could access them and removing the global bits from PyLinter, which should be per file, instead of relying on the current analyzed file.\nSince we are rewriting how the PyLinter class acts and behave, I think this is the best time to refactor this.\n@AWhetter let me know what do you think. I will try to come up with better details later on.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 931,
                "title": "E0602 when assigning a lambda with the same name",
                "labels": [
                    "bug"
                ],
                "description": "When creating a function with a lambda, pylint does not consider already defined variables with the same name: \n\n``` python\ndef myfunc(x):\n    print(x * 2)\n\nmyvar = 2\n\nclass myclass:\n    # E:  8,23: Undefined variable 'myfunc' (undefined-variable)\n    myfunc = lambda x: myfunc(x)\n    # E:  10,32: Undefined variable 'myvar' (undefined-variable)\n    myvar = lambda x: print(x * myvar)\n\nmyclass.myfunc(21)\nmyclass.myvar(333)\n```\n\nHowever this code runs fine.\n### pylint --version output\n\n``` bash\n$ pylint --version\npylint 1.5.6, \nastroid 1.4.6\nPython 3.4.2 (default, Oct  8 2014, 10:45:20) \n```\n\nThis was encountered alongside, and may be linked with, #848.\nThis may also be linked to #851.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 880,
                "title": "hanging indent off by one with tabs",
                "labels": [
                    "bug",
                    "minor"
                ],
                "description": "When checking the format of hanging indents pylint (master branch as of this posting) appears to be calculating the required value in spaces but not normalising them to the tab size when it is set to use tabs. For instance the correct indentation is calculated to be 17 spaces and tabs are 4 spaces wide. There is no combination of tabs that can be 17 spaces wide.\nThe following sample illustrates the behavior.\n\n```\nclass Bob:\n \\tdef alice(self):\n \\tfoo(\n\\t\\t\\t\\t1,\n\\t\\t\\t\\t2,\n\\t\\t\\t\\t3,\n\\t\\t\\t\\t4 \n\\t\\t\\t\\t) \n\\tdef charlie(self):\n\\tfoo(\n                 1,\n                 2,\n                 3,\n                 4\n                 )\n```\n\nThe call to `foo` in `Bob.charlie` is judged to have the correct indent (17 spaces) while the call to `foo` in `Bob.alice` is judged to be incorrectly spaced at 4 tabs each 4 characters wide.\nAn identical call to `foo` at the top level of the script produces no warnings.\n\n```\nfoo(\n\\t1,\n\\t2,\n\\t3,\n\\t4\n\\t)\n```\n\nUsing just one indent in the call inside `Bob.alice` is also flagged as the wrong hanging indent.\nattached is the script i used to illustrate the problem, and the output of pylint.\nI use the default configs with only `indent-string='\\t'` and `indent-after-paren=1` as changes.\n[tmp.py.txt](https://github.com/PyCQA/pylint/files/232391/tmp.py.txt)\n[tmp.pylint.txt](https://github.com/PyCQA/pylint/files/232390/tmp.pylint.txt)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 638,
                "title": "False positive bad-continuation error",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Tim Leslie (BitBucket: [timl](http://bitbucket.org/timl), GitHub: @timl?)**\n\n---\n\nPEP 8 states:\n\n> The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list...\n\nThe following code, which is valid according to PEP8, \n\n``` python\ntest1 = [\"foo\",\n         \"bar\",\n         \"baz\"\n         ]\n```\n\ngives this error:\n\n```\nC:  4, 0: Wrong continued indentation.\n         ]\n        |^ (bad-continuation)\n```\n\nI'm currently running the latest pylint installed via pip (1.4.4).\n\n```\n\u279c  src  pylint --version\nNo config file found, using default configuration\npylint 1.4.4, \nastroid 1.3.8, common 1.0.2\nPython 2.7.8 |Anaconda 1.9.1 (x86_64)| (default, Aug 21 2014, 15:21:46) \n[GCC 4.2.1 (Apple Inc. build 5577)]\n```\n\nThe example taken directly from the PEP 8 text does not produce the error:\n\n``` python\nmy_list = [\n    1, 2, 3,\n    4, 5, 6\n    ]\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/638\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 872,
                "title": "Disables immediately after an else clause do not work properly.",
                "labels": [
                    "topic-new-parser"
                ],
                "description": "```\ndef my_func(x):\n    if x:\n        pass\n    else:\n        # pylint: disable=protected-access\n        return x._foo\n```\n\nThe disable has no effect here and a warning is generated.  If any statement is insert between the else and the disable then it works properly.  I suspect the line numbering for the else portion of the ast starts at the first child of the else clause rather than the else keyword itself.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 870,
                "title": "property with setter misidentified as Method",
                "labels": [
                    "bug"
                ],
                "description": "I recently upgrade to pylint-1.5.5\n\n``` sh\npylint --version\npylint 1.5.5, \nastroid 1.4.5\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2]\n```\n\nAnd now my code is generating a lot of false-positive no-member errors, one class of which can be summarized by the following code:\n\n``` py\n# foo.py\nclass X(object):\n    def __init__(self, foo=None):\n        self._foo = foo\n    @property\n    def foo(self):\n        return self._foo\n    @foo.setter\n    def foo(self, val):\n        self._foo = val\n\nif __name__ == '__main__':\n    print X([]).foo.append\n```\n\npylint generates the following error:\n\n```\n$ pylint -E foo.py                                                                                               \n************* Module foo\nE: 12,10: Method 'foo' has no 'append' member (no-member)\n```\n\nThe error goes away if I remove the `foo.setter` method, which is not used in the code above.  So for some reason when `.setter` is defined for an `@property`, pylint thinks the property is a method.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 289,
                "title": "False positive for \"bad-continuation\"",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Steven Myint (BitBucket: [myint](http://bitbucket.org/myint), GitHub: @myint?)**\n\n---\n\nThis valid style is incorrectly labeled as `bad-continuation`.\n\n``` python\ndef test():\n    if (\n        True or\n        False\n    ):\n        pass\n```\n\n```\nC:  3, 0: Wrong hanging indentation before block.\n        True or\n        ^   | (bad-continuation)\nC:  4, 0: Wrong hanging indentation before block.\n        False\n        ^   | (bad-continuation)\n```\n\nAs described in #232, there are more false positives demonstrated in [`E12not.py`](https://github.com/jcrocholl/pep8/blob/master/testsuite/E12not.py).\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/289\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 267,
                "title": "used-before-assignment is not always triggered",
                "labels": [
                    "checkers",
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nFor the following code:\n\n```\n#!python\n\nclass A(object):\n\n    def __init__(self):\n\n        self.a = True\n\n    def method(self):\n\n        if not self.a:\n            test = 1\n            dest = test + 2\n        else:\n            # UnboundLocalError: local variable 'test' referenced before assignment\n            dest = test + 3\n            test = 1\n\n\nif __name__ == \"__main__\":\n    a = A()\n    a.method()\n\n```\n\nMaybe we can detect that `test` is conditionally defined.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/267\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 264,
                "title": "anomalous backslash in string warning in docstrings (W1401)",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [hayne](http://bitbucket.org/hayne), GitHub: @hayne?**\n\n---\n\nPylint (1.2.1) gives a W1401 warning (\"anomalous backslash in string ...\") about the following code\nwhere the backslash is inside a docstring.\nI don't think this is desirable (hence I'm listing this as a bug).\nThere should be at least an option to disable the warning in this specific context.\n# ------------------------------------------------------------\n\ndef getCurrentResultFolderPath():\n    \"\"\"\n    Return the full path to the current result folder.\n    Example of use:\n        currResultFolderPath = getCurrentResultFolderPath()\n        # gives something like: \"C:\\MyStuff\\TestA\\Results\\Run_2013-11-08_2159_59\"\n    \"\"\"\n    pass\n# ------------------------------------------------------------\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/264\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 259,
                "title": "Decorators confuse E1120 analysis",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **the mulhern (BitBucket: [the_mulhern](http://bitbucket.org/the_mulhern))**\n\n---\n\nHere's the example:\n\n```\n#!python\n\n\ndef decorator(f):\n\n    def new_func(junk=None):\n        f(2, junk=junk)\n\n    return new_func\n\n@decorator\ndef junk1(param, junk=None):\n    print(\"%s\" % junk)\n\ndef main():\n    junk1(junk=2)\n```\n\nThe analysis reports\n\"No value passed for parameter 'param' in function call (no-value-for-parameter)\"\nThis is incorrect, since the actual function being called is the new_func manufactured\nby the decorator, and that function does not require the parameter 'param'.\n\nYou can work around this by giving param a default value, (which will never be used).\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/259\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 258,
                "title": "Decorators confuse E1123 analysis",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **the mulhern (BitBucket: [the_mulhern](http://bitbucket.org/the_mulhern))**\n\n---\n\nFor the following example,  error \n\"Passing unexpected keyword argument 'foo' in function call (unexpected-keyword-arg)\"\nis reported, correctly.\n\n```\n#!python\n\ndef junk1(junk=None):\n    print(\"%s\" % junk)\n\ndef main():\n    junk1(foo=2)\n```\n\nFor the example below, no such error is reported, due to the use of keyword args parameter. This is also correct.\n\n```\n#!python\n\ndef junk1(junk=None, *args, **kwargs):\n    print(\"%s\" % junk)\n\ndef main():\n    junk1(foo=2)\n```\n\nIn the following example, the decorator supplies the foo argument, but the analysis still reports\n\"Passing unexpected keyword argument 'foo' in function call (unexpected-keyword-arg)\"\nwhich is incorrect. It should be able to detect that foo is now supplied, and give no error.\n\n```\n#!python\n\ndef decorator(f):\n\n    def new_func(foo=3):\n        f(junk=foo)\n\n    return new_func\n\n@decorator\ndef junk1(junk=None):\n    print(\"%s\" % junk)\n\ndef main():\n    junk1(foo=2)\n```\n\nAnd for the following example it still reports \n\"Passing unexpected keyword argument 'foo' in function call (unexpected-keyword-arg)\"\nalthough in this case it should give up due to the use of keyword arguments param, as\nin the second example.\n\n```\n#!python\n\ndef decorator(f):\n\n    def new_func(**kwargs):\n        f(junk=kwargs[\"foo\"])\n\n    return new_func\n\n@decorator\ndef junk1(junk=None):\n    print(\"%s\" % junk)\n\ndef main():\n    junk1(foo=2)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/258\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 246,
                "title": "Allow fne-grain control of bad-whitespace warnings",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Edd Barrett (BitBucket: [vext01](http://bitbucket.org/vext01), GitHub: @vext01?)**\n\n---\n\nIt would be neat if it was possible to have more control over the `bad-whitespace` warnings.\n\nFor example, consider the following:\n\n```\nj = [ x for x in y if x > 4 ]\ndef myfunc(a,b,c):\n    ...\n```\n\n`bad-whitespace` is fired because:\n- There is a space after the opening `[`\n- There is a space before the closing `]`\n- There is no space after the commas separating function parameters.\n\nIdeally I would like to disable the first two warnings whilst retaining the third. Currently `bad-whitespace` covers all of the above warnings. It would be neat to have a `bad-whitespace-listcomps`, `bad-whitespace-paramcommas`, ...\n\nWhat do you think?\n\nThanks :)\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/246\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 241,
                "title": "Incorrect W0611 : Unused import when preceded by import as",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **Michael Forbes (BitBucket: [mforbes](http://bitbucket.org/mforbes), GitHub: @mforbes?)**\n\n---\n\nThe following code raises W0611 even though `numpy.linalg` is used through the standard alias `np.linalg`:\n\n```\nimport numpy as np\nimport numpy.linalg   #  warning  Unused import numpy (W0611) (python-pylint)\n\nif __name__ == '__main__':\n    print np.linalg.norm(np.array([1, 2, 3]))\n```\n\nA workaround has another (less serious) problem.\n\n```\nimport numpy.linalg\nnp = numpy  # info     Invalid constant name \"np\" (C0103) (python-pylint)\n\nif __name__ == '__main__':\n    print np.linalg.norm(np.array([1, 2, 3]))\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/241\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 228,
                "title": "Pylint depends on Graphviz & crashes if missing / Improve report-graph usage",
                "labels": [
                    "topic-configuration",
                    "bug"
                ],
                "description": "Originally reported by: **Emile Anclin (BitBucket: [anclin](http://bitbucket.org/anclin), GitHub: @anclin?)**\n\n---\n\nPylint's **report graphs** depends on _Graphviz_ since it uses _logilab.common.graph.DotBackend_ which just checks the extension of the output file.\n\nBut it took me a long road to figure out how to even to trigger this problem. (It is deactivated either by \"-E\" or \"-rn\", which is not totally obvious from the documention; and I used these options because I was only interested in the dependency graph -- which makes sense to me). \nI found someone on [stackoverflow](http://stackoverflow.com/questions/12055037/pylint-appears-not-to-generate-an-import-graph) complaining about the same issue; so\nI used his .pylintrc file and triggered another bug:\n\n```\n#!bash\n\nIOError: [Errno 2] No such file or directory: '/home/<my_username>/~/~/gr.dot'\n```\n\nihmo it proves that it is seldom used, and I would move it to  **Pyreverse** ;) \n(I was preparing to pull-request a small patch for #168, but then I remembered Pylint's graph generation...)\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/228\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 214,
                "title": "The duplicate-code (R0801) can't be disabled",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nIt's seems like it's not possible to disable the duplicate code check on portions of a file. Looking at the source, I can see why as it's not a trivial thing to do (if you want to maintain the same scope semantics as other #pylint:enable/disable comments. This would be nice to have though (or I guess I could just cleanup my duplicate code).\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/214\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 207,
                "title": "False positive: no-value-for-parameter when called decorator is itself decorated",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [nathanielmanista](http://bitbucket.org/nathanielmanista)**\n\n---\n\nOn line 29 of the attached reproduction example, it's nice that pylint tries to determine that the expression in the decorator is a legitimate function call, but it should abort its analysis when it looks up the function being called and sees that that function is itself decorated (and thus its overall type is probably not known or at least very hard to reason about).\n\nThis is happening in pylint 1.0.0 and pylint 1.1.0.\n\nThe real-world source of this report is in the Melange project (http://code.google.com/p/soc) at a place where we use the App Engine Datastore's NDB API's ndb.transactional decorator with an argument of \"xg=True\" - ndb.transactional is a decorator that is itself decorated in a way that seems beyond pylint's reasoning. This defect likely affects all users of the App Engine Datastore's NDB API.\n\nThis issue was previously reported over at https://bitbucket.org/logilab/pylint.org/issue/6.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/207\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 202,
                "title": "W0631 undefined-loop-variable false positive",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Chris Rebert (BitBucket: [cvrebert](http://bitbucket.org/cvrebert), GitHub: @cvrebert?)**\n\n---\n\nEnvironment:\n\n```\npylint 1.2.0, \nastroid 1.1.0, common 0.61.0\nPython 2.7.6 (default, Apr 15 2014, 13:08:46) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]\n```\n\nReduced testcase:\n\n```\n#!python\n\n#!/usr/bin/env python2.7\n\ndef example(args):\n    for i in args:\n        def nested():\n            print i\n        nested()\n    for i in args:  # this loop is necessary to trigger the bug\n        print i\n```\n\npylint output:\n\n```\n $ pylint --disable=C0111 -r n -f parseable example.py \nNo config file found, using default configuration\n/envs/new-pylint/lib/python2.7/site-packages/pylint/reporters/text.py:79: UserWarning: parseable output format is deprecated. This is equivalent to --msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\n  'to --msg-template=%s' % (self.name, self.line_format))\n************* Module example\nexample.py:6: [W0631(undefined-loop-variable), example.nested] Using possibly undefined loop variable 'i'\n```\n\nThe code seems safe AFAICT. No warning is reported if the second loop is removed.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/202\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 199,
                "title": "\\ (line continuation) not respected for pragmas",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **the mulhern (BitBucket: [the_mulhern](http://bitbucket.org/the_mulhern))**\n\n---\n\nIn the following code, the disable pragma is respected and no error is reported.\n\n```\n#!python\n\n\nclass Foo(object):\n    \"\"\"block-disable test\"\"\"\n\n    def meth3(self):\n        \"\"\"test one line disabling\"\"\"\n        print \\\n           self.bla # pylint: disable=E1101\n```\n\nBut in this code the disable pragma is not respected and the error is reported.\n\n```\n#!python\n\nclass Foo(object):\n    \"\"\"block-disable test\"\"\"\n\n    def meth3(self):\n        \"\"\"test one line disabling\"\"\"\n        print self.bla \\\n           # pylint: disable=E1101\n```\n\nIn the first case, the code is broken by the \"\\\" but in the second the code is separated from the pragma by the slash. I believe that the pragma should be considered to be on the same line as the code in both cases, so neither should have an error.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/199\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 183,
                "title": "Pyreverse: Broken Command Line Parsing",
                "labels": [
                    "topic-pyreverse",
                    "bug"
                ],
                "description": "Originally reported by: **Emile Anclin (BitBucket: [anclin](http://bitbucket.org/anclin), GitHub: @anclin?)**\n\n---\n\nPyreverse does not seem to recognize a malformed command line, and instead crashes in different ways. Examples of this problem and part of the discussion are in [issue 22](#22/pyreverse-valueerror-need-more-than-1#comment-9586892);\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/183\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 181,
                "title": "False positive for E1120",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **the mulhern (BitBucket: [the_mulhern](http://bitbucket.org/the_mulhern))**\n\n---\n\nHere's the mini example:\n\nFile junk.py:\n\n```\n#!python\n\nclass Junk(object):\n    def __init__(self):\n        self._junk = []\n\n    def m(self, item):\n        self._junk.append(item)\n\nJunk = Junk()\n```\n\nFile junk2.py:\n\n```\n#!python\n\nimport junk\n\ndef main():\n    junk.Junk.m(2)\n\nif __name__ == \"__main__\":\n    main()\n```\n\npylint reports:\n\nE:  4, 4: No value passed for parameter 'item' in function call (no-value-for-parameter)\n\nThe problem here is the assignment,\n\nJunk = Junk() in order to obtain a singleton Junk object which the analysis doesn't seem to recognize.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/181\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 179,
                "title": "Abstract class not overloading an abstract method should be abstract itself.",
                "labels": [
                    "proposal"
                ],
                "description": "Originally reported by: **Yann Dirson (BitBucket: [ydirson](http://bitbucket.org/ydirson), GitHub: @ydirson?)**\n\n---\n\nW0223/abstract-method triggers here for class B:\n\n```\n#!python\n\nclass A(object):\n    def m1(self):\n        raise NotImplementedError()\n\nclass B(A):\n    def m2(self):\n        return self.m1()\n\nclass C(B):\n    def m1(self):\n        return 1\n```\n\nIt's quite obvious to a human reader that B is abstract, but pylint pylint would need a hint. `class_is_abstract` apparently only considers a class to be abstract if it declares abstract methods by itself, and in fact, if I add a new abstract method in B, the warning goes away.\n\nI could use an `@abstractclass` decorator to forcefully add an abstract method with a silly name, but that does not look like a very clean thing to do. Silencing W0223 around the class def would not declare the class to be abstract for other checks.\n\nIf only it were checking an `is_abstract` astroid property on the class, this could be added via a transform plugin eg. on `klass.__abstract__ = 1`, but with 1.1.0 it looks like there is no other way out than adding a dummy property ?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/179\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 157,
                "title": "False-positive on raising None",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [moxian](http://bitbucket.org/moxian), GitHub: @moxian?**\n\n---\n\nPylint'ing snippet\n\n```\ndef main():\n  exc = None\n  try:\n    [][1] = 12\n  except IndexError as exc:\n    pass\n  if exc is not None:\n    raise exc\nmain()\n```\n\nsays\n\n```\nRaising NoneType while only classes, instances or string are allowed (raising-bad-type)\n```\n\nwhen in fact None will never be attempted to be raised\n\nPython 2\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/157\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 119,
                "title": "Incorrect line numbers for C0103",
                "labels": [
                    "checkers",
                    "topic-new-parser",
                    "bug"
                ],
                "description": "Originally reported by: **Leon de Almeida (BitBucket: [leondealmeida](http://bitbucket.org/leondealmeida), GitHub: @leondealmeida?)**\n\n---\n\nThe error line is reported to be always one line after the last one of the decorator parameters with relevant data. The code below replicates it.\n\nTo validate the bug, add newlines below the `0` (last value on the decorators list). The test case is pretty much absurd - but more complex parameters (think the ones for `pytest.mark.parametrize`) may introduce lists and tuples that will also reproduce this behaviour (which is my original scenario).\n\n```\n#!python\n\n\"\"\"\nSome docstring\n\n\"\"\"\n\ndef dummydecorator(aaa, bbb):\n    \"\"\"Some\"\"\"\n    def real_decorator(fff):\n        \"\"\"pieces of\"\"\"\n        def wrapper(*args, **kwargs):\n            \"\"\"docstring\"\"\"\n            print aaa, bbb\n            fff(*args, **kwargs)\n        return wrapper\n    return real_decorator\n\n\n@dummydecorator(1, [\n    0\n# C0103 always points here - line 20\n\n\n])\ndef a_very_very_very_long_function_name_to_make_it_sad():  # line 24\n    \"\"\"Docstring\"\"\"\n    print 'LOL'\n\na_very_very_very_long_function_name_to_make_it_sad()\n\n```\n\nPylint output (-rn option):\n\n```\n#!text\n\n************* Module test_lint\nC: 20, 0: Invalid function name \"a_very_very_very_long_function_name_to_make_it_sad\" (invalid-name)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/119\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 85,
                "title": "pylint does not recognize potential undefined variables",
                "labels": [
                    "topic-control-flow",
                    "enhancement"
                ],
                "description": "Originally reported by: **Mirko Dziadzka (BitBucket: [mirkodziadzka](http://bitbucket.org/mirkodziadzka), GitHub: @mirkodziadzka?)**\n\n---\n\nThe following code should generate a warning, that the variable res may be undefined in  the finally clause\n\n```\n#!python\ntry:\n    # throw exception here to make res undefined\n    res = 42\nfinally:\n    print res\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/85\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 73,
                "title": "pylint is unable to import distutils.version under virtualenv",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Chris Rebert (BitBucket: [cvrebert](http://bitbucket.org/cvrebert), GitHub: @cvrebert?)**\n\n---\n\nTestcase:\n\n```\n#!python\n\n#!/usr/bin/env python2.7\nimport distutils.version\n```\n\nOutput:\n\n```\n#!txt\n\n************* Module foo\nfoo.py:1: [C0111(missing-docstring), ] Missing module docstring\nfoo.py:2: [F0401(import-error), ] Unable to import 'distutils.version'\nfoo.py:2: [E0611(no-name-in-module), ] No name 'version' in module 'distutils'\nfoo.py:2: [W0611(unused-import), ] Unused import distutils\n```\n\nWhich doesn't agree with Python itself:\n\n```\n#!python\n\n$ python\nPython 2.7.3 (default, Apr 10 2013, 06:20:15) \n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import distutils.version\n>>> # no error\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/73\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 22,
                "title": "Pyreverse: ValueError: need more than 1 value to unpack",
                "labels": [
                    "topic-pyreverse",
                    "bug",
                    "minor"
                ],
                "description": "Originally reported by: **Jorge Araya Navarro (BitBucket: [shackra](http://bitbucket.org/shackra), GitHub: @shackra?)**\n\n---\n\nI'm not sure what's happening...\n\n```\n#!bash\n\njorge [~/coders/desarrollo/thomas-aquinas] ~> pyreverse -c cocos2d -a 1 -s 1 -f ALL -o png summa/\nparsing summa/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/utils.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/framegrabber.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/summanode.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/collision_model.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/text.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/menu.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/particle.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/batch.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/director.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/shader.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/wired.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/rect.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/skeleton.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/gl_framebuffer_object.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/camera.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/draw.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/tiles.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/custom_clocks.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/path.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/sprite.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/grid.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/particle_systems.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/scene.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/euclid.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/scenes/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/scenes/transitions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/scenes/pause.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/instant_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/base_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/grid3d_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/camera_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/tiledgrid_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/move_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/basegrid_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/interval_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/actions/quadmoveby_actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/music.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/vector.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/system.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/objectbase.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/sftime.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/libs.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/soundstatus.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/actions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/sfmusic.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/effect.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/listener.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/audio/exceptions.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/layer/__init__.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/layer/base_layers.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/layer/util_layers.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/layer/python_interpreter.py...\nparsing /home/jorge/coders/desarrollo/thomas-aquinas/summa/layer/scrolling.py...\nTraceback (most recent call last):\n  File \"/usr/bin/pyreverse\", line 9, in <module>\n    load_entry_point('pylint==0.28.0', 'console_scripts', 'pyreverse')()\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/__init__.py\", line 39, in run_pyreverse\n    Run(sys.argv[1:])\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/main.py\", line 98, in __init__\n    sys.exit(self.run(args))\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/main.py\", line 112, in run\n    diadefs = handler.get_diadefs(project, linker)\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/diadefslib.py\", line 226, in get_diadefs\n    diagrams.append(generator.class_diagram(project, klass))\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/diadefslib.py\", line 194, in class_diagram\n    module, klass = klass.rsplit('.', 1)\nValueError: need more than 1 value to unpack\njorge [~/coders/desarrollo/thomas-aquinas] ~>\n```\n\nThen I tried to parse that file directly to see what happen, and I got this:\n\n```\n#!bash\n\njorge [~/coders/desarrollo/thomas-aquinas] ~> pyreverse -c cocos2d -a 1 -s 1 -f ALL -o png summa/layer/scrolling.py\nparsing summa/layer/scrolling.py...\nTraceback (most recent call last):\n  File \"/usr/bin/pyreverse\", line 9, in <module>\n    load_entry_point('pylint==0.28.0', 'console_scripts', 'pyreverse')()\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/__init__.py\", line 39, in run_pyreverse\n    Run(sys.argv[1:])\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/main.py\", line 98, in __init__\n    sys.exit(self.run(args))\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/main.py\", line 112, in run\n    diadefs = handler.get_diadefs(project, linker)\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/diadefslib.py\", line 226, in get_diadefs\n    diagrams.append(generator.class_diagram(project, klass))\n  File \"/usr/lib/python2.7/site-packages/pylint-0.28.0-py2.7.egg/pylint/pyreverse/diadefslib.py\", line 199, in class_diagram\n    klass = module.ilookup(klass).next()\n  File \"/usr/lib/python2.7/site-packages/logilab_astng-0.24.3-py2.7.egg/logilab/astng/bases.py\", line 124, in _infer_stmts\n    raise InferenceError(str(stmt))\nlogilab.astng.exceptions.InferenceError: None\njorge [~/coders/desarrollo/thomas-aquinas] ~> \n```\n\nThe file is right here [shackra/thomas-aquinas/src/summa/layer/scrolling.py](https://bitbucket.org/shackra/thomas-aquinas/src/11d1670d57f848f91cfe794ff0c346b6f8661dfc/summa/layer/scrolling.py?at=stable)...\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/22\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 5,
                "title": "Missing sub-module import statement is not detected",
                "labels": [
                    "checkers",
                    "enhancement"
                ],
                "description": "Originally reported by: **Andrew Carman (BitBucket: [carmandrew](http://bitbucket.org/carmandrew), GitHub: @carmandrew?)**\n\n---\n\nWhen you run pylint on the following file, it reports no errors, but there is very clearly an error when running (AttributeError: 'module' object has no attribute 'saxutils').\n\n```\n#!python\n\nimport xml.sax.handler\nprint xml.sax.handler\nprint xml.sax.saxutils\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/5\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 613,
                "title": "Improve the understanding of decorators, related to not-context-manager",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nHere's a snippet of code that demonstrates a false positive for not-context-manager. The check currently verifies only if the function is decorated with contextlib.contextmanager, but it doesn't do any deep understanding in order to see if the function was decorated at some point.\n\n```\n#!python\n\nfrom contextlib import contextmanager\n\ndef documented_contextmanager(func):\n    wrapper = contextmanager(func)\n    wrapper.undecorated = func\n    return wrapper\n\n\n@documented_contextmanager\ndef test():\n    yield\n\nwith test():\n    pass\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/613\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 596,
                "title": "Redefinition of values not supported: enum case",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nFor the following code, we aren't emitting a no-member because has_known_bases for XYZ will return False, This is happening because enum.Enum is inferred as both a Const(None), as well as Class(Enum), as the side effect of this code: https://hg.python.org/cpython/file/7ed4503b73a7/Lib/enum.py#l79\n\nThe fact is that Enum was later reassigned, but astroid is returning all the values it can.\n\n```\n#!python\n\nimport enum\nclass XYZ(enum.Enum):\n    \"\"\"...\"\"\"\n    abc = 1\n\n    def meth(self):\n        \"\"\"...\"\"\"\n        pass\n\nprint(XYZ.abc.lala())\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/596\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 584,
                "title": "[easy] New rules for assignment to __bases__",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n- can assign only tuples to `__bases__`\n\n```\n#!python\n\nclass A: pass\nA.__bases__ = \"lala\"\n```\n- can assign only non empty tuples to `__bases__`\n\n```\n#!python\n\nclass A: pass\nA.__bases__ = ()\n```\n- `__bases__` must be tuple of classes\n\n```\n#!python\n\nclass A: pass\nA.__bases__ = (1, )\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/584\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 583,
                "title": "[easy] can assign only strings to __name__",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\n```\n#!python\n\ndef test(): pass\ntest.__name__ = 1\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/583\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 578,
                "title": "Understand IndexError",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nIn certain situations, we could understand IndexErrors:\n\n```\n#!python\n\nfrom astroid.test_utils import extract_node\nn = extract_node('''\n[1, 2, 3][10] #Index out of range\n''')\nprint(n.infered())\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/578\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 576,
                "title": "Cannot understand modification of dictionaries",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Abdeali J Kothari (BitBucket: [AbdealiJK](http://bitbucket.org/AbdealiJK), GitHub: @AbdealiJK?)**\n\n---\n\nI've seen a few enum issues around and they say they've been fixed. But I am still getting an error.\n\n```\n#!python\n\ndef enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    str_dict = enums.copy()\n    enums['reverse'] = dict((value, key) for key, value in enums.items())\n    enums['str_dict'] = str_dict\n\n    return type('Enum', (), enums)\n\nRESULT_SEVERITY = enum(\"INFO\", \"NORMAL\", \"MAJOR\")\nRESULT_SEVERITY.__str__ = lambda x: RESULT_SEVERITY.reverse.get(x, \"NORMAL\")\n\nprint(RESULT_SEVERITY.INFO)\n\n```\n\ngives\n\n```\nE: 10,54: Class 'Enum' has no 'reverse' member (no-member)\nE: 12,22: Class 'Enum' has no 'INFO' member (no-member)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/576\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 568,
                "title": "pyreverse: add options --only-packages and --only-classes",
                "labels": [
                    "topic-pyreverse",
                    "enhancement"
                ],
                "description": "Originally reported by: **space one (BitBucket: [spaceone](http://bitbucket.org/spaceone), GitHub: @spaceone?)**\n\n---\n\n--only-packages and --only-classes. would be nice as options for pyreverse\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/568\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 566,
                "title": "--class description should tell about relative/absolute class name",
                "labels": [
                    "topic-pyreverse",
                    "help wanted",
                    "bug"
                ],
                "description": "Originally reported by: **space one (BitBucket: [spaceone](http://bitbucket.org/spaceone), GitHub: @spaceone?)**\n\n---\n\nOtherwise one have to deal with\n\n```\nTraceback (most recent call last):\n  File \"/usr/bin/pyreverse2\", line 9, in <module>\n    load_entry_point('pylint==1.4.3', 'console_scripts', 'pyreverse')()\n  File \"/usr/lib/python2.7/site-packages/pylint/__init__.py\", line 41, in run_pyreverse\n    Run(sys.argv[1:])\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 98, in __init__\n    sys.exit(self.run(args))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 112, in run\n    diadefs = handler.get_diadefs(project, linker)\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 228, in get_diadefs\n    diagrams.append(generator.class_diagram(project, klass))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 196, in class_diagram\n    module, klass = klass.rsplit('.', 1)\nValueError: need more than 1 value to unpack\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/566\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 560,
                "title": "[easy] Enhance the protocol checker",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nWe could improve the protocol checker, there are a lot of special methods which must return something of a given type in order work properly, other special methods require the presence of another method defined and so on: https://docs.python.org/3/reference/datamodel.html\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/560\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 533,
                "title": "Not support subclass of Enum(enum34)",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [iceout](http://bitbucket.org/iceout), GitHub: @iceout?**\n\n---\n\nPython-2.7.6 + enum34 (Enum backported from Python-3.4.0)\n\ntest code:\n\n```\nfrom enum import Enum\n\n\nclass OrderedEnum(Enum):\n\n def __ge__(self, other):\n     if self.__class__ is other.__class__:\n         return self.value >= other.value  # line 11\n     return NotImplemented\n\ndef __gt__(self, other):\n     if self.__class__ is other.__class__:\n         return self.value > other.value\n     return NotImplemented\n\nclass Color(OrderedEnum):\n    red = 0\n    green = 1\n\nclass People(Enum):\n    jack = 0\n    john = 1\n\nprint(Color.red.value)  # line 29\nprint(People.jack.name)\n```\n\n`pylint -E test.py`:\n\n```\nE: 11,19: Instance of 'OrderedEnum' has no 'value' member (no-member)\nE: 16,19: Instance of 'OrderedEnum' has no 'value' member (no-member)\nE: 29, 6: Instance of 'int' has no 'value' member (no-member)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/533\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2534,
                "title": "enum.IntFlag is just thought of as an int after bitwise operations",
                "labels": [
                    "bug"
                ],
                "description": "https://docs.python.org/3/library/enum.html#intflag\r\n\r\n> The next variation of `Enum` provided, `IntFlag`, is also based on `int`. The difference being `IntFlag` members **can be combined using the bitwise operators (`&`, `|`, `^`, `~`) and the result is still an `IntFlag` member**. However, as the name implies, `IntFlag` members also subclass int and can be used wherever an int is used. Any operation on an `IntFlag` member besides the bit-wise operations will lose the `IntFlag` membership.\r\n\r\npylint thinks that the bit-wise ops *do* lose the `IntFlag` membership.\r\n\r\n### Steps to reproduce\r\n```python\r\nfrom enum import IntFlag\r\n\r\nclass Perm(IntFlag):\r\n    R = 4\r\n    W = 2\r\n    X = 1\r\n\r\nrw = Perm.R | Perm.W\r\n\r\nassert isinstance(rw, Perm)\r\nassert isinstance(rw, int)\r\nassert isinstance(rw.value, int)  # E1101\r\n\r\n# also IntFlags\r\n(~Perm.R).value  # E1101\r\n(7 & Perm.R).value  # E1101\r\n(rw ^ Perm.W).value  # E1101\r\n```\r\n\r\n### Current behavior\r\n```\r\n$ python intenum.py  # (no AttributeExceptions)\r\n$ pylint -E intenum.py\r\n************* Module intenum\r\nintenum.py:12:18: E1101: Instance of 'int' has no 'value' member (no-member)\r\nintenum.py:15:1: E1101: Instance of 'int' has no 'value' member (no-member)\r\nintenum.py:16:1: E1101: Instance of 'int' has no 'value' member (no-member)\r\nintenum.py:17:1: E1101: Instance of 'int' has no 'value' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nNo warnings\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.4 (default, Mar 26 2018, 16:21:07) \r\n[GCC 5.4.0 20160609]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2130,
                "title": "False positive `--py3k` `comprehension-escape`",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\n```python\r\nfrom __future__ import print_function\r\n\r\ny = [x for x in range(1)]\r\n\r\nfor x in range(2):\r\n    print(x)\r\n```\r\n\r\n\r\n### Current behavior\r\n\r\n```\r\n$ pylint --py3k test.py\r\nNo config file found, using default configuration\r\n************* Module test\r\nW:  5,10: Using a variable that was bound inside a comprehension (comprehension-escape)\r\n\r\n---------------------------------------------------------------------\r\nYour code has been rated at 7.50/10 (previous run: -20.00/10, +27.50)\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo errors\r\n\r\nA heuristic (that I think is valid?) is that a name `x` is rebound after the comprehension.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 2.7.15 (default, May  1 2018, 16:44:08) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.1)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 866,
                "title": "Multi line strings as decorator args lead to incorrect line numbers in warnings.",
                "labels": [
                    "topic-new-parser"
                ],
                "description": "In this code, the warning for INVALID_FUNC_NAME will have the wrong line number.  Note that if the result arg is a multi-line expression then the line is correct.  This appears to only happen when string concatenation is being used.\n\n---\n\ndef decorator(result):\n    def inner(func):\n        return func(result)\n    return inner\n\n@decorator(result='a'\n           'b')\ndef INVALID_FUNC_NAME():\n    return 123\n\n---\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2127,
                "title": "Investigate if there's anything to learn from jedi",
                "labels": [
                    "task"
                ],
                "description": "jedi seems pretty powerful in terms of Python understanding. I'm curious if there is anything from the list below that we can use in pylint/astroid:\r\n\r\n- any architectural decision\r\n- support for features that we don't support yet (decorators, descriptors, control flow etc)\r\n- support for features that we don't necessarily know about\r\n- speed improvements that could be used in pylint/astroid as well"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 861,
                "title": "Import format is able to change pylint result and hide E1121 error",
                "labels": [
                    "enhancement"
                ],
                "description": "My environment:\n- python 2.7.9\n- pylint 1.5.4\n\nI used this test to reproduce the problem:\n\n```\nfrom os import path\nfrom os.path import exists\n\n\ndef error_is_reported():\n    exists('/tmp', '/work')\n\n\ndef error_is_hidden():\n    path.exists('/tmp', '/work')\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2532,
                "title": "Standard import \"from user import X\" should be placed before \"from pylint import sys\" (wrong-import-order)",
                "labels": [],
                "description": "### Steps to reproduce\r\n1. Run this shell commands:\r\n```\r\nvirtualenv --python=python3 foo\r\ncd foo\r\nsource bin/activate\r\npip install pylint astroid --pre -U\r\nmkdir user\r\ntouch user/__init__.py\r\necho \"def hello():\\n    return 'hi'\" > user/models.py\r\necho \"from pylint import sys\\nfrom user.models import hello\\n\\ndef main():\\n    print(sys.version, hello())\" > main.py\r\npylint main.py\r\n```\r\n2. Output from pylint command is:\r\n```\r\nNo config file found, using default configuration\r\n************* Module main\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  4, 0: Missing function docstring (missing-docstring)\r\nC:  2, 0: standard import \"from user.models import hello\" should be placed before \"from pylint import sys\" (wrong-import-order)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 2.50/10 (previous run: 0.00/10, +2.50)\r\n```\r\n\r\n### Current behavior\r\n\r\nPylint is reporting a wrong-import-order on line 2\r\n\r\n### Expected behavior\r\n\r\nShould not report a `wrong-import-order` since `user` is not a python package in Python3\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 2.7.10 (default, Oct  6 2017, 22:29:07)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]\r\n\r\n$ pip --version\r\npip 18.0 from /private/tmp/foo/lib/python3.7/site-packages/pip (python 3.7)\r\n\r\n$ python --version\r\nPython 3.7.0\r\n```\r\n\r\nIt seems that pylint is not using Python3 as it should be."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2124,
                "title": "Investigate if there is anything to learn from RuboCop/ESLint",
                "labels": [
                    "task"
                ],
                "description": "Let's check if we can learn something from these two tools that we can leverage in pylint. I'm thinking either:\r\n\r\n  - architectural decisions\r\n  - interesting checks that might work in Python\r\n  - community building around the projects"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 858,
                "title": "Some rules have nondeterministic messages",
                "labels": [
                    "minor"
                ],
                "description": "Hi,\n\nI'm using PyLint to make an automatic code review bot for GitHub (gitmate.io) via coala (coala-analyzer.org, AGPL). We do some fancy stuff to determine which results are actually new (so we'll also detect new results outside the actual diff) and we have found that apparently the same code may yield different messages nondeterministically :)\n\nExample:\n\n```\nC0411 - external import \"import utils.docker_util as docker_util\" comes before \"from .base_objects import RedisHash, db\"\n```\n\nvs.\n\n```\nC0411 - standard import \"import utils.docker_util as docker_util\" comes before \"from pygments import highlight\"\n```\n\nI'm suspecting E0632 has nondeterministic messages as well.\n\nThis is a real deal breaker for us :/\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2122,
                "title": "f-strings with indexed value breaks a disabled warning on Python 3.6.1",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1.   Use this file:\r\n```\r\n# pylint: disable=redefined-outer-name\r\nfoo = {'bar': 'wow'}\r\nsome_str = f'{foo[\"bar\"]}'\r\n\r\ndef boom(foo):\r\n  return foo\r\n```\r\n2. In terminal, run pylint against this file \r\n\r\n### Current behavior\r\n```\r\nfoo.py:5: [W0621(redefined-outer-name), boom] Redefining name 'foo' from outer scope (line 2)\r\n```\r\n\r\n### Expected behavior\r\nI would expect pylint to ignore this error because of the `# pylint: disable=redefined-outer-name` statement at the top.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.1\r\nastroid 1.6.4\r\nPython 3.6.1\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 856,
                "title": "Minor: some style warnings are reported for comments that shouldn't",
                "labels": [
                    "minor"
                ],
                "description": "Pylint reports some warnings for comments, reporting these sort of warnings is silly unless they are comment specific (like two spaces between code and inline comments).\n\nContrived example:\n\n``` python\nimport subprocess\n\ndirs = subprocess.check_output(\n    ['echo', '$PATH'],\n# Convert to unicode and split on directory separators\n).decode('utf-8').split(':')\n```\n\nIn this case the comment will be marked as wrong hanging indent, which is silly since it applies to the line below, and makes sense to be dedented at that level.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2528,
                "title": "else-if-used behaviour is incorrect in instances involving f-strings",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Make this your `.pylintrc`:\r\n```\r\n[MASTER]\r\nload-plugins=pylint.extensions.check_elif,\r\n```\r\n2. Create the following testcase:\r\n```\r\n\"\"\"Minimised testcase showing else-if-used false positive\"\"\"\r\n\r\nif 1 == 1:\r\n    print(\"FOO\" + (\"BAR\" if 2 == 2 else \"\"))  # pylint does not mark this line\r\n    print(f'FOO{\"BAR\" if 2 == 2 else \"\"}')  # pylint marks this line as else-if-used\r\nelif 1 == 0:\r\n    print(\"NOTPRINTED\")\r\nif 1 == 1:\r\n    print(\"THIRD\")\r\n```\r\n3. Run pylint against it.\r\n\r\n### Current behavior\r\n`test.py:6:5: R5501: Consider using \"elif\" instead of \"else if\" (else-if-used)`\r\n\r\n### Expected behavior\r\nNo `else-if-used` error should show since `else-if` is not used anywhere.\r\n\r\n### pylint --version output\r\nLatest pylint/astroid preview release:\r\n```\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.6.6 (default, Sep 12 2018, 18:26:19) \r\n[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]\r\n```\r\nWith pylint 1.9.3, the error message is similar:\r\n`R:  6, 5: Consider using \"elif\" instead of \"else if\" (else-if-used)`\r\n```\r\npylint 1.9.3, \r\nastroid 1.6.5\r\nPython 3.6.6 (default, Sep 12 2018, 18:26:19) \r\n[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2121,
                "title": "undefined-loop-variable in presence of cell-var-from-loop",
                "labels": [
                    "bug"
                ],
                "description": "Similar to bug #1921 and related, I found that an extra `undefined-loop-variable` error is shown  in presence of `cell-var-from-loop` when the same variable is used later in another loop.\r\n\r\n### Steps to reproduce\r\nThe following code:\r\n```py\r\ndef call(f, a):\r\n    return f(a)\r\nfor x in [1]:\r\n    call(lambda a: a+x, 3)\r\nfor x in [2]:\r\n    pass\r\n```\r\n\r\noutputs\r\n\r\n```\r\nW:  4,21: Cell variable x defined in loop (cell-var-from-loop)\r\nW:  4,21: Using possibly undefined loop variable 'x' (undefined-loop-variable)\r\n```\r\n\r\nHowever, when changing the name of the second `x` or commenting out those two lines, then the output is just \r\n\r\n```\r\nW:  4,21: Cell variable x defined in loop (cell-var-from-loop)\r\n``` \r\n\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 03:03:55)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 850,
                "title": " Pylint detects imaginary cyclic imports",
                "labels": [
                    "bug"
                ],
                "description": "If two modules import from each other, but one of them only imports the other within functions and other non-global scopes, Python is happy. But pylint still errors on such cyclic imports, and in fact won't accept a module-scoped disable directive, so cyclic import detection has to be disabled for the entire project.\n\nHere's an example from this PR: https://github.com/letsencrypt/letsencrypt/pull/2649 : \n\n```\ngit clone https://github.com/letsencrypt/letsencrypt\ncd letsencrypt\ngit checkout split-cli\nvim .pylintrc # remove the disable cyclic-import\ntools/venv.sh\nvenv/bin/pylint --rcfile=.pylintrc letsencrypt/cli.py letsencrypt/main.py\n************* Module letsencrypt.main\nR:  1, 0: Cyclic import (letsencrypt.cli -> letsencrypt.main) (cyclic-import)\n...\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2561,
                "title": "False positive: too-many-function-args for @overload'ed class member",
                "labels": [],
                "description": "### Steps to reproduce\r\n\r\n1. Create a file `x.py` with the following code:\r\n\r\n```python3\r\nfrom typing import overload, Union\r\n\r\nclass C:\r\n  @overload\r\n  def get(self) -> str:\r\n    pass\r\n\r\n  @overload\r\n  def get(self, default: int) -> Union[str, int]:\r\n    pass\r\n\r\n  def get(self, default=None):\r\n    return '' if default is None else default\r\n\r\n\r\n_ = C().get(1)\r\n```\r\n\r\n2. Run pylint on `x.py` with `too-many-function-args` enabled\r\n\r\n`pylint --disable=all --enable=too-many-function-args --score=no x.py`\r\n\r\n\r\n### Current behavior\r\n\r\npylint thinks `C`'s get method can't take an argument:\r\n\r\n```\r\n************* Module x\r\nx.py:17:4: E1121: Too many positional arguments for method call (too-many-function-args)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nNo error should be output. pylint should understand that a caller is permitted to match any of the overloads, not just the first one. (Note that pylint does the correct thing for module-level functions. This appears to be specific to class members.)\r\n\r\n### pylint --version output\r\n\r\nI reproduced with the dev version\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```\r\n\r\nand also the latest stable release\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2120,
                "title": "Warn when overriden method has no return statement while original method has",
                "labels": [
                    "enhancement"
                ],
                "description": "Continued from https://github.com/PyCQA/pylint/issues/839#issuecomment-390325372\r\n\r\nWe have a django project and a big test suite. Recently I was working on a custom test runner that adds some features for us (irrelevant here). The test suite worked nicely and reported failing errors on the shell as usual. The tests are also run on CI systems. But what went unnoticed is that the failing tests no longer led to a failed build. Overall the builds appeared successful despite tests actually failing.\r\nWhat I had overseen was that I overwrote a method which returned the test-runner result which then determined the exit code overall.\r\n\r\noriginal return see here: https://github.com/django/django/blob/master/django/test/runner.py#L609\r\n\r\nMy class:\r\n\r\n```\r\nclass MyTestRunner(DiscoverRunner):\r\n    def run_tests(self, test_labels, extra_tests=None, **kwargs):\r\n        my_custom_code()\r\n        super(PaesslerTestRunner, self).run_tests(test_labels, extra_tests=extra_tests, **kwargs)\r\n```\r\n\r\nRunning it looked all fine, but I had overseen that the original method returned something **while mine returned nothing** / None, so exit code always indicated \"everything fine\"\r\n\r\nHopefully this makes it more clear what scenarios I would find a warning useful for in the future. So basically.\r\n\r\n- check if function overrides a function in a parent class\r\n- if yes, check if parent function has a return statement\r\n- if yes, warn if override has no return statement"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 844,
                "title": "Incorrect handling of property overriding in subclasses.",
                "labels": [
                    "minor"
                ],
                "description": "pylint: 1.5.4\nastroid 1.4.4\npython: 2.7.11, 3.3.6, 3.5.1\n\nIf a class wants to override the getter or setter of a property in the parent class, then pylint incorrectly marks it as a \"no-member\" error, the code runs and works as expected.\n\n``` python\nclass Parent(object):\n    def __init__(self):\n        self.__thing = 'foo'\n\n    @property\n    def thing(self):\n        return self.__thing\n\n\nclass Child(Parent):\n    @Parent.thing.getter\n    def thing(self):\n        return super(Child, self).thing + '!'\n\n\nprint(Child().thing)\n```\n\nI believe that the corollary to this case is that the following case is invalid, but marked as valid by pylint:\n\n``` python\nclass Parent(object):\n    def __init__(self):\n        self.__thing = 'foo'\n\n    @property\n    def thing(self):\n        return self.__thing\n\n\nclass Child(Parent):\n    @thing.getter\n    def thing(self):\n        return super(Child, self).thing + '!'\n\n\nprint(Child().thing)\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2559,
                "title": "Inappropriate assignment-from-none error",
                "labels": [],
                "description": "### Steps to reproduce\r\n```python\r\nclass MyApp(metaclass=abc.ABCMeta):\r\n    ...\r\n    def lock_name(self):\r\n        \"Lock file name, mutex apps should redefine this to return a string.\"\r\n        return None\r\n\r\n    def lock_path(self):\r\n        \"Lock file path, based on lock_name().\"\r\n        lock_path = self.lock_name()\r\n        if lock_path is None:\r\n            return None\r\n        ...\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n /.../application.py:109: refactor (R0201, no-self-use, MyApp.lock_name) Method could be a function\r\n /.../application.py:115: error (E1128, assignment-from-none, MyApp.lock_path) Assigning to function call which only returns None\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `no-self-use` message is, arguably, appropriate (although one could argue that since the class `MyApp` is _abstract_, the method _cannot_ be a function.\r\n\r\nThe message `assignment-from-none` is definitely wrong because some descendants of `MyApp` _will_ redefine `lock_name` so that it will not _always_ return `None`.\r\n\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 29 2018, 20:13:13) \r\n[Clang 9.1.0 (clang-902.0.39.2)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2116,
                "title": "Stop installing tests with package",
                "labels": [
                    "blocked"
                ],
                "description": "Finish #2096 and move the tests directory to the project root so that we don't install the tests with the package anymore. The tests should still be included and runnable in the sdist."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 841,
                "title": "false redefined-outer-name when using `del`",
                "labels": [
                    "minor"
                ],
                "description": "simple test code:\n\n```\npath = __file__\ndel path\ndef some_func_of_mine(path):\n    print(path)\n```\n\ntesting pylint-1.5.4 shows:\n\n```\n$ pylint test.py\nW:  3,22: Redefining name 'path' from outer scope (line 1) (redefined-outer-name)\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2560,
                "title": "Pylint 2.1.1 doesn't understand async iterables",
                "labels": [],
                "description": "Please reopen https://github.com/PyCQA/pylint/issues/2311 or consider this issue to be a regression"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2079,
                "title": "Annotate pylint code with type annotations",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "Since we're on Python 3, we can use annotations for pylint."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 829,
                "title": "Disable after module docstring has the scope of the whole file.",
                "labels": [
                    "enhancement"
                ],
                "description": "Usually a \"# pylint: disable=foo\" comment appended to a line disables the warning only for that line.  However, if the disable appears on the first line after the docstring then it appears to affect the entire file.  Is this intentional or a bug?\n\nFor example:\n\n\"\"\"really long docstring...\"\"\"  # pylint: disable=line-too-long\na = \" some other long string...\"\n\nBut if the disable happens later then it only affects that one line:\n\n\"\"\"My docstring.\"\"\"\n\"\"\"really long docstring...\"\"\"  # pylint: disable=line-too-long\na = \" some other long string...\"\n\nThe line that assigns \"a\" will trigger an error message.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2525,
                "title": "Concurrency turning out useless on codebase & machine",
                "labels": [
                    "topic-performance"
                ],
                "description": "This is on a codebase with 260kLOC across ~3600 files (python-only, according to `tokei`), on a 2010 MBP (2 cores 2 HT) running OSX 10.11, under Python 3.6.6 from macports\r\n\r\nUsing `-j` with a number of jobs different from 1 significantly increases CPU consumption (~90%/core), but yields no improvement in wallclock time:\r\n```\r\n> pylint -j1 *\r\npylint -v -j1 * 1144.10s user 44.51s system 96% cpu 20:36.81 total\r\n> pylint -j2 *\r\npylint -j2 * 2386.66s user 117.09s system 184% cpu 22:37.15 total\r\n> pylint -j4 *\r\npylint -j4 * 3897.49s user 161.62s system 340% cpu 19:50.96 total\r\n> pylint -j0 *\r\npylint -j * 3850.79s user 155.45s system 341% cpu 19:31.81 total\r\n```\r\nNot sure what other informations to provide."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2072,
                "title": "Unstable result of unsubscriptable-object error within if/elif/else block",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nCreate following files (or unzip [sample.zip](https://github.com/PyCQA/pylint/files/1989998/sample.zip)):\r\n*test.py*\r\n```py\r\na = None\r\nfor i in range(1, 5):\r\n    if i % 2:\r\n        a = \"foo\"\r\n    else:\r\n        a = a[1:]\r\n```\r\n*test2.py*\r\n```py\r\na = None\r\nfor i in range(1, 5):\r\n    if i % 2:\r\n        a = \"foo\"\r\n    if not i % 2:\r\n        a = a[1:]\r\n```\r\n*test3.py*\r\n```py\r\na = None\r\nfor i in range(1, 5):\r\n    if i % 2:\r\n        a = \"foo\"\r\n    elif not i % 2:\r\n        a = a[1:]\r\n```\r\n\r\nThen run:\r\n\r\n```\r\npylint --disable=all --enable=typecheck test.py test2.py test3.py\r\n```\r\n\r\n### Current behavior\r\n```\r\nNo config file found, using default configuration\r\n************* Module test3\r\nE:  6, 6: Value 'a' is unsubscriptable (unsubscriptable-object)\r\n```\r\n\r\n### Expected behavior\r\nI think all of them should report the error, otherwise all of them should not. I'm not sure what is the difference between `if`/`elif`/`else` in pylint. Should I rewrite my code to avoid `elif` in this case?\r\n\r\nA live example:\r\nhttps://github.com/eight04/pyAPNG/blob/bc5b9d9da666bbcdfa65ed3512134a9d143cb650/apng/__init__.py#L376\r\n\r\n### pylint --version output\r\n```\r\nD:\\Dev\\pyAPNG>pylint --version\r\nUsing config file D:\\Dev\\pyAPNG\\.pylintrc\r\npylint 1.8.4,\r\nastroid 1.6.1\r\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 07:18:10) [MSC v.1900 32 bit (In\r\ntel)]\r\n```\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 827,
                "title": "Require a space after control keywords (if, while, for).",
                "labels": [
                    "enhancement"
                ],
                "description": "The following syntax all lints clean:\n\n```\nif(1\n   and 2):\n    pass\n\nwhile(0\n      and 1):\n    pass\n\nfor(x, y) in []:\n    pass\n```\n\nThis is not explicitly mentioned in PEP-008, but this is said:\n\n> Then the conditional part of an if -statement is long enough to require that it be written across multiple lines, it's worth noting that the combination of a two character keyword (i.e. if ), **plus a single space,** plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2517,
                "title": "Building the documentation requires Internet access",
                "labels": [
                    "documentation",
                    "task"
                ],
                "description": "The Debian package should build the pylint documentation. The package build should be reproducible and does not have Internet access. Following command is run:\r\n\r\n```\r\nmake -C doc html\r\n```\r\n\r\nThe html target will call `pip install python-docs-theme` which will fail without Internet access.\r\n\r\nPlease either check for the presence of the python-docs-theme (or allow skipping this part)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2070,
                "title": "Replace sys.version_info checks for Python 2 compatibility with another way of detecting the file environment",
                "labels": [
                    "enhancement",
                    "backwards-compatibility"
                ],
                "description": "Pylint 2.0 drops support for running with Python 2 but we will still allow analysing Python 2 files. Unfortunately we sometimes use `sys.version_info` checks for doing different things on Python 2, such as looking for `next` instead of `__next__`. Instead of doing a check against the running environment, we should do a check against the given environment to pylint. Say for example that we'll allow this:\r\n\r\n```\r\npylint ... -2 # Lint Python 2 files\r\npylint ... # by default assumes the code is Python 3\r\npylint ... -3 # maybe this should work as well? \r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 818,
                "title": "False positive: no-value-for-parameter using python voluptuous library",
                "labels": [
                    "enhancement",
                    "bug"
                ],
                "description": "The attached file throws this error when storing a callable in a dictionary.\nThis is the proper use of the voluptuous python library.\n\nE: 24,39: No value for argument 'v' in function call (no-value-for-parameter)\n\n[pylint_test.py.txt](https://github.com/PyCQA/pylint/files/134541/pylint_test.py.txt)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2067,
                "title": "cannot recognize some member in pytorch",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. I use Ubuntu16.04, 64bit system, python2.7.12.   I also use VSCode1.23 as my text editor.\r\n2. I use pytorch in gpu mode. it needs `sudo pip install torch torchvision`. I have a GPU and CUDA and CuDNN installed. I'm not sure if they are necessary.\r\n3. I already put these content in `~/.pylintrc`:\r\n```\r\n[MASTER]\r\nextension-pkg-whitelist=numpy,torch\r\n\r\n[TYPECHECK]\r\nignored-modules=numpy,torch\r\nignored-classes=numpy,torch\r\ngenerated-members=numpy.*,torch.*\r\n```\r\n\r\n4. I use these code:\r\n```python\r\n#coding:utf8\r\nfrom config import opt\r\nimport os\r\nimport torch as t\r\nimport models\r\nfrom data.dataset import DogCat\r\nfrom torch.utils.data import DataLoader\r\nfrom torch.autograd import Variable\r\nfrom torchnet import meter\r\nfrom utils.visualize import Visualizer\r\nfrom tqdm import tqdm\r\n\r\ndef test(**kwargs):\r\n    opt.parse(kwargs)\r\n    # import ipdb;\r\n    # ipdb.set_trace()\r\n    # configure model\r\n    model = getattr(models, opt.model)().eval()\r\n    if opt.load_model_path:\r\n        model.load(opt.load_model_path)\r\n    if opt.use_gpu: model.cuda()\r\n\r\n    # data\r\n    train_data = DogCat(opt.test_data_root,test=True)\r\n    test_dataloader = DataLoader(train_data,batch_size=opt.batch_size,shuffle=False,num_workers=opt.num_workers)\r\n    results = []\r\n    for ii,(data,path) in tqdm(enumerate(test_dataloader)):\r\n        input = t.autograd.Variable(data,volatile = True)\r\n        if opt.use_gpu: input = input.cuda()\r\n        score = model(input)\r\n        probability = t.nn.functional.softmax(score)[:,0].data.tolist()\r\n        # label = score.max(dim = 1)[1].data.tolist()\r\n        \r\n        batch_results = [(path_,probability_) for path_,probability_ in zip(path,probability) ]\r\n\r\n        results += batch_results\r\n    write_csv(results,opt.result_file)\r\n\r\n    return results\r\n\r\ndef write_csv(results,file_name):\r\n    import csv\r\n    with open(file_name,'w') as f:\r\n        writer = csv.writer(f)\r\n        writer.writerow(['id','label'])\r\n        writer.writerows(results)\r\n    \r\ndef train(**kwargs):\r\n    opt.parse(kwargs)\r\n    vis = Visualizer(opt.env)\r\n\r\n    # step1: configure model\r\n    model = getattr(models, opt.model)()\r\n    if opt.load_model_path:\r\n        model.load(opt.load_model_path)\r\n    if opt.use_gpu: model.cuda()\r\n\r\n    # step2: data\r\n    train_data = DogCat(opt.train_data_root,train=True)\r\n    val_data = DogCat(opt.train_data_root,train=False)\r\n    train_dataloader = DataLoader(train_data,opt.batch_size,\r\n                        shuffle=True,num_workers=opt.num_workers)\r\n    val_dataloader = DataLoader(val_data,opt.batch_size,\r\n                        shuffle=False,num_workers=opt.num_workers)\r\n    \r\n    # step3: criterion and optimizer\r\n    criterion = t.nn.CrossEntropyLoss()\r\n    lr = opt.lr\r\n    optimizer = t.optim.Adam(model.parameters(),lr = lr,weight_decay = opt.weight_decay)\r\n        \r\n    # step4: meters\r\n    loss_meter = meter.AverageValueMeter()\r\n    confusion_matrix = meter.ConfusionMeter(2)\r\n    previous_loss = 1e100\r\n\r\n    # train\r\n    for epoch in range(opt.max_epoch):\r\n        \r\n        loss_meter.reset()\r\n        confusion_matrix.reset()\r\n\r\n        for ii,(data,label) in tqdm(enumerate(train_dataloader)):\r\n\r\n            # train model \r\n            inpu = Variable(data)  # inpu mean input\r\n            target = Variable(label)\r\n            if opt.use_gpu:\r\n                inpu = inpu.cuda()\r\n                target = target.cuda()\r\n\r\n            optimizer.zero_grad()\r\n            score = model(inpu)\r\n            loss = criterion(score,target)\r\n            loss.backward()\r\n            optimizer.step()\r\n            \r\n            \r\n            # meters update and visualize\r\n            loss_meter.add(loss.data[0])\r\n            confusion_matrix.add(score.data, target.data)\r\n\r\n            if ii%opt.print_freq==opt.print_freq-1:\r\n                vis.plot('loss', loss_meter.value()[0])\r\n                \r\n                # \u8fdb\u5165debug\u6a21\u5f0f\r\n                if os.path.exists(opt.debug_file):\r\n                    import ipdb\r\n                    ipdb.set_trace()\r\n\r\n\r\n        model.save()\r\n\r\n        # validate and visualize\r\n        val_cm,val_accuracy = val(model,val_dataloader)\r\n\r\n        vis.plot('val_accuracy',val_accuracy)\r\n        vis.log(\"epoch:{epoch},lr:{lr},loss:{loss},train_cm:{train_cm},val_cm:{val_cm}\".format(\r\n                    epoch = epoch,loss = loss_meter.value()[0],val_cm = str(val_cm.value()),train_cm=str(confusion_matrix.value()),lr=lr))\r\n        \r\n        # update learning rate\r\n        if loss_meter.value()[0] > previous_loss:          \r\n            lr = lr * opt.lr_decay\r\n            # \u7b2c\u4e8c\u79cd\u964d\u4f4e\u5b66\u4e60\u7387\u7684\u65b9\u6cd5:\u4e0d\u4f1a\u6709moment\u7b49\u4fe1\u606f\u7684\u4e22\u5931\r\n            for param_group in optimizer.param_groups:\r\n                param_group['lr'] = lr\r\n        \r\n\r\n        previous_loss = loss_meter.value()[0]\r\n\r\ndef val(model,dataloader):\r\n    \"\"\"\r\n    \u8ba1\u7b97\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u7b49\u4fe1\u606f\r\n    \"\"\"\r\n    model.eval()\r\n    confusion_matrix = meter.ConfusionMeter(2)\r\n    for ii, data in tqdm(enumerate(dataloader)):\r\n        input, label = data\r\n        val_input = Variable(input, volatile=True)\r\n        if opt.use_gpu:\r\n            val_input = val_input.cuda()\r\n        score = model(val_input)\r\n        confusion_matrix.add(score.data.squeeze(), label.type(t.LongTensor))\r\n\r\n    model.train()\r\n    cm_value = confusion_matrix.value()\r\n    accuracy = 100. * (cm_value[0][0] + cm_value[1][1]) / (cm_value.sum())\r\n    return confusion_matrix, accuracy\r\n\r\ndef help():\r\n    \"\"\"\r\n    \u6253\u5370\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a python file.py help\r\n    \"\"\"\r\n    \r\n    print(\"\"\"\r\n    usage : python file.py <function> [--args=value]\r\n    <function> := train | test | help\r\n    example: \r\n            python {0} train --env='env0701' --lr=0.01\r\n            python {0} test --dataset='path/to/dataset/root/'\r\n            python {0} help\r\n    avaiable args:\"\"\".format(__file__))\r\n\r\n    from inspect import getsource\r\n    source = (getsource(opt.__class__))\r\n    print(source)\r\n\r\nif __name__=='__main__':\r\n    import fire\r\n    fire.Fire()\r\n```\r\n\r\n### Current behavior\r\npylint complains E1101 that Instance of 'Variable' has no 'cuda' member. Which, actually, my code can run correctly.\r\n\r\n\r\n![fuck_again_screenshot](https://user-images.githubusercontent.com/3831847/39748536-e7c45188-52e2-11e8-87e9-0b2aeab1fed0.png)\r\n\r\n\r\n### Expected behavior\r\npylint, please don't complain \r\n\r\n### pylint --version output\r\nUsing config file /home/chris/.pylintrc\r\npylint 1.8.4, \r\nastroid 1.6.3\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 801,
                "title": "False negative no-member when using `hasattr`",
                "labels": [
                    "topic-control-flow",
                    "minor"
                ],
                "description": "I have some code like this:\n\n``` py\nif hasattr(foo, 'bar'):\n    foo.bar = 'baz'\n```\n\n`foo` is an instance of a class, some of whose subclasses have an attribute `bar` and some don't. Pylint raises `no-member` for this because `foo` doesn't have a member `bar`. Irrespective of the merits or otherwise of this approach (\"permission vs forgiveness\"), surely Pylint shouldn't complain about this because I've already checked using `hasattr`? (I'm also aware of the issues around `hasattr`, but given it's a built-in I think it's reasonable to Pylint to assume it works.)\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2497,
                "title": "Inconsistency between `(_, myvar) = expr` and `myvar = expr[1]`",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. run `pylint` on this code:\r\n\r\n```\r\n\"\"\"Pylint test\"\"\"\r\n\r\ndef get_answer_one(bpos):\r\n    \"returns (int, None) or (int, tuple-of-int)\"\r\n    if bpos == 0:\r\n        return (0, None)\r\n    return (0, (0, 0))\r\n\r\ndef get_answer_two():\r\n    \"returns (int, tuple-of-int)\"\r\n    return (0, (0, 0))\r\n\r\ndef print_answer_one_indexed():\r\n    \"Pylint says my_var[0] is an error\"\r\n    my_var = get_answer_one(5)[1]\r\n    if my_var is not None:\r\n        print repr(my_var[0])\r\n\r\ndef print_answer_one_destructured():\r\n    \"Pylint is fine with this function\"\r\n    (_, my_var) = get_answer_one(5)\r\n    if my_var is not None:\r\n        print repr(my_var[0])\r\n\r\ndef print_answer_two_indexed():\r\n    \"Pylint is fine with this function\"\r\n    my_var = get_answer_two()[1]\r\n    print repr(my_var[0])\r\n\r\ndef print_answer_two_destructured():\r\n    \"Pylint is fine with this function\"\r\n    (_, my_var) = get_answer_two()\r\n    print repr(my_var[0])\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n************* Module test_pylint\r\nE: 17,19: Value 'my_var' is unsubscriptable (unsubscriptable-object)\r\n```\r\n\r\n### Expected behavior\r\nThis file should be clean\r\n\r\n### pylint --version output\r\n\r\n```pylint 1.9.3, \r\nastroid 1.6.5\r\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 26 2016, 12:10:39) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2065,
                "title": "Provide Github checks API integration for automated pylint PR review",
                "labels": [
                    "enhancement"
                ],
                "description": "Github now has an API to accept code review annotations in https://developer.github.com/v3/checks/.\r\nIt'd be great for pylint, presumably being run on a CI system, to integrate with this by outputting annotations in the code annotation format Github expects to be easily fed into the API."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 751,
                "title": "invalid-name \"propagates\" to users on class properties",
                "labels": [
                    "bug"
                ],
                "description": "For example, given:\n\n``` python\n# a.py\n# pylint: disable=invalid-name\n\nclass AClass(object):\n    badName = 'hi'\n\n# b.py\nimport a\n\ndef main():\n    instance = a.AClass()\n    instance.badName = 'yes'\n\nmain()\n```\n\nThe output of pylint then varies depending on which files are being linted, and the order they're linted, e.g.\n\n``` shell\n$ pylint a.py\n# nothing\n$ pylint b.py\n# nothing\n$ pylint a.py b.py\n# nothing\n$ pylint b.py a.py\n************* Module b\nC:  5, 4: Invalid attribute name \"badName\" (invalid-name)\n```\n\nThat's really unexpected behavior. In this case, I would expect no errors since I disabled them in the declaring module.\n\nThis doesn't appear to happen when using instance properties (i.e. **init** + self.badName).\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2063,
                "title": "Enum: Value 'self.value' is unsubscriptable (unsubscriptable-object) where value is a tuple",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```\r\n#! python3\r\n\r\nfrom enum import Enum\r\n\r\nclass MyEnum(Enum):\r\n    FOO = (1, \"f\")\r\n    BAR = (2, \"b\")\r\n\r\n    def __str__(self):\r\n        return self.value[1]\r\n```\r\n\r\nRun `pylint` on the file above.\r\n\r\n### Current behavior\r\n`E: 10,15: Value 'self.value' is unsubscriptable (unsubscriptable-object)`\r\n\r\n### Expected behavior\r\nNo error - `value` here is a tuple (and can't be reassigned).\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.4, \r\nastroid 1.6.3\r\nPython 3.4.6 (default, Mar 22 2017, 12:26:13) [GCC]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 748,
                "title": "Improve the duplicate-code by using other algorithms than line difference",
                "labels": [
                    "minor"
                ],
                "description": "There's probably room for improving the duplicate code checker, by formalizing a bit the algorithm. There's a nice paper about anit-unification, which was employed in the clonedigger tool: http://clonedigger.sourceforge.net/duplicate_code_detection_bulychev_minea.pdf\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2476,
                "title": "False-positive E1121 with self in subclass of np.ndarray",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. pylint Test.py\r\n\r\n### Current behavior\r\nTest.py:10:14: E1121: Too many positional arguments for method call (too-many-function-args)\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### pylint --version output\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]\r\n\r\n[Test.py.txt](https://github.com/PyCQA/pylint/files/2356168/Test.py.txt)\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2062,
                "title": "Enum: Method 'name' has no 'lower' member (no-member)",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```\r\n#! python3\r\n\r\nfrom enum import Enum\r\n\r\nclass MyEnum(Enum):\r\n    FOO = 1\r\n    BAR = 2\r\n\r\n    def __str__(self):\r\n        return self.name.lower()\r\n\r\n```\r\n\r\nRun `pylint` on the file above.\r\n\r\n### Current behavior\r\n`E: 10,15: Method 'name' has no 'lower' member (no-member)`\r\n\r\n### Expected behavior\r\nNo error. Enums have `name` propery which contains a string.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.4, \r\nastroid 1.6.3\r\nPython 3.4.6 (default, Mar 22 2017, 12:26:13) [GCC]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 747,
                "title": "pylint and flake8 fighting over continued indentation",
                "labels": [
                    "topic/formatting",
                    "bug"
                ],
                "description": "With this input:\n\n``` python\n            to.append(t.format(name=pkg.name,\n                               base=pkg.packagebase,\n                               # [\u2026]\n                               )\n                      )\n```\n\npylint complains:\n\n```\n************* Module pkgbuilder.utils\nC:214, 0: Wrong continued indentation (remove 1 space).\n                               )\n                              |^ (bad-continuation)\nC:215, 0: Wrong continued indentation (remove 1 space).\n                      )\n                     |^ (bad-continuation)\n```\n\nSo, I \u201cfixed\u201d this.  flake8 now says:\n\n```\npkgbuilder/utils.py:214:31: E124 closing bracket does not match visual indentation\npkgbuilder/utils.py:215:22: E124 closing bracket does not match visual indentation\n```\n\nWhich linter is right?\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2479,
                "title": "pyreverse:  pyreverse doesn't link sub-classes to an abstract class",
                "labels": [
                    "topic-pyreverse",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run `git clone git@github.com:pixelogik/NearPy.git`\r\n2. Run `cd nearpy/storage`\r\n3. Run ` pyreverse -o .png .`\r\n4. Open classes_No_Name..png\r\n### Current behavior\r\nYou will see a UML diagram like this.This has three classes `RedisStorage`, `MemoryStorage` and an abstract class `Storage`. See the diagram here. \r\nhttps://drive.google.com/file/d/1MQ8igLIhNIfVUM0VyXfrcFYdOwDs6V0f/view?usp=sharing\r\n\r\n### Expected behavior\r\nclasses `RedisStorage` and `MemoryStorage` should inherit from abstract class `Storage` \r\n\r\n### Pylint version \r\npylint (1.1.0)\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2057,
                "title": "Major performance slowdown after updating",
                "labels": [
                    "topic-performance"
                ],
                "description": "Recently we upgraded from pylint 1.6.5 to the latest 1.8.4 and noticed a pretty significant slowdown when executing ```pylint -E``` over doubled out execution time from ~4 minutes to ~8.5 minutes\r\n\r\nI did a little bit of benchmarking for all of the checks E**** by running ```pylint --disable =all --enable={code}```\r\n\r\nBelow are the results for the checks which seemed to add a significant amount of time:\r\n```\r\nCode    1.6.5(s)        1.8.4(s)        diff(s)         perc    desc\r\n==================================================================================================================================\r\nE1101   20.1953449249   62.3351387978   42.1397938729   208      %s %r has no %r member\r\nE1103   20.8538610935   61.1822810173   40.3284199238   193      %s %r has no %r member (but some types could not be inferred)\r\nE1123   15.9687519073   40.2729401588   24.3041882515   152      Passing unexpected keyword argument %r in function call\r\nE1102   14.8260128498   38.6876618862   23.8616490364   160      %s is not callable\r\nE1124   15.3351070881   37.5729231834   22.2378160953   145      Parameter %r passed as both positional and keyword argument\r\nE1120   15.7935380936   37.3748729229   21.5813348293   136      No value passed for parameter %s in function call\r\nE1121   16.3191540241   37.6615300179   21.3423759938   130      Too many positional arguments for function call\r\nE1111   18.251814127    37.993489027    19.7416749      108      Assigning to function call which doesn't return\r\nE1201   11.5457539558   29.6404988766   18.0947449208   156      Logging format string ends in middle of conversion specifier\r\nE1200   11.5785279274   29.4368979931   17.8583700657   154      Unsupported logging format character %r (%#02x) at index %d\r\nE1206   12.1308939457   29.2484021187   17.117508173    141      Not enough arguments for logging format string\r\nE1205   12.1985211372   28.7452499866   16.5467288494   135      Too many arguments for logging format string\r\nE1305   10.8184630871   24.6197948456   13.8013317585   127      Too many arguments for format string\r\nE1301   11.1120839119   24.4623908997   13.3503069878   120      Format string ends in middle of conversion specifier\r\nE1310   11.0003929138   24.3273978233   13.3270049095   121      Suspicious argument in %s.%s call\r\nE1300   11.0438139439   23.9392080307   12.8953940868   116      Unsupported format character %r (%#02x) at index %d\r\nE1304   11.4094660282   23.6380119324   12.2285459042   107      Missing key %r in format string dictionary\r\nE1306   11.319974184    23.4518930912   12.1319189072   107      Not enough arguments for format string\r\nE1302   11.5838918686   23.6068780422   12.0229861736   103      Mixing named and unnamed conversion specifiers in format string\r\nE1303   12.2280368805   23.2376339436   11.0095970631   90       Expected mapping for format string, not %s\r\n```\r\n\r\nfor the times in the above table I removed the approximate time it takes to start up the pylint process with no checks enabled (```pylint --disabled=all```). This was to try and get as close as possible to the amount of time the check itself took to run.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 746,
                "title": "Getting sane",
                "labels": [
                    "question",
                    "blocker",
                    "discussion"
                ],
                "description": "I want to start a discussion regarding what we want to have in pylint 2.0, from the point of view of the usability of the tool, rather than the static analysis capabilities. There are a lot of folks out there who could use pylint, but they don't use it currently because of various reasons, most of them having\nreal arguments that I'd like to address with this issue.\n\nWhen talking about this 2.0, I'm not referring to the previous 2.0 that arised in discussions we had over IRC, with advanced static analysis capabilities, such as control flow graphs, points-to analysis and abstract interpretation. We'll have to call the latter one 3.0 though, since it's going to be another major API breaker. 2.0, in my opinion, should have a main focus of reducing the annoyances that users have with the tool from a UX perspective.\n\nWithout further ado, here are the issues I'd like to address with 2.0:\n1. Sane defaults\n\nPylint's output is too verbose by default. While I agree that most of the messages should\nbe left as is, we could try to activate the -E flag by default. It should offer the most useful set of errors that users shouldn't have in their project, leaving style checking and other non-critical checks to be activated explicitly by those interested in them.\n\nThe reports are not so useful, we could activate \"--reports=n\" by default. They tend to be useful in some situations, but impedes the normal workflow when working with pylint. The only capability that I'd like to have activated by default is the score, though, since it tends to make the code quality a gamification for beginners.\n\nRemove or downgrade to extensions some checkers, such as too-few-public-methods, too-many-public-methods etc. I'll have to compile a full list for these, but I'm interested in what messages don't seem so useful for  the community.\n\nReevaluate constants for checker's options, such as the maximum number of statements, maximum number of arguments etc. For me, some of them are set too low and I always change them.\n1. Prefer false negatives over false positives\n\nCurrently we're doing the opposite thing, we emit a message even if there is a high risk of a false positive to occur. Things changed quite a bit in the last year though regarding this aspect.\nFor instance, we don't emit no-member if we don't detect all the base classes of the class which owns the attribute we're trying to access. \n\nBut we're not there yet, we still have tons of false positives, but this is a topic that's not going to go away so soon, requiring a higher level understanding of Python than we currently have\nand more static analysis concepts brought into our need (call graphs, abstract interpretation, flow control understanding, points-to and so much more). What we can do is to try not to emit a message if we're not 100% confident that it's actually a problem. The first example that comes into my\nmind is no-member, which we could try not to emit if we can infer multiple values for the same object. \nThe idea is to keep away false positives, but letting false negatives taking their position. It's much worse to deal with 100 false positives in a project that with 10-15 false negatives (which will eventually be detected correctly, as soon as we'll implement what's missing for them).\n\nSo, what do you folks think about this? What else we should target for 2.0 and what would be of interest to you for using pylint more often? The plan is to have this 2.0 out in march-april,\nwith the main focus for an advanced 3.0 later on this year.\n\ncc @The-Compiler @dmand @ceridwen I'd like your opinion as well on this one.\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2483,
                "title": "docparams raise missing-type-doc without missing-param-doc for Google docstrings",
                "labels": [
                    "bug"
                ],
                "description": "### Is your feature request related to a problem? Please describe\r\nIf an invalid type is detected in a Google type docstring, both missing-param-doc and missing-type-doc are raised. This is because the valid type regex fails to match, and therefore the whole parameter regex fails to match. For example:\r\n\r\n```\r\nArgs:\r\n    param (this is not a type): This is the description.\r\n```\r\n\r\n### Describe the solution you'd like\r\nIdeally missing-param-doc would not get raised in the above situation."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2056,
                "title": "Pylint ignores child members when using contextlib.ExitStack with inheritence",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun pylint on the following code:\r\n\r\n```python\r\nimport contextlib\r\n\r\nclass Parent(object):\r\n\r\n    def __enter__(self):\r\n        return self\r\n\r\n    def __exit__(self, *_):\r\n        pass\r\n\r\nclass Child(Parent):\r\n    def func(self):\r\n        pass\r\n\r\n\r\nwith contextlib.ExitStack() as stack:\r\n    s = stack.enter_context(Child())\r\n    s.func()\r\n```\r\n\r\n### Current behavior\r\nPylint complains on the last line: \r\n```\r\nE: 18, 4: Instance of 'Parent' has no 'func' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nThere should be no errors\r\n\r\n### pylint --version output\r\n```\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.5 (default, Mar 30 2018, 06:41:53)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 718,
                "title": "unused-import not triggered",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nI'd expect to get an `unused-import` [here](https://github.com/The-Compiler/qutebrowser/blob/master/qutebrowser/app.py#L45), but I don't. I first thought that was because `resources.py` is in `ignore` in `.pylintrc`, but that doesn't seem to be the culprit.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/718\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2491,
                "title": "Undefined variable false report in list/dict comprehension in formatstr",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Use standard configuration\r\n2. Lint the following code\r\n\r\n```python\r\na = f'The ting: {[x for x in range(42)]}'\r\n```\r\n\r\n### Current behavior\r\n`Undefined variable 'x' (undefined-variable`\r\n\r\n### Expected behavior\r\nNo errors or warnings\r\n\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n\r\nAlso see #1897 (partly a follow up)\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2053,
                "title": "Pylint giving a false positive for E1101",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1.  Tested it out on the following code: \r\n```python\r\nfrom sklearn.datasets import load_iris\r\niris = load_iris()\r\nprint(iris.feature_names)\r\nprint(iris.target_names)\r\nprint(iris.data[0])\r\nprint(dir(iris))\r\n```\r\n\r\nOutput in terminal - \r\n```\r\n['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\r\n['setosa' 'versicolor' 'virginica']\r\n[5.1 3.5 1.4 0.2]\r\n['DESCR', 'data', 'feature_names', 'target', 'target_names']\r\n```\r\n### Current behaviour\r\n```\r\n$ pylint scikitlearn.py\r\nNo config file found, using default configuration\r\n************* Module scikitlearn\r\nC:  8, 0: Final newline missing (missing-final-newline)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nC:  3, 0: Constant name \"iris\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nE:  4, 6: Instance of 'tuple' has no 'feature_names' member (no-member)\r\nE:  5, 6: Instance of 'tuple' has no 'target_names' member (no-member)\r\nE:  6, 6: Instance of 'tuple' has no 'data' member (no-member)\r\n\r\n----------------------------------------------------------------------\r\nYour code has been rated at -20.00/10 (previous run: -15.00/10, -5.00)`\r\n```\r\n\r\n### Expected behavior\r\nPylint displaying a false positive for the above code\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.4,\r\nastroid 1.6.2\r\nPython 3.6.4 (v3.6.4:d48ecebad5, Dec 18 2017, 21:07:28)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 701,
                "title": "False positives with not-an-iterable and unsubscriptable-object when using default values in base classes.",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nThe aforementioned checkers are having a lot of trouble with default values in a base class. There are multiple ways to express this:\n\n```\n#!python\n\nclass A:\n   value = None\n\n   def foo(self):\n       for i in value: process(i)\n\nclass B(A):\n   value = [1, 2, 3]\n```\n\n```\n#!python\n\nclass A:\n   def __init__(self):\n      self.value = None\n   def foo(self):\n      return self.value[some_key]\n\nclass B(A):\n   def __init__(self):\n       super(B, self).__init__()\n       self.value = [1, 2, 3]\n```\n\nObviously these examples show that the code in question could have handled the situation a bit different, by defining what's expected to be set in the implementation classes as abstract methods or properties, but pylint doesn't catch this as well.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/701\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2493,
                "title": "Add support for noqa: ERROR MESSAGE",
                "labels": [
                    "enhancement"
                ],
                "description": "\r\n### Is your feature request related to a problem? Please describe\r\nYes. The problem is that every linter out there has its own pragma control, leading to a mess if you want to support bandit, pylint, pyflakes, flake8, mypy:\r\n`\u2026 # type: \u2026 # noqa: E501 # pylint: disable=line-too-long # nosec`\r\n\r\nI think it would help if we'd also support `noqa` with an error message (not bare `noqa` which I'm still against using in `pylint`). It could also help with the adoption as well with keeping your codebase linter agnostic if you plan to use just `pylint` and `flake8`.\r\n\r\n### Describe the solution you'd like\r\n\r\nSupport `noqa: error message` so `noqa: no-member` or `noqa: E1101` in `pylint`.\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2041,
                "title": "C0326 not picking up whitespace before open bracket with print",
                "labels": [
                    "bug",
                    "minor"
                ],
                "description": "### Steps to reproduce\r\n```\r\nfrom __future__ import print_function\r\nprint (\"Hello!\")\r\n```\r\n\r\n### Current behavior\r\nThis raises no warning in python 2 even though the print_function has been imported\r\n\r\n### Expected behavior\r\nIf the futures print function has been imported in python 2 I would have expected this to have raised a warning:\r\n\r\n```\r\nprint (\"Hello!\")\r\n     ^ (bad-whitespace)\r\n```\r\n\r\n### pylint --version output\r\nNo config file found, using default configuration\r\npylint 1.8.4, \r\nastroid 1.6.3\r\nPython 2.7.10 (default, Aug 31 2016, 10:20:55) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 696,
                "title": "Checker for \"for line in f.readlines():\"",
                "labels": [
                    "checkers",
                    "enhancement"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nWhen iterating over a file, `for line in f:` should be used rather than `for line in f.readlines():`.\n\nI see beginners make this mistake often, and I even did it myself in less obvious contexts `[line.strip() for line in f.readlines()]` instead of `[line.strip() for line in f]`.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/696\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2375,
                "title": "Regression: PyLint 2 incorrectly errors unexpected-keyword-arg on overloaded methods",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n(verified this is not fixed in preview 2.1.0 either)\r\n\r\n### Steps to reproduce\r\n\r\nRequires the typing module (v3.6.2 installed on python3)\r\nFile a.py\r\n```python\r\nfrom b import XYZ\r\n\r\nXYZ().overloaded(replace_with=\"repl\")\r\n```\r\n\r\nFile b.py\r\n``` python\r\nfrom typing import overload\r\n\r\nclass XYZ:\r\n    @overload\r\n    def overloaded(self):\r\n        pass\r\n\r\n    def overloaded(self, replace_with=None):  # pylint: disable=function-redefined\r\n        pass\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n$ python3 -m pylint a.py\r\n************* Module a\r\na.py:1:0: C0111: Missing module docstring (missing-docstring)\r\na.py:3:0: E1123: Unexpected keyword argument 'replace_with' in method call (unexpected-keyword-arg)\r\n```\r\n\r\n### Expected behavior\r\nIt shouldnt' complain.  Here is the correct behavior in v1.9.0\r\n\r\n```\r\n$ python3 -m pylint --version                                                                                                                                                             \r\nNo config file found, using default configuration\r\n__main__.py 1.9.1, \r\nastroid 1.6.5\r\nPython 3.6.5 (default, Jul  2 2018, 12:11:17) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)]\r\n\r\n$ python3 -m pylint a.py\r\nNo config file found, using default configuration\r\n************* Module a\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\n```\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ python3 -m pylint --version\r\n__main__.py 2.0.1\r\nastroid 2.0.2\r\nPython 3.6.5 (default, Jul  2 2018, 12:11:17) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2038,
                "title": "Improve the performance of pylint",
                "labels": [
                    "topic-performance"
                ],
                "description": "(Mostly a placeholder until I'll have time to link the relevant issues and the rationale)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 689,
                "title": "commandline file order matters?",
                "labels": [
                    "topic-command-line",
                    "bug"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nI'm using pylint as part of an automated commit hook in git to check if any file that was changed is non-conformant.  My git-hook looks something like:\n\n```\n#!bash\n\npylint --rcfile=my_pylint_config_file.cfg --reports=no ${PY_FILES_CHANGED[@]} 2>&1\n\n```\n\nHere, the bash array `${PY_FILES_CHANGED}` is populated with the filenames of python files based on the files in the current commit.  Today I ran into a strange error.  My commit consisted of 2 files in the same directory (package) -- though I'm not sure if pylint cares about that.\n\n```\n#!python\n\n$ pylint --reports=no package/foo.py package/bar.py \n************* Module package.bar\nC: 83, 4: Invalid attribute name \"id\" (invalid-name)\n************* Module package.foo\nR: 18, 0: Too many instance attributes (8/7) (too-many-instance-attributes)\n$ \n$ pylint --reports=no package/bar.py package/foo.py\n$\n```\n\nIs this expected behavior?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/689\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2507,
                "title": "Detect when f-string-syntax is used in a string, but not marked as an f-string",
                "labels": [
                    "checkers",
                    "enhancement"
                ],
                "description": "### Problem statement\r\n\r\nConsider the following codeblock\r\n\r\n```python\r\nname = \"Katie\"\r\n\r\nstmt1 = f\"Hello {name}\"\r\nstmt2 = \"Hello {name}\"\r\n```\r\n\r\nWhile the block is correct syntax-wise, the content is almost certainly logically invalid, as seen below: \r\n\r\n```python\r\n>>> print(stmt1)\r\nHello Katie\r\n>>> print(stmt2)\r\nHello {name}\r\n```\r\n\r\n`stmt2` is a valid string, but declares string interpolation formatting that is compatible with f-strings, but the string does not have the `f` prefix to invoke the interpolation. \r\n\r\n### Describe the solution you'd like\r\n\r\nPyLint should detect strings that use f-string-like syntax, but have not been declared as f-strings, in Python 3.6+ \r\n\r\nThis could either be by:\r\n * attempting to evaluate the content within `{}`, and if valid Python, return a warning\r\n * attempting to evaluate the entire string as an f-string, and if the evaluation does not equal the original string, return a warning\r\n\r\n**Edge Case One**: Having `{` and `}` characters are perfectly valid, but on the edge case that the content within them is a reference to an in-scope variable, or some other expression, it is likely the string was meant to be an f-string. This would be desirable to catch as a linting error.\r\n\r\n\r\n**Edge Case Two**: `f'...'` is effectively shorthand for `'...'.format(locals())`; so this:\r\n```\r\nmystring = 'hello {name}'\r\nprint(mystring.format(name='Katie'))\r\n```\r\nis entirely legal, and isn't an error. There is a possibly design decision about whether this linting check should be\r\n\r\n* enforced by default\r\n* enforceable as an option\r\n* enforceable if the string that triggers the problem doesn't have '.format' invoked on it in the same method.\r\n\r\n\r\n### Additional context\r\nI understand PyLint already warns against f-strings in logging, but I can't locate the base functionality to detect f-strings in the first place. I'd be willing to help implement this feature, but would require some mentoring. "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2374,
                "title": "Regression: used-before-assignment error not reported for function arguments",
                "labels": [
                    "regression",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun Pylint on the following code:\r\n```python\r\n\"\"\"A module to demonstrate Python's UnboundLocalError exception.\"\"\"\r\n\r\ndef test(tmp=0):\r\n    \"\"\"Demonstrate UnboundLocalError exception on a function argument.\"\"\"\r\n    print(tmp)\r\n    def inner():\r\n        \"\"\"Python considers \"tmp\" as a local variable in this function.\"\"\"\r\n        print(tmp)  # UnboundLocalError is raised here\r\n        tmp = 1\r\n    inner()\r\n    print(tmp)\r\n\r\n\r\ntest()\r\n```\r\n### Current behavior:\r\nNo warning or error is reported.\r\n\r\nHowever, the code fails to run because of [this](https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value) well-known issue with using variables considered as local before their assignment. The following exception is raised:\r\n```\r\nUnboundLocalError: local variable 'tmp' referenced before assignment\r\n```\r\n### Expected behavior\r\n`used-before-assignment` error is reported on line where `tmp` is first used in function `inner`.\r\n\r\nThis error is correctly reported by Pylint 1.9.3, but not by Pylint versions 2 and above.\r\n\r\nA similar error is correctly reported by Pylint versions 2 and above when the `tmp` variable is locally defined within the outer function, but not when it is a function's argument.\r\n\r\n### pylint --version output\r\npylint 2.1.0\r\nastroid 2.0.2\r\nPython 3.6.6 (default, Jun 27 2018, 14:44:17) \r\n[GCC 8.1.0]\r\n(the current master branch version 7be00a961bbfebcdd7a9b955f974c30c5254a64e)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2036,
                "title": "Breaking down C0111(Missing Docstring) into multiple \"Convention\" messages",
                "labels": [
                    "reviewed-waiting-updates",
                    "work in progress"
                ],
                "description": "This is an incomplete pull request in order to see more easily what needs to be changed in order to implement #1164 after a long period of inactivity.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2494,
                "title": "[Feature request] Pylint should report wrong except clause(s)",
                "labels": [
                    "contributor friendly",
                    "enhancement",
                    "minor"
                ],
                "description": "<!--\r\n  Hi there! Thank you for wanting to make pylint better.\r\n\r\n  Before you submit this, make sure that this feature wasn't\r\n  already requested or if it is not already implemented in the master branch.\r\n-->\r\n\r\n### Is your feature request related to a problem? Please describe\r\nI recently saw some code that tries to catch multiple exceptions using the `|` operator. As per [python documentation](https://docs.python.org/3/tutorial/errors.html#handling-exceptions) that should be done with a colon (e.g. ```except (RuntimeError, TypeError, NameError)```).\r\n\r\nFor demonstration consider the following example:\r\n```python\r\ndef call_me():\r\n    try:\r\n        raise ValueError(\"A problem\")\r\n    except (ValueError | TypeError) as error:\r\n        print(\"Error: {0}!!\".format(error))\r\n\r\n\r\nprint(\"hello\")\r\n```\r\n\r\nUnfortunately pylint doesn't complain about it. Running the code without calling the function works fine, but when calling the function python complains with\r\n```\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 3, in call_me\r\n    raise ValueError(\"A problem\")\r\nValueError: A problem\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 9, in <module>\r\n    call_me()\r\n  File \"example.py\", line 4, in call_me\r\n    except (ValueError | TypeError) as error:\r\nTypeError: unsupported operand type(s) for |: 'type' and 'type'\r\n```\r\n\r\n### Describe the solution you'd like\r\nEven though that might be a rare case and somewhat obvious for most python developers, I think that pylint should report a warning or even an error when someone is using  ```except (ValueError | TypeError) as error:``` instead of ```except (ValueError, TypeError) as error:```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2368,
                "title": "duplicate-code messages are always counted on last module checked",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n\r\nHave pylint check multiple modules in a single invocation. There should be duplicate lines among these modules.\r\n```\r\npylint -ry *.py\r\n```\r\n\r\n### Current behavior\r\n\r\nThe `R0801` messages will be issued on the last module checked, regardless of which modules contained the duplicate lines:\r\n```\r\nxmlgen.py:1:0: R0801: Similar lines in 2 files\r\n==databaselib:11\r\n==projectlib:18\r\nimport logging\r\nimport os\r\nimport os.path\r\nimport re\r\nimport time (duplicate-code)\r\n```\r\nThis distorts the statistics, in particular the `% errors / warnings by module` report. The `xmlgen.py` module in the code I'm checking gets blamed for 68% of refactor issues, even though it contains 0 issues if checked individually.\r\n\r\n### Expected behavior\r\n\r\nOne option would be to issue duplicate code on all modules that contain it. That would inflate its count a bit, but I don't think that would be a major problem.\r\n\r\nAnother option could be to create a pseudo-module on which all duplicates are reported. So it would be much like the current situation, but without an existing module's stats being distorted.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.1\r\nastroid 2.0.1\r\nPython 3.4.6 (default, Mar 22 2017, 12:26:13) [GCC]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2024,
                "title": "False-positive E1101 with tensorflow.Summary().value",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "This is slightly different than #2021: it raises the same error, but this time, the type of the variable appears to be correct. I myself wonder how this code runs without error, but it does. (This is where I got it from: https://github.com/keras-team/keras/issues/6692#issuecomment-372458636)\r\n\r\n### Steps to reproduce\r\n```\r\n>cat bug.py\r\n\"\"\"Code runs without error\"\"\"\r\nimport tensorflow as tf\r\nprint(tf.Summary().value)\r\nprint(\"Done\")\r\n\r\n>python bug.py\r\n[]\r\nDone\r\n\r\n>pylint bug.py\r\nNo config file found, using default configuration\r\n************* Module bug\r\nE:  3, 6: Instance of 'Summary' has no 'value' member; maybe 'Value'? (no-member)\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at -6.67/10 (previous run: -6.67/10, +0.00)\r\n\r\n```\r\n### Current behavior\r\nError E1101\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### pylint --version output\r\n\r\nNo config file found, using default configuration\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]\r\n\r\nTensorflow package used is tensorflow-gpu (1.8.0rc0)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 666,
                "title": "Invalid call of a module in subdirectory not detected",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**\n\n---\n\nPython 2 or 3 cannot run this file:\n\n```\nimport xml\nxml.etree.ElementTree.parse('test.xml')\n```\n\nxml.etree.ElementTree should be imported, not xml\n\n```\n#!shell\n$ python3 test.py \nTraceback (most recent call last):\n  File \"test.py\", line 2, in <module>\n    xml.etree.ElementTree.parse('test.xml')\nAttributeError: 'module' object has no attribute 'etree'\n```\n\nBut pylint only complains about missing module docstring. But change \"parse\" to \"pares\", and pylint notices that:\n\n```\nC:  1, 0: Missing module docstring (missing-docstring)\nE:  2, 0: Module 'xml.etree.ElementTree' has no 'pares' member (no-member)\n```\n\nApparently, pylint can read the module and its members, but cannot detect that the module is imported incorrectly.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/666\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2503,
                "title": "Inference failure when function returns one of two constant values",
                "labels": [
                    "topic-inference",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Run `pylint` on this code:\r\n\r\n```\r\n\"\"\"pylint test module\"\"\"\r\n\r\ndef return_an_int(param):\r\n    \"\"\"Returns an int\"\"\"\r\n    if param == 0:\r\n        return 1\r\n    return 0\r\n\r\ndef test_one(param):\r\n    \"\"\"Should complain about var_one[0], but doesn't\"\"\"\r\n    var_one = return_an_int(param)\r\n    return var_one[0]\r\n```\r\n\r\n### Current behavior\r\n\r\n`Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)`\r\n\r\n### Expected behavior\r\n\r\n`E: 12,11: Value 'var_one' is unsubscriptable (unsubscriptable-object)`\r\n\r\n### pylint --version output\r\n\r\nOriginally found on:\r\n\r\n```\r\nNo config file found, using default configuration\r\npylint 1.9.3, \r\nastroid 1.6.5\r\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 26 2016, 12:10:39) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n```\r\n\r\nAlso see identical behavior on this code with:\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) \r\n[Clang 6.0 (clang-600.0.57)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2366,
                "title": "useless-suppression false positive with ungrouped-imports",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nRun pylint on the following code:\r\n\r\n```python\r\n# pylint: enable=useless-suppression\r\nfrom pylint import run_pylint\r\nimport astroid\r\nfrom pylint import run_pyreverse # pylint: disable=ungrouped-imports\r\n```\r\n\r\n### Current behavior\r\n\r\nThis message is issued:\r\n```\r\n4:0: I0021: Useless suppression of 'ungrouped-imports' (useless-suppression)\r\n```\r\nHowever, if the comment is removed from line 4, this message is issued:\r\n```\r\n4:0: C0412: Imports from package pylint are not grouped (ungrouped-imports)\r\n```\r\n\r\n### Expected behavior\r\n\r\nSince there is an actual message being suppressed, I would expect to get no `useless-suppression` message.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.1\r\nastroid 2.0.1\r\nPython 3.4.6 (default, Mar 22 2017, 12:26:13) [GCC]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2021,
                "title": "numpy.empty is inferred as list, results in no-member",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. pylint pylint_bug.py\r\n\r\n[pylint_bug.py.txt](https://github.com/PyCQA/pylint/files/1920070/pylint_bug.py.txt)\r\n\r\n### Current behavior\r\n```\r\nC:  5, 0: Constant name \"MyArray\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nE:  6,22: Instance of 'list' has no 'take' member (no-member)\r\nC:  7, 0: Constant name \"MyArray\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\n```\r\n\r\n### Expected behavior\r\nNo error (and probably, no warning).\r\n\r\n### pylint --version output\r\n```\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n\r\nI suspect  that pylint incorrectly thinks that MyArray is a constant; then assumes from the second assignment that it is a tuple; thus concludes it is a constant tuple. Under this assumption, the error message makes sense, but the assumption is incorrect.\r\n\r\nThe same errors appear in https://github.com/PyCQA/pylint/issues/1981; I have no idea whether this is related."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2558,
                "title": "R1705 (no-else-return): Also apply for \"raise\"",
                "labels": [],
                "description": "Currently we have a check for \"no-else-return\", which covers the following case:\r\n```python\r\nif var:\r\n  return 1\r\nelse:\r\n  return 2\r\n```\r\n\r\nand would suggest this instead:\r\n```python\r\nif var:\r\n  return 1\r\nreturn 2\r\n```\r\n\r\nI suggest this checker also covers the same for \"raise\", either by enhancing this checker, or adding a new one.\r\n```python\r\nif var:\r\n  raise ExceptionA\r\nelse:\r\n  raise ExceptionB\r\n```\r\n=>\r\n```python\r\nif var:\r\n  raise ExceptionA\r\nraise ExceptionB\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2360,
                "title": "Confirm API for the PluginRegistry",
                "labels": [
                    "question",
                    "topic-per-directory-config"
                ],
                "description": "#1886 introduced the PluginRegistry so that a linter instance does not need to be passed to plugin \"register\" functions. Does this do everything that plugins need? Is there anything that we want to add/remove.\r\n\r\nCurrently the class has the following attributes and methods:\r\n* add_message\r\n* clear_by_id_managed_msgs\r\n* config\r\n* disable\r\n* disable_noerror_messages\r\n* disable_report\r\n* disable_reporters\r\n* enable\r\n* enable_report\r\n* error_mode\r\n* file_state\r\n* for_all_checkers\r\n* get_by_id_managed_msgs\r\n* get_message_state_scope\r\n* is_message_enabled\r\n* msg_status\r\n* msgs_store\r\n* print_full_documentation\r\n* python3_porting_mode\r\n* register_checker\r\n* register_options\r\n* register_report\r\n* register_reporter\r\n* report_is_enabled\r\n* reporter\r\n* reports\r\n* stats"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2018,
                "title": "Show why snake_case errors is emitted on single word variables (might be too small)",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n    no = 'No'\r\n\r\n### Current behavior\r\nI'm getting an error saying that 'no' doesn't conform the camel_case style, even though it's only one word.\r\n\r\n### Expected behavior\r\nThere should be no error.\r\n\r\n\r\n### pylint --version output\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 647,
                "title": "Support py3.5 style typing annotations",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nIn the very least it would be nice to force type assertions on function arguments (i.e. this is _definitely_ a string)\n\nWould also be cool to support them in py2 via backports.typing or typing packages. The py2 version could even be nice enough to support multiple @annotations decorators for overloads as defined in https://www.python.org/dev/peps/pep-0484/#stub-files .\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/647\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2447,
                "title": "warn when redundant temporary lists are used when generators would work",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "### Is your feature request related to a problem? Please describe\r\n\r\npeople often use temporary lists in contexts where generators are acceptable.  for example:\r\n```python\r\n# Replace ... with any generator expression like 'str(x) for x in some_list'.\r\nsome_list.extend([...])\r\nsome_set.add([...])\r\n''.join([...])\r\nset([...])\r\nall([...])\r\nany([...])\r\n```\r\n\r\nthis will create a temporary list which is then passed to the respective functions which will consume the list.  if a generator was passed in directly, it would have been cheaper at runtime (no need to create the temporary list, so the content would have been ingested directly), and for some funcs (like `all` or `any`), it prevents the function from returning early.\r\n\r\n### Describe the solution you'd like\r\n\r\nwhenever pylint sees temporary lists in constructs it knows a generator will work, throw a warning telling people to pass a generator in directly."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2355,
                "title": "Figure out a better way of registering options?",
                "labels": [
                    "topic-per-directory-config"
                ],
                "description": "All of the config parsers (the CLIParser and the IniFileParser) need the option definitions and so does the Configuration. Registering a checker means registering options, which means the PluginRegistry needs a callback function to give these options to all of these objects."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2016,
                "title": "Bad unsubscriptable-object error",
                "labels": [
                    "topic-control-flow",
                    "minor"
                ],
                "description": "### Steps to reproduce\r\n```\r\ndef subscriptable(flag):\r\n    state = None\r\n    for _ in [0, 1]:\r\n        if state is None:\r\n            if flag:\r\n                state = [None]\r\n        elif state[0] is None:\r\n            print('subscripted')\r\n```\r\n\r\n### Current behavior\r\n`E:  7,13: Value 'state' is unsubscriptable (unsubscriptable-object)`\r\n\r\n### Expected behavior\r\n`state` is subscriptable by the time it gets subscripted, so that\r\nerror is wrong. After all, the code runs:\r\n\r\n```\r\n>>> subscriptable(False)\r\n>>> subscriptable(True)\r\nsubscripted\r\n```\r\n\r\nThat said, it does look like it could be an error, or maybe it would\r\nbe an error in a more complicated case, so maybe a warning could be\r\nemitted -- `possibly-unsubscriptable-object` or something like that.\r\n\r\nRelated to, but more specific than, https://github.com/PyCQA/pylint/issues/701\r\n\r\n### pylint --version output\r\n```\r\npylint 2.0.0\r\nastroid 2.0.0\r\nPython 3.6.5 (default, Mar 30 2018, 06:42:10) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 626,
                "title": "pylint doesn't understand the scope of except clause variables",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Tom Dryer (BitBucket: [tdryer](http://bitbucket.org/tdryer), GitHub: @tdryer?)**\n\n---\n\nIn the following code, pylint fails to identify that the `e` in the except clause is an unused variable, and that the `e` in `print(e)` is an undefined variable:\n\n```\n#!python\n\ndef main():\n    try:\n        raise ValueError\n    except ValueError as e:\n        pass\n\n    print(e)\n\n\nmain()\n```\n\nThe issue appears to be that pylint doesn't understand that the scope of the exception variable is limited to the except clause.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/626\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2555,
                "title": "Pylint doesn't detect AttributeError when using PyQt5",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Create a new directory and initiate a virtual environment in that directory using virtualenv\r\n2. Install pylint and PyQt5 using the venv's pip\r\n3. Create an rcfile for pylint (using pylint --generate-rcfile) and add PyQt5 to the extension-pkg-whitelist\r\n4. Write some code in python requesting an attribute that doesn't exist e.g.\r\n\r\n```\r\nimport sys\r\n\r\nfrom PyQt5 import QtWidgets\r\n\r\n\r\ndef create_window():\r\n    app = QtWidgets.QApplication(sys.argv)\r\n    window = QtWidgets.QWidget()\r\n    window.definitely_not_one_of_its_attributes()\r\n    window.show()\r\n\r\ncreate_window()\r\n```\r\n\r\n### Current behavior\r\nWhen running pylint on the file it informs me that my code has been rated at 6.67/10.0 and that other than some missing docstrings there are no errors.\r\n\r\n### Expected behavior\r\nPylint should tell me that 'definitely_not_one_of_its_attributes' isn't an attribute of QWidget, which is the error message that I get when I try to run the code.\r\n\r\n### pylint --version output\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Aug 22 2018, 15:22:33)\r\n[Clang 9.1.0 (clang-902.0.39.2)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2336,
                "title": "`assignment-from-no-return` considers the wrong method if ambiguous",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\n```\r\nclass Test():\r\n    def test(self):\r\n        pass\r\n\r\n    def test(self):\r\n        return True\r\n\r\nA = Test().test()\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n5:4: E0102: method already defined line 2 (function-redefined)\r\n5:4: R0201: Method could be a function (no-self-use)\r\n8:0: E1111: Assigning to function call which doesn't return (assignment-from-no-return)\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\n5:4: E0102: method already defined line 2 (function-redefined)\r\n5:4: R0201: Method could be a function (no-self-use)\r\n```\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.1\r\nastroid 2.0.1\r\nPython 3.6.5 (default, May 11 2018, 13:30:17) \r\n[GCC 7.3.0]\r\n```\r\n\r\nhttps://github.com/PyCQA/pylint/commit/9a9de854741e2f3d8f97cbace3d7de444acae340 adds that check for methods and https://github.com/PyCQA/astroid/commit/2aa27e9aed6ffcba4a61655e291e852ecd001549 causes the first of the definitions to be the only one that gets returned from `infer_attribute`. :negative_squared_cross_mark: \r\n\r\nFor ambiguous local functions, `infer_name` returns the correct definition. :heavy_check_mark: \r\nFor ambiguous module functions, `infer_attribute` returns all definitions and `safe_infer` detects that ambiguity so that none of them get actually checked. :negative_squared_cross_mark: (I'd consider that an issue as well but it only causes false negatives, so it's not a huge one)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2009,
                "title": "pylint gets class name wrong when constructing objects with a list of strings",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nRun pylint on the following code:\r\n\r\n```python\r\nclass Enum(object):\r\n    def __init__(self, *values):\r\n        self._values = {}\r\n        for value in values:\r\n            self._values[str(value).upper()] = value\r\n\r\n    def __getattribute__(self, key):\r\n        if key.startswith('_'):\r\n            return super(Enum, self).__getattribute__(key)\r\n        return self._values[str(key).upper()]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    Colors = Enum('red', 'green', 'blue')\r\n    print(Colors.red)\r\n\r\n```\r\n\r\n### Current behavior\r\n\r\nPylint emits the following message:\r\n\r\n```\r\n************* Module testme\r\n/tmp/testme.py:15: [E1101(no-member), ] Instance of 'red' has no 'red' member\r\n```\r\n\r\n### Expected behavior\r\n\r\nThis is actually related to #2008, but even if the no-member error *does* get thrown, one would expect it to say \"Instance of 'Enum' has no 'red' member\".\r\n\r\nAt the current state of things, it makes it really hard to add an exception to this check based on the class name...\r\n\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 3.6.5 (default, Mar 30 2018, 06:41:53) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 629,
                "title": "no-value-for-parameter false positive for wrapt.decorator",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nIt seems we don't understand properly wrapt.decorator, which is used to implement general\ndecorators with additional features. The decorator function will be written with four\nparameters, but none of them needs to be passed explicitly when the decorated function is called, as it is the case for the following example. This issue is related and similar with\nthe one regarding mock.patch.\n\n```\n#!python\n\nimport wrapt\n\n@wrapt.decorator\ndef test(func, instance, args, kwargs):\n    return func(*args, **kwargs)\n\ndecorated = test(some_func) # no value for parameter here\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/629\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2557,
                "title": "Support filtering unused global variables",
                "labels": [],
                "description": "### Is your feature request related to a problem? Please describe\r\nFor a module defined like:\r\n```\r\nFOO = 'abc'\r\n_BAR = 'xyz'\r\n```\r\nit would be great if pylint had an option to ignore the fact that `FOO` is unused, since it is \"public\", but still alert that `_BAR` is unused, since it is private to the module\r\n\r\n### Describe the solution you'd like\r\nWould an additional configuration option for allow-global-unused-variables make sense? I'd like to have pylint let me know about unused global variables that it would consider protected, since in that case there's a higher chance the variable is truly unused."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2335,
                "title": "Astroid 2.0.1 Regression: Metaclass call no longer understood.",
                "labels": [
                    "needs-reproduction",
                    "bug"
                ],
                "description": "\r\n### Steps to reproduce\r\n1.\r\n\r\n```\r\nclass NodeCheckMetaClass(ABCMeta):\r\n    kinds = {}\r\n\r\n    # This is in conflict with either PyDev or Pylint 1.9.2 used fo Python2, it\r\n    # should be \"mcs\" for one and \"cls\" for the other.\r\n    # pylint: disable=I0021,bad-mcs-classmethod-argument\r\n\r\n    def __new__(cls, name, bases, dictionary): # pylint: disable=I0021,arguments-differ\r\n        _checkBases(name, bases)\r\n\r\n        if \"__slots__\" not in dictionary:\r\n            dictionary[\"__slots__\"] = ()\r\n\r\n        if \"named_child\" in dictionary:\r\n            dictionary[\"__slots__\"] += (intern(\"subnode_\" + dictionary[\"named_child\"]),)\r\n\r\n        # Not a method:\r\n        if \"checker\" in dictionary:\r\n            dictionary[\"checker\"] = staticmethod(dictionary[\"checker\"])\r\n\r\n        return ABCMeta.__new__(cls, name, bases, dictionary)\r\n\r\n```\r\n\r\n### Current behavior\r\n\r\nWarning is given:\r\nnuitka/nodes/NodeMetaClasses.py:66 E1121 too-many-function-args\r\nNodeCheckMetaClass.__new__ Too many positional arguments for\r\nclassmethod call\r\n\r\n### Expected behavior\r\n\r\nI would be really surprised if that __new__ call got too many arguments for real. I expect no warning to be given of course. Maybe it has to do with bad-mcs-classmethod-argument which seemed to no longer be an issue with 2.0.0, which I currently do not use due to lack of Python3 support for 2.0.1\r\n\r\n\r\n### pylint --version output\r\n\r\npython3.6 -m pylint --version\r\n__main__.py 2.0.0\r\nastroid 2.0.1\r\nPython 3.6.3 (default, Mar 27 2018, 00:29:24) \r\n[GCC 6.3.0 20170516]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 623,
                "title": "Unreachable code detection is not semantic enough",
                "labels": [
                    "topic-control-flow",
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nFor instance, else branches which aren't taken because the if clause condition is always true. We should improve the checker after having flow control inference, since in that case, it will be very easy to detect unreachable blocks.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/624\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2007,
                "title": "Trailing comma tuple check misses multi-line tuples",
                "labels": [
                    "checkers",
                    "enhancement",
                    "minor"
                ],
                "description": "### Steps to reproduce\r\n\r\n```\r\n\"\"\"test.py\"\"\"\r\nA = ['f',\r\n    ],\r\nprint(A)\r\n```\r\n> pylint test.py                                                                          \r\nNo config file found, using default configuration\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n\r\n> python test.py                                                                          \r\n(['f'],)\r\n\r\n### Current behavior\r\nNo error\r\n\r\n### Expected behavior\r\nPylint should complain\r\n\r\n### pylint --version output\r\nNo config file found, using default configuration\r\npylint 1.8.3,\r\nastroid 1.6.2\r\nPython 3.6.4 (default, Jan  5 2018, 02:35:40)\r\n[GCC 7.2.1 20171224]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2556,
                "title": "Nested extension modules not imported",
                "labels": [],
                "description": "We have C++ extension modules that contain nested modules (A.B.C).  Things in the outer module (A.xxx) are found when the module is put in the extension white list but the inner module is not.    This example was set up with pybind11 but any tool to create a binding will work.\r\n\r\n```\r\npylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.6.4 |Anaconda, Inc.| (default, Mar 13 2018, 01:15:57) \r\n[GCC 7.2.0]\r\n```\r\nC++ code in a file named cppmod.hpp\r\n```\r\nint func() { return 1; }\r\n\r\nnamespace Outer {\r\n   int func() { return 2; }\r\n\r\n   namespace Inner {\r\n      int func() { return 3; }\r\n   }\r\n}\r\n```\r\nC++ module init using pyblind11 in a file named init.cpp\r\n```\r\n// g++ -fPIC -I$HOME/pybind11/include -I$CONDA_PREFIX/include/python3.6m -shared -o cppmod.so init.cpp\r\n//\r\n#include \"cppmod.hpp\"\r\n#include <pybind11/pybind11.h>\r\n\r\nPYBIND11_MODULE( cppmod, m )\r\n{\r\n   m.def( \"func\", &func );\r\n   \r\n   auto o = m.def_submodule( \"Outer\" );\r\n   o.def( \"func\", &Outer::func );\r\n\r\n   auto i = o.def_submodule( \"Inner\" );\r\n   i.def( \"func\", &Outer::Inner::func );\r\n}\r\n```\r\nThe python file contains the following in check.py\r\n```\r\nimport cppmod\r\n\r\nprint(\"cppmod:\", cppmod.func())\r\nprint(\"Outer :\", cppmod.Outer.func())\r\nprint(\"Inner :\", cppmod.Outer.Inner.func())\r\n```\r\nAnd the pylintrc file contains:\r\n```\r\n[MASTER]\r\nextension-pkg-whitelist=cppmod\r\nunsafe-load-any-extensions=yes\r\n```\r\nRunning pylint on check.py generates:\r\n```\r\n pylint check.py \r\n************* Module check\r\ncheck.py:1:0: C0111: Missing module docstring (missing-docstring)\r\ncheck.py:4:17: E1101: Instance of 'module' has no 'func' member (no-member)\r\ncheck.py:5:17: E1101: Instance of 'module' has no 'Inner' member (no-member)\r\n```\r\nSo it sees cppmod.func just fine but not cppmod.Outer.func or cppmod.Outer.Inner.func.  Adding cppmod.Outer to the white list doesn't work.  And even if it did, that's not a very good solution (my use case is a very large C++ extension library with ~100 submodules that I really don't want to list by hand)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2334,
                "title": "Astroid 2.0.1 Regression: Assigning to non slot.",
                "labels": [
                    "regression",
                    "bug"
                ],
                "description": "\r\n### Steps to reproduce\r\n1.\r\n\r\nCode like this:\r\n\r\n```\r\nclass NodeBase(NodeMetaClassBase):\r\n    __slots__ = \"parent\", \"source_ref\"\r\n\r\n    # Avoid the attribute unless it's really necessary.\r\n    if Options.isFullCompat():\r\n        __slots__ += (\"effective_source_ref\",)\r\n\r\n    def setCompatibleSourceReference(self, source_ref):\r\n        \"\"\" Bug compatible line numbers information.\r\n\r\n            As CPython outputs the last bit of bytecode executed, and not the\r\n            line of the operation. For example calls, output the line of the\r\n            last argument, as opposed to the line of the operation start.\r\n\r\n            For tests, we wants to be compatible. In improved more, we are\r\n            not being fully compatible, and just drop it altogether.\r\n        \"\"\"\r\n\r\n        # Getting the same source reference can be dealt with quickly, so do\r\n        # this first.\r\n        if self.source_ref is not source_ref and \\\r\n           Options.isFullCompat() and \\\r\n           self.source_ref != source_ref:\r\n            # An attribute outside of \"__init__\", so we save one memory for the\r\n            # most cases. Very few cases involve splitting across lines.\r\n            # pylint: disable=W0201\r\n            self.effective_source_ref = source_ref\r\n\r\n```\r\n\r\nAs you can see, previously a warning was disabled, because __init__ doesn't assign the attribute, instead of is looked up with getattr(). I am now getting this:\r\n\r\n\r\n### Current behavior\r\n\r\nnuitka/nodes/NodeBases.py:273 E0237 assigning-non-slot\r\nNodeBase.setCompatibleSourceReference Assigning to attribute\r\n'effective_source_ref' not defined in class slots\r\nnuitka/nodes/NodeBases.py:272 I0021 useless-suppression  Useless\r\nsuppression of 'attribute-defined-outside-init'\r\n\r\n\r\n### Expected behavior\r\n\r\nSeems support for \"__slots__\" was added in there, but my form of calculating slots is not understood, but of course it ought to be. No warning should be given.\r\n\r\n### pylint --version output\r\n\r\npython3.6 -m pylint --version\r\n__main__.py 2.0.0\r\nastroid 2.0.1\r\nPython 3.6.3 (default, Mar 27 2018, 00:29:24) \r\n[GCC 6.3.0 20170516]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1994,
                "title": "False positive on scipy.io.loadmat",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. import `scipy.io`\r\n2. use `scipy.io.loadmat`\r\n3. run pylint on the file\r\n\r\nMinimal python file to reproduce this:\r\n\r\n```python\r\n\"\"\"test.py\r\n\"\"\"\r\nimport scipy.io\r\n\r\n\r\nif __name__ == '__main__':\r\n    MAT = scipy.io.loadmat('unnamed.mat')\r\n```\r\n\r\n```bash\r\n> pylint test.py\r\nNo config file found, using default configuration\r\n************* Module test\r\nE:  7,10: Module 'io' has no 'loadmat' member (no-member)  \r\n```\r\n\r\n### Current behavior\r\n\r\nReport a \"no-member\" error \r\n\r\n### Expected behavior\r\n\r\nNo report\r\n\r\n### pylint --version output\r\n\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.2,\r\nastroid 1.6.1\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 624,
                "title": "The flow of the program is not taken in consideration for no-member and other checks",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nDue to how pylint is implemented, by using the visitor pattern, the following code will not be detected as problematic, since when visit_getattr will be called, x will be unknown.\n\nWe should consider changing this for Pylint 2.0, where vising the nodes will consider the flow of the program. There's a big bunch of errors that are currently undetected due to this.\n\n```\n#!python\n\ndef test(x):\n   return x.lala # not detected\n\ntest(1) \n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/623\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2550,
                "title": "Exceeded maximum recursion depth with some python3-qgis bindings",
                "labels": [
                    "crash",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\nOS: Fedora 29\r\nI have `qgis3` installed in my machine and included in the package are python3-bindings which are saved in `/lib64/python3.7/site-packages/qgis`.\r\nRunning pylint with most of the python modules in qgis works without issues, however, pylint hangs with the file below and returns `RecursionError: maximum recursion depth exceeded` when interrupted. \r\n\r\n```python\r\n\"\"\"\r\ntest.py:\r\n\"\"\"\r\nfrom qgis.core import QgsVectorLayer\r\nfrom qgis.gui import QgsSearchQueryBuilder\r\n\r\ndef testFunction(layer: QgsVectorLayer) -> QgsSearchQueryBuilder:\r\n    \"\"\"\r\n    Test function.\r\n    \"\"\"\r\n    return QgsSearchQueryBuilder(layer)\r\n```\r\n\r\n### Steps to reproduce\r\n1. install qgis3\r\n2. create the file `test.py`\r\n3. run `pylint-3 test.py`\r\n\r\n### Current behavior\r\nHangs indefinitely and when interrupted, returns recursion error.\r\n\r\n### Expected behavior\r\nPylint successfully runs.\r\n\r\n### pylint --version output\r\n```\r\npylint-3 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Aug 30 2018, 14:32:33) \r\n[GCC 8.2.1 20180801 (Red Hat 8.2.1-2)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 618,
                "title": "Add different configuration for different sub directories",
                "labels": [
                    "topic-per-directory-config",
                    "enhancement",
                    "topic-configuration"
                ],
                "description": "Originally reported by: **Fergal Hainey (BitBucket: [FerHai](http://bitbucket.org/FerHai))**\n\n---\n\nI'm using pytest and redefined-outer-name is a false negative in these cases as it's part of pytest's design. I'd like to run pylint over the whole project to flag things automatically before code reviews. I'd like to catch cases of redefined-outer-name outside the tests folder.\n\nI could add comments to the modules but 1. that's a lot of comments and 2. changes will require changing as many comments.\n\nWhat could be nice is looking up through basedirs of the file being linted for pylintrc files and taking config in closer pylintrcs as higher priority. Or maybe something in the project wide pylintrc to denote some config applies to a directory.\n\nWould this be considered a good idea? I'm open to making a patch if it's considered worthwhile.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/618\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2333,
                "title": "Astroid 2.0.1 regression: Not detecting that Exception self.args is iterable",
                "labels": [
                    "bug"
                ],
                "description": "\r\n\r\n### Steps to reproduce\r\n1.\r\n\r\nnuitka/Errors.py:37 E1133 not-an-iterable NuitkaNodeError.__str__\r\nNon-iterable value self.args is used in an iterating context\r\n\r\nThis is self.args from Exception, as can be seen in the code here:\r\n\r\n```\r\nclass NuitkaErrorBase(Exception):\r\n    pass\r\n\r\n\r\nclass NuitkaNodeError(NuitkaErrorBase):\r\n\r\n    # Try to output more information about nodes passed.\r\n    def __str__(self):\r\n        from nuitka.codegen.Indentation import indented\r\n\r\n        parts = [\"\"]\r\n\r\n        for arg in self.args:\r\n            if hasattr(arg, \"asXmlText\"):\r\n                parts.append(indented(\"\\n%s\\n\" % arg.asXmlText()))\r\n            else:\r\n                parts.append(arg)\r\n\r\n        parts.append(\"\")\r\n        parts.append(\"The above information should be included in a\r\nbug report.\")\r\n\r\n```\r\n\r\nI am assuming that the other code in apart from iteration of \"self.args\" in __str__ is not relevant, but I did not try.\r\n\r\n### Current behavior\r\n\r\nWarning is given: \r\nnuitka/Errors.py:37 E1133 not-an-iterable NuitkaNodeError.__str__\r\nNon-iterable value self.args is used in an iterating context\r\n\r\n\r\n### Expected behavior\r\n\r\nThe 2.0.0 version of Astroid doesn't give such warnings, the update to 2.0.1 does.\r\n\r\n### pylint --version output\r\n\r\npython3.6 -m pylint --version\r\n__main__.py 2.0.0\r\nastroid 2.0.1\r\nPython 3.6.3 (default, Mar 27 2018, 00:29:24) \r\n[GCC 6.3.0 20170516]\r\n\r\nNote: Didn't happen with 2.0.0.dev4\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1990,
                "title": "Add `isinstance` in `if` condition check as a special case",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. Write this simple code and save it:\r\n```\r\nimport subprocess\r\n\r\ntry:\r\n    subprocess.check_call(['ls', '-']) # Deliberately made error in this line\r\nexcept Exception as err:\r\n    if isinstance(err, subprocess.CalledProcessError):\r\n        print 'Subprocess error occured. Return code:', err.returncode\r\n        # Error in above line.......................here^^^\r\n    else:\r\n        print 'An error occured:', str(err)\r\n```\r\n2. Run `pylint` on this file.\r\n3. Output of Pylint:\r\n```\r\n$ pylint pylint_test.py \r\nNo config file found, using default configuration\r\n************* Module pylint_test\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nW:  5, 7: Catching too general exception Exception (broad-except)\r\nE:  7,56: Instance of 'Exception' has no 'returncode' member (no-member)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 0.00/10 (previous run: 2.86/10, -2.86)\r\n```\r\n\r\n### Current behavior\r\nI is showing Error in line: 7 which should not be an error.\r\n\r\n### Expected behavior\r\nIt should not show Error in line-7 as I am already checking if `err` is an instance of `subprocess.CalledProcessError` which has member `returncode`.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2554,
                "title": "Pylint goes into infinity loop in astroid while checking a file",
                "labels": [
                    "crash",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\nI run pylint checks on the `node-gyp` project to make it more python3 compatible. I went to project directory `gyp` and run the check from it. I found that pylint throwed an exception to the terminal.\r\n\r\n1. File to check: https://github.com/nodejs/node-gyp/blob/c9276f3202b23641db3d55b3aa574fc6735f8790/gyp/pylib/gyp/generator/ninja.py\r\n2. `pylint --disable=E1125,E0702,E0702,E1701,E1124,C,W0311 pylib/gyp/generator/ninja.py`\r\n3.\r\n\r\n### Current behavior\r\n(a lot of code errors and warnings)\r\nand \r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/bin/pylint\", line 11, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/__init__.py\", line 19, in run_pylint\r\n    Run(sys.argv[1:])\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/lint.py\", line 1394, in __init__\r\n    linter.check(args)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/lint.py\", line 801, in check\r\n    self._do_check(files_or_modules)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/lint.py\", line 938, in _do_check\r\n    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/lint.py\", line 1018, in check_astroid_module\r\n    walker.walk(ast_node)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/utils.py\", line 1162, in walk\r\n    self.walk(child)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/utils.py\", line 1159, in walk\r\n    cb(astroid)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/pylint/checkers/typecheck.py\", line 1271, in visit_unaryop\r\n    for error in node.type_errors():\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 4169, in type_errors\r\n    return [result for result in results\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 4169, in <listcomp>\r\n    return [result for result in results\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 478, in _infer_unaryop\r\n    for operand in self.operand.infer(context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 314, in infer_attribute\r\n    yield from owner.igetattr(self.attrname, context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 205, in igetattr\r\n    yield from _infer_stmts(self._wrap_attr(get_attr, context), context, frame=self)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 429, in _infer_boolop\r\n    for pair in itertools.product(*values):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 314, in infer_attribute\r\n    yield from owner.igetattr(self.attrname, context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 205, in igetattr\r\n    yield from _infer_stmts(self._wrap_attr(get_attr, context), context, frame=self)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 358, in infer_subscript\r\n    value = next(self.value.infer(context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 768, in _infer_augassign\r\n    for rhs in self.value.infer(context=rhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 768, in _infer_augassign\r\n    for rhs in self.value.infer(context=rhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 429, in _infer_boolop\r\n    for pair in itertools.product(*values):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 112, in yes_if_nothing_inferred\r\n    for node in func(*args, **kwargs):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 727, in _infer_binop\r\n    for lhs in left.infer(context=lhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 112, in yes_if_nothing_inferred\r\n    for node in func(*args, **kwargs):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 733, in _infer_binop\r\n    for rhs in right.infer(context=rhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 211, in infer_call\r\n    for callee in self.func.infer(context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 293, in infer_attribute\r\n    for owner in self.expr.infer(context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 314, in infer_attribute\r\n    yield from owner.igetattr(self.attrname, context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 205, in igetattr\r\n    yield from _infer_stmts(self._wrap_attr(get_attr, context), context, frame=self)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 429, in _infer_boolop\r\n    for pair in itertools.product(*values):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 112, in yes_if_nothing_inferred\r\n    for node in func(*args, **kwargs):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 727, in _infer_binop\r\n    for lhs in left.infer(context=lhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 112, in yes_if_nothing_inferred\r\n    for node in func(*args, **kwargs):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 466, in _filter_operation_errors\r\n    for result in infer_callable(self, context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 733, in _infer_binop\r\n    for rhs in right.infer(context=rhs_context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 211, in infer_call\r\n    for callee in self.func.infer(context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 293, in infer_attribute\r\n    for owner in self.expr.infer(context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 219, in infer_call\r\n    context=callcontext,\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1628, in infer_call_result\r\n    yield from returnnode.value.infer(context)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 92, in wrapped\r\n    res = next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/bases.py\", line 125, in _infer_stmts\r\n    for inferred in stmt.infer(context=context):\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 812, in infer_assign\r\n    stmts = list(self.assigned_stmts(context=context))\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/util.py\", line 148, in limit_inference\r\n    yield from islice(iterator, size)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/context.py\", line 107, in cache_generator\r\n    for result in generator:\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 125, in raise_if_nothing_inferred\r\n    yield next(generator)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/decorators.py\", line 89, in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/inference.py\", line 176, in infer_name\r\n    frame, stmts = self.lookup(self.name)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 1043, in lookup\r\n    return self.scope().scope_lookup(self, name)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 1208, in scope_lookup\r\n    return frame._scope_lookup(node, name, offset)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/scoped_nodes.py\", line 173, in _scope_lookup\r\n    stmts = node._filter_stmts(self.locals[name], self, offset)\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 1086, in _filter_stmts\r\n    myframe = self.frame()\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 462, in frame\r\n    return self.parent.frame()\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 462, in frame\r\n    return self.parent.frame()\r\n  File \"/Users/eirnym/Development/sdk/python/37/ens/lib/python3.7/site-packages/astroid/node_classes.py\", line 462, in frame\r\n    return self.parent.frame()\r\nRecursionError: maximum recursion depth exceeded\r\n```\r\n\r\n### Expected behavior\r\n(a lot of code errors and warnings, no exceptions)\r\n\r\n### pylint --version output\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 28 2018, 06:05:58) \r\n[Clang 9.0.0 (clang-900.0.39.2)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2329,
                "title": "type(self)() in inherited method inferred as parent class (E1101)",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Create `test.py`:\r\n```python\r\n#!/usr/bin/env python3\r\n\r\n# pylint: disable=too-few-public-methods,missing-docstring\r\n\r\nclass Path:\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def __getitem__(self, name):\r\n        return type(self)(f\"{self.name}/{name}\")\r\n\r\nclass Special(Path):\r\n    def action(self):\r\n        print(self.name)\r\n\r\n\r\ndef main():\r\n    spam = Special(\"spam\")\r\n    eggs = spam[\"eggs\"]\r\n    print(type(eggs))\r\n    eggs.action()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n2. Run pylint.\r\n```\r\npylint test.py\r\n```\r\n\r\n### Current behavior\r\n```\r\n************* Module test\r\ntest.py:21:4: E1101: Instance of 'Path' has no 'action' member (no-member)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 6.67/10 (previous run: 6.67/10, +0.00)\r\n```\r\n\r\n\r\n### Expected behavior\r\nNo finding. `eggs` should have been inferred as instance of `Special`, not `Path`.\r\n\r\n\r\n### pylint --version output\r\n```\r\npylint 2.0.0\r\nastroid 2.0\r\nPython 3.6.6 (default, Jun 27 2018, 13:11:40) \r\n[GCC 8.1.1 20180531]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1988,
                "title": "Per dir config",
                "labels": [
                    "reviewed-waiting-updates",
                    "work in progress"
                ],
                "description": "Partial work on reintegrating man page generation. #1887.\r\n\r\n@AWhetter the work is not finish, but i wanted to have your opinion before finishing it.\r\nI can't reproduce exactly the historical man page because i'm unable to retrieve sections``MASTER``,  ``EXCEPTIONS``, ``LOGGING`` ... Instead most of the options are now under OPTIONAL ARGUMENTS section. Are you ok with this?\r\nMoreover i think there are problems with some options like ``--lists-msgs`` which is now waiting for an argument. \r\nThe CI is failing but i don't suppose it's due to this work.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 619,
                "title": "E1101 for Matplotlib AxesSubplot object",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Michael Aye (BitBucket: [michaelaye](http://bitbucket.org/michaelaye), GitHub: @michaelaye?)**\n\n---\n\nI'm doing the following to post-process an AxesSubplot object from Matplotlib:\n\n```\n#!python\n\n    def plot_raw_overview(self, integration=None, imglog=True,\n                          save_token=None, spatial=None, proflog=True,\n                          img_plot_hist=False, prof_plot_hist=False,\n                          **kwargs):\n        if integration is None:\n            integration = -1\n        \"Plot overview of spectrogram and profile at index `integration`.\"\n        fig, axes = plt.subplots(nrows=2, sharex=False)\n        fig.suptitle(self.plottitle, fontsize=16)\n\n        # spectrogram\n        ax = self.plot_raw_spectrogram(integration, ax=axes[0],\n                                       cbar=False, log=imglog,\n                                       set_extent=False, plot_hist=img_plot_hist,\n                                       **kwargs)\n\n        # colorbar\n        im = ax.get_images()[0]\n\n```\n\nand I'm receiving the following pylint error (using landscape.io):\n\n```\n#!bash\n\n   im = ax.get_images()[0]\nInstance of 'str' has no 'get_images' member\n```\n\nwhich is an E1101 error.\nAs my code runs correct and this is what I intended to do, what can I do to help Pylint not to register `ax` as a type of `str` ?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/619\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2553,
                "title": "E1101: Class 'strerror' has no 'lower' member (no-member)",
                "labels": [
                    "astroid",
                    "topic-inference",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Run `pylint --enable=all test.py` where `test.py` is the file below\r\n```\r\n\"\"\" Simpler code to reproduce error. \"\"\"\r\nimport os\r\nimport errno\r\ndef main():\r\n    \"\"\".\"\"\"\r\n    try:\r\n        raise OSError(errno.ENOENT, os.strerror(errno.ENOENT), 'filename')\r\n    except OSError as exc:\r\n        if exc.strerror is not None:\r\n            print(exc.strerror.lower())\r\n\r\nmain()\r\n```     \r\n\r\n### Current behavior\r\n`pylint` outputs the following for the file above:\r\n```\r\n************* Module test\r\ntest.py:10:18: E1101: Class 'strerror' has no 'lower' member (no-member)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 4.44/10\r\n```\r\n\r\n### Expected behavior\r\nIt should give no errors, because `strerror` is a string object and as such it has `lower()`. I don't know why `pylint` doesn't know that, because `strerror` is a standard member for `OSError` exceptions, I'm just curious. I can disable the check, of course, but the code is not wrong, IMHO.\r\n\r\nSo, the expected output is:\r\n```\r\n------------------------------------------------------------------\r\nYour code has been rated at 4.44/10\r\n```\r\n\r\n### pylint --version output\r\n```\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]\r\n```\r\nHappens in latest stable, too, but I installed the prerelease just in case."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2327,
                "title": "Report unnecessary else after continue and break",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "Similarly as reporting `no-else-return`, it would be nice to also report unnecessary `else` after `continue` and `break`.\r\n\r\n```python\r\ndef something():\r\n    for i in range(10):\r\n        if i < 3:\r\n            continue  # or break\r\n        else:  # Unnecessary else after \"continue\" or \"break\"\r\n            print(i)\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1983,
                "title": "Investigate on what else does mypy a good job other than type checking",
                "labels": [
                    "task"
                ],
                "description": "There might be useful things to borrow from mypy apart of the type checker: https://github.com/python/mypy/issues"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2549,
                "title": "Improve performance of spellchecking checks",
                "labels": [],
                "description": "## Steps\r\n\r\n- [x] Add yourself to CONTRIBUTORS if you are a new contributor.\r\n- [x] Add a ChangeLog entry describing what your PR does.\r\n- [ ] If it's a new feature or an important bug fix, add a What's New entry in `doc/whatsnew/<current release.rst>`.\r\n- [x] Write a good description on what the PR does.\r\n\r\n## Description\r\nThis PR improves the performance of the spellchecking checks by 2x on average. It mainly does the following things:\r\n- Replaces unmaintained `pyenchant` spellchecker with maintained (and faster) `hunspell` python bindings\r\n- Adds a rudimentary english word tokenizer (a modified version of the tokenizer from `pyenchant`)\r\n- Fixes minor bugs with ordering of the tokenizer's filters and chunkers\r\n- Slightly refactors the `unittest_checker_spelling.py` tests to accomodate the new change\r\n- Adds the option of placing tox positional arguments in a tox command (for better testing the spelling module locally and on CI)\r\n- Adds `--spelling-dict-name` and `--spelling-dict-paths` options for users to select dictionary files (breaking change to config)\r\n\r\n## Benchmarks\r\nDatadog APM was used to benchmark the before and after of this PR. The corpus used was the entire `pylint/` source folder under this repo. These are some of the results taken from many samples:\r\n\r\n### Before:\r\n\r\nFlame graph of the function calls made during a run of the largest file in `pylint/`\r\n<img width=\"1915\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110647-6d0a2280-d21f-11e8-9f72-034061bda673.png\">\r\n\r\nFunction call list\r\n<img width=\"1344\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110707-95921c80-d21f-11e8-843e-5efa21a8c1e0.png\">\r\n\r\nPyenchant `suggest(word)` calls\r\n<img width=\"1343\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110726-a6429280-d21f-11e8-8264-b54ef1a7e9e5.png\">\r\n\r\nPyenchant `spellcheck(word)` calls\r\n<img width=\"1343\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110739-acd10a00-d21f-11e8-894c-730801b46d96.png\">\r\n\r\nPyenchant tokenizer `next()` calls\r\n<img width=\"1344\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110770-bb1f2600-d21f-11e8-9f07-5608fc1b07ac.png\">\r\n\r\n### After:\r\n\r\nFlame graph of the function calls made during a run of the largest file in `pylint/`\r\n<img width=\"1915\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110798-c4a88e00-d21f-11e8-9dca-ead5773eadb4.png\">\r\n\r\nFunction call list\r\n<img width=\"1344\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110812-d5590400-d21f-11e8-886d-8d668cc2598d.png\">\r\n\r\nHunspell `suggest(word)` calls\r\n<img width=\"1345\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110821-d9852180-d21f-11e8-8802-9c4b93896412.png\">\r\n\r\nHunspell `spellcheck(word)` calls\r\n<img width=\"1344\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110828-e0ac2f80-d21f-11e8-83a3-d0ddbdcf33f5.png\">\r\n\r\nNew pylint english word tokenizer `next()` calls\r\n<img width=\"1344\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2187906/47110847-eb66c480-d21f-11e8-980e-1cb687b33134.png\">\r\n\r\n## Type of Changes\r\n<!-- Leave the corresponding lines for the applicable type of change: -->\r\n|   | Type |\r\n| ------------- | ------------- |\r\n| \u2713  | :bug: Bug fix  |\r\n|  | :sparkles: New feature |\r\n| \u2713  | :hammer: Refactoring  |\r\n|  | :scroll: Docs |\r\n\r\n## Related Issue\r\n\r\nCloses #2249 "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2326,
                "title": "False positive: too-many-function-args for numpy",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n`test.py`\r\n```\r\nimport numpy as np\r\nx = np.fromfile('hello.npy')\r\nx.reshape((1, 5))\r\n```\r\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape\r\n```\r\npylint test.py\r\ntest.py:3:6: E1121: Too many positional arguments for method call (too-many-function-args)\r\n```\r\n\r\n### Current behavior\r\ntoo-many-function-args\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### pylint --version output\r\npylint 2.0.0\r\nastroid 2.0.1\r\nPython 3.6.5 | packaged by conda-forge | (default, Apr  6 2018, 13:44:09)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1976,
                "title": "Incorrect \"undefined variable\" error for class variables as return type annotations",
                "labels": [
                    "bug"
                ],
                "description": "pylint seems to incorrectly identify an undefined variable error when using a class variable as a *return* type annotation. Argument type annotations appear to be OK.\r\n\r\n### Steps to reproduce\r\n```py\r\n# lintcheck.py\r\nclass MyObject:\r\n    class MyType:\r\n        pass\r\n    def my_method(self) -> MyType:\r\n        pass\r\n```\r\n\r\n### Current behavior\r\n```\r\n$ pylint lintcheck.py -E\r\nNo config file found, using default configuration\r\n************* Module lintcheck\r\nE:  5,27: Undefined variable 'MyType' (undefined-variable)\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo error.\r\n\r\nCuriously, the below doesn't emit any errors, where `MyType` should have identical scope:\r\n\r\n```python\r\n# lintcheck_ok.py\r\nclass MyObject2:\r\n    class MyType:\r\n        pass\r\n    def my_method(self, x: MyType):\r\n        pass\r\n    def my_thing(self, x=MyType):\r\n        pass\r\n```\r\n\r\n### pylint --version output\r\n\r\n```sh\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 3.6.4 (default, Mar 26 2018, 16:21:07) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 617,
                "title": "search pylint configuration in setup.cfg too",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Fabio C. Barrionuevo da Luz (BitBucket: [luzfcb](http://bitbucket.org/luzfcb), GitHub: @luzfcb?)**\n\n---\n\nIt would be great if pylint also seek the settings in a special section in setup.cfg file.\n\nthe same reasons as described by @bittner in \nhttps://bitbucket.org/logilab/pylint/issues/121/search-pylintrc-in-config-directory#comment-13136390\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/617\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2543,
                "title": "False positive for E1136 with PyQt4 overloaded signal",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nthis code\r\n\r\n```python\r\nfrom PyQt4 import QtGui\r\n...\r\naComboBox = QtGui.QComboBox(self)\r\naList = [6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28]\r\nfor i in aList:\r\n    aComboBox.addItem(str(i))\r\n\r\nfontSizeCombo.activated[str].connect(self.slotOnActivated)\r\n```\r\n\r\nwhere brackets indicate the overloaded signal for strings\r\n\r\n### Current behavior\r\nE1136:Value 'aComboBox.activated' is unsubscriptable\r\n\r\nThere are other false positives reported about this E1136, but neither from this syntax\r\n\r\n### Expected behavior\r\nno warning or error.\r\n\r\n### pylint --version output\r\n1.9.3\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2325,
                "title": "W1201(logging-not-lazy) complaint about string format arguments when no string format.",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Download file show_w1201.py\r\n[show_w1201.py.txt](https://github.com/PyCQA/pylint/files/2215052/show_w1201.py.txt)\r\n\r\n2. `pylint show_w1201.py`\r\n\r\n### Current behavior\r\n    $ pylint /tmp/show_w1201.py\r\n    ************* Module show_w1201\r\n    /tmp/show_w1201.py:17: [W1201(logging-not-lazy), mylog] Specify string format arguments as logging function parameters\r\n\r\n    -----------------------------------\r\n    Your code has been rated at 8.57/10\r\n\r\n    shell returned 4\r\n\r\n\r\n### Expected behavior\r\nComplaint is technically wrong, none of these arguments contain string format operations.\r\n\r\n### pylint --version output\r\n\r\n    $ pylint --version\r\n      __main__.py 2.0.0\r\n      astroid 2.0.1\r\n      Python 3.6.6 (default, Jun 27 2018, 14:44:17)\r\n      [GCC 8.1.0]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1964,
                "title": "Pylint silently ignores errors for enabling and disabling messages",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\npylint --disable=ALL somefile.py\r\n\r\n### Current behavior\r\nThe above code will not disable all messages, because `ALL` doesn't do anything. The correct parameter would be `--disable=all`. There is no error and pylint continues to run.\r\n\r\n### Expected behavior\r\nPylint should throw an error when given an unknown message to disable or enable.\r\n\r\nAnother more insidious example is something like below in `pylintrc`:\r\n\r\n```\r\ndisable=all\r\nenable=useless-supression,\r\n       unused-import\r\n       no-member\r\n```\r\n\r\nThe above will silently fail to enable both `unused-import` and `no-member` because there is no comma separating them."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2545,
                "title": "Slow linting on edx/edx-platform",
                "labels": [
                    "topic-performance"
                ],
                "description": "@PCManticore asked me to report a slow linting run to help you with testing performance work.  [edx/edx-platform](https://github.com/edx/edx-platform), a major open source MOOC, is a large codebase that takes a long time to complete a pylint run.  Hundreds of developers work on this codebase every day, so speeding up linting times would be a big win.\r\n\r\n### Steps to reproduce\r\n\r\n1.  `git clone https://github.com/edx/edx-platform`\r\n2.  `cd edx-platform`\r\n3.  `pip install -r requirements/test.txt`\r\n4.  `time pylint lms`\r\n\r\n    `lms` is about 50% of the entire codebase, but should be a sufficiently meaty example.\r\n\r\n### Current behavior\r\n\r\nRun completes in > 10 minutes.\r\n\r\n### Expected behavior\r\n\r\nRun completes in < 30 seconds. :crossed_fingers:  :grimacing: \r\n\r\n### pylint --version output\r\n\r\n```sh\r\n(edx-platform) cliff@conakry:~/edx-platform$ pip freeze|grep lint\r\nedx-lint==0.5.5\r\npylint==1.7.1\r\npylint-celery==0.3\r\npylint-django==0.7.2\r\npylint-plugin-utils==0.3\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2321,
                "title": "Fixme should trigger only on comments",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run pylint on a file containing this line\r\n```python\r\nprint(\"# TODO this should not trigger a fixme\")\r\n```\r\n\r\n### Current behavior\r\n\r\ntodo_issues.py:1:0: W0511: TODO this should not trigger a fixme\") (fixme)\r\n\r\n### Expected behavior\r\n\r\n(no messages)\r\n\r\nSo pylint should be looking only into what are actual comments, not into everything that follows a `#`.\r\n\r\n### pylint --version output\r\n\r\npylint 2.0.0\r\nastroid 2.0.0.dev4\r\nPython 3.7.0 (default, Jun 29 2018, 21:39:54) \r\n[GCC 7.2.0]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1954,
                "title": "Performance Benchmarks / Integration tests",
                "labels": [
                    "enhancement"
                ],
                "description": "Pylint needs a collection of performance integration tests (see PyCQA/astroid#519) help further optimization efforts. \r\n\r\nThey don't need to be run as part of the standard CI or with just calling `pytest` since they will be slow, but we should have them to make sure optimizations efforts aren't over optimizing specific projects and so we know which pull requests will slow down astroid/pylint.\r\n\r\nI'm thinking that we should pick a specific tag of a specific project, and then set up `pytest-benchmark` to `setup` by downloading/extracting the correct zip and running pylint against those files on a developer's machine, and timing how long it takes for pylint to execute and if pylint raises any internal errors.\r\n\r\nThese tests additionally might be used to look for consistency in output and changes in pylint output messages."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 600,
                "title": "Detecting circular references in packages",
                "labels": [
                    "proposal"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nAssume code has packages A and B.  A.a1 imports B.b1, and B.b2 imports A.a2.  While this may work, imho this is a bad smell in design that would be good to be detected early (especially when instead of A and B there is something like A->B->C->D->A).\n\nHaving that option would make easier to be compliant with the Acyclic Dependencies Principle\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/600\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2315,
                "title": "E0203(access-member-before-definition) wrongly detected in some cases",
                "labels": [
                    "bug"
                ],
                "description": "With a combination of Python 3.6 and f-strings pylint shows non-existing errors:\r\n\r\n### Steps to reproduce\r\n1. Use Python 3.6 and write a class that defines a new dict in `__init__()` and then try to access an element of that dict inside an f-string, e.g.:\r\n\r\n```\r\nclass TestClass(object):\r\n    def __init__(self):\r\n        self.foo = {\"foo\": \"bar\"}\r\n        print(f\"this foo is a {self.foo['foo']}\")\r\n```\r\n\r\n\r\n### Current behavior\r\nPylint shows an error:\r\n```\r\n$ python3.6 -m pylint -E test_class.py \r\n************* Module git.test_class\r\ntest_class.py:1:1: E0203: Access to member 'foo' before its definition line 3 (access-member-before-definition)\r\n```\r\n\r\n### Expected behavior\r\nNo error shown\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.0.0\r\nastroid 2.0.0.dev4\r\nPython 3.6.6 (default, Jun 28 2018, 04:42:43) \r\n[GCC 5.4.0 20160609]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2544,
                "title": "What areas of the docs could use some love?",
                "labels": [
                    "question"
                ],
                "description": "## Question\r\n\r\nSince I'm participating in Hacktoberfest I'm looking for easy-ish PR's to open on public projects.  I've also been using Pylint for some time so would love to \"give back\" to the project.  Wondering if there are particular areas of the docs that could be improved or focussed on?  What would be the best thing to add to the docs?  Tutorials?  Technical reference stuff?  Integration/use of Pylint with other tools?\r\n\r\nWould appreciate any guidance on what would be most desirable/useful to add/enhance in the existing docs."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1953,
                "title": "unused-argument warning on nested function with non-local declaration",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Create a function like the following:\r\n```\r\ndef test(argument=0):\r\n    def _test():\r\n        nonlocal argument\r\n        argument += 1\r\n        return argument\r\n    return _test()\r\n```\r\n2. Run pylint on this file with the `unused-argument` enabled\r\n\r\n### Current behavior\r\nIt errors `Unused argument 'argument' (unused-argument)`.\r\n\r\n### Expected behavior\r\nIt should not give the `Unused argument 'argument' (unused-argument)` error\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 3.5.2 (default, Nov 23 2017, 16:37:01) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2309,
                "title": "Better messaging for useless-import-alias and from imports",
                "labels": [
                    "enhancement"
                ],
                "description": "I have a file in which I define an import of the format:\r\n\r\n    import django.db.models as models\r\n\r\nWhich when run through pylint triggers the \"useless-import-alias\" warning.  However, models != django.db.models so I don't believe this should be triggering the warning."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2537,
                "title": "PyLint Comments Work With Other Linter Comments",
                "labels": [],
                "description": "## Steps\r\n\r\n- [X] Add yourself to CONTRIBUTORS if you are a new contributor.\r\n- [X] Add a ChangeLog entry describing what your PR does.\r\n- [ ] If it's a new feature or an important bug fix, add a What's New entry in `doc/whatsnew/<current release.rst>`.\r\n- [X] Write a good description on what the PR does.\r\n\r\n## Description\r\n\r\nThis is the solution for [#2297](https://github.com/PyCQA/pylint/issues/2297), [#2470](https://github.com/PyCQA/pylint/issues/2470), and [#2485](https://github.com/PyCQA/pylint/issues/2485). The code previously would split the the comments into a list and grab the first item without checking that it is grabbing the PyLint comment.\r\n\r\n## Type of Changes\r\n\r\n|   | Type |\r\n| ------------- | ------------- |\r\n| \u2713  | :bug: Bug fix  |\r\n\r\n## Related Issue\r\n\r\n- Closes #2297 \r\n- Closes #2470 \r\n- Closes #2485 "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1943,
                "title": "Wrong hanging indentation with context managers",
                "labels": [
                    "bug"
                ],
                "description": "###` Steps to reproduce\r\n1. Write an example code:\r\n```\r\nwith context(\r\n        f('adwa')):\r\n    print('adwad')\r\n```\r\n2. run pylint on this code\r\n\r\n### Current behavior\r\nPylint throws:\r\n```\r\nC:  2, 0: Wrong hanging indentation (remove 4 spaces).\r\n        f('adwa')):\r\n    |   ^ (bad-continuation)\r\n```\r\n### Expected behavior\r\nThere should not by any error. \r\nIn the example pylint conflicts with tools like pep8 or pycodestyle (for those this behaviour is expected).\r\nsource: https://www.python.org/dev/peps/pep-0008/#indentation\r\n### pylint --version output\r\nNo config file found, using default configuration\r\n```\r\npylint 1.8.1,\r\nastroid 1.6.1\r\nPython 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 585,
                "title": "[easy] __class__ must be set to a class",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\n```\n#!python\n\nclass A: pass\nA.__class__ = 1\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/585\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2306,
                "title": "issue with enum.Enum.value (@DynamicClassAttribue vs @property)",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n```python\r\nfrom enum import Enum\r\n\r\nclass Color(Enum):\r\n    red = 1\r\n    green = 2\r\n    blue = 3\r\n\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\n```\r\n\r\n```\r\n$ pylint -d C testcase_enum.py\r\n************* Module testcase_enum\r\ntestcase_enum.py:9:15: W0143: Comparing against a callable, did you omit the parenthesis? (comparison-with-callable)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 8.57/10 (previous run: 8.57/10, +0.00)\r\n```\r\n\r\nIn python 3.4.2 (debian jessie's python), `value` is defined like so:\r\n\r\n```python\r\n    @DynamicClassAttribute\r\n    def value(self):\r\n        \"\"\"The value of the Enum member.\"\"\"\r\n        return self._value_\r\n```\r\n\r\n`@DynamicClassAttribue` is supposed to be like `@property` but not quite, according to the docstring. I didn't get too much into it.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.0.0\r\nastroid 2.0.0.dev4\r\nPython 3.4.2 (default, Oct  8 2014, 10:45:20) \r\n[GCC 4.9.1]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2541,
                "title": "ignore-patterns does not skip non-top-level directories.",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1.  create a a/b/c.py (where c.py will generate a pylint message, so that we get output) (along with the appropriate \\_\\_init\\_\\_.py files)\r\n2.  Run pylint: pylint --ignore-patterns=b\r\n3.  Run pylint: pylint --ignore-patterns=a\r\n\r\n### Current behavior\r\nc.py is skipped for ignore-patterns=a, but not for ignore-patterns=b\r\n\r\n### Expected behavior\r\nc.py should be skipped for both\r\n\r\n### pylint --version output\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1934,
                "title": "cell-var-from-loop spurious warning",
                "labels": [
                    "bug"
                ],
                "description": "I think this is a spurious warning. In the below, `s` is not defined in any loop.\r\n\r\n### Steps to reproduce\r\n    $ cat > bug.py\r\n    # pylint: disable=invalid-name,missing-docstring\r\n    \r\n    for z in [0]:\r\n        s = set()\r\n        def f():\r\n            for x in [0]:\r\n                s.add(x)\r\n        f()\r\n    <EOF>\r\n\r\n    \r\n    $ pylint bug.py \r\n    No config file found, using default configuration\r\n    ************* Module bug\r\n    W:  7,12: Cell variable s defined in loop (cell-var-from-loop)\r\n\r\n### Current behavior\r\nTriggers cell-var-from-loop\r\n\r\n### Expected behavior\r\nNo warning\r\n\r\n### pylint --version output\r\n    $ pylint --version\r\n    No config file found, using default configuration\r\n    pylint 1.8.2, \r\n    astroid 1.6.1\r\n    Python 2.7.14 (default, Sep 16 2017, 17:49:51) \r\n    [GCC 7.3.0]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2540,
                "title": "Support typing.ForwardRef declarations",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n### Current behavior\r\n\r\nWith this code\r\n```py\r\nfrom typing import ForwardRef\r\n\r\nFoo = ForwardRef('Foo')\r\n\r\nclass Foo:\r\n    pass\r\n```\r\n\r\nI get \r\n```\r\nfoo.py:5:0: E0102: class already defined line 3 (function-redefined)\r\n```\r\n\r\n\r\n### Expected behavior\r\nI would expect pylint to support this construction\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ python3 -m pylint --version\r\n__main__.py 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jul 23 2018, 20:22:55)\r\n[Clang 9.1.0 (clang-902.0.39.2)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2304,
                "title": "bad-continuation false alarm and failure to disable",
                "labels": [
                    "bug"
                ],
                "description": "\r\n### Steps to reproduce\r\n1.\r\nI have this code piece:\r\n\r\n```\r\n        emit(\r\n            \"\"\"\\\r\nSET_CURRENT_EXCEPTION( exception_preserved_type_%(preserver_id)d, \\\r\nexception_preserved_value_%(preserver_id)d, \\\r\nexception_preserved_tb_%(preserver_id)d );\"\"\" % {\r\n                \"preserver_id\" : preserver_id,\r\n            }\r\n        )\r\n```\r\n\r\nI think it wants the hanging \"}\" brace to align one level shorter, which is false.\r\n\r\n2.\r\n\r\nWith that false alarm in place, --disable=bad-continuation on the command line has no effect. I cannot disable the warning until the bug is fixed.\r\n\r\n3.\r\n\r\n### Current behavior\r\n\r\nReports:\r\n\r\n> nuitka\\codegen\\FrameCodes.py:446 C0330 bad-continuation  Wrong hanging indentation.\r\n>             }\r\n> |   |       ^\r\n\r\n\r\n### Expected behavior\r\n\r\nNo report, and allow --disable on that error.\r\n\r\n### pylint --version output\r\n\r\nc/Python36_32/python -m pylint --version\r\n__main__.py 2.0.0\r\nastroid 2.0.0.dev4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1932,
                "title": "pylint has issues with IntEnum.name type detection",
                "labels": [
                    "bug"
                ],
                "description": "```py\r\n# test.py\r\nfrom enum import IntEnum\r\n\r\n\r\nclass MyEnum(IntEnum):\r\n    FOO = 1\r\n\r\n    def whats_my_name(self):\r\n        return self.name.lower()\r\n\r\n\r\nprint(MyEnum.FOO.whats_my_name())\r\n```\r\n\r\n\r\n### Steps to reproduce\r\n1.  `pylint -dC test.py` with the file above\r\n\r\nOutput:\r\n```\r\nE:  8,15: Method 'name' has no 'lower' member (no-member)\r\n```\r\n\r\n\r\n### pylint --version output\r\npylint 1.8.2, \r\nastroid 1.6.1\r\nPython 3.6.4 (default, Jan  5 2018, 02:35:40) \r\n[GCC 7.2.1 20171224]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2535,
                "title": "Test failure with 1.9.2",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run:\r\n```\r\npytest pylint/test\r\n```\r\n\r\n### Current behavior\r\n\r\nThis log is printed:\r\n```\r\n============================= test session starts ==============================\r\nplatform linux2 -- Python 2.7.15, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\r\nrootdir: /build/pylint-1.9.2, inifile:\r\ncollected 563 items / 4 deselected\r\n\r\npylint/test/test_func.py ............................................... [  8%]\r\n..............                                                           [ 10%]\r\npylint/test/test_import_graph.py ..                                      [ 11%]\r\npylint/test/test_regr.py ...................                             [ 14%]\r\npylint/test/test_self.py ................................                [ 20%]\r\npylint/test/acceptance/test_stdlib.py .................................. [ 26%]\r\n........................................................................ [ 39%]\r\n........................................................................ [ 52%]\r\n.....................................F............                       [ 61%]\r\npylint/test/extensions/test_bad_builtin.py .                             [ 61%]\r\npylint/test/extensions/test_check_docs.py .............................. [ 66%]\r\ns....................................................................    [ 79%]\r\npylint/test/extensions/test_check_docs_utils.py ..............           [ 81%]\r\npylint/test/extensions/test_check_mccabe.py ..                           [ 81%]\r\npylint/test/extensions/test_check_raise_docs.py ........................ [ 86%]\r\n....                                                                     [ 86%]\r\npylint/test/extensions/test_check_return_docs.py ....................... [ 91%]\r\n...............                                                          [ 93%]\r\npylint/test/extensions/test_check_yields_docs.py ....................... [ 97%]\r\n...                                                                      [ 98%]\r\npylint/test/extensions/test_comparetozero.py .                           [ 98%]\r\npylint/test/extensions/test_docstyle.py .                                [ 98%]\r\npylint/test/extensions/test_elseif_used.py .                             [ 98%]\r\npylint/test/extensions/test_emptystring.py .                             [ 99%]\r\npylint/test/extensions/test_overlapping_exceptions.py .s                 [ 99%]\r\npylint/test/extensions/test_redefined.py .                               [ 99%]\r\npylint/test/functional/using_constant_test.py ..                         [100%]\r\n\r\n=================================== FAILURES ===================================\r\n____________________________ test_libmodule[bsddb] _____________________________\r\n\r\ntest_module_location = '/nix/store/6b6lzbq74g95j8qlbrdjzkn2ghh81mgy-python-2.7.15/lib/python2.7'\r\ntest_module_name = 'bsddb'\r\n\r\n    @pytest.mark.acceptance\r\n    @pytest.mark.parametrize((\"test_module_location\", \"test_module_name\"),\r\n                             MODULES_TO_CHECK, ids=MODULES_NAMES)\r\n    def test_libmodule(test_module_location, test_module_name):\r\n        os.chdir(test_module_location)\r\n        with _patch_stdout(six.StringIO()):\r\n            try:\r\n>               pylint.lint.Run([test_module_name, '--enable=all'])\r\n\r\n/build/pylint-1.9.2/pylint/test/acceptance/test_stdlib.py:47:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/lint.py:1347: in __init__\r\n    linter.check(args)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/lint.py:768: in check\r\n    self._do_check(files_or_modules)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/lint.py:901: in _do_check\r\n    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/lint.py:980: in check_astroid_module\r\n    walker.walk(ast_node)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/utils.py:1014: in walk\r\n    self.walk(child)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/utils.py:1014: in walk\r\n    self.walk(child)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/utils.py:1014: in walk\r\n    self.walk(child)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/utils.py:1014: in walk\r\n    self.walk(child)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/utils.py:1011: in walk\r\n    cb(astroid)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/checkers/exceptions.py:387: in visit_tryexcept\r\n    self._check_catching_non_exception(handler, exc, part)\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/checkers/exceptions.py:346: in _check_catching_non_exception\r\n    if (not utils.inherit_from_std_ex(exc) and\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/checkers/utils.py:475: in inherit_from_std_ex\r\n    for parent in node.ancestors(recurs=True))\r\n../../../al1jniskybdlayxm9rb730awyk49b3wi-python2.7-pylint-1.9.2/lib/python2.7/site-packages/pylint/checkers/utils.py:474: in <genexpr>\r\n    return any(inherit_from_std_ex(parent)\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/scoped_nodes.py:2046: in ancestors\r\n    for baseobj in stmt.infer(context):\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/context.py:71: in cache_generator\r\n    for result in generator:\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/decorators.py:86: in wrapped\r\n    generator = _func(node, context, **kwargs)\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/inference.py:138: in infer_name\r\n    frame, stmts = self.lookup(self.name)\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/node_classes.py:989: in lookup\r\n    return self.scope().scope_lookup(self, name)\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/scoped_nodes.py:2012: in scope_lookup\r\n    return frame._scope_lookup(node, name, offset)\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/scoped_nodes.py:160: in _scope_lookup\r\n    stmts = node._filter_stmts(self.locals[name], self, offset)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <Name.DBError l.0 at 0x7fffd9937350>\r\nstmts = [<EmptyNode.DBError l.0 at 0x7fffd9913f90>]\r\nframe = <Module._bsddb l.0 at 0x7fffd98c5e50>, offset = -1\r\n\r\n    def _filter_stmts(self, stmts, frame, offset):\r\n        \"\"\"Filter the given list of statements to remove ignorable statements.\r\n\r\n            If self is not a frame itself and the name is found in the inner\r\n            frame locals, statements will be filtered to remove ignorable\r\n            statements according to self's location.\r\n\r\n            :param stmts: The statements to filter.\r\n            :type stmts: list(NodeNG)\r\n\r\n            :param frame: The frame that all of the given statements belong to.\r\n            :type frame: NodeNG\r\n\r\n            :param offset: The line offset to filter statements up to.\r\n            :type offset: int\r\n\r\n            :returns: The filtered statements.\r\n            :rtype: list(NodeNG)\r\n            \"\"\"\r\n        # if offset == -1, my actual frame is not the inner frame but its parent\r\n        #\r\n        # class A(B): pass\r\n        #\r\n        # we need this to resolve B correctly\r\n        if offset == -1:\r\n            myframe = self.frame().parent.frame()\r\n        else:\r\n            myframe = self.frame()\r\n            # If the frame of this node is the same as the statement\r\n            # of this node, then the node is part of a class or\r\n            # a function definition and the frame of this node should be the\r\n            # the upper frame, not the frame of the definition.\r\n            # For more information why this is important,\r\n            # see Pylint issue #295.\r\n            # For example, for 'b', the statement is the same\r\n            # as the frame / scope:\r\n            #\r\n            # def test(b=1):\r\n            #     ...\r\n\r\n            if self.statement() is myframe and myframe.parent:\r\n                myframe = myframe.parent.frame()\r\n        mystmt = self.statement()\r\n        # line filtering if we are in the same frame\r\n        #\r\n        # take care node may be missing lineno information (this is the case for\r\n        # nodes inserted for living objects)\r\n        if myframe is frame and mystmt.fromlineno is not None:\r\n            assert mystmt.fromlineno is not None, mystmt\r\n            mylineno = mystmt.fromlineno + offset\r\n        else:\r\n            # disabling lineno filtering\r\n            mylineno = 0\r\n        _stmts = []\r\n        _stmt_parents = []\r\n        for node in stmts:\r\n            stmt = node.statement()\r\n            # line filtering is on and we have reached our location, break\r\n            if mylineno > 0 and stmt.fromlineno > mylineno:\r\n                break\r\n            assert hasattr(node, 'assign_type'), (node, node.scope(),\r\n>                                                 node.scope().locals)\r\nE           AssertionError: (<EmptyNode.DBError l.0 at 0x7fffd9913f90>, <Module._bsddb l.0 at 0x7fffd98c5e50>, {'DB_KEYEMPTY': [<Const.DB_KEYEMPTY l.0 at 0x7fffd9838e50>], 'DB_REPMGR_ACKS_ALL': [<Const.DB_REPMGR_ACKS_ALL l.0 at 0x7fffd98859d0>], 'DB_CREATE': [<Const.DB_CREATE l.0 at 0x7fffd982ed90>], 'DB_EVENT_REP_INIT_DONE': [<Const.DB_EVENT_REP_INIT_DONE l.0 at 0x7fffd9838390>], 'DB_REP_REREQUEST': [<Const.DB_REP_REREQUEST l.0 at 0x7fffd988c450>], 'api': [<EmptyNode.api l.0 at 0x7fffd9895710>], 'DB_EVENT_REP_DUPMASTER': [<Const.DB_EVENT_REP_DUPMASTER l.0 at 0x7fffd98382d0>], 'DB_REP_ACK_TIMEOUT': [<Const.DB_REP_ACK_TIMEOUT l.0 at 0x7fffd9885cd0>], 'DB_VERB_REP_ELECT': [<Const.DB_VERB_REP_ELECT l.0 at 0x7fffd98950d0>], 'DB_EXTENT': [<Const.DB_EXTENT l.0 at 0x7fffd9838650>], 'DBKeyExistError': [<EmptyNode.DBKeyExistError l.0 at 0x7fffd9913f10>], 'DB_USE_ENVIRON': [<Const.DB_USE_ENVIRON l.0 at 0x7fffd988ce10>], 'DB_POSITION': [<Const.DB_POSITION l.0 at 0x7fffd9885350>], 'DB_REP_HEARTBEAT_SEND': [<Const.DB_REP_HEARTBEAT_SEND l.0 at 0x7fffd988c150>], 'DB_VERB_REPLICATION': [<Const.DB_VERB_REPLICATION l.0 at 0x7fffd988cfd0>], 'DB_PRIORITY_VERY_LOW': [<Const.DB_PRIORITY_VERY_LOW l.0 at 0x7fffd98855d0>], 'DB_STAT_ALL': [<Const.DB_STAT_ALL l.0 at 0x7fffd988c850>], 'DBRepUnavailError': [<EmptyNode.DBRepUnavailError l.0 at 0x7fffd982e750>], 'DB_STAT_SUBSYSTEM': [<Const.DB_STAT_SUBSYSTEM l.0 at 0x7fffd988ca10>], 'DB_KEYEXIST': [<Const.DB_KEYEXIST l.0 at 0x7fffd9838e90>], 'DB_PRIORITY_DEFAULT': [<Const.DB_PRIORITY_DEFAULT l.0 at 0x7fffd9885490>], 'DB_LOCK_RECORD': [<Const.DB_LOCK_RECORD l.0 at 0x7fffd987e6d0>], 'DB_ODDFILESIZE': [<Const.DB_ODDFILESIZE l.0 at 0x7fffd9885150>], 'DB_SET_TXN_TIMEOUT': [<Const.DB_SET_TXN_TIMEOUT l.0 at 0x7fffd988c7d0>], 'DB_LOCK_MINWRITE': [<Const.DB_LOCK_MINWRITE l.0 at 0x7fffd987e3d0>], 'DB_DIRTY_READ': [<Const.DB_DIRTY_READ l.0 at 0x7fffd982ee90>], 'DB_REP_HEARTBEAT_MONITOR': [<Const.DB_REP_HEARTBEAT_MONITOR l.0 at 0x7fffd988c110>], 'DB_LOG_AUTO_REMOVE': [<Const.DB_LOG_AUTO_REMOVE l.0 at 0x7fffd987e8d0>], 'DB_KEYLAST': [<Const.DB_KEYLAST l.0 at 0x7fffd9838f10>], 'DB_NOSERVER': [<Const.DB_NOSERVER l.0 at 0x7fffd9885090>], 'DB_RECNUM': [<Const.DB_RECNUM l.0 at 0x7fffd9885850>], 'DB_LOCK_PUT': [<Const.DB_LOCK_PUT l.0 at 0x7fffd987e550>], 'DB_TIME_NOTGRANTED': [<Const.DB_TIME_NOTGRANTED l.0 at 0x7fffd988cb10>], 'DB_EVENT_REP_SITE_REMOVED': [<Const.DB_EVENT_REP_SITE_REMOVED l.0 at 0x7fffd9838550>], 'DB_LOCK_WAIT': [<Const.DB_LOCK_WAIT l.0 at 0x7fffd987e7d0>], 'DB_REPMGR_ACKS_NONE': [<Const.DB_REPMGR_ACKS_NONE l.0 at 0x7fffd9885a90>], 'DB_EVENT_REP_ELECTION_FAILED': [<Const.DB_EVENT_REP_ELECTION_FAILED l.0 at 0x7fffd9838350>], 'DBAccessError': [<EmptyNode.DBAccessError l.0 at 0x7fffd98a0050>], 'DB_NOOVERWRITE': [<Const.DB_NOOVERWRITE l.0 at 0x7fffd987efd0>], 'DB_LOG_DIRECT': [<Const.DB_LOG_DIRECT l.0 at 0x7fffd987e910>], 'DB_NOTFOUND': [<Const.DB_NOTFOUND l.0 at 0x7fffd9885110>], 'DB_RECOVER_FATAL': [<Const.DB_RECOVER_FATAL l.0 at 0x7fffd98858d0>], 'DB_GET_BOTH_RANGE': [<Const.DB_GET_BOTH_RANGE l.0 at 0x7fffd98389d0>], 'DB_TXN_BULK': [<Const.DB_TXN_BULK l.0 at 0x7fffd988cb90>], 'DB_IGNORE_LEASE': [<Const.DB_IGNORE_LEASE l.0 at 0x7fffd9838b50>], 'DB_FOREIGN_ABORT': [<Const.DB_FOREIGN_ABORT l.0 at 0x7fffd9838850>], 'DB_PRIORITY_UNCHANGED': [<Const.DB_PRIORITY_UNCHANGED l.0 at 0x7fffd9885550>], 'DB_LOCK_IWRITE': [<Const.DB_LOCK_IWRITE l.0 at 0x7fffd987e2d0>], 'DB_EVENT_REP_PERM_FAILED': [<Const.DB_EVENT_REP_PERM_FAILED l.0 at 0x7fffd98384d0>], 'DB_LSTAT_WAITING': [<Const.DB_LSTAT_WAITING l.0 at 0x7fffd987eb10>], 'DB_DONOTINDEX': [<Const.DB_DONOTINDEX l.0 at 0x7fffd982eed0>], 'DB_TXN_NOSYNC': [<Const.DB_TXN_NOSYNC l.0 at 0x7fffd988cbd0>], 'DBRepLeaseExpiredError': [<EmptyNode.DBRepLeaseExpiredError l.0 at 0x7fffd982e6d0>], 'cvsid': [<Const.cvsid l.0 at 0x7fffd9895750>], 'ENOMEM': [<Const.ENOMEM l.0 at 0x7fffd9895610>], 'DB_STAT_LOCK_LOCKERS': [<Const.DB_STAT_LOCK_LOCKERS l.0 at 0x7fffd988c910>], 'DB_EVENT_REP_CONNECT_ESTD': [<Const.DB_EVENT_REP_CONNECT_ESTD l.0 at 0x7fffd9838250>], 'DB_LOCK_NOWAIT': [<Const.DB_LOCK_NOWAIT l.0 at 0x7fffd987e4d0>], 'DB_REPMGR_ACKS_ONE': [<Const.DB_REPMGR_ACKS_ONE l.0 at 0x7fffd9885ad0>], 'DB_FOREIGN_NULLIFY': [<Const.DB_FOREIGN_NULLIFY l.0 at 0x7fffd98388d0>], 'DB_CURSOR_BULK': [<Const.DB_CURSOR_BULK l.0 at 0x7fffd982ee10>], 'EEXIST': [<Const.EEXIST l.0 at 0x7fffd9895550>], 'DB_YIELDCPU': [<Const.DB_YIELDCPU l.0 at 0x7fffd9895450>], 'DB_NEXT_NODUP': [<Const.DB_NEXT_NODUP l.0 at 0x7fffd987ee90>], 'DB_OVERWRITE': [<Const.DB_OVERWRITE l.0 at 0x7fffd9885250>], 'DB_PANIC_ENVIRONMENT': [<Const.DB_PANIC_ENVIRONMENT l.0 at 0x7fffd9885310>], 'DB_DUP': [<Const.DB_DUP l.0 at 0x7fffd982ef50>], 'DB_VERIFY': [<Const.DB_VERIFY l.0 at 0x7fffd9895290>], 'DB_MAX_PAGES': [<Const.DB_MAX_PAGES l.0 at 0x7fffd987eb50>], 'DBBusyError': [<EmptyNode.DBBusyError l.0 at 0x7fffd98a00d0>], 'DB_SET_RANGE': [<Const.DB_SET_RANGE l.0 at 0x7fffd988c710>], 'DB_EVENT_REG_ALIVE': [<Const.DB_EVENT_REG_ALIVE l.0 at 0x7fffd9838150>], 'DB_PRIORITY_VERY_HIGH': [<Const.DB_PRIORITY_VERY_HIGH l.0 at 0x7fffd9885590>], 'DB_REPMGR_ACKS_QUORUM': [<Const.DB_REPMGR_ACKS_QUORUM l.0 at 0x7fffd9885b50>], 'DB_PREV_DUP': [<Const.DB_PREV_DUP l.0 at 0x7fffd98853d0>], 'DBInvalidArgError': [<EmptyNode.DBInvalidArgError l.0 at 0x7fffd9913e50>], 'DB_LOCK_NG': [<Const.DB_LOCK_NG l.0 at 0x7fffd987e410>], 'DB_JOINENV': [<Const.DB_JOINENV l.0 at 0x7fffd9838d90>], 'DB_FREE_SPACE': [<Const.DB_FREE_SPACE l.0 at 0x7fffd9838950>], 'DB_REPMGR_ACKS_ALL_PEERS': [<Const.DB_REPMGR_ACKS_ALL_PEERS l.0 at 0x7fffd9885a50>], 'DB_REP_JOIN_FAILURE': [<Const.DB_REP_JOIN_FAILURE l.0 at 0x7fffd988c250>], 'DB_EVENT_REP_ELECTED': [<Const.DB_EVENT_REP_ELECTED l.0 at 0x7fffd9838310>], 'DB_PR_RECOVERYTEST': [<Const.DB_PR_RECOVERYTEST l.0 at 0x7fffd9885690>], 'DB_TXN_SYNC': [<Const.DB_TXN_SYNC l.0 at 0x7fffd988ccd0>], 'EBUSY': [<Const.EBUSY l.0 at 0x7fffd9895510>], 'DB_LOCK_OLDEST': [<Const.DB_LOCK_OLDEST l.0 at 0x7fffd987e510>], 'DB_GID_SIZE': [<Const.DB_GID_SIZE l.0 at 0x7fffd9838a50>], 'DBPermissionsError': [<EmptyNode.DBPermissionsError l.0 at 0x7fffd982e650>], 'DB_NEXT': [<Const.DB_NEXT l.0 at 0x7fffd987ee10>], 'DB_LOCK_WWRITE': [<Const.DB_LOCK_WWRITE l.0 at 0x7fffd987e850>], 'DB_LOCK_MAXWRITE': [<Const.DB_LOCK_MAXWRITE l.0 at 0x7fffd987e350>], 'DBVerifyBadError': [<EmptyNode.DBVerifyBadError l.0 at 0x7fffd982e910>], 'DB_VERB_REP_SYNC': [<Const.DB_VERB_REP_SYNC l.0 at 0x7fffd98951d0>], 'version': [<FunctionDef.version l.None at 0x7fffd9895890>], 'EPERM': [<Const.EPERM l.0 at 0x7fffd9895690>], 'DB_VERSION_MINOR': [<Const.DB_VERSION_MINOR l.0 at 0x7fffd9895350>], 'DB_DSYNC_DB': [<Const.DB_DSYNC_DB l.0 at 0x7fffd982ef10>], 'DB_LOG_ZERO': [<Const.DB_LOG_ZERO l.0 at 0x7fffd987e9d0>], 'DBSecondaryBadError': [<EmptyNode.DBSecondaryBadError l.0 at 0x7fffd982e7d0>], 'DB_LOCK_PUT_ALL': [<Const.DB_LOCK_PUT_ALL l.0 at 0x7fffd987e590>], 'DB_VERSION_PATCH': [<Const.DB_VERSION_PATCH l.0 at 0x7fffd9895390>], 'DB_FIRST': [<Const.DB_FIRST l.0 at 0x7fffd9838750>], 'DB_JOIN_ITEM': [<Const.DB_JOIN_ITEM l.0 at 0x7fffd9838dd0>], 'DB_REP_FULL_ELECTION_TIMEOUT': [<Const.DB_REP_FULL_ELECTION_TIMEOUT l.0 at 0x7fffd988c0d0>], 'DB_AFTER': [<Const.DB_AFTER l.0 at 0x7fffd982e990>], 'EAGAIN': [<Const.EAGAIN l.0 at 0x7fffd98954d0>], 'DB_LOCK_READ_UNCOMMITTED': [<Const.DB_LOCK_READ_UNCOMMITTED l.0 at 0x7fffd987e690>], 'DBEnv': [<FunctionDef.DBEnv l.None at 0x7fffd9913dd0>], 'DB_RMW': [<Const.DB_RMW l.0 at 0x7fffd988c4d0>], 'DB_FREELIST_ONLY': [<Const.DB_FREELIST_ONLY l.0 at 0x7fffd9838910>], 'DB_STAT_LOCK_PARAMS': [<Const.DB_STAT_LOCK_PARAMS l.0 at 0x7fffd988c990>], 'DB_REP_PERMANENT': [<Const.DB_REP_PERMANENT l.0 at 0x7fffd988c410>], 'DB_LOCK_DEADLOCK': [<Const.DB_LOCK_DEADLOCK l.0 at 0x7fffd987e0d0>], 'DB_EVENT_REP_NEWMASTER': [<Const.DB_EVENT_REP_NEWMASTER l.0 at 0x7fffd9838490>], 'DB_REP_ELECTION_RETRY': [<Const.DB_REP_ELECTION_RETRY l.0 at 0x7fffd988c050>], 'DB_SNAPSHOT': [<Const.DB_SNAPSHOT l.0 at 0x7fffd988c810>], 'DB_RENUMBER': [<Const.DB_RENUMBER l.0 at 0x7fffd9885990>], 'DB_NEXT_DUP': [<Const.DB_NEXT_DUP l.0 at 0x7fffd987ee50>], 'DB_RECOVER': [<Const.DB_RECOVER l.0 at 0x7fffd9885890>], 'DB_REP_LEASE_TIMEOUT': [<Const.DB_REP_LEASE_TIMEOUT l.0 at 0x7fffd988c2d0>], 'DBFileExistsError': [<EmptyNode.DBFileExistsError l.0 at 0x7fffd99136d0>], 'DB_LOCK_IWR': [<Const.DB_LOCK_IWR l.0 at 0x7fffd987e290>], 'DB_LEGACY': [<Const.DB_LEGACY l.0 at 0x7fffd9838f90>], 'DB_REP_IGNORE': [<Const.DB_REP_IGNORE l.0 at 0x7fffd988c1d0>], 'DB_EID_INVALID': [<Const.DB_EID_INVALID l.0 at 0x7fffd9838050>], 'DB_VERB_FILEOPS': [<Const.DB_VERB_FILEOPS l.0 at 0x7fffd988ced0>], 'DB_LOCKDOWN': [<Const.DB_LOCKDOWN l.0 at 0x7fffd987e050>], 'DB_GET_BOTH': [<Const.DB_GET_BOTH l.0 at 0x7fffd9838990>], 'DB_VERB_REP_LEASE': [<Const.DB_VERB_REP_LEASE l.0 at 0x7fffd9895110>], 'DB_LOCK_READ': [<Const.DB_LOCK_READ l.0 at 0x7fffd987e650>], 'DBForeignConflictError': [<EmptyNode.DBForeignConflictError l.0 at 0x7fffd9913ed0>], 'DB_GET_RECNO': [<Const.DB_GET_RECNO l.0 at 0x7fffd9838a10>], 'DBOldVersionError': [<EmptyNode.DBOldVersionError l.0 at 0x7fffd9937310>], 'DB_UPGRADE': [<Const.DB_UPGRADE l.0 at 0x7fffd988cdd0>], 'DB_FCNTL_LOCKING': [<Const.DB_FCNTL_LOCKING l.0 at 0x7fffd9838710>], 'DB_NOLOCKING': [<Const.DB_NOLOCKING l.0 at 0x7fffd987ef10>], 'DB_SECONDARY_BAD': [<Const.DB_SECONDARY_BAD l.0 at 0x7fffd988c590>], 'DB_MULTIPLE_KEY': [<Const.DB_MULTIPLE_KEY l.0 at 0x7fffd987ed90>], 'DB_ARCH_ABS': [<Const.DB_ARCH_ABS l.0 at 0x7fffd982ea50>], 'DB_INIT_CDB': [<Const.DB_INIT_CDB l.0 at 0x7fffd9838bd0>], 'DB_LOCK_YOUNGEST': [<Const.DB_LOCK_YOUNGEST l.0 at 0x7fffd987e890>], 'DB_AGGRESSIVE': [<Const.DB_AGGRESSIVE l.0 at 0x7fffd982e9d0>], 'DB_LSTAT_PENDING': [<Const.DB_LSTAT_PENDING l.0 at 0x7fffd987ead0>], 'DB_INORDER': [<Const.DB_INORDER l.0 at 0x7fffd9838d50>], 'DB_LOG_IN_MEMORY': [<Const.DB_LOG_IN_MEMORY l.0 at 0x7fffd987e990>], 'DB_LOCK_WRITE': [<Const.DB_LOCK_WRITE l.0 at 0x7fffd987e810>], 'DB_INIT_LOCK': [<Const.DB_INIT_LOCK l.0 at 0x7fffd9838c10>], 'DB_LOG_DSYNC': [<Const.DB_LOG_DSYNC l.0 at 0x7fffd987e950>], 'DB_REP_CONF_AUTOINIT': [<Const.DB_REP_CONF_AUTOINIT l.0 at 0x7fffd9885dd0>], 'DB_EVENT_REP_CONNECT_BROKEN': [<Const.DB_EVENT_REP_CONNECT_BROKEN l.0 at 0x7fffd9838210>], 'DB_TIMEOUT': [<Const.DB_TIMEOUT l.0 at 0x7fffd988cad0>], 'DB_REP_NOBUFFER': [<Const.DB_REP_NOBUFFER l.0 at 0x7fffd988c390>], 'DB_CONSUME': [<Const.DB_CONSUME l.0 at 0x7fffd982ed10>], 'DB_REGION_INIT': [<Const.DB_REGION_INIT l.0 at 0x7fffd9885910>], 'DB_BEFORE': [<Const.DB_BEFORE l.0 at 0x7fffd982eb90>], 'DB_ENCRYPT_AES': [<Const.DB_ENCRYPT_AES l.0 at 0x7fffd98380d0>], 'DBNoMemoryError': [<EmptyNode.DBNoMemoryError l.0 at 0x7fffd99371d0>], 'DB_LOCK_UPGRADE_WRITE': [<Const.DB_LOCK_UPGRADE_WRITE l.0 at 0x7fffd987e790>], 'DB_LOCK_IREAD': [<Const.DB_LOCK_IREAD l.0 at 0x7fffd987e250>], 'DB_VERIFY_BAD': [<Const.DB_VERIFY_BAD l.0 at 0x7fffd98952d0>], 'DB_RDWRMASTER': [<Const.DB_RDWRMASTER l.0 at 0x7fffd9885750>], 'DB_USE_ENVIRON_ROOT': [<Const.DB_USE_ENVIRON_ROOT l.0 at 0x7fffd988ce50>], 'DB_REPMGR_CONF_2SITE_STRICT': [<Const.DB_REPMGR_CONF_2SITE_STRICT l.0 at 0x7fffd9885b90>], 'DB_RUNRECOVERY': [<Const.DB_RUNRECOVERY l.0 at 0x7fffd988c510>], 'DB_HOTBACKUP_IN_PROGRESS': [<Const.DB_HOTBACKUP_IN_PROGRESS l.0 at 0x7fffd9838b10>], 'DBPageNotFoundError': [<EmptyNode.DBPageNotFoundError l.0 at 0x7fffd982e610>], 'DB_EVENT_REP_CLIENT': [<Const.DB_EVENT_REP_CLIENT l.0 at 0x7fffd98381d0>], 'DB_NODUPDATA': [<Const.DB_NODUPDATA l.0 at 0x7fffd987eed0>], 'DB_INIT_REP': [<Const.DB_INIT_REP l.0 at 0x7fffd9838cd0>], 'ENOENT': [<Const.ENOENT l.0 at 0x7fffd98955d0>], 'DB_FLUSH': [<Const.DB_FLUSH l.0 at 0x7fffd9838790>], 'DBLockNotGrantedError': [<EmptyNode.DBLockNotGrantedError l.0 at 0x7fffd9937190>], 'DB_MEM_TRANSACTION': [<Const.DB_MEM_TRANSACTION l.0 at 0x7fffd987ed10>], 'full_version': [<FunctionDef.full_version l.None at 0x7fffd9895790>], 'DB_REP_LEASE_EXPIRED': [<Const.DB_REP_LEASE_EXPIRED l.0 at 0x7fffd988c290>], 'DB_NOPANIC': [<Const.DB_NOPANIC l.0 at 0x7fffd9885050>], 'DB_LOCK_DUMP': [<Const.DB_LOCK_DUMP l.0 at 0x7fffd987e150>], 'DB_READ_COMMITTED': [<Const.DB_READ_COMMITTED l.0 at 0x7fffd9885790>], 'DB_INIT_MPOOL': [<Const.DB_INIT_MPOOL l.0 at 0x7fffd9838c90>], 'DB_REP_ANYWHERE': [<Const.DB_REP_ANYWHERE l.0 at 0x7fffd9885d10>], 'DB_FORCE': [<Const.DB_FORCE l.0 at 0x7fffd98387d0>], 'DBNoServerError': [<EmptyNode.DBNoServerError l.0 at 0x7fffd9937210>], 'DBAgainError': [<EmptyNode.DBAgainError l.0 at 0x7fffd98a0150>], 'DB_TRUNCATE': [<Const.DB_TRUNCATE l.0 at 0x7fffd988cb50>], 'EACCES': [<Const.EACCES l.0 at 0x7fffd9895490>], 'DBNoSuchFileError': [<EmptyNode.DBNoSuchFileError l.0 at 0x7fffd9937290>], 'DB_STAT_MEMP_HASH': [<Const.DB_STAT_MEMP_HASH l.0 at 0x7fffd988c9d0>], 'DB_DIRECT_DB': [<Const.DB_DIRECT_DB l.0 at 0x7fffd982ee50>], 'DB_PRIVATE': [<Const.DB_PRIVATE l.0 at 0x7fffd9885610>], 'DB_NOORDERCHK': [<Const.DB_NOORDERCHK l.0 at 0x7fffd987ef90>], 'DBCursorClosedError': [<EmptyNode.DBCursorClosedError l.0 at 0x7fffd98a0110>], 'DB_REP_NEWSITE': [<Const.DB_REP_NEWSITE l.0 at 0x7fffd988c350>], 'DBSequence': [<FunctionDef.DBSequence l.None at 0x7fffd982e810>], 'DB_REP_ISPERM': [<Const.DB_REP_ISPERM l.0 at 0x7fffd988c210>], 'DBRepHandleDeadError': [<EmptyNode.DBRepHandleDeadError l.0 at 0x7fffd982e690>], 'DBLockDeadlockError': [<EmptyNode.DBLockDeadlockError l.0 at 0x7fffd9937150>], 'DB_LAST': [<Const.DB_LAST l.0 at 0x7fffd9838f50>], 'DB_IMMUTABLE_KEY': [<Const.DB_IMMUTABLE_KEY l.0 at 0x7fffd9838b90>], 'DB_BOOTSTRAP_HELPER': [<Const.DB_BOOTSTRAP_HELPER l.0 at 0x7fffd982ebd0>], 'DB_MEM_LOCK': [<Const.DB_MEM_LOCK l.0 at 0x7fffd987ebd0>], 'DB_VERB_FILEOPS_ALL': [<Const.DB_VERB_FILEOPS_ALL l.0 at 0x7fffd988cf10>], 'DB_SET_REG_TIMEOUT': [<Const.DB_SET_REG_TIMEOUT l.0 at 0x7fffd988c790>], 'DB_STAT_CLEAR': [<Const.DB_STAT_CLEAR l.0 at 0x7fffd988c890>], 'DB_REP_CONF_INMEM': [<Const.DB_REP_CONF_INMEM l.0 at 0x7fffd9885e90>], 'DB_REP_ELECTION': [<Const.DB_REP_ELECTION l.0 at 0x7fffd9885fd0>], 'DB_RDONLY': [<Const.DB_RDONLY l.0 at 0x7fffd9885710>], 'DB_LOCK_INHERIT': [<Const.DB_LOCK_INHERIT l.0 at 0x7fffd987e210>], 'DB_THREAD': [<Const.DB_THREAD l.0 at 0x7fffd988ca90>, <AssignAttr.DB_THREAD l.453 at 0x7fffd98213d0>], 'DB_VERB_REP_MSGS': [<Const.DB_VERB_REP_MSGS l.0 at 0x7fffd9895190>], 'DB_ARCH_DATA': [<Const.DB_ARCH_DATA l.0 at 0x7fffd982ea90>], 'DBNotFoundError': [<ClassDef.DBNotFoundError l.0 at 0x7fffd99372d0>], 'DB_APPEND': [<Const.DB_APPEND l.0 at 0x7fffd982ea10>], 'DB_OVERWRITE_DUP': [<Const.DB_OVERWRITE_DUP l.0 at 0x7fffd9885290>], 'DB_SET_LOCK_TIMEOUT': [<Const.DB_SET_LOCK_TIMEOUT l.0 at 0x7fffd988c6d0>], 'DB_LOCK_NOTGRANTED': [<Const.DB_LOCK_NOTGRANTED l.0 at 0x7fffd987e490>], 'DB_LOCK_RANDOM': [<Const.DB_LOCK_RANDOM l.0 at 0x7fffd987e610>], 'DB_SEQ_INC': [<Const.DB_SEQ_INC l.0 at 0x7fffd988c610>], 'DB_DUPSORT': [<Const.DB_DUPSORT l.0 at 0x7fffd982ef90>], 'DB_TXN_WRITE_NOSYNC': [<Const.DB_TXN_WRITE_NOSYNC l.0 at 0x7fffd988cd50>], 'DB_EVENT_REP_LOCAL_SITE_REMOVED': [<Const.DB_EVENT_REP_LOCAL_SITE_REMOVED l.0 at 0x7fffd98383d0>], 'DB_WRITECURSOR': [<Const.DB_WRITECURSOR l.0 at 0x7fffd9895410>], 'DB_REP_CONF_DELAYCLIENT': [<Const.DB_REP_CONF_DELAYCLIENT l.0 at 0x7fffd9885e50>], 'DB_LOCK_UPGRADE': [<Const.DB_LOCK_UPGRADE l.0 at 0x7fffd987e750>], 'DB_NOSYNC': [<Const.DB_NOSYNC l.0 at 0x7fffd98850d0>], 'DB_LOCK_SWITCH': [<Const.DB_LOCK_SWITCH l.0 at 0x7fffd987e710>], 'DB_REPMGR_DISCONNECTED': [<Const.DB_REPMGR_DISCONNECTED l.0 at 0x7fffd9885c50>], 'DB_PREV': [<Const.DB_PREV l.0 at 0x7fffd9885390>], 'DB_VERB_RECOVERY': [<Const.DB_VERB_RECOVERY l.0 at 0x7fffd988cf50>], 'DB_RECNO': [<Const.DB_RECNO l.0 at 0x7fffd9885810>], 'DB_NOMMAP': [<Const.DB_NOMMAP l.0 at 0x7fffd987ef50>], 'DB_EVENT_REP_MASTER': [<Const.DB_EVENT_REP_MASTER l.0 at 0x7fffd9838410>], 'DB_EVENT_WRITE_FAILED': [<Const.DB_EVENT_WRITE_FAILED l.0 at 0x7fffd98385d0>], 'DB_REP_CONNECTION_RETRY': [<Const.DB_REP_CONNECTION_RETRY l.0 at 0x7fffd9885f50>], 'DB_LOCK_MAXLOCKS': [<Const.DB_LOCK_MAXLOCKS l.0 at 0x7fffd987e310>], 'DB_VERB_DEADLOCK': [<Const.DB_VERB_DEADLOCK l.0 at 0x7fffd988ce90>], 'DB_REPMGR_ACKS_ALL_AVAILABLE': [<Const.DB_REPMGR_ACKS_ALL_AVAILABLE l.0 at 0x7fffd9885a10>], 'DB_INIT_TXN': [<Const.DB_INIT_TXN l.0 at 0x7fffd9838d10>], 'DB_EID_BROADCAST': [<Const.DB_EID_BROADCAST l.0 at 0x7fffd982efd0>], 'DB_LOCK_GET': [<Const.DB_LOCK_GET l.0 at 0x7fffd987e1d0>], 'DB_REP_CONF_LEASE': [<Const.DB_REP_CONF_LEASE l.0 at 0x7fffd9885ed0>], 'DB_VERB_REP_SYSTEM': [<Const.DB_VERB_REP_SYSTEM l.0 at 0x7fffd9895210>], 'DB_HASH': [<Const.DB_HASH l.0 at 0x7fffd9838ad0>], 'DBRepLockoutError': [<EmptyNode.DBRepLockoutError l.0 at 0x7fffd982e710>], 'DB_PRINTABLE': [<Const.DB_PRINTABLE l.0 at 0x7fffd9885450>], 'DB_OPFLAGS_MASK': [<Const.DB_OPFLAGS_MASK l.0 at 0x7fffd98851d0>], 'DB_STAT_LOCK_OBJECTS': [<Const.DB_STAT_LOCK_OBJECTS l.0 at 0x7fffd988c950>], 'DB_EVENT_REP_SITE_ADDED': [<Const.DB_EVENT_REP_SITE_ADDED l.0 at 0x7fffd9838510>], 'DB_REP_HOLDELECTION': [<Const.DB_REP_HOLDELECTION l.0 at 0x7fffd988c190>], 'DB_OLD_VERSION': [<Const.DB_OLD_VERSION l.0 at 0x7fffd9885190>], 'DB_PRIORITY_HIGH': [<Const.DB_PRIORITY_HIGH l.0 at 0x7fffd98854d0>], 'DB_LSTAT_ABORTED': [<Const.DB_LSTAT_ABORTED l.0 at 0x7fffd987ea10>], 'DB_VERSION_MAJOR': [<Const.DB_VERSION_MAJOR l.0 at 0x7fffd9895310>], 'DB_TXN_WAIT': [<Const.DB_TXN_WAIT l.0 at 0x7fffd988cd10>], 'DB_EVENT_REP_STARTUPDONE': [<Const.DB_EVENT_REP_STARTUPDONE l.0 at 0x7fffd9838590>], 'DB_MEM_THREAD': [<Const.DB_MEM_THREAD l.0 at 0x7fffd987ecd0>], 'DB_PR_PAGE': [<Const.DB_PR_PAGE l.0 at 0x7fffd9885650>], 'DB_FORCESYNC': [<Const.DB_FORCESYNC l.0 at 0x7fffd9838810>], 'DB_REPMGR_ACKS_ONE_PEER': [<Const.DB_REPMGR_ACKS_ONE_PEER l.0 at 0x7fffd9885b10>], 'DB_REVSPLITOFF': [<Const.DB_REVSPLITOFF l.0 at 0x7fffd988c490>], 'DB_SET_RECNO': [<Const.DB_SET_RECNO l.0 at 0x7fffd988c750>], 'DB': [<FunctionDef.DB l.None at 0x7fffd98c5f10>], 'DB_SEQ_DEC': [<Const.DB_SEQ_DEC l.0 at 0x7fffd988c5d0>], 'DB_EVENT_REP_MASTER_FAILURE': [<Const.DB_EVENT_REP_MASTER_FAILURE l.0 at 0x7fffd9838450>], 'DB_REP_CONF_BULK': [<Const.DB_REP_CONF_BULK l.0 at 0x7fffd9885e10>], 'DB_EVENT_REG_PANIC': [<Const.DB_EVENT_REG_PANIC l.0 at 0x7fffd9838190>], 'DB_FAST_STAT': [<Const.DB_FAST_STAT l.0 at 0x7fffd98386d0>], 'DB_LOCK_DEFAULT': [<Const.DB_LOCK_DEFAULT l.0 at 0x7fffd987e110>], 'DB_MEM_LOCKOBJECT': [<Const.DB_MEM_LOCKOBJECT l.0 at 0x7fffd987ec50>], 'DB_REGISTER': [<Const.DB_REGISTER l.0 at 0x7fffd9885950>], 'DB_REPMGR_CONF_ELECTIONS': [<Const.DB_REPMGR_CONF_ELECTIONS l.0 at 0x7fffd9885bd0>], 'DB_LOCK_NORUN': [<Const.DB_LOCK_NORUN l.0 at 0x7fffd987e450>], 'ENOSPC': [<Const.ENOSPC l.0 at 0x7fffd9895650>], 'DB_VERSION_STRING': [<Const.DB_VERSION_STRING l.0 at 0x7fffd98953d0>], 'DB_MAX_RECORDS': [<Const.DB_MAX_RECORDS l.0 at 0x7fffd987eb90>], 'DB_TXN_SNAPSHOT': [<Const.DB_TXN_SNAPSHOT l.0 at 0x7fffd988cc90>], 'DB_EVENT_REP_CONNECT_TRY_FAILED': [<Const.DB_EVENT_REP_CONNECT_TRY_FAILED l.0 at 0x7fffd9838290>], 'DB_REP_CONF_NOWAIT': [<Const.DB_REP_CONF_NOWAIT l.0 at 0x7fffd9885f10>], 'DB_SET': [<Const.DB_SET l.0 at 0x7fffd988c690>], 'DB_LOCK_EXPIRE': [<Const.DB_LOCK_EXPIRE l.0 at 0x7fffd987e190>], 'DB_VERB_WAITSFOR': [<Const.DB_VERB_WAITSFOR l.0 at 0x7fffd9895250>], 'DB_REPMGR_CONNECTED': [<Const.DB_REPMGR_CONNECTED l.0 at 0x7fffd9885c10>], 'DB_REP_CLIENT': [<Const.DB_REP_CLIENT l.0 at 0x7fffd9885d90>], 'DB_AUTO_COMMIT': [<Const.DB_AUTO_COMMIT l.0 at 0x7fffd982eb50>], 'DB_TXN_NOT_DURABLE': [<Const.DB_TXN_NOT_DURABLE l.0 at 0x7fffd988cc10>], 'DB_ORDERCHKONLY': [<Const.DB_ORDERCHKONLY l.0 at 0x7fffd9885210>], 'DB_BTREE': [<Const.DB_BTREE l.0 at 0x7fffd982ec10>], 'DB_LOCK_MINLOCKS': [<Const.DB_LOCK_MINLOCKS l.0 at 0x7fffd987e390>], 'DB_CONSUME_WAIT': [<Const.DB_CONSUME_WAIT l.0 at 0x7fffd982ed50>], 'DB_READ_UNCOMMITTED': [<Const.DB_READ_UNCOMMITTED l.0 at 0x7fffd98857d0>], 'DB_VERB_REPMGR_MISC': [<Const.DB_VERB_REPMGR_MISC l.0 at 0x7fffd9895090>], 'DB_FOREIGN_CASCADE': [<Const.DB_FOREIGN_CASCADE l.0 at 0x7fffd9838890>], '__version__': [<Const.__version__ l.0 at 0x7fffd98956d0>], 'DB_REP_NOTPERM': [<Const.DB_REP_NOTPERM l.0 at 0x7fffd988c3d0>], 'DB_CDB_ALLDB': [<Const.DB_CDB_ALLDB l.0 at 0x7fffd982ec90>], 'DB_FAILCHK': [<Const.DB_FAILCHK l.0 at 0x7fffd9838690>], 'DB_LSTAT_FREE': [<Const.DB_LSTAT_FREE l.0 at 0x7fffd987ea50>], 'DB_VERB_REPMGR_CONNFAIL': [<Const.DB_VERB_REPMGR_CONNFAIL l.0 at 0x7fffd9895050>], 'DB_ENCRYPT': [<Const.DB_ENCRYPT l.0 at 0x7fffd9838090>], 'DB_LOCK_PUT_OBJ': [<Const.DB_LOCK_PUT_OBJ l.0 at 0x7fffd987e5d0>], 'DB_EXCL': [<Const.DB_EXCL l.0 at 0x7fffd9838610>], 'DB_JOIN_NOSORT': [<Const.DB_JOIN_NOSORT l.0 at 0x7fffd9838e10>], 'DB_REP_CHECKPOINT_DELAY': [<Const.DB_REP_CHECKPOINT_DELAY l.0 at 0x7fffd9885d50>], 'DBKeyEmptyError': [<ClassDef.DBKeyEmptyError l.0 at 0x7fffd9913e10>], 'DB_VERB_REP_MISC': [<Const.DB_VERB_REP_MISC l.0 at 0x7fffd9895150>], 'DB_SYSTEM_MEM': [<Const.DB_SYSTEM_MEM l.0 at 0x7fffd988ca50>], 'DB_ARCH_LOG': [<Const.DB_ARCH_LOG l.0 at 0x7fffd982ead0>], 'DB_INIT_LOG': [<Const.DB_INIT_LOG l.0 at 0x7fffd9838c50>], 'DB_LOCAL_SITE': [<Const.DB_LOCAL_SITE l.0 at 0x7fffd9838fd0>], 'DB_SALVAGE': [<Const.DB_SALVAGE l.0 at 0x7fffd988c550>], 'DB_REPMGR_PEER': [<Const.DB_REPMGR_PEER l.0 at 0x7fffd9885c90>], 'DB_STAT_LOCK_CONF': [<Const.DB_STAT_LOCK_CONF l.0 at 0x7fffd988c8d0>], 'DB_ARCH_REMOVE': [<Const.DB_ARCH_REMOVE l.0 at 0x7fffd982eb10>], 'DB_GROUP_CREATOR': [<Const.DB_GROUP_CREATOR l.0 at 0x7fffd9838a90>], 'DB_QUEUE': [<Const.DB_QUEUE l.0 at 0x7fffd98856d0>], 'DB_REP_MASTER': [<Const.DB_REP_MASTER l.0 at 0x7fffd988c310>], 'EINVAL': [<Const.EINVAL l.0 at 0x7fffd9895590>], 'DB_BUFFER_SMALL': [<Const.DB_BUFFER_SMALL l.0 at 0x7fffd982ec50>], 'DB_PRIORITY_LOW': [<Const.DB_PRIORITY_LOW l.0 at 0x7fffd9885510>], 'DB_PREV_NODUP': [<Const.DB_PREV_NODUP l.0 at 0x7fffd9885410>], 'DB_MULTIVERSION': [<Const.DB_MULTIVERSION l.0 at 0x7fffd987edd0>], 'DB_LOCK_CONFLICT': [<Const.DB_LOCK_CONFLICT l.0 at 0x7fffd987e090>], 'DB_PAGE_NOTFOUND': [<Const.DB_PAGE_NOTFOUND l.0 at 0x7fffd98852d0>], 'DB_EVENT_PANIC': [<Const.DB_EVENT_PANIC l.0 at 0x7fffd9838110>], 'DB_CURRENT': [<Const.DB_CURRENT l.0 at 0x7fffd982edd0>], 'DB_LSTAT_HELD': [<Const.DB_LSTAT_HELD l.0 at 0x7fffd987ea90>], 'DB_VERB_REGISTER': [<Const.DB_VERB_REGISTER l.0 at 0x7fffd988cf90>], 'DBRunRecoveryError': [<EmptyNode.DBRunRecoveryError l.0 at 0x7fffd982e790>], 'DBNoSpaceError': [<EmptyNode.DBNoSpaceError l.0 at 0x7fffd9937250>], 'DB_SEQ_WRAP': [<Const.DB_SEQ_WRAP l.0 at 0x7fffd988c650>], 'DBError': [<EmptyNode.DBError l.0 at 0x7fffd9913f90>], 'DB_MEM_LOCKER': [<Const.DB_MEM_LOCKER l.0 at 0x7fffd987ec10>], 'DB_KEYFIRST': [<Const.DB_KEYFIRST l.0 at 0x7fffd9838ed0>], 'DB_CHKSUM': [<Const.DB_CHKSUM l.0 at 0x7fffd982ecd0>], 'DB_MULTIPLE': [<Const.DB_MULTIPLE l.0 at 0x7fffd987ed50>], 'DB_TXN_NOWAIT': [<Const.DB_TXN_NOWAIT l.0 at 0x7fffd988cc50>], 'DB_MEM_LOGID': [<Const.DB_MEM_LOGID l.0 at 0x7fffd987ec90>], 'DB_UNKNOWN': [<Const.DB_UNKNOWN l.0 at 0x7fffd988cd90>], 'DB_REP_DUPMASTER': [<Const.DB_REP_DUPMASTER l.0 at 0x7fffd9885f90>], 'DB_REP_ELECTION_TIMEOUT': [<Const.DB_REP_ELECTION_TIMEOUT l.0 at 0x7fffd988c090>]})\r\n\r\n../../../22lzvhga14cbzqkwdcjixrqvjfx8fyvj-python2.7-astroid-1.6.5/lib/python2.7/site-packages/astroid/node_classes.py:1066: AssertionError\r\n----------------------------- Captured stderr call -----------------------------\r\nNo config file found, using default configuration\r\n======= 1 failed, 556 passed, 2 skipped, 4 deselected in 481.93 seconds ========\r\n```\r\n\r\nThis error was previously reported in #1981.\r\n\r\n### Expected behavior\r\n\r\nTests pass.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.9.2, \r\nastroid 1.6.5\r\nPython 2.7.15 (default, Apr 29 2018, 23:18:59) \r\n[GCC 7.3.0]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2301,
                "title": "bad-continuation doesn't consider multiple with-statements",
                "labels": [
                    "topic/formatting",
                    "bug"
                ],
                "description": "With this block:\r\n\r\n```python\r\n            with log.ignore_py_warnings(\r\n                category=DeprecationWarning,  # error\r\n                message=r'({})'.format('|'.join(messages))  # error\r\n            ), log.ignore_py_warnings(\r\n                category=PendingDeprecationWarning,\r\n                module='imp'\r\n            ), log.ignore_py_warnings(\r\n                category=ImportWarning,\r\n                message=r'Not importing directory .*: missing __init__'\r\n            ):\r\n                importlib.import_module(name)\r\n```\r\n\r\npylint wants me to further indent the first lines (marked with `# error`), presumably to tell them apart from the body of the `with:`.\r\n\r\nHowever, it does not want me to further indent the other two blocks, which seems inconsistent.\r\n\r\nThis appeared with pylint/astroid 2.0, it seems in earlier versions it didn't want to further indent things at all."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2474,
                "title": "__path__ mangling in a non namespace package",
                "labels": [],
                "description": "Hi,\r\n\r\nI have a use case which I am unsure whether it is covered by pylint or not. \r\nI've been through quite a number of issues regarding namespace packages using `pkgutil.extend_path`, and I could verify that this works fine. Now, what I would like to do is to expose modules in a subdirectory as being part of an upper module. This works fine with python, but pylint gives me the `no-name-in-module` error. \r\n\r\nHere is how to reproduce:\r\n\r\n```\r\n[chaen@notANamespace]$ ls -R\r\n.:\r\n__init__.py  module  useModule.py\r\n\r\n./module:\r\nimpl  __init__.py\r\n\r\n./module/impl:\r\n__init__.py  myClass.py\r\n```\r\n\r\nThe `useModule.py` just imports a class from `module` and instantiate it. The actual class is in the subdirectory `impl`, but I do not want this to be visible to the `useModule` script.\r\n\r\n```\r\n[chaen@notANamespace]$ cat useModule.py \r\nfrom module.myClass import MyClass\r\nMyClass()\r\n[chaen@notANamespace]$ cat module/__init__.py \r\nfrom pkgutil import extend_path\r\n__path__ = extend_path(__path__, __name__ + '.impl')\r\n[chaen@notANamespace]$ cat module/impl/myClass.py \r\nclass MyClass(object):\r\n  def __init__(self):\r\n    print \"Hello PyLint\"\r\n```\r\n\r\nThe `__init__.py` in the root and  `module/impl` directories are empty\r\n\r\nIf I execute it in python, I get what I expect:\r\n```\r\n[chaen@notANamespace]$ python useModule.py \r\nHello PyLint\r\n```\r\n\r\nPylint however will complain \r\n```\r\n[chaen@notANamespace]$ pylint useModule.py \r\nNo config file found, using default configuration\r\n************* Module notANamespace.useModule\r\nC:  1, 0: Module name \"useModule\" doesn't conform to snake_case naming style (invalid-name)\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nE:  1, 0: No name 'myClass' in module 'notANamespace.module' (no-name-in-module)\r\nE:  1, 0: Unable to import 'module.myClass' (import-error)\r\n\r\n----------------------------------------------------------------------\r\nYour code has been rated at -50.00/10 (previous run: -50.00/10, +0.00)\r\n```\r\n\r\nSo I am not sure what makes the namespace packages work and not that. Maybe this isn't the way to 'hide' a subdirectory in python anyway ? \r\n\r\nIn any case, this are the versions I am using:\r\n```\r\n[chaen@notANamespace]$ python --version\r\nPython 2.7.15\r\n[chaen@notANamespace]$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.9.3, \r\nastroid 1.6.5\r\nPython 2.7.15 (default, May 16 2018, 17:50:09) \r\n[GCC 8.1.1 20180502 (Red Hat 8.1.1-1)]\r\n```\r\n\r\nThanks for your help \r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2296,
                "title": "False positive not-an-iterable",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "\r\n### Steps to reproduce\r\n1. Put this code in test.py:\r\n```python\r\nfrom typing import List, NewType\r\n\r\na = NewType(\"a\", List[int])\r\n\r\ndef fun() -> a:\r\n    \"\"\"Some function.\"\"\"\r\n    data = [1, 2, 3]\r\n\r\n    return a(data)\r\n\r\ndef fun1():\r\n    \"\"\"some function.\"\"\"\r\n    for x in fun():\r\n        pass\r\n```\r\n2. Run  `pylint test.py`\r\n\r\n### Current behavior\r\n`test.py:14:13: E1133: Non-iterable value fun() is used in an iterating context (not-an-iterable)`\r\n\r\n### Expected behavior\r\n\r\n\r\n### pylint --version output\r\npylint 2.0.0\r\nastroid 2.0.0.dev4\r\nPython 3.6.5 (default, May  3 2018, 10:08:28) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1931,
                "title": "Absolute import misidentified as relative import",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Create a package `mypkg` containing `__init__.py` and `os.py`\r\n2. In `__init__.py`, require something from the built-in `os` package, e.g. `from os import path`\r\n3. Run `pylint __init__.py` from within the `mypkg` directory.\r\n\r\n### Current behavior\r\nPylint reports `No name 'path' in module 'os' (no-name-in-module)`, assuming that `__init__.py` refers to `os.py` in the `mypkg` directory, and not the built-in `os` module.\r\n\r\nThe problem only manifests when `pylint` is invoked from the directory containing `os.py`.\r\n\r\n### Expected behavior\r\nThe `from os import path` is identified as an absolute import, and no error is reported.\r\n\r\n### pylint --version output\r\n```\r\npylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.2,\r\nastroid 1.6.1\r\nPython 3.6.4 (default, Mar  9 2018, 23:15:03)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1930,
                "title": "Windows 10 tox error: SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape",
                "labels": [
                    "needs-reproduction"
                ],
                "description": "### Steps to reproduce\r\n1. Use Windows 10 (64 bit)\r\n2. Remove/comment `pyenchant` from `tox.ini` (since pyenchant does not work on Windows 10, see #1900\r\n3. Run tox\r\n\r\n### Current behavior\r\n```python\r\n============================ 248 tests deselected =============================\r\n========== 857 passed, 107 skipped, 248 deselected in 78.78 seconds ===========\r\nCoverage.py warning: No data was collected. (no-data-collected)\r\npy36 runtests: commands[1] | python -c import os;cov_strip_abspath = open(os.environ['COVERAGE_FILE'], 'r').read().replace('.tox' + os.sep + os.path.relpath('C:\\Users\\Moo\\Desktop\\projects\\pylint\\.tox\\py36\\Lib\\site-packages', 'C:\\Users\\Moo\\Desktop\\projects\\pylint\\.tox') + os.sep, '');open(os.environ['COVERAGE_FILE'], 'w').write(cov_strip_abspath)\r\n  File \"<string>\", line 1\r\nSyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape\r\nERROR: InvocationError: \"C:\\\\Users\\\\Moo\\\\Desktop\\\\projects\\\\pylint\\\\.tox\\\\py36\\\\Scripts\\\\python.EXE -c import os;cov_strip_abspath = open(os.environ['COVERAGE_FILE'], 'r').read().replace('.tox' + os.sep + os.path.relpath('C:\\\\Users\\\\Moo\\\\Desktop\\\\projects\\\\pylint\\\\.tox\\\\py36\\\\Lib\\\\site-packages', 'C:\\\\Users\\\\Moo\\\\Desktop\\\\projects\\\\pylint\\\\.tox') + os.sep, '');open(os.environ['COVERAGE_FILE'], 'w').write(cov_strip_abspath)\"\r\n___________________________________ summary ___________________________________\r\nERROR:   py36: commands failed\r\n~\\Desktop\\projects\\pylint [bug/epylint_windows_rcfile]> git st\r\n```\r\n\r\n### Expected behavior\r\nThat tox should run properly\r\n\r\n### pylint --version output\r\npylint 1.7.1\r\nPython 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)] on win32\r\ntox 2.9.1\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2452,
                "title": "What is a block?",
                "labels": [
                    "documentation",
                    "bug"
                ],
                "description": "## Question\r\n\r\nApologies if this has been asked before, but I'm curious what pylint considers a \"block\" and whether that could be documented more explicitly. Right now, the [docs](http://pylint.pycqa.org/en/latest/faq.html#is-it-possible-to-locally-disable-a-particular-message) state:\r\n\r\n> add \"#pylint: disable=some-message,another-one\" at the desired block level or at the end of the desired line of code\r\n\r\nI ask this because I was surprised to see that the following does not work:\r\n\r\n```python\r\n        if hasattr(SafeConfigParser, \"read_file\"):\r\n            return SafeConfigParser.read_file(self, fp, filename)\r\n        else:\r\n            # pylint: disable=deprecated-method\r\n            return SafeConfigParser.readfp(self, fp, filename)\r\n```\r\n\r\nThe `deprecated-method` warning is still raised.\r\n\r\nHowever, the following _does_ work:\r\n\r\n```python\r\n        try:\r\n            return SafeConfigParser.read_file(self, fp, filename)\r\n        except AttributeError:\r\n            # pylint: disable=deprecated-method\r\n            return SafeConfigParser.readfp(self, fp, filename)\r\n```\r\n\r\nThe `deprecated-method` warning is disabled, as desired. In the `if/else` case, I had to add the `# \r\n pylint: disable=` line to block that contains the `if/else` instead."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2293,
                "title": "Add configuration to promote/demote severity of messages",
                "labels": [
                    "enhancement"
                ],
                "description": "<!--\r\n  Hi there! Thank you for wanting to make pylint better.\r\n\r\n  Before you submit this, make sure that this feature wasn't\r\n  already requested or if it is not already implemented in the master branch.\r\n-->\r\n\r\n### Status Quo\r\nCurrently you can disable specific messages or severity classes (error, warning, refactor, convention), so to do pylint runs of various stringency, you could do one of \r\n\r\n* `pylint -E ...`\r\n* `pylint --disable=R,C,W ....`\r\n* `pylint --disable=R,C ...`\r\n\r\nHowever, if you have a style guide that might mean one of the \"convention\" messages is a must-do, then you need to disable all the others, then you can bit-OR the exit code to fail a build on the refactor bit being set. Alternatively, parse the output (ick).\r\n\r\n### Desired feature\r\nAdd a configuration where you can map message codes/names to severity level. \r\n\r\nFor instance, if I say something like `C0303=E` or `trailing-whitespace: error`, and run pylint, even if there are no \"true\" error messages, a C0303 message would cause the exit code to have a 2 in it.\r\n\r\n### Help\r\nI'd be willing to take a stab at a patch, but I'm also not sure if it could be done in a plugin just as well? I'm having some trouble figuring out how. The docs point me towards a learning cliff: \"In general, a plugin is a module which should have a function `register`, which takes an instance of `pylint.lint.PyLinter` as input.\", but even looking at the class spec it's not immediately obvious how to hook into it. Are there docs for that I'm not finding or simple (but non-trivial) plugins for example?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1927,
                "title": "`mypy_extensions.TypedDict` errors because when creating a class, it is inferred as an instance",
                "labels": [
                    "astroid brain",
                    "astroid",
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. Create a new variable `Dict1 = mypy_extensions.TypedDict('Dict1', {'a' : int})`.\r\n2. Create a class `class Dict2(Dict1, Total=True): pass`\r\n3. Run pyling\r\n\r\n### Current behavior\r\nPylint gives an error for the class creation as inheriting from a non class is invalid.\r\n\r\n### Expected behavior\r\nNo error as this valid.\r\n\r\n### pylint --version output\r\nPython 3.6.4rc1\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2461,
                "title": "unbalanced-tuple-unpacking when using [].append",
                "labels": [
                    "bug"
                ],
                "description": "This bug appeared when I was writing Python code with VS Code. There is no problem with the code I write, but VScode suggests a problem. As shown in the following picture. You can email me if you need to.(zj175@139. com) I reported this to VS Code, but they said Pylint produced the error, and I should submit a bug report to the Pylint project.\r\n\r\n[test.zip](https://github.com/PyCQA/pylint/files/2339116/test.zip)\r\n![image](https://user-images.githubusercontent.com/36597804/44898264-f7aac700-ad30-11e8-9227-2f5ee4412c08.png)\r\n![image](https://user-images.githubusercontent.com/36597804/44898273-fda0a800-ad30-11e8-843b-0ce8b7fba75c.png)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2292,
                "title": "Possible to cache astroid AST between runs?",
                "labels": [
                    "topic-performance"
                ],
                "description": "I'm not sure if this at all technically feasible, but pylint is currently the slowest part of our test suite, takes almost a minute for a modest size project with parallelization enabled. \r\n\r\nI presume that the most expensive part of running pylint is computing the AST, and am wondering if it is possible to reuse it. \r\n\r\nI apologize if this is obviously infeasible, I have no idea how `astroid` works. "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1925,
                "title": "Cannot correctly analyse namedtuples inside a class/Enum class",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. use the following snippet:\r\n```\r\nclass Foo(Enum):\r\n    _Bar = namedtuple('Bar', 'x y')\r\n    bar = _Bar(1, 2, 3)\r\n```\r\n2. run pylint over it\r\n\r\n\r\n### Current behavior\r\nNo message is emitted.\r\n\r\n### Expected behavior\r\nWe should emit that the constructor has too many arguments.\r\n\r\n### pylint --version output\r\n\r\nmaster"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2462,
                "title": "False positive (no-value-for-parameter) when chaining partial from functools",
                "labels": [
                    "bug"
                ],
                "description": "Background: when using partial from functools (which is a default function from Python3) multiple times in a chain, pylint doesn't recognise the previous defined value(s) for the current argument(s).\r\n\r\n### Steps to reproduce\r\n1. Make a new file `animal.py`\r\n```\r\n\"\"\" False positive demo for no-value-for-parameter \"\"\"\r\nfrom functools import partial\r\n\r\ndef animal(name, type_, legs):\r\n    \"\"\" Prints 'name' is a 'type_' with 'legs' legs\r\n    \"\"\"\r\n    print(f'{name} is a {type_} with {legs} legs')\r\n\r\nMAMMAL = partial(animal, type_='mammal')\r\nDOG = partial(MAMMAL, legs=4)\r\n\r\nif __name__ == \"__main__\":\r\n    DOG('Jake')\r\n```\r\n> Jake is a mammal with 4 legs\r\n\r\n2. Run `pylint animal.py`\r\n\r\n### Current behavior\r\n\r\n> ************* Module animal\r\n> animal.py:13:4: E1120: No value for argument 'type_' in function call (no-value-for-parameter)\r\n> \r\n> ------------------------------------------------------------------\r\n> Your code has been rated at 2.86/10 (previous run: 1.43/10, +1.43)\r\n\r\n### Expected behavior\r\n\r\nThe code should be rated at 10/10\r\n\r\n### pylint --version output\r\n\r\n> pylint 2.1.1\r\n> astroid 2.0.4\r\n> Python 3.6.5 (default, Apr  1 2018, 05:46:30) \r\n> [GCC 7.3.0]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2287,
                "title": "Support isinstance checks through ABCMeta for checkers and reporters",
                "labels": [
                    "enhancement",
                    "discussion"
                ],
                "description": "Currently the PyLinter categorizes checkers through the `__implements__` class attribute. This is not very standard, and is one more barrier for others to write plugins.\r\n\r\nI propose\r\n\r\n* Changing the interfaces to have a `ABCMeta` metaclass\r\n* Change PyLinter to do isinstance checks to categorize checkers/reporters in addition to keeping the old `__implements__` checks"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1887,
                "title": "Add the man page generation back in",
                "labels": [
                    "topic-per-directory-config",
                    "help wanted"
                ],
                "description": "Currently is has been stripped out to make the LongHelp classes work, but it needs to be added back in."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2463,
                "title": "Other example of maximum recursion depth",
                "labels": [
                    "needs-reproduction"
                ],
                "description": "Not sure if it is a duplicate of #2388, feel free to close this issue it if that's the case.\r\n\r\n### Steps to reproduce\r\n\r\nRun `pylint` on the following code:\r\n\r\n```python\r\nimport os\r\n\r\nABC = os.path.realpath('abc')\r\nDEF = os.path.realpath(ABC + 'def')\r\nGHI = os.path.join(DEF, 'ghi')\r\n```\r\n\r\n### Current behavior\r\n\r\n\r\nIt fails with `RecursionError: maximum recursion depth exceeded`; [full trace here](https://github.com/PyCQA/pylint/files/2340684/trace.txt).\r\n\r\nHowever, it works with the argument `--init-hook=\"import sys; sys.setrecursionlimit(2000)\"` (taken from #2388).\r\n\r\n### Expected behavior\r\n\r\nPylint should not crash.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jul 15 2018, 10:44:58)\r\n[GCC 8.1.1 20180531]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2279,
                "title": "Add a way to ignore by full path, not basename",
                "labels": [
                    "enhancement"
                ],
                "description": "Background info:\r\n\r\nI have adopted a rickety old Python codebase and I'm in the process of cleaning it up. I'm using a number of code quality tools including pylint, flake8, and mypy. My process for each checker has been to set up sane default rules, and an ignore list explicitly ignoring all files in the project. Then one by one I clean a file and remove the exclusion.\r\n\r\nUnfortunately that won't work for pylint because according to the latest [docs](https://pylint.readthedocs.io/en/latest/technical_reference/features.html) both `ignore` and `ignore-patterns` only look at base names, not full paths. My exclude list for flake8 looks something like this:\r\n\r\n```\r\nexclude =\r\n    auth/models.py\r\n    auth/views.py\r\n    dashboard/models.py\r\n    dashboard/views.py\r\n```\r\n\r\nI don't see any way in Pylint to ignore only e.g. auth/views.py, while enforcing rules in dashboard/views.py. Pylint is the only tool I couldn't manage to configure in a way that supports cleaning things up progressively.\r\n\r\nI would like to use Pylint on this project. Is there a chance the options could be expanded to support this use case?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1829,
                "title": "`no-member` when using class in list comprehension inside compount assignment of list with nesting level of more than 2",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```python\r\nclass Plugin(object):\r\n    name = 'foo'\r\n\r\ndef main():\r\n    plugins = [Plugin(), Plugin()]\r\n    result = []\r\n    result += [\r\n        [\r\n            [\r\n                plugin.name for plugin in plugins\r\n            ]\r\n        ]\r\n    ]\r\n``` \r\n\r\n### Current behavior\r\n```\r\nE: 17,28: Instance of 'list' has no 'name' member (no-member)\r\n```\r\n\r\n### Note\r\nWith a less nesting level it's passing pylint check:\r\n```python\r\nclass Plugin(object):\r\n    name = 'foo'\r\n\r\ndef main():\r\n    plugins = [Plugin(), Plugin()]\r\n    result = []\r\n    result += [\r\n        [\r\n            plugin.name for plugin in plugins\r\n        ]\r\n    ]\r\n```\r\n\r\nThis example also passing pylint check:\r\n```python\r\nclass Plugin(object):\r\n    name = 'foo'\r\n\r\ndef main():\r\n    plugins = [Plugin(), Plugin()]\r\n    result = []\r\n    result2 = [\r\n        [\r\n            [\r\n                plugin.name for plugin in plugins\r\n            ]\r\n        ]\r\n    ]\r\n    result += result2\r\n```\r\n\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.1,\r\nastroid 1.6.0\r\nPython 3.6.4 (default, Dec 23 2017, 19:07:07)\r\n[GCC 7.2.1 20171128]\r\n```\r\n\r\n  "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 553,
                "title": "Pylint cannot understand instance attributes",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Daniel Gonzalez (BitBucket: [gonvaled](http://bitbucket.org/gonvaled), GitHub: @gonvaled?)**\n\n---\n\n```\nclass Horse:\n\n    def talk(self):\n        print 'Hihaaa!'\n\n\nclass Farm:\n\n    def __init__(self, animal):\n        self.animal = animal\n\n    def animaltalk(self):\n        self.animal.sing()\n\n\ndef main():\n    horse = Horse()\n    farm = Farm(horse)\n    farm.animaltalk()\n\n\nmain()\n```\n\n`self.animal.sing()` is a wrong call, by pylint does not catch this. I have been told this could be easily fixable in pylint if instances have knowledge about their arguments. Here is the relevant [discussion](http://stackoverflow.com/q/30797710/647991)\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/553\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2472,
                "title": "AsyncContextManager fasly raises inherit-non-class",
                "labels": [
                    "astroid brain",
                    "python 3.7",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\n```\r\nfrom typing import AsyncContextManager\r\n\r\nclass Foo(AsyncContextManager):\r\n    ...\r\n```\r\n\r\n### Current behavior\r\n\r\n`pylint: Inheriting 'AsyncContextManager', which is not a class.  (\"inherit-non-class\") [E0239]`\r\n\r\n### Expected behavior\r\n\r\nNo error as it's a class:\r\n```\r\n>>> import typing\r\n>>> type(typing.AsyncContextManager)\r\n<class 'typing._GenericAlias'>\r\n```\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 27 2018, 14:40:03) \r\n[GCC 8.1.0]\r\n```\r\n\r\nI bet it's however hard to spot that it's a class as the typing module is a bit convoluted."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2271,
                "title": "False positive for redundant-keyword-arg in class with partial() class attribute function",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n\r\nCreate file with these contents:\r\n\r\n```python\r\n# false_redundant_keyword_arg.py\r\n\r\nfrom functools import partial\r\n\r\ndef foo(x, y):\r\n    return (x, y)\r\n\r\nbar = partial(foo, '')\r\n\r\nclass A(object):\r\n    bar = bar\r\n\r\n    def b(self):\r\n        y = 1\r\n        # False positive error here.\r\n        # E1124: Argument 'y' passed by position and keyword in function call (redundant-keyword-arg)\r\n        self.bar(y=y)\r\n\r\n        # No error here\r\n        bar(y=y)\r\n\r\ny = 2\r\n# No error here\r\nbar(y=y)\r\n```\r\n\r\n### Current behavior\r\n\r\nWith Python 3.7 and 3.6 with astroid-2.0.0.dev4 and pylint-2.0.0.dev2:\r\n\r\n```\r\n$ pylint -E false_redundant_keyword_arg.py\r\n************* Module false_redundant_keyword_arg\r\nfalse_redundant_keyword_arg.py:15:8: E1124: Argument 'y' passed by position and keyword in function call (redundant-keyword-arg)\r\n```\r\n\r\nBehavior isn't present for Python 3.6 with pylint 1.9.2 and astroid 1.6.5.\r\n\r\n### Expected behavior\r\n\r\nShould not be an error.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version output\r\npylint 2.0.0.dev2\r\nastroid 2.0.0.dev4\r\nPython 3.7.0 (default, Jul  6 2018, 19:08:39)\r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]\r\n```\r\n\r\n```\r\n$ pylint --version output\r\npylint 2.0.0.dev2\r\nastroid 2.0.0.dev4\r\nPython 3.6.6 (default, Jul  6 2018, 11:59:38)\r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1825,
                "title": "__class__ is injected into locals by Pylint",
                "labels": [
                    "bug"
                ],
                "description": "I wish I had an idea where this happens / a small reproducible test case, but I haven't been able to figure out much of **how** it happens.\r\n\r\nWhen I run `pylint` on a [project][2] of mine, there is a certain point after which **every** [`visit_functiondef`][4] thinks that [`node.locals`][5] has `'__class__'` in it. I detected this via:\r\n\r\n```diff\r\ndiff --git a/pylint/checkers/design_analysis.py b/pylint/checkers/design_analysis.py\r\nindex aa2f9b4..8382b2e 100644\r\n--- a/pylint/checkers/design_analysis.py\r\n+++ b/pylint/checkers/design_analysis.py\r\n@@ -13,6 +13,7 @@\r\n \"\"\"check for signs of poor design\"\"\"\r\n \r\n from collections import defaultdict\r\n+import pdb\r\n \r\n from astroid import If, BoolOp\r\n from astroid import decorators\r\n@@ -240,6 +241,8 @@ class MisdesignChecker(BaseChecker):\r\n             ignored_args_num = 0\r\n         # check number of local variables\r\n         locnum = len(node.locals) - ignored_args_num\r\n+        if '__class__' in node.locals:\r\n+            pdb.set_trace()\r\n         if locnum > self.config.max_locals:\r\n             self.add_message('too-many-locals', node=node,\r\n                              args=(locnum, self.config.max_locals))\r\n```\r\n\r\nI originally noticed this because a few methods went from passing Pylint to failing with `too-many-locals (16/15)`.\r\n\r\nTo reproduce (may be useful to use a patched `pylint` as above):\r\n\r\n```\r\n$ python3.6 -m virtualenv venv-1.8.1\r\n$ venv-1.8.1/bin/python -m pip install 'pylint==1.8.1' matplotlib numpy pytest\r\n$ git clone https://github.com/dhermes/bezier\r\n$ cd bezier/\r\n$ git checkout 436ba46687e017d3b3dbfc37fcae92efe9bfcf40\r\n$ cd ..\r\n$ BEZIER_NO_EXTENSIONS=True venv-1.8.1/bin/python -m pip install bezier/\r\n$ venv-1.8.1/bin/pylint \\\r\n> --rcfile=bezier/pylintrc \\\r\n> --disable=missing-docstring \\\r\n> --disable=protected-access \\\r\n> --disable=too-many-public-methods \\\r\n> --disable=no-name-in-module  # Extension modules won't exist \\\r\n> --max-module-lines=2500 \\\r\n> bezier/tests/\r\nUsing config file .../bezier/pylintrc\r\n************* Module tests.unit.test__surface_helpers\r\nR:236, 4: Too many local variables (16/15) (too-many-locals)\r\n************* Module tests.unit.test_surface\r\nR:173, 4: Too many local variables (16/15) (too-many-locals)\r\nR:915, 4: Too many local variables (16/15) (too-many-locals)\r\n************* Module tests.unit.test__plot_helpers\r\nR:139, 4: Too many local variables (16/15) (too-many-locals)\r\n\r\n-------------------------------------------------------------------\r\nYour code has been rated at 9.99/10 (previous run: 10.00/10, -0.01)\r\n\r\n```\r\n\r\nand running with `pylint==1.7.5` the `__class__` error shows up [hundreds of times][3]\r\n\r\n```\r\n$ python3.6 -m virtualenv venv-1.7.5\r\n$ venv-1.7.5/bin/python -m pip install 'pylint==1.7.5' matplotlib numpy pytest\r\n$ BEZIER_NO_EXTENSIONS=True venv-1.7.5/bin/python -m pip install bezier/\r\n$ venv-1.7.5/bin/pylint \\\r\n> --rcfile=bezier/pylintrc \\\r\n> --disable=missing-docstring \\\r\n> --disable=protected-access \\\r\n> --disable=too-many-public-methods \\\r\n> --disable=no-name-in-module  # Extension modules won't exist \\\r\n> --max-module-lines=2500 \\\r\n> bezier/tests/\r\n...\r\n************* Module tests.functional.utils\r\nW:210, 0: Unused variable '__class__' (unused-variable)\r\nW:210, 0: Unused variable '__class__' (unused-variable)\r\n...\r\n```\r\n\r\nIf it helps, here is some [info][1] on the `__class__` local.\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\nNo config file found, using default configuration\r\npylint 1.8.1, \r\nastroid 1.6.0\r\nPython 3.6.4 (default, Dec 19 2017, 11:03:44) \r\n[GCC 5.4.0 20160609]\r\n```\r\n\r\n[1]: https://stackoverflow.com/q/36993577/1068170\r\n[2]: https://github.com/dhermes/bezier\r\n[3]: https://gist.github.com/dhermes/50f50c46262dae19dd14393ddf3e8285\r\n[4]: https://github.com/PyCQA/pylint/blob/36cfe0c77f85c316a9625ff18f45ae34f4204f2e/pylint/checkers/design_analysis.py#L221\r\n[5]: https://github.com/PyCQA/pylint/blob/36cfe0c77f85c316a9625ff18f45ae34f4204f2e/pylint/checkers/design_analysis.py#L242"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2496,
                "title": "Pylint doesn't doesn't understand coercing same-name variables in lambda functions",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Try to coerce variables in a lamba function to the variables of the same name\r\n2. Get yelled at for not using your variables and for using undefined variables\r\n3. Use weird variables names and be slightly sad\r\n\r\ne.g.: \r\n\r\n```\r\na = 1\r\n[].append(lambda a=a: a)\r\n```\r\ndoesn't work but\r\n```\r\nb = 1\r\n[].append(lambda b_=b: b_)\r\n```\r\nworks\r\n\r\n### Current behavior\r\nPylint can't connect the variables, so complains that they are unused/unassigned. \r\n\r\n### Expected behavior\r\nPylint knows whats up and is happy and so are we\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.7.5, \r\nastroid 1.5.2\r\nPython 3.6.6 (default, Jul 19 2018, 14:25:17) \r\n[GCC 8.1.1 20180712 (Red Hat 8.1.1-5)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2270,
                "title": "False positive on useless-super-delegation with *args",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nRun pylint on the following code:\r\n```python\r\nclass Super:\r\n    def __init__(self, *args):\r\n        self.args = args\r\n\r\nclass Sub(Super):\r\n    def __init__(self, a, b):\r\n        super().__init__(a, b)\r\n```\r\n\r\n### Current behavior\r\n\r\nThe following message is issued:\r\n```\r\n6:4: W0235: Useless super delegation in method '__init__' (useless-super-delegation)\r\n```\r\n\r\n### Expected behavior\r\n\r\nI think no message should be issued, since the delegation is not useless: it forces the subclass to always take exactly 2 arguments, while the superclass can take any number of arguments.\r\n\r\nThis pattern occurs when defining a custom exception class, since the `Exception` class takes a variable number of arguments, but your custom exception type may have mandatory positional arguments.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.0.dev2\r\nastroid 2.0.0.dev4\r\nPython 3.4.6 (default, Mar 22 2017, 12:26:13) [GCC]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1807,
                "title": "Use before assignment not detected",
                "labels": [
                    "topic-control-flow",
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n\r\nCheck this with Pylint:\r\n\r\n    def test(a):\r\n        if a == 1:\r\n            b = 2\r\n        return 3 if b else 4\r\n\r\n### Current behavior\r\n\r\nDoes not warn `b` is used without (very probably) being assigned (more below).\r\n\r\n### Expected behavior\r\n\r\nOpinions may vary, still here is mine: I know too many false alerts is at the detriment of alerts in the large. I know there use to be a Borland C++ compiler triggering annoying and noisy warnings when an assignment was conditional, which seems to be a case very close to this one. But there is only one condition, so clearly it can\u2019t cover all cases. The probability `b` is not assigned, is high.\r\n\r\n### pylint --version output\r\n\r\n> pylint 1.7.4, \r\n> astroid 1.5.3\r\n> Python 3.5.2 (default, Nov 23 2017, 16:37:01) \r\n> [GCC 5.4.0 20160609]\r\n\r\n### Note\r\n\r\nI\u2019m not telling about it as a bug, rather a an hint."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 521,
                "title": "Improve the report for the wildcard-import",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nFrom issue http://www.logilab.org/ticket/6696\n\nIf I do something like this:\n\n`from time import *`\n\npylint rightfully complains about the wildcard import. Later on it complains about all the elements of the time module which I failed to use, e.g.:\n\n```\n#!python\n\nspambayes/oe_mailbox.py:40: [W] Unused import tzset from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import strptime from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import daylight from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import sleep from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import timezone from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import accept2dyear from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import clock from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import altzone from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import asctime from wildcard import\nspambayes/oe_mailbox.py:53: [W] Unused import mboxutils\nspambayes/oe_mailbox.py:40: [W] Unused import localtime from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import mktime from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import time from wildcard import\nspambayes/oe_mailbox.py:33: [W] Unused import mailbox\nspambayes/oe_mailbox.py:40: [W] Unused import ctime from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import struct_time from wildcard import\nspambayes/oe_mailbox.py:40: [W] Unused import tzname from wildcard import\n```\n\nIt seems like it would be better to identify those attributes of the time module which I did use so it's easier to correct the import statement. In fact, it might go so far as to suggest a replacement import statement:\n\nspambayes/oe_mailbox.py:40: [W] Suggest \"from time import time, strftime\"\n\nor something similar.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/521\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2498,
                "title": "Proper use of generated-members= setting",
                "labels": [
                    "bug"
                ],
                "description": "## Question\r\n\r\nHello, I'm using the Google Drive Python API and the [following snippet](https://developers.google.com/drive/api/v3/quickstart/python) generates `E1101`:\r\n```\r\n    # Call the Drive v3 API\r\n    results = service.files().list(\r\n        pageSize=10, fields=\"nextPageToken, files(id, name)\").execute()\r\n    items = results.get('files', [])\r\n```\r\n\r\n```\r\nE1101: Instance of 'Resource' has no 'files' member (no-member)\r\n```\r\n\r\nWhat's the proper way to silence these `E1101`?\r\nI tried this in my `.pylintrc` without success:\r\n```\r\ngenerated-members=googleapiclient\\.discovery\\.Resource\\..*\r\n```\r\nAnd trying a broader match doesn't help either:\r\n```\r\ngenerated-members=googleapiclient.*\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2263,
                "title": "Enum member, instead of the value of enum member, is given the type of the actual class",
                "labels": [
                    "bug"
                ],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n\r\nThe result is from VSCode's pylint, writing a singleton with the assistance of `Enum`, is the recommended way of writing singleton pattern by [PEP 484](https://www.python.org/dev/peps/pep-0484/):\r\n\r\n```python\r\nclass TestClass:\r\n    def hello(self):\r\n        return \"Hello!\"\r\n\r\nclass TestClassSingleton(enum.Enum):\r\n    test_object = TestClass()\r\n\r\ndef get_test_object():\r\n    return TestClassSingleton.test_object.value\r\n\r\ntest_class_instance = get_test_object()\r\n\r\nprint(test_class_instance.hello())\r\n```\r\n\r\nThis code correctly prints `Hello!`.\r\n\r\n### Current behavior\r\n\r\n* The `test_class_instance` is of type \u201cmethod 'value'\u201d, and any call to it would result in `E1101`.\r\n* `TestClassSingleton.test_object` is of type `TestClass`\r\n\r\n![image](https://user-images.githubusercontent.com/2217102/42418454-49ec84fa-82d3-11e8-89f7-e7ae3e0bb3f9.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2217102/42418476-f4bec6b8-82d3-11e8-8bc5-5794a3b6aa4f.png)\r\n\r\n### Expected behavior\r\n\r\n* The `TestClassSingleton.test_object` should be of class `TestClassSingleton`.\r\n* The `test_class_instance` should be of type `TestClass`.\r\n\r\n### pylint --version output\r\n\r\n```\r\ntpylint 1.9.2,\r\nastroid 1.6.5\r\nPython 3.6.1 |Anaconda custom (64-bit)| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1802,
                "title": "Allow accessing protected attributes in dunder methods when the owner of the attribute is the other object",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nLint the follwing code\r\n\r\n```python\r\n# pylint: disable=blacklisted-name, missing-docstring\r\n\r\nclass MyObj:\r\n\r\n    def __new__(cls, foo, bar):\r\n        obj = object.__new__(cls)\r\n        obj._foo = foo   # <-- warning reported here\r\n        obj.__bar = bar   # <-- warning reported here\r\n        return obj\r\n\r\n    @property\r\n    def foo(self):\r\n        return self._foo\r\n\r\n    @property\r\n    def bar(self):\r\n        return self.__bar\r\n\r\n\r\n\r\ndef main():\r\n    instance = MyObj(1, 2)\r\n    print(instance.foo)\r\n    print(instance.bar)\r\n\r\n\r\nmain()\r\n```\r\n\r\n### Current behavior\r\n\r\nThis currently returns the following:\r\n\r\n```\r\n************* Module example\r\nW:  7, 8: Access to a protected member _foo of a client class (protected-access)\r\nW:  8, 8: Access to a protected member __bar of a client class (protected-access)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 8.67/10 (previous run: 7.69/10, +0.97)\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo warning should be reported.\r\n\r\nThis may be controversial, but I wonder if it would make sense to silence the warnings in this case. just like they are inside of `__init__`. While `__new__` is used really rarely, it does not strike me as *wrong* to access private/protected members in there unless I am missing something. Would that really be a bad practice?\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.8.1,\r\nastroid 1.6.0\r\nPython 3.5.2 (default, Nov 23 2017, 16:37:01)\r\n[GCC 5.4.0 20160609]\r\n```\r\n\r\nThis is also somewhat related to #1801 as I noticed this error with that enum, but it turns out that the warning is also emitted for normal objects."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2262,
                "title": "Refactor of MessageStore for multiple old message",
                "labels": [
                    "needs-review"
                ],
                "description": "Work in progress of the refactor for #2036 \r\n\r\nIn order to see what still need to be done."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1801,
                "title": "no-value-for-parameter when constructing an Enum",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nLint the following code:\r\n\r\n```python\r\n'''\r\nExample demonstrating a false-positive of the 'no-value-for-parameter' error\r\nin pylint.\r\n'''\r\n\r\nfrom enum import Enum\r\n\r\n\r\nclass EnumWithDoc(Enum):\r\n    '''\r\n    See https://docs.python.org/3/library/enum.html#using-a-custom-new\r\n    '''\r\n\r\n    def __new__(cls, value, doc):\r\n        obj = object.__new__(cls)\r\n        obj._value_ = value  # <-- False warning reported here\r\n        obj.doc = doc\r\n        return obj\r\n\r\n\r\nclass Example(EnumWithDoc):\r\n    '''\r\n    Example enum using the \"EnumWithDoc\" class.\r\n    '''\r\n\r\n    A = (1, 'The first value')\r\n    B = (2, 'The second value')\r\n\r\n\r\ndef main():\r\n    '''\r\n    Main method\r\n    '''\r\n\r\n    my_value = Example(1)  # <-- False error reported here!\r\n    print(repr(my_value))\r\n    print(my_value.doc)\r\n\r\n\r\nmain()\r\n```\r\n\r\n### Current behavior\r\n\r\nThe above code will return the following:\r\n\r\n    ************* Module example\r\n    W: 16, 8: Access to a protected member _value_ of a client class (protected-access)\r\n    E: 35,15: No value for argument 'doc' in constructor call (no-value-for-parameter)\r\n\r\n    ------------------------------------------------------------------\r\n    Your code has been rated at 6.00/10 (previous run: 6.00/10, +0.00)\r\n\r\nThis indicates two problems which should not be reported:\r\n\r\n* The warning about accessing the `_value_` attribute. When overriding `__new__`, setting this value is recommended [in the official docs](https://docs.python.org/3/library/enum.html#supported-dunder-names) ([2](https://docs.python.org/3/library/enum.html#using-a-custom-new)) and should not be reported as warning in pylint.\r\n* The error gives the impression that the code is broken, but it isn't. This is quite a big problem as the error is reported *everyehere* where an enum value is created from a value (using `EnumClass(value)`) if that enum class happens to override `__new__`. FWIW, one of our internal libraries uses an enum close to the one above causing all of our projects to be riddled with false reports of `no-value-for-parameter`. The only way to solve this is to disable this *almost* globally. The following note from the Python docs about using custom `__new__` in enums is also relevant:\r\n\r\n  > **Note:** The `__new__()` method, if defined, is used during creation of the Enum members; it is then replaced by Enum\u2019s `__new__()` which is used after class creation for lookup of existing members.\r\n\r\n### Expected behavior\r\n\r\nNo error or warning should be reported!\r\n\r\n### pylint --version output\r\n\r\n    pylint 1.8.1,\r\n    astroid 1.6.0\r\n    Python 3.5.2 (default, Nov 23 2017, 16:37:01)\r\n    [GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 519,
                "title": "Improve detection of unreachable code",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\n```\n#!python\n\ndef a():\n      try:\n              return\n      except:\n              return\n\n      raise Exception('a') # should warn here\n```\n\nOriginal ticket: http://www.logilab.org/ticket/8355\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/519\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 516,
                "title": "Split 'invalid module name` from C0103",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nHi, sometimes I have a script in a directory which generates an error like:\n\n```\n1: Invalid module name \"pre-commit\" (C0103)\n```\n\nI'd like to disable checking of the file name, but not disable checking of all other names. There's no way to add a #pylint comment to line 1 of the file (it's a shebang), so please make the module name check its own code that I can disable.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/516\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2258,
                "title": "pylint files gets imported when a file has the same name as one of pylint's files",
                "labels": [
                    "bug"
                ],
                "description": "An erroneous error occurs when a file is named \"config.py\".\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a structure as so:\r\n\r\n```\r\n> tree pylint-experiment/\r\npylint-experiment/\r\n\u2514\u2500\u2500 example\r\n    \u251c\u2500\u2500 config.py\r\n    \u2514\u2500\u2500 foo.py\r\n```\r\n\r\n```\r\n> cat pylint-experiment/example/foo.py\r\nimport config\r\n\r\nprint(config.VARIABLE)\r\n```\r\n\r\n```\r\n> cat pylint-experiment/example/config.py\r\nVARIABLE = 1\r\n```\r\n\r\n2. `pylint --errors-only pylint-experiment/`\r\n\r\n### Current behavior\r\n\r\n```\r\n************* Module some_dir.other\r\npylint-experiment/some_dir/other.py:3:6: E1101: Module 'config' has no 'VARIABLE' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect to see:\r\n\r\n```\r\n************* Module example.foo\r\npylint-experiment/example/foo.py:1:0: E0401: Unable to import 'config' (import-error)\r\n```\r\n\r\nThis is what happens if I rename `config` to `bar` and change `import config` to `import bar`.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.0.dev2\r\nastroid 2.0.0.dev4\r\nPython 3.7.0 (default, Jun 29 2018, 20:13:13) \r\n[Clang 9.1.0 (clang-902.0.39.2)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1800,
                "title": "EnumClassName = enum.Enum('EnumClassName', ...) should not be an invalid-name",
                "labels": [
                    "enhancement"
                ],
                "description": "pylint 1.8.1:\r\n```\r\n$ bin/pylint e.py\r\nC:  7, 0: Constant name \"MyThing\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\n```\r\ne.py:\r\n```python\r\n\"\"\"Testing enum.Enum top level name assignment.\"\"\"\r\n\r\nimport enum\r\n\r\nCONST = 13\r\n\r\nMyThing = enum.Enum(\"MyThing\", \"foo bar spam\")\r\n```\r\n\r\nThe functional API of the enum module is widely used in addition to its subclassing behavior.  People rightfully want to declare top level enum's using ClassName style names rather than CLASS_NAME regardless of if they are using a class statement or an assignment to the result of the functional API.  Lets make an exception for enum.Enum top level assignments and not cause an invalid-name error when it also matches the CapWords class name style.  Continue allowing all CAPS constant style for such assignments as many people have already done that to work around this warning. (awkward, but valid)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 511,
                "title": "undefined-variable when using class attribute in listcomp in decorator",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nWith this example code:\n\n```\n#!python\n\ndef dec(inp):\n    def inner(func):\n        print(inp)\n        return func\n    return inner\n\n\nclass Cls:\n\n    DATA = \"foo\"\n\n    @dec([x for x in DATA])\n    def fun(self):\n        pass\n```\n\nI get `E: 12,21: Undefined variable 'DATA' (undefined-variable)` even though the code is working fine.\n\npylint 1.4.3, \nastroid 1.3.6, common 0.63.2\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/511\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2249,
                "title": "Investigate why the spellchecking checks are slow",
                "labels": [
                    "topic-performance",
                    "task"
                ],
                "description": "https://github.com/PyCQA/astroid/issues/579#issuecomment-402068555 this comment mentioned that disabling the spellchecking checks improvement the runtime of pylint from half an hour to ~10 minutes, which suggests that something might be completely off with the spellchecking. We should investigate to see why is that, and if we can find that these are hurting the performance, we should either disable the spellchecking by default (as we do for the Py3k porting checks), or we should move them to an extension, so that they can be enabled explicitly by the user.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1797,
                "title": "Test failure due to locally installed astroid: first party import",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1.  clone github.com/pycqa/astroid\r\n2. cd astroid/\r\n3. pip install -e astroid\r\n4. cd to pylint src directory\r\n5.  pytest pylint/test/test_functional.py  -vv\r\n\r\n### Current behavior\r\n\r\nTest Failure\r\n```\r\nE         -  OutputLine(symbol='wrong-import-order', lineno=20, object='', msg='third party import \"import astroid\" should be placed before \"import unused_import\"', confidence='HIGH')]\r\nE         ?                                                                     ^^  ^                                                               ^^^ ^^^^^^^^^\r\nE         +  OutputLine(symbol='wrong-import-order', lineno=20, object='', msg='first party import \"import astroid\" should be placed before \"from .package import Class\"', confidence='HIGH')]\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo error.\r\n\r\nI'm not sure how to change this because I think we want to have specific messages\r\n\r\nThe \"partyness\" of astroid shouldn't matter\r\n\r\n### pylint --version output\r\n\r\nIs broken because of \r\n\r\n```\r\npylint/__pkginfo__.py\r\n34:    'astroid<2.0',\r\n```\r\n\r\npython -m pylint\r\n```\r\n__main__.py 2.0.0, \r\nastroid 2.0.0\r\nPython 3.6.3 (default, Oct  9 2017, 12:11:29) \r\n[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)]\r\n```\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 513,
                "title": "warn about no space after an except before a (",
                "labels": [
                    "checkers",
                    "enhancement"
                ],
                "description": "Originally reported by: **BitBucket: [gpshead](http://bitbucket.org/gpshead), GitHub: @gpshead?**\n\n---\n\nI've seen some code use this, but it is exceedingly rare from what I can tell:\n\n```\n#!python\n\n\"\"\"Test some style nits vs pylint.\"\"\"\n\nfrom __future__ import print_function\n\ntry:\n    pass\nexcept(IOError, KeyError) as error:\n    print(error)\n```\n\nIt'd be nice to tell users to always put a space between an except and any following ( in the case of a tuple of exceptions being specified.\n\nIn our internal code base I found around ~0.3% of except clauses with a tuple do this (tiny!).\n\nIn a bunch of open source code I've grepped over, pandas has one unittest (test_ujson.py) that repeats this pattern, numpy's fft/fftpack.py does it once. It really is not common.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/513\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 507,
                "title": "Module name reported inconsistently",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**\n\n---\n\nErrors in the same source file are shown in two seemingly different modules\n\n```\n$ cat mod/__init__.py\nABC  = \"abc\"\n$ pylint -r n mod/__init__.py \nNo config file found, using default configuration\n************* Module mod.__init__\nC:  1, 0: Exactly one space required before assignment\nABC  = \"abc\"\n     ^ (bad-whitespace)\n************* Module mod\nC:  1, 0: Missing module docstring (missing-docstring)\n```\n\nI believe `mod.__init__` should be used, as pylint operates on files. But I'm fine with `mod` as long as it used consistently and the output doesn't look like the errors were found in two different files.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/507\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2246,
                "title": "Add scanning for assignment expressions (PEP 572)",
                "labels": [
                    "python 3.8"
                ],
                "description": "Many developers have expressed opposition to this PEP, including a desire to ban this syntax from their projects. If there was a flag to scan for this syntax and register it as an error, this would facilitate them being able to do so.\r\n\r\nI would prefer it if that were a default option that they had to explicitly disable,\r\n\r\nIn addition, scanning for this at a top level should be enabled by default. The following, for instance, should always be an error regardless of the flag:\r\n\r\n```python\r\na = 3  # no error\r\nb := 4  # error, doesn't need to be at top level\r\nc = d := 5  # error, can be done better with chained assignment\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1787,
                "title": "Bad operand type for unary -: NoneType",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\nRun `pylint` on a file with this code:\r\n```\r\n\"\"\"x\"\"\"\r\na = None\r\nif a is None:\r\n    a = 1\r\nb = -a\r\n```\r\n\r\n### Current behavior\r\nGet error `bad operand type for unary -: NoneType` at line 5.\r\n\r\n### Expected behavior\r\nGet no errors, since `a` is always `== 1`.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.4,\r\nastroid 1.5.3\r\nPython 3.6.3 |Anaconda custom (64-bit)| (default, Nov  8 2017, 18:10:31)\r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 502,
                "title": "Using --jobs affects monkey patching detection",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**\n\n---\n\nfirst.py:\n\n```\nimport sys\nsys.foo = 0\n```\n\nsecond.py:\n\n```\nimport sys\nsys.foo\n```\n\n`pylint -E first.py second.py`\n\nNo output\n\n`pylint -E --jobs=2 first.py second.py`\n\n```\n************* Module second\nE:  2, 0: Module 'sys' has no 'foo' member (no-member)\n```\n\nI'm actually fine if pylint reports that error in every case, as long as there is no `import first` in second.py before `sys.foo` is used. The original code that triggered the error message is overengineered and needs fixing.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/502\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2239,
                "title": "False positive function-redefined for methods with the typing.overload decorator",
                "labels": [
                    "enhancement"
                ],
                "description": "`function-redefined` should ignore functions/methods with the `typing.overload` decorator since these function stubs are only used to give type information.\r\n\r\n[Example](https://docs.python.org/3/library/typing.html#typing.overload):\r\n\r\n```\r\nfrom typing import overload\r\n\r\n@overload # Ignore\r\ndef process(response: None) -> None:\r\n    ...\r\n@overload # Ignore\r\ndef process(response: int) -> Tuple[int, str]:\r\n    ...\r\n@overload # Ignore\r\ndef process(response: bytes) -> str:\r\n    ...\r\ndef process(response):\r\n    <actual implementation>\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1786,
                "title": "Automate the release process as much as possible",
                "labels": [
                    "contributor friendly",
                    "enhancement"
                ],
                "description": "It would be nice to keep PyPI releases and git tags in sync :)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 498,
                "title": "fail to find NameError in for loop expression_list",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [hacman](http://bitbucket.org/hacman), GitHub: @hacman?**\n\n---\n\nthe following code is not caught by pylint. obviously, x will be a NameError at runtime.\n\nfor x in x:\n    pass\n\nif the loop variable is different, then pylint properly catches a name error. e.g., the following is caught  by pylint (undefined-variable as expected):\n\nfor i in L:\n    pass\n\nI hope this report was helpful. Thanks for pylint! It makes my life so much easier.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/498\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2235,
                "title": "Authoritative overview-page for all messages",
                "labels": [
                    "documentation"
                ],
                "description": "Whenever I use pylint and encounter a message/code I have not seen before, I like to understand it's background/reasoning.\r\nTherefore I study its short description and if that is not enough, I look it up on a search engine of my choice and mostly find the following:\r\n* Discussions on stackoverflow about this message (if it makes sense at all, why its good/bad, personal opinions)\r\n* [Pylints feature page](http://pylint.pycqa.org/en/latest/technical_reference/features.html)\r\n* Github issues about this message (here)\r\n* Blogposts about similar or this issue\r\n* Description for some messages on http://pylint-messages.wikidot.com/all-messages\r\n\r\nScanning through all the above sources is quite some work and in most cases does not give me what I want exactly and not in a convenient way.\r\nThis is because:\r\n* Stackoverflow is too opinion-based and does not cover all messages\r\n* The Github issue on pylint for this message contains too much noise (i.e. discussion on technical implementation of this message)\r\n* Blogposts don't focus on exactly this message and tend to babble too much and is also very different on different messages, because its written by different people at different times (outdated!)\r\n* pylint-messages.wikidot.com is actually quite nice in terms of the description and structure, but lacks some/most of the messages, is sometimes also just the short-description from our source here and is (afaik) not directly managed by this community, which does not make it authoritive. In addition to that it's layout feels outdated.\r\n\r\nWhat I therefore suggest is to add one authoritive, official PyCQA/pylint [github-page](https://pages.github.com/) or a rst/markdown document that has elaborate descriptions/background for each message and is nicely formatted and up-to-date. Maybe even integrated with \"msgs\".\r\nSomething in the direction of [quantifiedcode](https://docs.quantifiedcode.com/python-anti-patterns/readability/comparison_to_true.html)\r\n\r\nThis would especially help Python beginners and people who want to understand these rules/suggestions more thoroughly, instead of just blindly following/accepting them.\r\n\r\nIf there is a consensus that something like this would be beneficial, I'd offer to start the draft.\r\n\r\nIf you know of anything that already exists and covers this, please tell."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1766,
                "title": "Pylint can't find type alias defined inside a class definition.",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nPylint can't find a type alias defined inside a class definition.  For example:\r\n\r\n```python\r\nimport typing\r\n\r\nclass MyClass:\r\n    Things = typing.Sequence[str]\r\n\r\n    def use_things(self, o: Things) -> None:\r\n        pass\r\n\r\n    def get_things(self) -> Things:\r\n        pass\r\n```\r\n\r\n### Current behavior\r\n\r\nPylint reports \"Things\" on line 9 as being an undefined variable.\r\n\r\n### Expected behavior\r\n\r\nNo warnings or errors for the above code.\r\n\r\n### pylint --version output\r\n\r\npylint 1.7.4,\r\nastroid 1.5.3\r\nPython 3.6.3 (default, Oct  4 2017, 06:09:15)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.37)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 492,
                "title": "Various no-member errors with pypeg2",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nLast one, I promise! (After this I reported every issue where I had a workaround for)\n\nWith this code (slightly adjusted example [from the docs](http://fdik.org/pyPEG/index.html#parsing)) using [pyPEG2](http://fdik.org/pyPEG/):\n\n```\n#!python\nfrom pypeg2 import Keyword, K, Enum, attr, optional, csl, maybe_some, name, Namespace, word, List, parse\n\nclass Type(Keyword):\n    grammar = Enum( K(\"int\"), K(\"long\") )\n\nclass Parameter:\n    grammar = attr(\"typing\", Type), name()\n\nclass Parameters(Namespace):\n    grammar = optional(csl(Parameter))\n\nclass Instruction(str):\n    grammar = word, \";\"\n\nblock = \"{\", maybe_some(Instruction), \"}\"\nclass Function(List):\n    grammar = attr(\"typing\", Type), name(), \\\n            \"(\", attr(\"parms\", Parameters), \")\", block\n\nf = parse(\"int f(int a, long b) { do_this; do_that; }\",\n        Function)\nprint(f.name)\nprint(f.typing)\nprint(f.parms[\"b\"].typing)\nprint(f[0])\nprint(f[1])\n```\n\nI get the following `no-member` errors:\n\n```\nE: 22, 6: Instance of 'list' has no 'name' member (no-member)\nE: 22, 6: Instance of 'List' has no 'name' member (no-member)\nE: 22, 6: Instance of 'SyntaxError' has no 'name' member (no-member)\nE: 23, 6: Instance of 'list' has no 'typing' member (no-member)\nE: 23, 6: Instance of 'List' has no 'typing' member (no-member)\nE: 23, 6: Instance of 'SyntaxError' has no 'typing' member (no-member)\nE: 24, 6: Instance of 'SyntaxError' has no 'parms' member (no-member)\nE: 24, 6: Instance of 'list' has no 'parms' member (no-member)\nE: 24, 6: Instance of 'List' has no 'parms' member (no-member)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/492\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2225,
                "title": "ungrouped-imports false positive in `try:` block",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nI'm intentionally separating the noisy `try` / `except` from the rest of the imports and I don't believe `pylint` should be flagging this as `ungrouped-imports`\r\n\r\n```python\r\nfrom yaml import safe_load\r\n\r\nimport mypkg\r\n\r\ntry:\r\n    from yaml.cyaml import CParser as Parser\r\nexcept ImportError:\r\n    from yaml.parser import Parser\r\n```\r\n\r\n(note that this style is chosen so import reorderers have an easier time managing where imports should go and to keep the \"sometimes\" code away from the \"always\" code)\r\n\r\n### Current behavior\r\n\r\n```\r\n$ pylint --disable=unused-import,import-error,missing-docstring,invalid-name --rcfile=/dev/null test.py  \r\nUsing config file /dev/null\r\n************* Module test\r\nC:  6, 4: Imports from package yaml are not grouped (ungrouped-imports)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 8.33/10 (previous run: 8.33/10, +0.00)\r\n```\r\n\r\n### Expected behavior\r\n\r\n(no error)\r\n\r\n### pylint --version output\r\n\r\n```\r\n$ pylint --version\r\nUsing config file /private/tmp/cfn-python-lint/pylintrc\r\npylint 1.9.2, \r\nastroid 1.6.5\r\nPython 3.6.5 (default, Mar 30 2018, 06:41:53) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```\r\n\r\n(originally from https://github.com/awslabs/cfn-python-lint/pull/171)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1730,
                "title": "not-callable reported when calling a callable returned by non-trivial property",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n\r\n```\r\n# /tmp/x.py\r\nclass ClsA(object):\r\n    pass\r\n\r\n\r\nclass ClsB(object):\r\n\r\n    def __init__(self):\r\n        self._some_cls = None\r\n\r\n    @property\r\n    def some_cls(self):\r\n        if self._some_cls:\r\n            return self._some_cls\r\n\r\n        self._some_cls = ClsA\r\n        return ClsA\r\n\r\n    def get_object(self):\r\n        return self.some_cls()\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\npylint -E /tmp/x.py\r\n************* Module x\r\nE: 19,15: self.some_cls is not callable (not-callable)\r\n```\r\n### Expected behavior\r\n\r\n```\r\npylint -E /tmp/x.py\r\n```\r\nNo output as the property actually returns a callable. Error should only be reported when there is a certainty, that the property can't return a callable.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.4,\r\nastroid 1.5.3\r\nPython 2.7.10 (default, Feb  7 2017, 00:08:15)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 491,
                "title": "pylint doesn't support pylint lexers/formatters",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nFor this code:\n\n```\n#!python\nimport pygments.lexers\nimport pygments.formatters\n\nfoo = pygments.lexers.HtmlLexer\nbar = pygments.formatters.HtmlFormatter\n```\n\npylint shows `Module 'pygments.lexers' has no 'HtmlLexer' member (no-member)` and `Module 'pygments.formatters' has no 'HtmlFormatter' member (no-member)`.\n\nIt seems pygments does [some magic](https://bitbucket.org/birkenfeld/pygments-main/src/f2c6c505c8a880d79614a5c5acaf49e9d3ad651c/pygments/lexers/__init__.py?at=default#cl-269) with `sys.modules` for its lexers/formatters, so maybe this is too complicated for pylint to handle. Just opening this if there's some existing easy mechanism in pylint for this.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/491\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2224,
                "title": "Enum: Instance of 'int' has no 'value' member (no-member)",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```python\r\n#! python3\r\n\r\nfrom enum import Enum\r\n\r\nclass BaseEnum(Enum):\r\n\r\n    def some_behavior(self):\r\n        pass\r\n\r\nclass MyEnum(BaseEnum):\r\n\r\n    FOO = 1\r\n    BAR = 2\r\n\r\nprint(MyEnum.FOO.value)\r\n```\r\nRun `pylint` on the above file.\r\n\r\n### Current behavior\r\n\r\n`E: 16, 0: Instance of 'int' has no 'value' member (no-member)`\r\n\r\n### Expected behavior\r\n\r\nNo error. \r\n\r\n(Subclassing an enumeration is allowed only if the enumeration does not define any members. )\r\n\r\n### pylint --version output\r\n\r\n```shell\r\nNo config file found, using default configuration\r\npylint 1.9.1,\r\nastroid 1.6.2\r\nPython 3.6.0 (default, Apr  2 2018, 14:01:47)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.1)]\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1727,
                "title": "used-before-assignment (E0601) not working",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Running pylint on this simple example does not detect that x can be used before assignment.  This is a very common programming mistake and should be caught.\r\n```\r\ndef Afunction(d):\r\n    if d:\r\n        x=1\r\n    return x\r\n```\r\n\r\n### Current behavior - Fails to detect x is used before assignment\r\n\r\n\r\n### Expected behavior: detect variable use inside logic branches. \r\n\r\n\r\n### pylint --version output: pylint-2 1.7.4\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 490,
                "title": "jinja templates are handled as str instances",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nGiven this code using [jinja2](http://jinja.pocoo.org/):\n\n```\n#!python\nimport jinja2\n\nclass Loader(jinja2.BaseLoader):\n\n    def get_source(self, _env, _template):\n        return 'Hello {{ var }}', None, True\n\nenv = jinja2.Environment(loader=Loader())\ntemplate = env.get_template('foo')\nprint(template.render(var='World'))\n```\n\npylint says: `Instance of 'str' has no 'render' member (no-member)`\n\nHowever, `get_template()` should always return a `jinja2.Template` according to the documentation, and also does here.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/490\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2223,
                "title": "Emit unused-variable for unused exceptions in exception handlers",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. cat sample.py\r\n```python\r\ntry:\r\n    a = 1/0\r\nexcept ArithmeticError:\r\n    pass\r\n```\r\n2. pylint sample.py\r\n### Current behavior\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n\r\n### Expected behavior\r\npylint should give a warning that only pass statement is in the except block, as the exception is simply consumed without doing meaningful operation on it.\r\nThis issue occurs occasionally, as I personally write skeleton try/except block with pass and later on add either logging or re raising exception code in except block after completing the main code in try block. However sometimes I just miss some except blocks and this message should highlight this issue.\r\n\r\nNote: Although this is sometimes expected behavior, but if not, then can lead to subtle bugs.\r\n```python\r\nfor key in some_seq:\r\n    try:\r\n        print(d[key])\r\n    except KeyError:\r\n        pass\r\n```\r\n### pylint --version output\r\n\r\npylint 2.0.0.dev1\r\nastroid 2.0.0.dev3\r\nPython 3.6.4 (default, Jan  7 2018, 15:53:53)\r\n[GCC 6.4.0]\r\n\r\nAnother similar issue but somewhat minor than above one is:\r\n\r\n### Steps to reproduce\r\n1. cat sample.py\r\n```python\r\ntry:\r\n    a = 1/0\r\nexcept ArithmeticError as e:\r\n    print('ArithmeticError occurred')\r\n```\r\n2. pylint sample.py\r\n### Current behavior\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n\r\n### Expected behavior\r\npylint should give a warning that variable 'e' is not used in the except block."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1694,
                "title": "decorator false positive: unsubscriptable-object, no-member, unsupported-membership-test, not-an-iterable, too-many-function-args",
                "labels": [
                    "enhancement",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nI use simple classproperty decorator:\r\n```python\r\nclass classproperty(classmethod):\r\n\r\n    def __init__(self, fget):\r\n        if isinstance(fget, (classmethod, staticmethod)):\r\n            self.fget = lambda cls: fget.__get__(None, cls)()\r\n        else:\r\n            self.fget = fget\r\n        self.cached = {}\r\n        super(classproperty, self).__init__(self.fget)\r\n\r\n    def __get__(self, instance, cls):\r\n        if cls in self.cached:\r\n            return self.cached[cls]\r\n        value = self.cached[cls] = self.fget(cls)\r\n        return value\r\n\r\n```\r\n\r\nExample of usages:\r\n```python\r\nfrom collections import OrderedDict\r\n\r\nfrom sqlalchemy.ext.declarative import declarative_base, declared_attr\r\nfrom sqlalchemy.inspection import inspect\r\n\r\nBase = declarative_base()\r\n\r\nclass Model(Base):\r\n    __abstract__ = True\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Model, self).__init__()\r\n        self.set_attrs(**kwargs)\r\n\r\n    def set_attrs(self, **attrs):\r\n        for attr_name, attr_value in attrs.items():\r\n            if attr_name in self.fields:\r\n                setattr(self, attr_name, attr_value)\r\n\r\n    def to_dict(self):\r\n        result = {}\r\n        for attr_name in self.fields:\r\n            attr_value = getattr(self, attr_name)\r\n            if attr_value is not None:\r\n                result[attr_name] = attr_value\r\n        return result\r\n\r\n    @declared_attr\r\n    def __tablename__(cls):\r\n        # pylint: disable=no-self-argument\r\n        return plural(decapitalize(cls.__name__))\r\n\r\n    @classproperty\r\n    def columns(cls):\r\n        columns = inspect(cls).mapper.column_attrs\r\n        columns = list(sorted(columns, key=lambda column: column.key))\r\n        return columns\r\n\r\n    @classproperty\r\n    def fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.columns])\r\n        return fields\r\n\r\n    @classproperty\r\n    def primary_key_columns(cls):\r\n        columns = list(inspect(cls).mapper.primary_key)\r\n        return columns\r\n\r\n    @classproperty\r\n    def primary_key_fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.primary_key_columns])\r\n        return fields\r\n\r\n```\r\n\r\n### Current behavior\r\nThere are a lot of false positive errors:\r\n\r\n```bash\r\n[E1135(unsupported-membership-test), Model.set_attrs] Value 'self.fields' doesn't support membership test\r\n[E1133(not-an-iterable), Model.to_dict] Non-iterable value self.fields is used in an iterating context\r\n[E1133(not-an-iterable), Model.fields] Non-iterable value cls.columns is used in an iterating context\r\n[E1133(not-an-iterable), Model.primary_key_fields] Non-iterable value cls.primary_key_columns is used in an iterating context\r\n````\r\n\r\n### Expected behavior\r\nIf I make interface class where declare expected value the errors are not raised:\r\n```python\r\n\r\nclass iface(object):\r\n    columns = ()\r\n    fields = {}\r\n    primary_key_columns = ()\r\n    primary_key_fields = {}\r\n\r\nclass Model(Base, iface):\r\n    # ...\r\n```\r\nExpected behavior: no false-positive errors\r\n\r\n### pylint --version output\r\npylint 1.7.4, \r\nastroid 1.5.3\r\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 487,
                "title": "configparser.get return value gets treated as object instead of string",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nSince pylint 1.4.2 and astroid 1.3.5, the following snippet:\n\n```\n#!python\nimport configparser\n\ncp = configparser.ConfigParser()\ncp['foo'] = {'bar': 'one,two,three'}\n\nprint(cp.get('foo', 'bar').split(','))\n```\n\ngives me `Instance of 'object' has no 'split' member (no-member)`. It worked fine with pylint 1.4.1 and astroid 1.3.4.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/487\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2222,
                "title": "Relative imports not properly parsed",
                "labels": [
                    "bug",
                    "minor"
                ],
                "description": "### Steps to reproduce\r\n1. `mkdir package`\r\n2. `echo > package/module.py`\r\n3. `echo \"from .module import *\" > package/__init__.py`\r\n4. `echo \"from package import *; print(module)\" > package/test.py`\r\n5. `pylint package --errors-only`\r\n\r\n### Current behavior\r\n```\r\nNo config file found, using default configuration\r\n************* Module package.test\r\nE:  1,29: Undefined variable 'module' (undefined-variable)\r\n```\r\n\r\n### Expected behavior\r\n`No config file found, using default configuration`\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.9.2, \r\nastroid 1.6.5\r\nPython 3.6.5 (default, Apr  4 2018, 15:01:18) \r\n[GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]\r\n```\r\n\r\nI think what's going on is that normally `package/module` would *not* be imported and give a name error, but because it's imported in `__init__`, it's part of the `package` namespace. This is edge behaviour and probably not something that should be depended on in production."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1682,
                "title": "Disable one rule for only one line: trailing pragma makes line too long",
                "labels": [
                    "question"
                ],
                "description": "Hi. I'm trying to ignore a pylint error for a single line and I don't know how it should be done.\r\n\r\nExample use case:\r\n\r\n```python\r\n        if self._wrapper_class is not None:\r\n            data = self._wrapper_class(data)\r\n            [...]\r\n```\r\n\r\nThe `data = ...` line triggers a `not-callable` error I would like to mask.\r\n\r\nI'm not sure how to do that.\r\n\r\nThis triggers a `line-too-long` error, unless I also disable `line-too-long` in the line, which makes it even longer (in my real-life use case, data is a longer word and the line is more than 80 characters):\r\n\r\n```python\r\n        if self._wrapper_class is not None:\r\n            data = self._wrapper_class(data)  # pylint: disable=not-callable\r\n            [...]\r\n```\r\n\r\nThis disables the warning for the whole `if` context:\r\n\r\n```python\r\n        if self._wrapper_class is not None:\r\n            # pylint: disable=not-callable\r\n            data = self._wrapper_class(data)\r\n            [...]\r\n```\r\n\r\nThis if functionally correct but a bit too verbose:\r\n\r\n```python\r\n        if self._wrapper_class is not None:\r\n            # pylint: disable=not-callable\r\n            data = self._wrapper_class(data)\r\n            # pylint: enable=not-callable\r\n            [...]\r\n```\r\n\r\nThis was discussed a while ago on [a mailing-list thread](http://python-projects.logilab.narkive.com/P3Cl687J/disabling-warning-for-one-long-line-only-potential-ppylint-bug).\r\n\r\nI guess this is bound to happen as long as the only way to disable a warning for a single line is to add a trailing pragma, especially since pylint supports disable by (long) name rather than (short) code.\r\n\r\nWouldn't it be handy to have some sort of ignore-for-next-statement pragma?\r\n\r\n```python\r\n        if self._wrapper_class is not None:\r\n            # pylint: disable-next=not-callable\r\n            data = self._wrapper_class(data)\r\n            [...]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 478,
                "title": "zmq no-member false positives even with extension loading enabled",
                "labels": [
                    "astroid brain",
                    "bug"
                ],
                "description": "Originally reported by: **Chris Rebert (BitBucket: [cvrebert](http://bitbucket.org/cvrebert), GitHub: @cvrebert?)**\n\n---\n\nTestcase file:\n\n```\n#!python\n\n# qux.py \nfrom __future__ import print_function\nimport zmq\n\nprint(zmq.POLLIN)\n```\n\nRelevant portion of my `pylint.rc`:\n\n```\n#!ini\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=yes\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=zmq,qux\n```\n\nHowever, pylint still doesn't seem to be loading zmq:\n\n```\n#!bash\n\n$ pip install pyzmq==14.5.0\n<succeeds>\n$ pylint --rcfile=pylint.rc -r n -f parseable qux.py \nWarning: option include-ids is deprecated and ignored.\nWarning: option symbols is deprecated and ignored.\n************* Module qux\nqux.py:1: [C0111(missing-docstring), ] Missing module docstring\nqux.py:4: [E1101(no-member), ] Module 'zmq' has no 'POLLIN' member\n$ python qux.py \n1\n$\n```\n\nI am using bleeding-edge pylint & astroid, pip-installed from the mercurial repos.\n\n```\n#!bash\n\n$ pylint --version\nNo config file found, using default configuration\npylint 1.4.1, \nastroid 1.3.4, common 0.63.2\nPython 2.7.9 (default, Feb 13 2015, 20:19:10) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)]\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/478\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2198,
                "title": "Pylint slow when run on script with pandas",
                "labels": [
                    "topic-performance",
                    "task"
                ],
                "description": "### Sample script\r\n```\r\n> cat hello.py                                                                                                                                               (hodgepodge) \r\n\"\"\"\r\nHello.\r\n\"\"\"\r\n\r\nimport pandas as pd\r\n\r\ndef hello():\r\n    \"\"\"\r\n    Hello.\r\n    \"\"\"\r\n\r\n    test_pdf = pd.DataFrame([[1, 2, 3]])\r\n```\r\n\r\n### Running pylint\r\n```\r\n> /usr/bin/time pylint hello.py                                                                                                                              \r\nNo config file found, using default configuration\r\n************* Module hello\r\nW: 12, 4: Unused variable 'test_pdf' (unused-variable)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 6.67/10 (previous run: 6.67/10, +0.00)\r\n\r\nCommand exited with non-zero status 4\r\n48.05user 0.15system 0:44.80elapsed 107%CPU (0avgtext+0avgdata 193132maxresident)k\r\n0inputs+8outputs (0major+72586minor)pagefaults 0swaps\r\n``` \r\n### pylint --version output\r\n\r\n> pylint --version                                                                                                                                           No config file found, using default configuration\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) \r\n[GCC 7.2.0]\r\n\r\nQ1. Is this expected behaviour?\r\nQ1a. If so is there a way to make pylint ignore pandas?\r\n\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1675,
                "title": "pylint prepend current package name to package with name space",
                "labels": [
                    "needs-triage"
                ],
                "description": "### Steps to reproduce\r\nHave `pkgb-ns/pkgb/__init__.py`:\r\n```py\r\n__import__('pkg_resources').declare_namespace(__name__)\r\nFOO=\"foo\"\r\n```\r\nImport it in another package `pkga/pkga/pylint_error.py`\r\n```py\r\nfrom pkgb import FOO # E:  1, 0: No name 'FOO' in module 'pkga.pkgb' (no-name-in-module)\r\nfrom pkgb import * # this line is OK\r\n```\r\n\r\nCall pylint with a plugin `pkga/pkga/astng_transform.py`\r\n```py\r\nimport MANAGER, scoped_nodes\r\n\r\ndef register(linter): # pylint: disable=unused-argument\r\n    # Normally the second argument'd do some kind of transformation on module\r\n    MANAGER.register_transform(scoped_nodes.Module, lambda module : None)\r\n```\r\n\r\n\r\nRun `pylint` on it using a plugin that contains a do-nothing transformation:\r\n```\r\n+ pylint --load-plugins=pkga.astng_transform --errors-only pkga/pkga\r\nNo config file found, using default configuration\r\n************* Module pkga.pylint_error\r\nE:  1, 0: No name 'FOO' in module 'pkga.pkgb' (no-name-in-module)\r\n```\r\n\r\nRun `pylint` without plugin, OK.\r\n```\r\n+ pylint --errors-only pkga/pkga\r\nNo config file found, using default configuration\r\n```\r\n\r\nI have a fairly complicated package in which `pylint` is exhibiting this issue.  ~Will provide link to repo where I have a minimal setup that produces this issue as soon as as I can set it up.~\r\n\r\nMinimal set up to reproduce:\r\nhttps://github.com/mlfz/issues/tree/master/pylint/1675\r\n\r\nI am running this issue after a recent pylinlt update from 1.5-something to 1.7.2.  So this could be due to any of the thing that I am no long doing correctly with the newer version (e.g. the module transform function in the plugin)\r\n\r\n### Current behavior\r\n`pylint` is yielding false positive `no-name-in-module`.\r\n\r\n### Expected behavior\r\nNo error.\r\n\r\n### pylint --version output\r\n$ pylint --version\r\npylint 1.7.2, \r\nastroid 1.5.3\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 476,
                "title": "pylint gives spurious warning with xml.etree.ElementTree",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Nick Jacobson (BitBucket: [nicksjacobson](http://bitbucket.org/nicksjacobson), GitHub: @nicksjacobson?)**\n\n---\n\nFor the following code:\n\n```\n#!python\n\nimport xml.etree.ElementTree as ElementTree\ntreeroot = ElementTree.parse(r\"C:\\build.xml\")\nduration = treeroot.find(\"duration\")\ntxt = duration.text\n```\n\nFor the last line, pylint shows a warning \"Instance of 'int' has no 'text' member (no-member)\".\n\nBut treeroot.find returns not an int but a <class 'xml.etree.ElementTree.Element'>, and my build.xml file contains the line:\n\n<duration>93327</duration>\n\nSo the code itself works fine. pylint should not be giving a warning in this case.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/476\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2191,
                "title": "incorrect type for elements in a list",
                "labels": [
                    "topic-inference",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\npylint the following\r\n```\r\nl = [None]\r\nl[0] = {'abc': 5}\r\na = l[0]\r\nif 'abc' in a: #this is the line that pylint complains about\r\n    print(1)\r\n```\r\n\r\n### Current behavior\r\nE:  4,12: Value 'a' doesn't support membership test (unsupported-membership-test)\r\n\r\n### Expected behavior\r\nNo error\r\npylint should undestand that the type has changed to dict (or at least understand that it no longer can guess the type)\r\n\r\n### Note:\r\nadding type annotation to the first line like this:\r\n`l: List[Optional[dict]] = [None]`\r\ndoesn't fix it\r\n\r\n### pylint --version output\r\nNo config file found, using default configuration\r\npylint 1.9.2,\r\nastroid 1.6.5\r\nPython 3.6.5 |Anaconda custom (64-bit)| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1667,
                "title": "pylint3 ImportError when using PEP 420 namespaces",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. git clone http://forge.softwareheritage.org/source/swh-core.git\r\n2. export PYTHONPATH=$(pwd)/swh-core\r\n3. pylint3 swh.core\r\n\r\n### Current behavior\r\n\r\n`ImportError: Unable to find module for /tmp/swh-core/swh/core/api.py in /tmp,`\r\n\r\n(or equivalent)\r\n\r\n### Expected behavior\r\n\r\nShould be able to walk the module and pylint it.\r\nNote that both \"import swh.core\" and manually pylinting the specific module that pylint claims is not loadable (`pylint3 swh.core.api`) work just fine.\r\n\r\nI've given more details about this issue on the code-quality at https://mail.python.org/pipermail/code-quality/2017-September/000937.html (no answer yet at the time of filing this).\r\n\r\nI've seen there are a number of PEP 420 related issues, but as far as I can tell they are either supposed to be already fixed in the version of pylint I'm using, or the fail in different ways (e.g., with a proper \"cannot load module\" message instead of a runaway ImportError exception like in my case).\r\n\r\n### pylint --version output\r\n\r\npylint3 1.7.2, \r\nastroid 1.5.3\r\nPython 3.5.4 (default, Aug 12 2017, 14:08:14) \r\n[GCC 7.1.0]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 458,
                "title": "unable to locally disable warning in finally clause",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Mike Frysinger (BitBucket: [vapier](http://bitbucket.org/vapier), GitHub: @vapier?)**\n\n---\n\nsimple code:\n\n```\n#!python\nimport os\ntry:\n    pass\nfinally:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n\nwhen running pylint (1.4.1) against this, it insists on warning:\n\n```\nW:  9, 4: Access to a protected member _exit of a client class (protected-access)\n```\n\nother positions that do work:\n- changing the \"finally:\" clause to \"except:\"\n\n```\nimport os\ntry:\n    pass\nexcept:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n- moving it up a scope level to before the \"try:\" statement\n\n```\nimport os\n# pylint: disable=protected-access\ntry:\n    pass\nexcept:\n    os._exit(1)\n```\n- making it inline\n\n```\nimport os\ntry:\n    pass\nexcept:\n    os._exit(1)  # pylint: disable=protected-access\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/458\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2190,
                "title": "Add option for running pylint without __init__ file",
                "labels": [],
                "description": "Fix for #352 \r\nI have added option for running the Lint-all option. \r\nAs I have mentioned in my comment [here](https://github.com/PyCQA/pylint/issues/352#issuecomment-397196973) we'll have to pass the lint-all option to `expand_module` function in [/pylint/utils.py L#1075](https://github.com/PyCQA/pylint/blob/master/pylint/utils.py#L1075)\r\nAlso See [Comment](https://github.com/PyCQA/pylint/issues/352#issuecomment-397198813) by @PCManticore \r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1630,
                "title": "unused-import for objects used in class keyword arguments",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nLint the following code:\r\n```\r\nfrom abc import ABCMeta\r\n\r\nclass foo(meta=ABCMeta):\r\n    pass\r\n```\r\n\r\n### Current behavior\r\n```\r\nW:  1, 0: Unused ABCMeta imported from abc (unused-import)\r\n```\r\n\r\n\r\n### Expected behavior\r\nNo `unused-import` error.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.2, \r\nastroid 1.5.3\r\nPython 3.6.2 (default, Jul 20 2017, 03:52:27) \r\n[GCC 7.1.1 20170630]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 455,
                "title": "configparser/lru_cache: Non-string treated as string.",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**\n\n---\n\nWith this snippet:\n\n```\n#!python\n\nimport configparser\nimport functools\n\n\nclass Config:\n\n    def __init__(self):\n        self.sections = {'foo': {'bar': 42}}\n        self._interpolation = configparser.ExtendedInterpolation()\n\n    @functools.lru_cache()\n    def get(self, sectname, optname):\n        val = self.sections[sectname][optname]\n        newval = self._interpolation.before_get(self, sectname, optname,\n                                                str(val), {})\n        return newval\n\n\ncfg = Config()\nprint(cfg.get('foo', 'bar').real)\n```\n\npylint assumes `cfg.get()` will return a string and says:\n\n```\nE: 20,28: Instance of 'str' has no 'real' member (no-member)\n```\n\nThis goes away if I remove the `@functools.lru_cache` or the interpolation of configparser.\n\nThis wasn't the case with pylint 1.3.1 and astroid from 1.2.1.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/455\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2188,
                "title": "InconsistentMroError: Cannot create a consistent method resolution order for MROs",
                "labels": [
                    "high-effort",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```shell\r\nmkdir test\r\ncd test\r\nvirtualenv pyt\r\npyt/bin/pip install setuptools==26.1.1 zc.buildout==1.7.1\r\n# Add files buildout.cfg and test.py\r\npyt/bin/buildout\r\n./bin/pylint test.py\r\n```\r\nWhere:\r\nbuildout.cfg\r\n```\r\n[buildout]\r\nindex = https://pypi.python.org/simple/\r\nextends = https://dist.plone.org/release/4-latest/versions.cfg\r\nparts = test\r\nversions = versions\r\n\r\n[test]\r\nrecipe = zc.recipe.egg\r\neggs =\r\n    plone.dexterity\r\n    Products.CMFPlone\r\n    pylint\r\n\r\n[versions]\r\npylint = 1.9.3\r\n```\r\n\r\ntest.py\r\n```python\r\n# -*- coding: utf-8 -*-\r\nfrom plone.dexterity.content import Container\r\n\r\nclass MyContainer(Container):\r\n    \r\n    var = 1\r\n\r\n    def set_var(self, value):\r\n        self.var = value\r\n```\r\n### Current behavior\r\nInconsistentMroError: Cannot create a consistent method resolution order for MROs:\r\n```shell\r\nTraceback (most recent call last):\r\n  File \"/home/user/cache-python/eggs/pylint-1.9.3-py2.7.egg/pylint/lint.py\", line 948, in get_ast\r\n    return MANAGER.ast_from_file(filepath, modname, source=True)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/manager.py\", line 80, in ast_from_file\r\n    return AstroidBuilder(self).file_build(filepath, modname)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/builder.py\", line 153, in file_build\r\n    return self._post_build(module, encoding)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/builder.py\", line 173, in _post_build\r\n    self.delayed_assattr(delayed)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/builder.py\", line 239, in delayed_assattr\r\n    if not _can_assign_attr(inferred, node.attrname):\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/builder.py\", line 82, in _can_assign_attr\r\n    slots = node.slots()\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/decorators.py\", line 28, in cached\r\n    cache[func] = result = func(*args, **kwargs)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2591, in slots\r\n    slots = list(grouped_slots())\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2576, in grouped_slots\r\n    for cls in self.mro()[:-1]:\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2671, in mro\r\n    return self._compute_mro(context=context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2642, in _compute_mro\r\n    mro = base._compute_mro(context=context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2642, in _compute_mro\r\n    mro = base._compute_mro(context=context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2642, in _compute_mro\r\n    mro = base._compute_mro(context=context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2642, in _compute_mro\r\n    mro = base._compute_mro(context=context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 2655, in _compute_mro\r\n    return _c3_merge(unmerged_mro, self, context)\r\n  File \"/home/user/cache-python/eggs/astroid-1.6.5-py2.7.egg/astroid/scoped_nodes.py\", line 65, in _c3_merge\r\n    mros=sequences, cls=cls, context=context)\r\nInconsistentMroError: Cannot create a consistent method resolution order for MROs (Tabs, Collection, Resource, LockableItem, EtagSupport, Traversable), (Element, Node), (Collection, Resource, LockableItem, EtagSupport), (Item, Resource, LockableItem, EtagSupport, CopySource, Tabs, Traversable, Element, Node, Owned, Owned, UndoSupport), (FindSupport), (Collection, Item, FindSupport) of class <ClassDef.Folder l.73 at 0x7fa1a07fafd0>.\r\n************* Module test\r\nF:  1, 0: <class 'astroid.exceptions.InconsistentMroError'>: Cannot create a consistent method resolution order for MROs (Tabs, Collection, Resource, LockableItem, EtagSupport, Traversable), (Element, Node), (Collection, Resource, LockableItem, EtagSupport), (Item, Resource, LockableItem, EtagSupport, CopySource, Tabs, Traversable, Element, Node, Owned, Owned, UndoSupport), (FindSupport), (Collection, Item, FindSupport) of class <ClassDef.Folder l.73 at 0x7fa1a07fafd0>. (astroid-error)\r\n```\r\n\r\n### Expected behavior\r\nThat the pylint worked and indicated some errors in the file.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.9.3, \r\nastroid 1.6.5\r\nPython 2.7.14 (default, Nov 13 2017, 14:36:40) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1627,
                "title": "__getitem__ is not allowed for functions nor methods",
                "labels": [
                    "enhancement"
                ],
                "description": "I have a library that provides \\_\\_getitem\\_\\_ interface for some methods, therefore user code may call  a method with index, for example:\r\nsome_obj.some_method\\[1\\]\\(\\)\r\n\r\nExample code which reproduces this:\r\n```\r\ndef getitem_provider(wrapped):\r\n    class Wrapper(object):\r\n        def __getitem__(self, index):\r\n            print 'index', index\r\n            return wrapped\r\n    return Wrapper()\r\n\r\n\r\n@getitem_provider\r\ndef foo():\r\n    pass\r\n\r\nfoo[1]()\r\n```\r\n\r\n\r\n\r\n### Current behavior\r\nError unsubscriptable-object is reported by Pylint for line with ```foo[1]()``` even if the code is working fine.\r\n\r\n### Expected behavior\r\nI would expect that Pylint correctly checks if \\_\\_getitem\\_\\_ is available for functions/methods or there is a selective suppressor that allows disabling unsubscriptable-object error for specific modules or classes.\r\n\r\n### pylint --version output\r\nNo config file found, using default configuration\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 442,
                "title": "Missing W0621 (Redefining name from outer scope) when hiding nonlocal variables",
                "labels": [
                    "checkers",
                    "bug"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nThe W0621 warning is raised correctly when a function-local variable is hiding a module level variable. but will not report when a function-local variable is hiding one from an enclosing function scope (i.e. when a nonlocal declaration is missing). \n\nAn example script is attached, the output is as follows:\n\n```\n$ pylint --reports=n -d mixed-indentation,missing-docstring,invalid-name test.py\nNo config file found, using default configuration\n************* Module test\nW:  6, 1: Redefining name 'demovar1' from outer scope (line 4) (redefined-outer-name)\nW:  8, 2: Redefining name 'demovar1' from outer scope (line 4) (redefined-outer-name)\n```\n\nThe warnings on lines 6 and 8 are highlighting the hiding of the demovar1 variable on line 4, but no warning is raised when demovar2 (declared line 21) is hidden on line 23 through the missing nonlocal statement (correct version on lines 35-43)\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/442\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2182,
                "title": "Pylint 1.9.2 reports errors when the working directory has a dot \".\" in its name",
                "labels": [
                    "needs-reproduction",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Create the following project tree:\r\n![image](https://user-images.githubusercontent.com/15614466/41296398-e486bee4-6e2a-11e8-9b7c-a1fb3c137601.png)\r\n\r\nPS: The working directory here is MyProject-V1.1  (<=  With a dot \".\" in the name)\r\n\r\n2. Content of the files.\r\n\r\n**File __init__.py in the main directory:**\r\n```\r\n\"\"\"\r\nPackage that include main package for My Project\r\n\"\"\"\r\n__all__ = [\"myproject\"]\r\n```\r\n\r\n**File __init__.py in the \"myproject\" directory:**\r\n```\r\n\"\"\"\r\nPackage with module\r\n\"\"\"\r\n# pylint: disable=wildcard-import\r\nfrom .my_module import *\r\n__all__ = [\"my_module\"]\r\n```\r\n\r\n**my_module.py:**\r\n```\r\n# -*- coding: utf-8 -*-\r\n\"\"\"\r\nMy Main Module\r\n\"\"\"\r\ndef main():\r\n    \"\"\"\r\n    Main function\r\n    \"\"\"\r\n\r\n    print(\"Hello World\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n### Current behavior\r\nWhen we execute pylint on myproject folder, we got pylint error:\r\n\r\n![image](https://user-images.githubusercontent.com/15614466/41296829-c856fa3a-6e2b-11e8-8ad9-cf45a00f6621.png)\r\n\r\nIf we rename the main directory (MyProject-V1.1) to MyProject-V1 (without dot \".\"), pylint reports no error:\r\n\r\n![image](https://user-images.githubusercontent.com/15614466/41296947-10d69d60-6e2c-11e8-847e-7a2363793bc2.png)\r\n\r\n### Expected behavior\r\nShould always reports no error if the main directory has a dot \".\" or not in its name \r\n\r\n### pylint --version output\r\n![image](https://user-images.githubusercontent.com/15614466/41296743-9497f474-6e2b-11e8-8401-c5ea2431202b.png)\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1606,
                "title": "Spurious `no-name-in-module` with `future.builtins.disabled` on Python 3 with pylint 1.7.0+",
                "labels": [
                    "bug"
                ],
                "description": "Test file:\r\n\r\n```py\r\n\"\"\"\r\ntest_disabled_import.py\r\n\"\"\"\r\n\r\nfrom future.builtins.disabled import *  # pylint: disable=redefined-builtin,unused-wildcard-import,wildcard-import\r\n```\r\n\r\nPython 2 works as expected:\r\n\r\n```\r\n$ python -c 'from future.builtins.disabled import * ; import pprint ; pprint.pprint(dir())'\r\n['StandardError',\r\n '__builtins__',\r\n '__doc__',\r\n '__name__',\r\n '__package__',\r\n 'apply',\r\n 'chr',\r\n 'cmp',\r\n 'coerce',\r\n 'execfile',\r\n 'file',\r\n 'input',\r\n 'long',\r\n 'pprint',\r\n 'raw_input',\r\n 'reduce',\r\n 'reload',\r\n 'unicode',\r\n 'xrange']\r\n$ pylint --version\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 12:39:47)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n$ pylint --rcfile=/dev/null test_disabled_import.py\r\n\r\n------------------------------------\r\nYour code has been rated at 10.00/10\r\n\r\n```\r\n\r\nPython 3 gets confused:\r\n\r\n```\r\n$ python -c 'from future.builtins.disabled import * ; import pprint ; pprint.pprint(dir())'\r\n['__annotations__',\r\n '__builtins__',\r\n '__doc__',\r\n '__loader__',\r\n '__name__',\r\n '__package__',\r\n '__spec__',\r\n 'pprint']\r\n$ pylint --version\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n$ pylint --rcfile=/dev/null test_disabled_import.py\r\n************* Module test_disabled_import\r\nE:  5, 0: No name 'disabled' in module 'dict' (no-name-in-module)\r\n\r\n----------------------------------------------------------------------\r\nYour code has been rated at -15.00/10 (previous run: 10.00/10, -25.00)\r\n\r\n```\r\n\r\nPossibly related to #1536?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 436,
                "title": "False positive for not-callable accessing default_factory in defaultdict subclass",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **George Leslie-Waksman (BitBucket: [gslw](http://bitbucket.org/gslw))**\n\n---\n\nIn attempting to subclass collections.defaultdict so as to accept more complex factory functions, I ran into an issue with pylint. The attribute self.default_factory is marked as not-callable in spite of the fact that that the collections.defaultdict constructor guarantees it to be callable.\n\nA minimal snippet to reproduce the issue is:\n\n```\n#!python\n\nclass KeyedFactoryDefaultDict(collections.defaultdict):\n    \"\"\"Modified defaultdict that passes the key to default_factory calls.\"\"\"\n\n    def __missing__(self, key):\n        if self.default_factory is None:\n            raise KeyError(key)\n        value = self.default_factory(key)\n        self[key] = value\n        return value\n\n```\n\nI have also attached a file that shows the error when run with pylint 1.1.0 and exercises the code to show that it works correctly.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/436\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2180,
                "title": "Relative import 'six.moves.urllib.parse', should be 'six.moves' (relative-import)",
                "labels": [
                    "bug",
                    "python 2"
                ],
                "description": "### Steps to reproduce\r\n1. create a virtualenv\r\n2. install `six` and `pylint`\r\n3. create a `wtf.py` with one line of code:\r\n\r\n```python\r\nfrom six.moves.urllib.parse import urljoin\r\n```\r\n4. run `pylint wtf.py`\r\n\r\n### Current behavior\r\n\r\n```\r\n************* Module wtf\r\n...\r\nW:  1, 0: Relative import 'six.moves.urllib.parse', should be 'six.moves' (relative-import)\r\n...\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo relative-import error\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 2.7.14 (default, Sep 23 2017, 22:06:14) \r\n[GCC 7.2.0]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1603,
                "title": "Invalid undefined-variable error for metaclass value in Python 3.5",
                "labels": [
                    "needs-reproduction"
                ],
                "description": "### Steps to reproduce\r\n1. Create two files in a module. `foo.py`:\r\n\r\n```python\r\ndef fun():\r\n    pass\r\n\r\nMetaclass = fun()\r\n```\r\n\r\n`test.py`:\r\n\r\n```python\r\nfrom . import foo\r\n\r\n\r\nclass Foo(metaclass=foo.Metaclass):\r\n    pass\r\n```\r\n\r\n2. Run pylint on `test.py`.\r\n\r\n### Current behavior\r\n\r\nTwo relevant errors are returned:\r\n\r\n```\r\nE:  4, 0: Undefined variable 'foo.Metaclass' (undefined-variable)\r\nW:  1, 0: Unused import foo (unused-import)\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo error is returned about undefined variable `foo.Metaclass` or unused import.\r\n\r\n### pylint --version output\r\n\r\n```\r\nNo config file found, using default configuration\r\npylint 1.7.2, \r\nastroid 1.5.3\r\nPython 3.5.2 (default, Oct 11 2016, 05:00:16) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 414,
                "title": "False positive for E0202 (method-hidden)",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Anonymous**\n\n---\n\nWith this code:\n\n```\n#!python\n\nimport json\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        json.JSONEncoder.default(self, o)\n\n```\n\nI have the following pylint output:\n\n```\n#!bash\n\nC:\\Documents\\Projects\\Test>pylint --disable=C0111,R0903 --msg-template=\"{msg_id}:{line:3d},{column}: {obj}: {msg} ({symbol})\" --report=n example.py\nNo config file found, using default configuration\n************* Module example\nE0202:  5,4: MyEncoder.default: An attribute defined in json.encoder line 152 hides this method (method-hidden)\n\n```\n\nVersion:\n\n```\n#!bash\n\nC:\\Documents\\Projects\\Test>pylint --version\nNo config file found, using default configuration\npylint 1.4.0,\nastroid 1.3.2, common 0.63.2\nPython 3.4.2 (v3.4.2:ab2c023a9432, Oct  6 2014, 22:16:31) [MSC v.1600 64 bit (AMD64)]\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/414\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2175,
                "title": "Bug: wrong-import-order",
                "labels": [
                    "bug"
                ],
                "description": "When I run Pylint against itself locally, I always see this message:\r\n\r\n```\r\npylint/checkers/imports.py:38:0: C0411: third party import \"import isort\" should be placed before \"import astroid\" (wrong-import-order)\r\n```\r\n\r\nWhy doesn't this trigger in CI? Maybe there's some ambiguity as to what qualifies as \"third party\". Running it locally I use `export PYTHONPATH=$PYTHONPATH:~/pylint:~/astroid`, and I guess other dependencies come through `pip`.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1595,
                "title": "incorrect line number and column for expressions in f-strings",
                "labels": [
                    "needs-reproduction",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. Create the following python code.\r\n```\r\na = 1\r\ns = f'hello = {  c[0]}'\r\n```\r\n2. Run `pylint -E`\r\n```\r\nE:  1, 3: Undefined variable 'c' (undefined-variable)\r\n```\r\n\r\n### Current behavior\r\nThe reported line number and column seem to be in reference to the braces in the f-string. Notice that there are two spaces before the reference to the nonexistent `c`, thus column 3 is reported.\r\n\r\n### Expected behavior\r\nI want the line number and column within the file. It's difficult to find the offending code otherwise.\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 3.6.1 | packaged by conda-forge | (default, May 23 2017, 14:31:56)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 409,
                "title": "attribute-defined-outside-init warning wrongly triggered when using properties",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **James Nande (BitBucket: [jnande](http://bitbucket.org/jnande))**\n\n---\n\nHi,\n\nPylint seems unable to detect Python properties properly. For instance, an attribute-defined-outside-init is triggered on the last line of the following class declaration :\n\n```\n#!python\nclass Mine:\n    def __init__(self, x):\n        self.x = x\n\n    @property\n    def x(self):\n        return self.__x\n\n    @x.setter\n    def x(self, x):\n        self.__x = x\n\n```\n\nBesides using a disable-msg comment, the only way I've found to circumvent this is to put a spurious self.__x = None before self.x = x.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/409\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2163,
                "title": "add annotations in pylint/checkers.",
                "labels": [
                    "work in progress"
                ],
                "description": "add mypy in tox.ini for only pylint/checkers.\r\n\r\n### Fixes / new features\r\n- #2079 \r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1587,
                "title": "Rest/sphinx filter when spellchecking comments",
                "labels": [
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. Have a comment like:\r\n```\r\n# Should we use ``len()`` or ``length()``?\r\n```\r\n2. Enable spell-checking of comments by installing `pyenchant` and choosing en_US as the language\r\n3. Run pylint.\r\n\r\n### Current behavior\r\n\r\nI get the error:\r\n\r\n```\r\nDid you mean: ''Len' or 'en' or 'glen' or 'Olen''? (wrong-spelling-in-comment)\r\n```\r\n\r\n### Expected behavior\r\n\r\nI do not get any error.\r\n\r\nI think spellchecking should remove rest/sphinx syntax before running spellchecking. Probably a filter like it is currently done for links and wiki syntax should be added. See https://github.com/rfk/pyenchant/issues/113.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 1.7.2, \r\nastroid 1.5.3\r\nPython 3.5.2 (default, Oct 11 2016, 05:00:16) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 400,
                "title": "Pylint assumes an incorrect member type ('int')",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Paul Smith (BitBucket: [pdsmith](http://bitbucket.org/pdsmith), GitHub: @pdsmith?)**\n\n---\n\nI'm updating from an old pylint 1.1.0 to pylint 1.4.0 (I'm using Python 2.7.8).  In the new version I'm getting an incorrect error like this:\n\nE:123,10: Instance of 'int' has no 'get_domain' member (no-member)\n\neven though the instance does have a method of that name.  It seems that the way my code assigns a value to this member (in a separate thread, asynchronously based on some XML content sent over a socket) can't be tracked by pylint and where the previous version would ignore the issue the new one appears to assume a type of 'int' and fails.  Even if I invoked a garbage method the old pylint never complained: the new pylint complains for all methods, real or garbage.\n\nI've attached a repro case.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/400\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2156,
                "title": "Investigate if there is anything to learn from pytype",
                "labels": [
                    "task"
                ],
                "description": "https://github.com/google/pytype/blob/master/docs/errors.md Seems to have a bunch of errors similar to those from pylint. Let's see if we can learn anything from this tool (architectural decisions, new checks, etc.)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1581,
                "title": "unused-argument, pointless-statement, and function-redefined with recommended use of typing.overload",
                "labels": [
                    "enhancement"
                ],
                "description": "### Code to reproduce\r\n```\r\n# pylint: disable=missing-docstring\r\n\r\nimport typing\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: str) -> str:\r\n    \"\"\"Return arg, concatenated with itself.\"\"\"\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: int) -> int:\r\n    \"\"\"Return twice arg.\"\"\"\r\n\r\n\r\ndef double_with_docstring(arg):\r\n    \"\"\"Return 2 * arg.\"\"\"\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: str) -> str:\r\n    ...\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: int) -> int:\r\n    ...\r\n\r\n\r\ndef double_with_ellipsis(arg):\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: str) -> str:\r\n    pass\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: int) -> int:\r\n    pass\r\n\r\n\r\ndef double_with_pass(arg):\r\n    return 2 * arg\r\n```\r\n\r\n### Current behavior\r\n```\r\nW:  7,26: Unused argument 'arg' (unused-argument)\r\nE: 12, 0: function already defined line 7 (function-redefined)\r\nW: 12,26: Unused argument 'arg' (unused-argument)\r\nE: 16, 0: function already defined line 7 (function-redefined)\r\nW: 23, 4: Statement seems to have no effect (pointless-statement)\r\nW: 22,25: Unused argument 'arg' (unused-argument)\r\nE: 27, 0: function already defined line 22 (function-redefined)\r\nW: 28, 4: Statement seems to have no effect (pointless-statement)\r\nW: 27,25: Unused argument 'arg' (unused-argument)\r\nE: 31, 0: function already defined line 22 (function-redefined)\r\nW: 36,21: Unused argument 'arg' (unused-argument)\r\nE: 41, 0: function already defined line 36 (function-redefined)\r\nW: 41,21: Unused argument 'arg' (unused-argument)\r\nE: 45, 0: function already defined line 36 (function-redefined)\r\n```\r\n\r\n\r\n### Expected behavior\r\nThe first form, which uses docstrings (sadly only visible in the code) to describe the specific overload, should be equivalent to the version with pass, and is included for completeness.\r\n\r\nThe [mypy documentation](http://mypy.readthedocs.io/en/latest/function_overloading.html) recommends using a `pass` statement in the body of overloads, while the [typing module documentation](https://docs.python.org/3/library/typing.html#typing.overload) uses `...`.\r\n\r\nIn either case, it seems to me that the expected behavior/context of a function decorated with `typing.overload` should be that it returns None and has no side effects, and it should later be overridden.\r\n\r\nIf possible, it may be worth including a message for uses of an overloaded function before it is overridden, because that will error at runtime.\r\n\r\nThings I'm not sure about: Are full annotations required on each definition? Should there be a message for only one overloaded version? The mypy documentation annotates the actual implementation (with unions of all the relevant types), the Python documentation does not, and both appear acceptable to mypy from the testing that led me to this issue; should pylint care?\r\n\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 3.6.2 (default, Jul 17 2017, 16:44:45)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 392,
                "title": "Type inference failure",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Thanassis Tsiodras (BitBucket: [ttsiodras](http://bitbucket.org/ttsiodras), GitHub: @ttsiodras?)**\n\n---\n\nDisappointed by typos in my code that trigger errors at runtime (related to sqlalchemy reflected types), I decided to check whether I can do something better on my own, using pylint to limit the damage. \n\nThe beginning was very promising:\n\n```\n==> db.py <==\nclass Users(object):\n    __slots__ = ['name', '_name']\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, value):\n        self._name = value\n\n    name = property(get_name, set_name, None, \"The name property\")\n\n    @staticmethod\n    def findByName(unused_name):\n        return Users(\"test user\")\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    user = Users.findByName(\"foo\")\n    user.namea = \"typo in the field name\"\n    print user.name\n    print user._name\n\ntest()\n```\n\nThis code mirrors a basic skeleton of the kind of code my code generator would create from an existing DB schema - in this case, the class Users mirrors a table that has a 'name' column. A `findByName` function would also search the DB (via SQL) and return instances of \"Users\". For this first test, it just returns one dummy instance of the class `Users`.\n\nAnd ideed, pylint caught the typo inside test()  (assigning to a non-existing field): \n\n```\nE:  6, 4: Assigning to attribute 'namea' not defined in class slots (assigning-non-slot)\n```\n\nSo moving on from a simple test, I changed the implementation of findByName to mirror the actual loop that would exist in its place, when reading output from a real SQL query:\n\n```\n==> db.py <==\nclass Users(object):\n    ....    \n    @staticmethod\n    def findByName(unused_name):\n        results = []\n        for unused in xrange(10):\n            results.append(Users(\"test user\"))\n        return results\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    for user in Users.findByName(\"foo\"):\n        user.namea = 1\n        print user.name\n        print user._name\n\ntest()\n```\n\nPylint now fails to see the same error. It appears that the line \"results = []\" tells pylint that this is a list of \"unknown type\", and all checks go out the window after it. The fact that the list is appended with instances of Users doesn't seem to matter.\n\nThe same happens if I don't use a list, and instead just yield the instances back:\n\n```\n@staticmethod\ndef findByName(unused_name):\n    for unused in xrange(10):\n        yield Users(\"test user\")\n```\n\nIn the case of using a list, I will concede that in theory, a list can contain many types.\nA single yield point however, can't - this looks like a bug to me.\n\nSo, to conclude - Is there a way I can tell pylint that the findByName function returns a list of Users?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/392\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2155,
                "title": "Non-returning default singledispatch function flagged as an error",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nWhen using `functools.singledispatch` to delegate by type and where the default behavior (the function decorated with `@singledispatch`) for unsupported types is to raise an error, Pylint thinks it's guaranteed to fail.\r\n\r\n```python\r\n# singledis.py\r\nfrom functools import singledispatch\r\n\r\ndef myfunc(x):\r\n    y = f(x)\r\n    return y\r\n\r\n@singledispatch\r\ndef f(x):\r\n    raise TypeError('invalid')\r\n\r\n@f.register(str)\r\ndef f_str(x):\r\n    return x\r\n\r\nprint(myfunc('hello'))\r\n```\r\n\r\n### Current behavior\r\n\r\n```bash\r\n$ pylint -E singledis.py              \r\nNo config file found, using default configuration                                    \r\n************* Module singledis                                                       \r\nE:  5, 4: Assigning to function call which doesn't return (assignment-from-no-return)\r\n                                  \r\n$ python singledis.py  # function call returned OK\r\nhello                                                                                \r\n```\r\n\r\n### Expected behavior\r\n\r\nNo error raised.\r\n\r\n### pylint --version output\r\n\r\n* pylint 1.9.1,                                \r\n* astroid 1.6.4                                \r\n* Python 3.6.5 (default, Apr 27 2018, 11:25:39)\r\n* [GCC 5.4.0 20160609]                         \r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1562,
                "title": "The attributes of a \"__new__\" returned instance marked as E1101",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n```\r\nclass BaseSpec(object):\r\n    def do_something(self):\r\n        raise NotImplementedError\r\n\r\n\r\nclass Spec1(BaseSpec):\r\n    def do_something(self):\r\n        return 2\r\n\r\n\r\nclass Spec2(BaseSpec):\r\n    def do_something(self):\r\n        return 1\r\n\r\n\r\nclass Xxx(object):\r\n    def __new__(cls, spec_id, *args, **kw):\r\n        if spec_id == \"1\":\r\n            return Spec1(*args, **kw)\r\n        elif spec_id == \"2\":\r\n            return Spec2(*args, **kw)\r\n        else:\r\n            raise ValueError(\"...\")\r\n\r\na = Xxx(\"1\")\r\na.do_something()\r\n```\r\n\r\n### Current behavior\r\nmarks the \"a.do_something()\" with E1101\r\n\r\n### Expected behavior\r\nIt should not mark the line.\r\n\r\n### pylint --version output\r\npylint 1.6.0, \r\nastroid 1.4.9\r\nPython 3.4.3 (default, Nov 17 2016, 01:08:31) \r\n[GCC 4.8.4]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 385,
                "title": "Add a new warning for using constants in function calls",
                "labels": [
                    "enhancement"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\n\n---\n\nI see the following idiom a lot in some codebases:\n\n```\n#!python\n\ns.splitlines(True)\nshutil.rmtree(\"something\", True)\nmy_particular_function(obj, False)\n\n```\n\nThe following is clearer and improves the code intent:\n\n```\n#!python\n\ns.splitlines(keepends=True)\nshutil.rmtreee(something, ignore_errors=True)\nmy_particular_function(obj, remove=False)\n\n```\n\nWe should emit a warning when detecting constants in function calls. Probably True, False, None should be enough, in order to avoid too many false positives. Also, we should ignore builtins. filter(None, something) is okay.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/385\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2148,
                "title": "Check if there is anything to learn from python-taint",
                "labels": [
                    "task"
                ],
                "description": "https://github.com/python-security/pyt seems to have some complex architecture for doing taint analysis in Python. There might be something interesting there for our control flow inference effort."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1556,
                "title": "Allow adding parameters in an overridden method, without tripping `arguments-differ`",
                "labels": [
                    "enhancement"
                ],
                "description": "The `arguments-differ` check will complain about a method which *loses* arguments that the superclass's method will allow. Such code violates the [Liskov Substitution Principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle), so IMO should trigger `arguments-differ`.\r\n\r\nWhat is not desirable, IMO, is to have the same check complain about:\r\n\r\n```python\r\nclass Ipsum:\r\n    def dolor(self, sit):\r\n        pass\r\n\r\n\r\nclass LoremIpsum(Ipsum):\r\n    def dolor(self, sit, amet=None):\r\n        handle(amet)\r\n        super().dolor(sit)\r\n\r\n```\r\n\r\nThat code does not violate the LSP; an instance of `LoremIpsum` will function just fine as an instance of `Ipsum`. Its methods can be called in the same way as methods of `Ipsum`.\r\n\r\nHow can I have PyLint not complain about code like this which AFAICT does not violate LSP, while still correctly flagging LSP violations?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 374,
                "title": "Different output with --jobs=1 and --jobs=2",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Robert Spier (BitBucket: [robert_spier](http://bitbucket.org/robert_spier))**\n\n---\n\nParallelism (--jobs) changes the output of pylint.\n\nIt's not just the order of the tests, --jobs=2 outputs 18468 lines of output compared to only 21 for --jobs=1.  pylint 1.3.1 reports no lint errors.\n\n$ venv/bin/pylint --jobs=2 --rcfile=$PWD/pylintrc  app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n************\\* Module codein.callback\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 19, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n************\\* Module codein.types\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 21, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n\n$ venv/bin/pylint --jobs=1 --rcfile=$PWD/pylintrc  app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n************\\* Module main\nE: 46, 2: print statement used (print-statement)\nE: 47, 2: print statement used (print-statement)\nE: 48, 2: print statement used (print-statement)\nE: 49, 2: print statement used (print-statement)\nE: 50, 2: print statement used (print-statement)\n************\\* Module tests.test_utils\nE:658, 8: print statement used (print-statement)\nE:662,10: print statement used (print-statement)\nE:667, 8: print statement used (print-statement)\n\nThis is with the current head of the pylint repository. (1889:e404dd4d6e37 tip)\n\nThe source code being linted is https://code.google.com/p/soc/\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/374\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2146,
                "title": "Use case missing for unused-argument check",
                "labels": [
                    "checkers",
                    "enhancement"
                ],
                "description": "### Steps to reproduce\r\n1. $ cat sample1.py\r\n```python\r\ndef foo(a, b):\r\n    a = 666\r\n    return a + b\r\n```\r\n2. $ pylint sample1.py --disable=blacklisted-name --enable=unused-argument\r\n\r\n\r\n### Current behavior\r\n-------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 6.67/10, +3.33)\r\n\r\n### Expected behavior\r\nThere should be a warning that original value from parameter 'a' is not used or overridden.\r\n\r\n### pylint --version output\r\npylint 2.0.0\r\nastroid 1.6.3\r\nPython 3.6.4 (default, Jan  7 2018, 15:53:53)\r\n[GCC 6.4.0]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1555,
                "title": "Missed detection of undefined variable inside class",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun pylint on the following:\r\n```\r\nclass SomeClass():\r\n    '''This class does nothing'''\r\n    def __init__(self):\r\n        self.val = self.val\r\n```\r\n\r\n### Current behavior\r\nNo errors are thrown\r\n\r\n### Expected behavior\r\nIt should warn that self.val is undefined. \r\nNote that it works correctly inside functions and at module level. \r\n\r\n### pylint --version output\r\npylint 1.7.1, \r\nastroid 1.5.3\r\nPython 3.6.1 (default, Mar 27 2017, 00:27:06) \r\n[GCC 6.3.1 20170306]\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 367,
                "title": "tries to open emacs locks",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**\n\n---\n\nHello,\nthis is bug http://www.logilab.org/19517 and https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=563000 which is still happening:\n\n```\nWhen a file is modified but not saved in emacs, some sort of\ndangling-symlink lockfile is created:\n\n .#HexBoard.py -> username@hostname.domain.tld.9285:1262073654\n\nThis confuses pylint:\n\n************* Module Omaha.Boards..#HexBoard\nF0002:  1: <class 'logilab.astng._exceptions.ASTNGBuildingException'>: Unable to load module Omaha.Boards..#HexBoard (No module named #HexBoard)\n\n\nI suppose it would be enough to just ignore dotfiles, I guess they\nwould make invalid python module names anyway.  Similarly, the #\ncharacter is most probaby forbidden here as well - all in all, pylint\nshould probably ignore such files as impossible to properly use from\npython, and possibly issue a warning about their presence.\n```\n\n```\n> > Is this still happening with the latest version of pylint in sid?\n\nThe problem still happens today:\n\n************* Module Omaha.Games.abstract..#PlayerPools\nF:  1, 0: error while code parsing: Unable to load file '/work/yann/games/omaha2/Omaha/Games/abstract/.#PlayerPools.py' ([Errno 2] No such file or directory: '/work/yann/games/omaha2/Omaha/Games/abstract/.#PlayerPools.py') (parse-error)\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/367\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2145,
                "title": "duplicate-code: referenced code locations are ambigous if from same filename (but different folders)",
                "labels": [
                    "bug"
                ],
                "description": "1. Unzip the source setting (almost similar files `the_file.py` in different folders with a clean file in a third folder)\r\n[pylint_similarities.zip](https://github.com/PyCQA/pylint/files/2034945/pylint_similarities.zip)\r\n2.  run pylint on the sources only for message `R0801` or (`duplicate-code`)\r\n  `python36 -m pylint dir_a dir_b dir_c --disable=R,C,W,E --enable=R0801 --msg-template='{path}::{line}::{msg_id}::{symbol}::{C}::{msg}:;:'`\r\n  (or use the supplied run_pylint.cmd writing to pylint_out.txt)\r\n\r\n### Current behavior\r\n\r\nPylint output\r\n```\r\n************* Module some_different_file\r\ndir_c\\some_different_file.py::1::R0801::duplicate-code::R::Similar lines in 2 files\r\n==the_file:7\r\n==the_file:9\r\nclass CopiedClass(object):\r\n    \"\"\"\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\r\n    veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\r\n    commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\r\n    velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n    cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\r\n    est laborum.\r\n    \"\"\"\r\n    def __init__(self):\r\n        pass\r\n\r\n    def __call__(self):\r\n        print(\"Hello World\")\r\n\r\nif __name__ == '__main__'::;:\r\n\r\n------------------------------------------------------------------\r\n\r\nYour code has been rated at 9.58/10 (previous run: 9.50/10, +0.08)\r\n```\r\n\r\n\r\n* The pylint message is assigned to `dir_c\\some_different_file.py`, which is clean of duplicates\r\n  -> false positive\r\n* the duplicate message is referencing both files `dir_a\\the_file.py` and `dir_b\\the_file.py` only as `the_file`\r\n  -> unclear which file is meant, especially, if there's more (possibly clean) files named `the_file.py`\r\n\r\n### Expected behavior\r\n\r\n* the pylint message is assigned to one of the two duplicate source files\r\n* all source locations concerning the duplicate are referenced in a distinct way\r\n  (e.g. by full path) \r\n\r\n#### possible solution for full path\r\nby supplying the pylint.checker.LineSet with the node.path \r\n```\r\n$ sdiff -l --width=250 similar_orig.py.bak similar.py | cat -n | grep -v -e'($'\r\n    43      def append_stream(self, streamid, stream, encoding=None):                                                               |       def append_stream(self, streamid, stream, encoding=None, path=None):\r\n    54                                           self.ignore_imports))                                                              |                                            self.ignore_imports,\r\n    55                                                                                                                              >                                            path=path))\r\n   171                   ignore_docstrings=False, ignore_imports=False):                                                            |                    ignore_docstrings=False, ignore_imports=False,\r\n   172                                                                                                                              >                    path=None):\r\n   174                                                                                                                              >           self.path = path\r\n   308                                 node.file_encoding)                                                                          |                                  node.file_encoding,\r\n   309                                                                                                                              >                                  node.path)\r\n   319                  msg.append(\"==%s:%s\" % (lineset.name, idx))                                                                 |                   msg.append(\"==%s:%s\" % (lineset.path, idx))\r\n```\r\none can get a full path reference in the R0801 message:\r\n\r\n```\r\n************* Module some_different_file\r\ndir_c\\some_different_file.py::1::R0801::duplicate-code::R::Similar lines in 2 files\r\n==e:\\pylint_similarities\\dir_a\\the_file.py:7\r\n==e:\\pylint_similarities\\dir_b\\the_file.py:9\r\nclass CopiedClass(object):\r\n    \"\"\"\r\n...\r\n```\r\n\r\nStill, the pylint issue would be **assigned to the wrong file** (some_different_file.py)\r\n\r\n### pylint --version output\r\n```\r\n__main__.py 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1554,
                "title": "Add option to generate progress output",
                "labels": [
                    "proposal"
                ],
                "description": "This is a feature request.\r\n\r\nI'm currently using Pylint to check a very large codebase as part of a continuous build process. It now takes over 20 minutes to run, which isn't itself a problem. The problem is that Pylint doesn't output any progress information as it processes without encountering errors, so my build tool is failing Pylint because it thinks it's timing out.\r\n\r\nObviously, I can increase the timeout used by my tool, but I'll have to continually maintain this as my code grows. I don't want to outright disable the timeout check for cases where, due to low memory or other strange edge-cases, Pylint genuinely hangs and needs to be forcefully terminated. The ideal solution would be if Pylint could output some sort of progress, such as the names of files scanned, or better yet, an overall percent progress until completion.\r\n\r\nI'm currently using 1.7.1, and `--help` doesn't appear to indicate there's currently any feature like this."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 352,
                "title": "lint all files in a directory",
                "labels": [
                    "topic-command-line",
                    "enhancement"
                ],
                "description": "Originally reported by: **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**\n\n---\n\nIt would make things easier for me to use pylint in CI if I could simply say `pylint .` in order to tell pylint to look at all my files.\n\nflake8/pep8 already have this behavior. They make it configurable via a filepatterns config (default `*.py`) and an exclude config (default `.svn,CVS,.bzr,.hg,.git,__pycache__`).\n\nDiscussion from #pylint:\n\n```\nbuck1: jcristau: in flake8, I can run `flake8 .` and it has a set of configured match/exclude patterns to check everything in the directory\nbuck1: currently pylint assumes that any directory is a package, and fails if not\nbuck1: how would you feel about including the flake8 behavior\nbuck1: would make my life 100% easier when trying to run pylint against everything during CI\njcristau: doesn't sound crazy, though there might be backwards compat concerns...  please float the idea in a ticket or on the list, i'm not the maintainer :)\nbuck1: jcristau: i'll make a feature-request ticket. Sounds like something I might be able to implement. Just wanted to see your thoughts first.\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/352\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2144,
                "title": "False positive for pygame.PixelArray(surface) \"E1121:Too many positional arguments for lambda call\"",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. I'm using vscode, and here are my workspace settings\r\n\r\n```\r\n{\r\n    \"python.linting.pylintEnabled\": true,\r\n    \"python.linting.enabled\": true,\r\n\r\n    \"python.linting.pylintArgs\": [\r\n        \"--extension-pkg-whitelist=pygame\",\r\n        \"--disable=W,C\"\r\n    ],\r\n\r\n}\r\n```\r\n2.  My code, (I was attempting to run the code given on https://inventwithpython.com/pygame/chapter2.html)\r\n\r\n```\r\n\r\n    import sys\r\n    import pygame\r\n    from pygame.locals import *\r\n    \r\n    pygame.init()\r\n    \r\n    # setup the window\r\n    DISPLAYSURF = pygame.display.set_mode((500, 400), 0, 32)\r\n    pygame.display.set_caption(\"Drawing\")\r\n    \r\n    # setup the colors\r\n    BLACK = (0, 0, 0)\r\n    WHITE = (255, 255, 255)\r\n    RED = (255, 0, 0)\r\n    GREEN = (0, 255, 0)\r\n    BLUE = (0, 0, 255)\r\n    \r\n    pixObj = pygame.PixelArray(DISPLAYSURF)\r\n    pixObj[480][380] = BLACK\r\n    pixObj[482][382] = BLACK\r\n    pixObj[484][384] = BLACK\r\n    pixObj[486][386] = BLACK\r\n    pixObj[488][388] = BLACK\r\n    del pixObj\r\n    \r\n\r\n```\r\n3. \r\n\r\n### Current behavior\r\nAs mentioned I get an error at the line\r\n\r\n```\r\n  pixObj = pygame.PixelArray(DISPLAYSURF)\r\n```\r\n\r\nAs, \r\n\r\n`E1121:Too many positional arguments for lambda call`\r\n\r\n### Expected behavior\r\n\r\nThere shouldn't be an error in the linter output,\r\n\r\nI tried flake8 besides pylint, and that doesn't give an error.\r\n\r\n### pylint --version output\r\nNo config file found, using default configuration\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.3 |Anaconda custom (64-bit)| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1553,
                "title": "False positive for `arguments-differ` when collecting all arguments",
                "labels": [
                    "contributor friendly"
                ],
                "description": "The `arguments-differ` check will complain about this common pattern:\r\n\r\n```\r\nclass Ipsum:\r\n    def dolor(self, elit):\r\n        pass\r\n\r\n\r\nclass LoremIpsum(Ipsum):\r\n    def dolor(self, *args, **kwargs):\r\n        super().dolor(*args, **kwargs)\r\n```\r\n\r\nPyLint reports:\r\n\r\n```\r\n$ python3 -m pylint --reports=n --enable=arguments-differ lorem.py \r\n************* Module lorem\r\nlorem.py:7: [W0235(useless-super-delegation), LoremIpsum.dolor] Useless super delegation in method 'dolor'\r\nlorem.py:7: [W0221(arguments-differ), LoremIpsum.dolor] Parameters differ from overridden 'dolor' method\r\n```\r\n\r\nThat code should not trigger the `arguments-differ` check, because that pattern is explicitly just passing through the arguments to the superclass's method.\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 344,
                "title": "emacs binding use reserved bindings",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**\n\n---\n\nHello,\nI'm forwarding http://www.logilab.org/ticket/62365 , https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=613646\n\npylint.el defines the following key bindings\n\nC-c m l         pylint\nC-c m n         next-error\nC-c m p         previous-error\n\nAccording to\nhttp://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html\nsuch sequences are reserved for the user.\n\nThis is annoying for emacs users who rely on these conventions.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/344\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2143,
                "title": "Allow per-file configuration via a comment-line",
                "labels": [
                    "high-effort",
                    "topic-configuration",
                    "minor"
                ],
                "description": "`vim` has a very powerful feature called [modelines](http://vimdoc.sourceforge.net/htmldoc/options.html#modeline) [[2](http://vim.wikia.com/wiki/Modeline_magic)]. While the full feature-set of something like vim-modelines does not make sense for a linter I think there is one interesting feature: *being able to override any setting for that one file only*.\r\n\r\npylint already allows disabling messages for one file by adding a special comment to the top of the file:\r\n\r\n    # pylint: disable=missing-docstring\r\n\r\nBut the following does not work:\r\n\r\n    # pylint: max-line-length=120\r\n\r\nIt is absolutely arguable that per-project linting settings should go into a `pylintrc` for that project. But on rare occasion you may have a good reason why a setting should be overridded for one specific file only. For example, the file was migrated from another project and don't want to completely reformat it, or a module contains a lot of long-winded statements and you want to relax the 80-column rule without completely disabling it.\r\n\r\nThere may be other situation where it may make sense to override other settings for just one file. For example when developing a kind of DSL in a module which will have names not conforming to the standard PEP8 notation. If those \"invalid\" names are localised to only one module, a \"modeline-like\" feature would allow specifying a new regex for just that one file.\r\n\r\nAll this combined would allow a more fine-grained control over the linter without completely silencing it."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1548,
                "title": "Use Python type hints for UML generation",
                "labels": [
                    "topic-pyreverse",
                    "enhancement",
                    "minor"
                ],
                "description": "It seems that pyreverse does not read python type hints (as defined by [PEP 484](https://www.python.org/dev/peps/pep-0484/)), and this does not help when you use `None` as a default value :\r\n\r\n### Code example\r\n```\r\nclass C(object):\r\n    def __init__(self, a: str = None):\r\n        self.a = a\r\n```\r\n\r\n### Current behavior\r\n\r\nOutput of pyreverse :\r\n\r\n![classes_test](https://user-images.githubusercontent.com/22218701/27432305-f10fe03e-574f-11e7-81fa-e2b59e493360.png)\r\n\r\n### Expected behavior\r\n\r\nI would like to see something like : `a : String` in the output.\r\n\r\n### pylint --version output\r\npylint-script.py 1.6.5,\r\nastroid 1.4.9\r\nPython 3.6.0 |Anaconda custom (64-bit)| (default, Dec 23 2016, 11:57:41) [MSC v.1900 64 bit (AMD64)]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 333,
                "title": "Yet another type inference issue",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**\n\n---\n\nNot sure what pylint's type inferencer is doing (`cKDTree` is written in an extension module) but...\n\n```\n#!python\nfrom scipy.spatial import cKDTree\nprint(cKDTree([[0, 0]]).data.shape)\n```\n\nPylint thinks that `Class 'data' has no 'shape' member (no-member)` at line 2.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/333\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2139,
                "title": "pyreverse methods do not show parameters",
                "labels": [
                    "topic-pyreverse",
                    "enhancement"
                ],
                "description": "Pyreverse does not seem to include any parameters in UML class diagrams. All methods are listed with empty parameter lists.\r\n\r\n### Steps to reproduce\r\n1. Write a Python class with methods that take parameters (see code below)\r\n2. `pyreverse -o png -f ALL cow.py` (see png below)\r\n\r\n### Current behavior\r\nAll methods are shown having no parameters (empty parentheses).\r\n\r\n### Expected behavior\r\nThe `eat` and `move` methods should have `item` and `delta` parameters shown in the diagram. And `__init__` should perhaps have `position` (even though it has a default value).\r\n\r\n### pylint --version output\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 03:03:55) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n\r\n\r\n```python3\r\n\"\"\"A Cow can speak, move, and eat.\"\"\"\r\n\r\n\r\nclass Cow(object):\r\n    \"\"\"Cows are simple animals.\r\n\r\n    Cows have 4 legs (are \"quadrupeds\") and walk,\r\n    eat grass (are \"herbivores\"), and say \"moo\".\r\n    \"\"\"\r\n\r\n    def __init__(self, position=(0, 0)):\r\n        \"\"\"Instantiate a new instance of the Cow class.\r\n\r\n        In instantiating the cow class, you may opt to provide\r\n        a starting position.\r\n        \"\"\"\r\n        self.position = position\r\n        self.stomach = []\r\n        self.respired = 0\r\n\r\n    def speak(self):\r\n        \"\"\"Cow says \"moo\".\"\"\"\r\n        return \"moo\"\r\n\r\n    def move(self, delta):\r\n        \"\"\"Cow walks on 4 legs.\"\"\"\r\n        self.position = (self.position[0] + delta[0],\r\n                         self.position[1] + delta[1])\r\n        return \"This quadruped walked to \" + str(self.position)\r\n\r\n    def eat(self, item):\r\n        \"\"\"Cow eats grass.\"\"\"\r\n        if item == \"grass\":\r\n            self.stomach.append(item)\r\n            return \"ate \" + item\r\n        else:\r\n            return \"This herbivore doesn't eat \" + item\r\n\r\n    def respire(self):\r\n        \"\"\"Cow respired.\"\"\"\r\n        self.respired += 1\r\n        return \"This cow respired through its nostrils.\"\r\n```\r\n\r\n![cow](https://user-images.githubusercontent.com/13035339/40387607-3b9aab1a-5ddb-11e8-881a-511379c4cf78.png)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1542,
                "title": "False positives (no-name-in-module) and (not-context-manager)",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n1. `git clone https://github.com/ReDeiPirati/seq2seq.git && cd seq2seq`\r\n2. `pylint -E seq2seq`\r\n\r\n[Optional] If you want to run a full coverage test pipeline: `pip install -e . && pip install nose pylint tox yapf mkdocs && tox`\r\n\r\n### Current behavior\r\nSame behavior for both python2.7 and python3.5\r\n```\r\n************* Module seq2seq.losses\r\nE: 37, 2: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.test.bridges_test\r\nE: 73, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.test.rnn_cell_test\r\nE: 38, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 62, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 77, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 84, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 90, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 98, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:113, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:120, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:127, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:135, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.data.sequence_example_decoder\r\nE: 17, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.data.input_pipeline\r\nE: 32, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.data.split_tokens_decoder\r\nE: 24, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.data.parallel_data_provider\r\nE: 25, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\nE: 26, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.training.utils\r\nE:259, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.tasks.dump_attention\r\nE: 26, 0: Unable to import 'matplotlib' (import-error)\r\n************* Module seq2seq.encoders.conv_encoder\r\nE: 87, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:101, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.encoders.image_encoder\r\nE: 23, 0: No name 'slim' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.encoders.rnn_encoder\r\nE: 24, 0: No name 'rnn' in module 'LazyLoader' (no-name-in-module)\r\n************* Module seq2seq.contrib.rnn_cell\r\nE: 80, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE: 97, 8: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.metrics.metric_specs\r\nE: 31, 0: No name 'learn' in module 'LazyLoader' (no-name-in-module)\r\nE:107, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n************* Module seq2seq.models.model_base\r\nE:144, 4: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\nE:145, 6: Context manager 'generator' doesn't implement __enter__ and __exit__. (not-context-manager)\r\n```\r\nSimilar: #613 `not-context-manager`  #1524 #1536 `no-name-in-module`. \r\nThe not-context-manager error is a false positive because in the TensorFlow package(where the context-mager is coded) is actually well defined: look at [tf_contextlib](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/python/util/tf_contextlib.py) and [tf_decorator](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/python/util/tf_decorator.py). \r\nUnfortunately i cannot explain why LazyLoader has triggered those errors, but the program works fine.\r\n\r\n### Expected behavior\r\nNo errors\r\n\r\n### pylint --version output\r\n\r\npylint with Python2\r\n```\r\npylint 1.7.1, \r\nastroid 1.5.3\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609]\r\n```\r\npylint with Python3\r\n```\r\n__main__.py 1.7.1, \r\nastroid 1.5.3\r\nPython 3.5.3 (default, Jun 17 2017, 11:03:33) \r\n[GCC 4.9.2]\r\n```\r\n\r\nThank you for you help and support :)\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 330,
                "title": "Two issues with overring functions in the global namespace",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**\n\n---\n\n```\n#!python\nfunc1 = None\ndef func2(): pass\n\ndef override_func():\n    global func1, func2\n    def func1(): pass\n    func2 = None\n```\n\nPylint gives various spurious warnings here in `override_func`: it does not realize that `def func1():...` assigns a new value at the global level too, and thinks that there is no previous binding for `func2` before overriding it.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/330\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2377,
                "title": "Regression: Value 'Collection' is unsubscriptable ",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun pylint on this file\r\n\r\n```py\r\nfrom typing import Collection\r\n\r\ndef myfunc(arg: Collection[int]):\r\n    print(arg)\r\n\r\nmyfunc([1, 2, 3])\r\n```\r\n\r\n### Current behavior\r\n\r\n`repro.py:3:16: E1136: Value 'Collection' is unsubscriptable (unsubscriptable-object)`\r\n\r\n### Expected behavior\r\n\r\nNo errors.\r\n\r\n### pylint --version output\r\n\r\nBreaks for 2.1.0:\r\n```\r\npylint 2.1.0\r\nastroid 2.0.2\r\nPython 3.6.4 (default, Mar 12 2018, 17:50:21)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```\r\n\r\nDoes not break for 1.9.2:\r\n```\r\npylint 1.9.2,\r\nastroid 1.6.5\r\nPython 3.6.4 (default, Mar 12 2018, 17:50:21)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)]\r\n```\r\n\r\nIf there is a configuration workaround for this (except for disabling `unsubscriptable-object` globally) that would be nice, but neither `ignored-modules=typing` or `ignored-classes=Collection` worked for me."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2392,
                "title": "no-member false positive related to an import confusion",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\n\r\nI have the following file structure:\r\n\r\n```\r\nmymodule/\r\n  __init__.py\r\n  foobar.py\r\n```\r\n\r\nIn `__init__.py` I have:\r\n\r\n```python\r\nfrom .foobar import *\r\n```\r\n\r\nAnd in `foobar.py` I have:\r\n\r\n```python\r\n__all__ = ('FooBar',)\r\n\r\n\r\nclass FooBar:\r\n    pass\r\n\r\nfoobar = FooBar()\r\n```\r\n\r\n### Current behavior\r\n\r\nThe issue is that because pylint ignores `__all__` when I have code like:\r\n\r\n```python\r\nfrom mymodule import foobar\r\n\r\nfoobar.FooBar()\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nE1101: Instance of 'FooBar' has no 'FooBar' member (no-member)\r\n```\r\n\r\nThe issue is that `foobar` variable shadows `foobar` module in the view of pylint.\r\n\r\n### Expected behavior\r\n\r\nThere should be no error. I think that in the case of static `__all__` variables, pylint should respect them.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.0.1\r\nastroid 2.0.2\r\nPython 3.6.3 (default, Oct  3 2017, 21:45:48) \r\n[GCC 7.2.0]\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2399,
                "title": "The negative score is not very beginner friendly",
                "labels": [
                    "topic-accessibility"
                ],
                "description": "For the past months I've been under the impression that the negative score is not very friendly for beginners. It somewhat demotivating to run `pylint` over your project just to get a `-24/10.0` as a score, which would make `pylint` look like a super drastic tool, that's super nitpicky about everything.\r\n\r\nI think we could do a better job here at welcoming everyone to using `pylint`. Instead of having a `0-10` score, we could check if other tools are doing something different and see what works best in general. "
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2388,
                "title": "pylint exceed maximum recursion depth",
                "labels": [
                    "topic-performance",
                    "astroid",
                    "bug"
                ],
                "description": "There are similar errors in bugtracker, e.g. #1410, #1285, but I'm not sure the underlying reason for this issue is same.\r\n\r\n### Steps to reproduce\r\n1. python3 -m venv ~/venv/pylint-test\r\n2. . ~/venv/pylint-test/bin/activate\r\n3. Follow http://diofant.readthedocs.io/en/latest/install.html#from-sources\r\n4. run ``pylint --enable=old-raise-syntax diofant/solvers/recurr.py ``\r\n\r\n### Current behavior\r\n\r\nIt fails with\r\n```\r\ninternal error with sending report for module ['diofant/solvers/recurr.py']\r\nmaximum recursion depth exceeded\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo internal error.\r\n\r\n### pylint --version output\r\n\r\n```\r\npylint 2.1.0\r\nastroid 2.0.2\r\nPython 3.5.3 (default, Jan 19 2017, 14:11:04) \r\n[GCC 6.3.0 20170118]\r\n```\r\n\r\n### Some debugging\r\n\r\nNote, that same error happens if you enable different checker instead, almost any disabled.  For example, ``exception-message-attribute``.  The internal error disappears if I comment out [line 527](https://github.com/diofant/diofant/blob/b50066efea3974cb0249c6bed6cab3fae9dc37c2/diofant/solvers/recurr.py#L527).\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2395,
                "title": "W1202 - logging-fstring-interpolation is not useful",
                "labels": [],
                "description": "<!--\r\n  Hi there! Thank you for wanting to make pylint better.\r\n\r\n  Before you submit this, make sure that this feature wasn't\r\n  already requested or if it is not already implemented in the master branch.\r\n-->\r\n\r\n### Is your feature request related to a problem? Please describe\r\n\r\nIn my experiments W1202 is misleading as f-strings performance is virtually equivalent to %-operator formatting in practice.\r\n\r\n### Describe the solution you'd like\r\n\r\nW1202 be deprecated, as it can lead people to not use f-strings, which (if available) are the preferred mechanism for string interpolation.\r\n\r\n### Additional context\r\n\r\nThis is related to my inquiry around this warning: https://github.com/PyCQA/pylint/issues/2354\r\n\r\nTo verify my hypothesis that f-strings are virtually as performant as %-operator formatting I wrote the following snippet to explore timing related to log statements with the 3 approaches (f-strings, .format(), and %-operator).  This was on a Django app I'm working on.\r\n\r\n```\r\nimport timeit\r\n\r\ndef timeitex1(num_times):\r\n    fstring = timeit.timeit(\r\n        'logging.info(f\"\"\"this is a {thing}, and thing: {thing + \"blah\"}\"\"\")',\r\n        setup=\"import logging ; thing='1234'\",\r\n        number=num_times,\r\n    )\r\n\r\n    formattim = timeit.timeit(\r\n        'logging.info(\"this is a {}, and thing: {}\".format(thing, thing + \"blah\"))',\r\n        setup=\"import logging ; thing='1234'\",\r\n        number=num_times,\r\n    )\r\n\r\n    percentop = timeit.timeit(\r\n        'logging.info(\"this is a %s, and thing: %s\", thing, thing + \"blah\")',\r\n        setup=\"import logging ; thing='1234'\",\r\n        number=num_times,\r\n    )\r\n\r\n    return (fstring, formattim, percentop)\r\n```\r\n\r\nWith logging output disabled (ie in my Django settings I had: ```LOGGING[\"loggers\"] = {}```), %-formatting and f-strings are virtually identical.\r\n\r\n```\r\nnum_times = 10,000:\r\n(0.016536445124074817, 0.02152163698337972, 0.018616185057908297)\r\n\r\nnum_times = 100,000:\r\n(0.16004435811191797, 0.20005284599028528, 0.1561291899997741)\r\n\r\nnum_times = 1,000,000:\r\n(1.641325417906046, 2.0023047979921103, 1.6249939629342407)\r\n```\r\n\r\nReturned times are tuples of \"time for f-strings\", \"time for the format() call\", and \"time for %-formatting\".\r\n\r\nThat's a difference of ~1% (1.641325417906046 vs 1.6249939629342407 seconds) between f-strings & the %-operator on the largest run (.format calls being clearly slower).\r\n\r\nWith logging enabled, it's a total wash (technically f-strings was the winner in the larger runs but by such a small margin it's inconsequential).  This is with log output going to standard out (so I only went up to 100,000 entries as I didn't want to dump 3 million log statements to my console):\r\n\r\nnum_times = 10,000:\r\n(1.6245153648778796, 2.0137458329554647, 1.6029843359719962)\r\n\r\nnum_times = 100,000:\r\n(4.39409149507992, 4.51585376705043, 4.532764581032097)\r\n\r\nSo basically unless you are emitting a *ton* of logging statements for a level that are never actually logged (say because the LOG_LEVEL is set high), then it doesn't matter.  And if you're in that scenario, then really there's no noticeable difference between %-operator formatting or f-strings (just don't do ```.format()``` calls).\r\n\r\nOTOH, if you *are* emitting the logging message, then it's likely that the f-string approach will be faster, so following W1202 will actually make your code (extremely slightly) *slower*."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2563,
                "title": "E1101: (Flask) Method 'jinja_env' has no 'add_extension', 'filter' member (no-member)",
                "labels": [],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run `pylint hello.py` (after installing flask 1.0.2), where `hello.py` is a simple flask app as below:\r\n```python\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.jinja_env.add_extension('jinja2.ext.do')\r\napp.jinja_env.filters['somefilter'] = lambda s: s\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return 'Hello, World!'\r\n```\r\n\r\n### Current behavior\r\npylint outputs the following for the file above:\r\n```shell\r\n************* Module hello\r\nhello.py:3:0: E1101: Method 'jinja_env' has no 'add_extension' member (no-member)\r\nhello.py:4:0: E1101: Method 'jinja_env' has no 'filters' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nIt should give no error because `add_extension` and `filters` are members of `Flask.jinja_env`.\r\n\r\n### pylint --version output\r\n```shell\r\npylint 2.1.1\r\nastroid 2.0.4\r\npython 3.6.6\r\n```\r\n### Check the docs below for `jinja environment`\r\n[Flask.jinja_env](http://flask.pocoo.org/docs/1.0/api/?highlight=jinja_env#flask.Flask.jinja_env)\r\n[Flask.jinja_env.filters](http://flask.pocoo.org/docs/1.0/templating/#registering-filters)\r\n[jinja2.Environment.add_extension](http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment.add_extension)\r\n* Also, `jinja_env` is a cached property. Somewhat like [this](https://github.com/pydanny/cached-property).\r\n\r\n### workaround\r\napart from disabling, if we change code as follows, pylint shows no errors.\r\n```python\r\napp.jinja_env().add_extension('jinja2.ext.do')\r\napp.jinja_env().filters['somefilter'] = lambda s: s\r\n```\r\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2436,
                "title": "False positive E1130 invalid-unary-operand-type for Numpy array",
                "labels": [
                    "astroid",
                    "bug"
                ],
                "description": "Pylint emits a false positive E1130 invalid-unary-operand-type error for Numpy arrays:\r\n```\r\nimport numpy as np\r\na = np.array([1, 2])\r\nb = -a\r\n```\r\nActually, in this case, it emits two:\r\n```\r\n$ pylint test.py  -E\r\n************* Module test\r\ntest.py:3:4: E1130: bad operand type for unary -: recarray (invalid-unary-operand-type)\r\ntest.py:3:4: E1130: bad operand type for unary -: list (invalid-unary-operand-type)\r\n```\r\n\r\nThis is not just for np.array, I get a similar false positive for np.atleast_1d, which also returns Numpy arrays. But np.array is super common in scientific Python projects.\r\n\r\n```\r\n$ pylint --version\r\npylint 2.2.0\r\nastroid 2.0.4\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n```\r\n\r\nThis issue was already mentioned in #1472 and #1497 , but @PCManticore you suggested to split out a new issue with a simple test case that doesn't involve flow control in https://github.com/PyCQA/pylint/issues/1472#issuecomment-355814591 , so there you have it.\r\n\r\n:-)\r\n\r\nThanks for all your work on pylint, it's a huge help!"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2416,
                "title": "unsubscriptable-object error reported incorrectly",
                "labels": [
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nRun Pylint on the following code:\r\n```python\r\nfrom typing import Generic, TypeVar\r\n\r\nT = TypeVar(\"T\")\r\n\r\nclass Test(Generic[T]):  # error is reported here\r\n    pass\r\n```\r\n\r\n### Current behavior\r\nPylint reports the following error:\r\n```E1136: Value 'Generic' is unsubscriptable (unsubscriptable-object)```\r\n\r\n### Expected behavior\r\nNo error should be reported. Python documentation for [`Generic`](https://docs.python.org/3/library/typing.html#typing.Generic) explicitly lists use cases where `Generic` is subscripted.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 27 2018, 14:40:03) \r\n[GCC 8.1.0]\r\n```\r\n\r\nThis issue is *not* reproducible with Python 3.6. Might be related to issue #2377, which is only reproducible with Python 3.6."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1173,
                "title": "Disable module inspection for specific platforms",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "It is often the case that the inspection of a file does only make sense on a certain platform.\r\n\r\nMy suggestion would be\r\n```\r\n# pylint: skip-if(platform=='win32')\r\n```\r\nand for block control:\r\n```\r\n# pylint: disable-if(platform=='win32')=no-member\r\n```"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1110,
                "title": "No emit message in \"missing whitespace around operator\"",
                "labels": [
                    "help wanted",
                    "minor"
                ],
                "description": "### Steps to reproduce\n1. Use the following code `var = 3+0`\n2. Run `flake8 --show-source --select=E226 file.py`\n3. See the outuput: `file.py:1:6: E226 missing whitespace around arithmetic operator`\n4. Run `pylint -d invalid-name,missing-docstring file.py`\n### Current behaviour\n\nNot emit messages.\n### Expected behaviour\n\nShould we emit the message of `missing whitespace around operator`?\n### pylint --version output\n\n``` bash\npylint 1.6.4,\nastroid 1.4.8\nPython 2.7.10 (default, Oct 23 2015, 19:19:21)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 654,
                "title": "Add new checks for the new coroutines added in PEP 492 and Python 3.5",
                "labels": [
                    "contributor friendly",
                    "enhancement",
                    "help wanted"
                ],
                "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\r\n\r\n---\r\n\r\nWould be useful to have some of these at least:\r\n1. await accepts only an awaitable\r\n2. type error if **await** returns anything else than an iterator\r\n3. syntax error if await is used outside of an async def\r\n4. **aenter** and **aexit** must return an awaitable\r\n5. syntax error to use async with out side of async def\r\n6. error to pass an object without **anter** and **aexit** to async with\r\n\r\nSimilar to for async for.\r\n\r\n---\r\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/654\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 566,
                "title": "--class description should tell about relative/absolute class name",
                "labels": [
                    "topic-pyreverse",
                    "help wanted",
                    "bug"
                ],
                "description": "Originally reported by: **space one (BitBucket: [spaceone](http://bitbucket.org/spaceone), GitHub: @spaceone?)**\n\n---\n\nOtherwise one have to deal with\n\n```\nTraceback (most recent call last):\n  File \"/usr/bin/pyreverse2\", line 9, in <module>\n    load_entry_point('pylint==1.4.3', 'console_scripts', 'pyreverse')()\n  File \"/usr/lib/python2.7/site-packages/pylint/__init__.py\", line 41, in run_pyreverse\n    Run(sys.argv[1:])\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 98, in __init__\n    sys.exit(self.run(args))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 112, in run\n    diadefs = handler.get_diadefs(project, linker)\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 228, in get_diadefs\n    diagrams.append(generator.class_diagram(project, klass))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 196, in class_diagram\n    module, klass = klass.rsplit('.', 1)\nValueError: need more than 1 value to unpack\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/566\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 841,
                "title": "false redefined-outer-name when using `del`",
                "labels": [
                    "minor"
                ],
                "description": "simple test code:\n\n```\npath = __file__\ndel path\ndef some_func_of_mine(path):\n    print(path)\n```\n\ntesting pylint-1.5.4 shows:\n\n```\n$ pylint test.py\nW:  3,22: Redefining name 'path' from outer scope (line 1) (redefined-outer-name)\n```\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2517,
                "title": "Building the documentation requires Internet access",
                "labels": [
                    "documentation",
                    "task"
                ],
                "description": "The Debian package should build the pylint documentation. The package build should be reproducible and does not have Internet access. Following command is run:\r\n\r\n```\r\nmake -C doc html\r\n```\r\n\r\nThe html target will call `pip install python-docs-theme` which will fail without Internet access.\r\n\r\nPlease either check for the presence of the python-docs-theme (or allow skipping this part)."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1990,
                "title": "Add `isinstance` in `if` condition check as a special case",
                "labels": [
                    "topic-control-flow"
                ],
                "description": "### Steps to reproduce\r\n1. Write this simple code and save it:\r\n```\r\nimport subprocess\r\n\r\ntry:\r\n    subprocess.check_call(['ls', '-']) # Deliberately made error in this line\r\nexcept Exception as err:\r\n    if isinstance(err, subprocess.CalledProcessError):\r\n        print 'Subprocess error occured. Return code:', err.returncode\r\n        # Error in above line.......................here^^^\r\n    else:\r\n        print 'An error occured:', str(err)\r\n```\r\n2. Run `pylint` on this file.\r\n3. Output of Pylint:\r\n```\r\n$ pylint pylint_test.py \r\nNo config file found, using default configuration\r\n************* Module pylint_test\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nW:  5, 7: Catching too general exception Exception (broad-except)\r\nE:  7,56: Instance of 'Exception' has no 'returncode' member (no-member)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 0.00/10 (previous run: 2.86/10, -2.86)\r\n```\r\n\r\n### Current behavior\r\nI is showing Error in line: 7 which should not be an error.\r\n\r\n### Expected behavior\r\nIt should not show Error in line-7 as I am already checking if `err` is an instance of `subprocess.CalledProcessError` which has member `returncode`.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1943,
                "title": "Wrong hanging indentation with context managers",
                "labels": [
                    "bug"
                ],
                "description": "###` Steps to reproduce\r\n1. Write an example code:\r\n```\r\nwith context(\r\n        f('adwa')):\r\n    print('adwad')\r\n```\r\n2. run pylint on this code\r\n\r\n### Current behavior\r\nPylint throws:\r\n```\r\nC:  2, 0: Wrong hanging indentation (remove 4 spaces).\r\n        f('adwa')):\r\n    |   ^ (bad-continuation)\r\n```\r\n### Expected behavior\r\nThere should not by any error. \r\nIn the example pylint conflicts with tools like pep8 or pycodestyle (for those this behaviour is expected).\r\nsource: https://www.python.org/dev/peps/pep-0008/#indentation\r\n### pylint --version output\r\nNo config file found, using default configuration\r\n```\r\npylint 1.8.1,\r\nastroid 1.6.1\r\nPython 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2293,
                "title": "Add configuration to promote/demote severity of messages",
                "labels": [
                    "enhancement"
                ],
                "description": "<!--\r\n  Hi there! Thank you for wanting to make pylint better.\r\n\r\n  Before you submit this, make sure that this feature wasn't\r\n  already requested or if it is not already implemented in the master branch.\r\n-->\r\n\r\n### Status Quo\r\nCurrently you can disable specific messages or severity classes (error, warning, refactor, convention), so to do pylint runs of various stringency, you could do one of \r\n\r\n* `pylint -E ...`\r\n* `pylint --disable=R,C,W ....`\r\n* `pylint --disable=R,C ...`\r\n\r\nHowever, if you have a style guide that might mean one of the \"convention\" messages is a must-do, then you need to disable all the others, then you can bit-OR the exit code to fail a build on the refactor bit being set. Alternatively, parse the output (ick).\r\n\r\n### Desired feature\r\nAdd a configuration where you can map message codes/names to severity level. \r\n\r\nFor instance, if I say something like `C0303=E` or `trailing-whitespace: error`, and run pylint, even if there are no \"true\" error messages, a C0303 message would cause the exit code to have a 2 in it.\r\n\r\n### Help\r\nI'd be willing to take a stab at a patch, but I'm also not sure if it could be done in a plugin just as well? I'm having some trouble figuring out how. The docs point me towards a learning cliff: \"In general, a plugin is a module which should have a function `register`, which takes an instance of `pylint.lint.PyLinter` as input.\", but even looking at the class spec it's not immediately obvious how to hook into it. Are there docs for that I'm not finding or simple (but non-trivial) plugins for example?"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1887,
                "title": "Add the man page generation back in",
                "labels": [
                    "topic-per-directory-config",
                    "help wanted"
                ],
                "description": "Currently is has been stripped out to make the LongHelp classes work, but it needs to be added back in."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1727,
                "title": "used-before-assignment (E0601) not working",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Running pylint on this simple example does not detect that x can be used before assignment.  This is a very common programming mistake and should be caught.\r\n```\r\ndef Afunction(d):\r\n    if d:\r\n        x=1\r\n    return x\r\n```\r\n\r\n### Current behavior - Fails to detect x is used before assignment\r\n\r\n\r\n### Expected behavior: detect variable use inside logic branches. \r\n\r\n\r\n### pylint --version output: pylint-2 1.7.4\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1694,
                "title": "decorator false positive: unsubscriptable-object, no-member, unsupported-membership-test, not-an-iterable, too-many-function-args",
                "labels": [
                    "enhancement",
                    "bug"
                ],
                "description": "### Steps to reproduce\r\nI use simple classproperty decorator:\r\n```python\r\nclass classproperty(classmethod):\r\n\r\n    def __init__(self, fget):\r\n        if isinstance(fget, (classmethod, staticmethod)):\r\n            self.fget = lambda cls: fget.__get__(None, cls)()\r\n        else:\r\n            self.fget = fget\r\n        self.cached = {}\r\n        super(classproperty, self).__init__(self.fget)\r\n\r\n    def __get__(self, instance, cls):\r\n        if cls in self.cached:\r\n            return self.cached[cls]\r\n        value = self.cached[cls] = self.fget(cls)\r\n        return value\r\n\r\n```\r\n\r\nExample of usages:\r\n```python\r\nfrom collections import OrderedDict\r\n\r\nfrom sqlalchemy.ext.declarative import declarative_base, declared_attr\r\nfrom sqlalchemy.inspection import inspect\r\n\r\nBase = declarative_base()\r\n\r\nclass Model(Base):\r\n    __abstract__ = True\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Model, self).__init__()\r\n        self.set_attrs(**kwargs)\r\n\r\n    def set_attrs(self, **attrs):\r\n        for attr_name, attr_value in attrs.items():\r\n            if attr_name in self.fields:\r\n                setattr(self, attr_name, attr_value)\r\n\r\n    def to_dict(self):\r\n        result = {}\r\n        for attr_name in self.fields:\r\n            attr_value = getattr(self, attr_name)\r\n            if attr_value is not None:\r\n                result[attr_name] = attr_value\r\n        return result\r\n\r\n    @declared_attr\r\n    def __tablename__(cls):\r\n        # pylint: disable=no-self-argument\r\n        return plural(decapitalize(cls.__name__))\r\n\r\n    @classproperty\r\n    def columns(cls):\r\n        columns = inspect(cls).mapper.column_attrs\r\n        columns = list(sorted(columns, key=lambda column: column.key))\r\n        return columns\r\n\r\n    @classproperty\r\n    def fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.columns])\r\n        return fields\r\n\r\n    @classproperty\r\n    def primary_key_columns(cls):\r\n        columns = list(inspect(cls).mapper.primary_key)\r\n        return columns\r\n\r\n    @classproperty\r\n    def primary_key_fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.primary_key_columns])\r\n        return fields\r\n\r\n```\r\n\r\n### Current behavior\r\nThere are a lot of false positive errors:\r\n\r\n```bash\r\n[E1135(unsupported-membership-test), Model.set_attrs] Value 'self.fields' doesn't support membership test\r\n[E1133(not-an-iterable), Model.to_dict] Non-iterable value self.fields is used in an iterating context\r\n[E1133(not-an-iterable), Model.fields] Non-iterable value cls.columns is used in an iterating context\r\n[E1133(not-an-iterable), Model.primary_key_fields] Non-iterable value cls.primary_key_columns is used in an iterating context\r\n````\r\n\r\n### Expected behavior\r\nIf I make interface class where declare expected value the errors are not raised:\r\n```python\r\n\r\nclass iface(object):\r\n    columns = ()\r\n    fields = {}\r\n    primary_key_columns = ()\r\n    primary_key_fields = {}\r\n\r\nclass Model(Base, iface):\r\n    # ...\r\n```\r\nExpected behavior: no false-positive errors\r\n\r\n### pylint --version output\r\npylint 1.7.4, \r\nastroid 1.5.3\r\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \r\n[GCC 5.4.0 20160609]\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 458,
                "title": "unable to locally disable warning in finally clause",
                "labels": [
                    "bug"
                ],
                "description": "Originally reported by: **Mike Frysinger (BitBucket: [vapier](http://bitbucket.org/vapier), GitHub: @vapier?)**\n\n---\n\nsimple code:\n\n```\n#!python\nimport os\ntry:\n    pass\nfinally:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n\nwhen running pylint (1.4.1) against this, it insists on warning:\n\n```\nW:  9, 4: Access to a protected member _exit of a client class (protected-access)\n```\n\nother positions that do work:\n- changing the \"finally:\" clause to \"except:\"\n\n```\nimport os\ntry:\n    pass\nexcept:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n- moving it up a scope level to before the \"try:\" statement\n\n```\nimport os\n# pylint: disable=protected-access\ntry:\n    pass\nexcept:\n    os._exit(1)\n```\n- making it inline\n\n```\nimport os\ntry:\n    pass\nexcept:\n    os._exit(1)  # pylint: disable=protected-access\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/458\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 1581,
                "title": "unused-argument, pointless-statement, and function-redefined with recommended use of typing.overload",
                "labels": [
                    "enhancement"
                ],
                "description": "### Code to reproduce\r\n```\r\n# pylint: disable=missing-docstring\r\n\r\nimport typing\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: str) -> str:\r\n    \"\"\"Return arg, concatenated with itself.\"\"\"\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: int) -> int:\r\n    \"\"\"Return twice arg.\"\"\"\r\n\r\n\r\ndef double_with_docstring(arg):\r\n    \"\"\"Return 2 * arg.\"\"\"\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: str) -> str:\r\n    ...\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: int) -> int:\r\n    ...\r\n\r\n\r\ndef double_with_ellipsis(arg):\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: str) -> str:\r\n    pass\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: int) -> int:\r\n    pass\r\n\r\n\r\ndef double_with_pass(arg):\r\n    return 2 * arg\r\n```\r\n\r\n### Current behavior\r\n```\r\nW:  7,26: Unused argument 'arg' (unused-argument)\r\nE: 12, 0: function already defined line 7 (function-redefined)\r\nW: 12,26: Unused argument 'arg' (unused-argument)\r\nE: 16, 0: function already defined line 7 (function-redefined)\r\nW: 23, 4: Statement seems to have no effect (pointless-statement)\r\nW: 22,25: Unused argument 'arg' (unused-argument)\r\nE: 27, 0: function already defined line 22 (function-redefined)\r\nW: 28, 4: Statement seems to have no effect (pointless-statement)\r\nW: 27,25: Unused argument 'arg' (unused-argument)\r\nE: 31, 0: function already defined line 22 (function-redefined)\r\nW: 36,21: Unused argument 'arg' (unused-argument)\r\nE: 41, 0: function already defined line 36 (function-redefined)\r\nW: 41,21: Unused argument 'arg' (unused-argument)\r\nE: 45, 0: function already defined line 36 (function-redefined)\r\n```\r\n\r\n\r\n### Expected behavior\r\nThe first form, which uses docstrings (sadly only visible in the code) to describe the specific overload, should be equivalent to the version with pass, and is included for completeness.\r\n\r\nThe [mypy documentation](http://mypy.readthedocs.io/en/latest/function_overloading.html) recommends using a `pass` statement in the body of overloads, while the [typing module documentation](https://docs.python.org/3/library/typing.html#typing.overload) uses `...`.\r\n\r\nIn either case, it seems to me that the expected behavior/context of a function decorated with `typing.overload` should be that it returns None and has no side effects, and it should later be overridden.\r\n\r\nIf possible, it may be worth including a message for uses of an overloaded function before it is overridden, because that will error at runtime.\r\n\r\nThings I'm not sure about: Are full annotations required on each definition? Should there be a message for only one overloaded version? The mypy documentation annotates the actual implementation (with unions of all the relevant types), the Python documentation does not, and both appear acceptable to mypy from the testing that led me to this issue; should pylint care?\r\n\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 3.6.2 (default, Jul 17 2017, 16:44:45)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 392,
                "title": "Type inference failure",
                "labels": [
                    "topic-control-flow",
                    "bug"
                ],
                "description": "Originally reported by: **Thanassis Tsiodras (BitBucket: [ttsiodras](http://bitbucket.org/ttsiodras), GitHub: @ttsiodras?)**\n\n---\n\nDisappointed by typos in my code that trigger errors at runtime (related to sqlalchemy reflected types), I decided to check whether I can do something better on my own, using pylint to limit the damage. \n\nThe beginning was very promising:\n\n```\n==> db.py <==\nclass Users(object):\n    __slots__ = ['name', '_name']\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, value):\n        self._name = value\n\n    name = property(get_name, set_name, None, \"The name property\")\n\n    @staticmethod\n    def findByName(unused_name):\n        return Users(\"test user\")\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    user = Users.findByName(\"foo\")\n    user.namea = \"typo in the field name\"\n    print user.name\n    print user._name\n\ntest()\n```\n\nThis code mirrors a basic skeleton of the kind of code my code generator would create from an existing DB schema - in this case, the class Users mirrors a table that has a 'name' column. A `findByName` function would also search the DB (via SQL) and return instances of \"Users\". For this first test, it just returns one dummy instance of the class `Users`.\n\nAnd ideed, pylint caught the typo inside test()  (assigning to a non-existing field): \n\n```\nE:  6, 4: Assigning to attribute 'namea' not defined in class slots (assigning-non-slot)\n```\n\nSo moving on from a simple test, I changed the implementation of findByName to mirror the actual loop that would exist in its place, when reading output from a real SQL query:\n\n```\n==> db.py <==\nclass Users(object):\n    ....    \n    @staticmethod\n    def findByName(unused_name):\n        results = []\n        for unused in xrange(10):\n            results.append(Users(\"test user\"))\n        return results\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    for user in Users.findByName(\"foo\"):\n        user.namea = 1\n        print user.name\n        print user._name\n\ntest()\n```\n\nPylint now fails to see the same error. It appears that the line \"results = []\" tells pylint that this is a list of \"unknown type\", and all checks go out the window after it. The fact that the list is appended with instances of Users doesn't seem to matter.\n\nThe same happens if I don't use a list, and instead just yield the instances back:\n\n```\n@staticmethod\ndef findByName(unused_name):\n    for unused in xrange(10):\n        yield Users(\"test user\")\n```\n\nIn the case of using a list, I will concede that in theory, a list can contain many types.\nA single yield point however, can't - this looks like a bug to me.\n\nSo, to conclude - Is there a way I can tell pylint that the findByName function returns a list of Users?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/392\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 344,
                "title": "emacs binding use reserved bindings",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "Originally reported by: **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**\n\n---\n\nHello,\nI'm forwarding http://www.logilab.org/ticket/62365 , https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=613646\n\npylint.el defines the following key bindings\n\nC-c m l         pylint\nC-c m n         next-error\nC-c m p         previous-error\n\nAccording to\nhttp://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html\nsuch sequences are reserved for the user.\n\nThis is annoying for emacs users who rely on these conventions.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/344\n"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2143,
                "title": "Allow per-file configuration via a comment-line",
                "labels": [
                    "high-effort",
                    "topic-configuration",
                    "minor"
                ],
                "description": "`vim` has a very powerful feature called [modelines](http://vimdoc.sourceforge.net/htmldoc/options.html#modeline) [[2](http://vim.wikia.com/wiki/Modeline_magic)]. While the full feature-set of something like vim-modelines does not make sense for a linter I think there is one interesting feature: *being able to override any setting for that one file only*.\r\n\r\npylint already allows disabling messages for one file by adding a special comment to the top of the file:\r\n\r\n    # pylint: disable=missing-docstring\r\n\r\nBut the following does not work:\r\n\r\n    # pylint: max-line-length=120\r\n\r\nIt is absolutely arguable that per-project linting settings should go into a `pylintrc` for that project. But on rare occasion you may have a good reason why a setting should be overridded for one specific file only. For example, the file was migrated from another project and don't want to completely reformat it, or a module contains a lot of long-winded statements and you want to relax the 80-column rule without completely disabling it.\r\n\r\nThere may be other situation where it may make sense to override other settings for just one file. For example when developing a kind of DSL in a module which will have names not conforming to the standard PEP8 notation. If those \"invalid\" names are localised to only one module, a \"modeline-like\" feature would allow specifying a new regex for just that one file.\r\n\r\nAll this combined would allow a more fine-grained control over the linter without completely silencing it."
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2139,
                "title": "pyreverse methods do not show parameters",
                "labels": [
                    "topic-pyreverse",
                    "enhancement"
                ],
                "description": "Pyreverse does not seem to include any parameters in UML class diagrams. All methods are listed with empty parameter lists.\r\n\r\n### Steps to reproduce\r\n1. Write a Python class with methods that take parameters (see code below)\r\n2. `pyreverse -o png -f ALL cow.py` (see png below)\r\n\r\n### Current behavior\r\nAll methods are shown having no parameters (empty parentheses).\r\n\r\n### Expected behavior\r\nThe `eat` and `move` methods should have `item` and `delta` parameters shown in the diagram. And `__init__` should perhaps have `position` (even though it has a default value).\r\n\r\n### pylint --version output\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 03:03:55) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n\r\n\r\n```python3\r\n\"\"\"A Cow can speak, move, and eat.\"\"\"\r\n\r\n\r\nclass Cow(object):\r\n    \"\"\"Cows are simple animals.\r\n\r\n    Cows have 4 legs (are \"quadrupeds\") and walk,\r\n    eat grass (are \"herbivores\"), and say \"moo\".\r\n    \"\"\"\r\n\r\n    def __init__(self, position=(0, 0)):\r\n        \"\"\"Instantiate a new instance of the Cow class.\r\n\r\n        In instantiating the cow class, you may opt to provide\r\n        a starting position.\r\n        \"\"\"\r\n        self.position = position\r\n        self.stomach = []\r\n        self.respired = 0\r\n\r\n    def speak(self):\r\n        \"\"\"Cow says \"moo\".\"\"\"\r\n        return \"moo\"\r\n\r\n    def move(self, delta):\r\n        \"\"\"Cow walks on 4 legs.\"\"\"\r\n        self.position = (self.position[0] + delta[0],\r\n                         self.position[1] + delta[1])\r\n        return \"This quadruped walked to \" + str(self.position)\r\n\r\n    def eat(self, item):\r\n        \"\"\"Cow eats grass.\"\"\"\r\n        if item == \"grass\":\r\n            self.stomach.append(item)\r\n            return \"ate \" + item\r\n        else:\r\n            return \"This herbivore doesn't eat \" + item\r\n\r\n    def respire(self):\r\n        \"\"\"Cow respired.\"\"\"\r\n        self.respired += 1\r\n        return \"This cow respired through its nostrils.\"\r\n```\r\n\r\n![cow](https://user-images.githubusercontent.com/13035339/40387607-3b9aab1a-5ddb-11e8-881a-511379c4cf78.png)"
            },
            {
                "repo_url": "https://github.com/PyCQA/pylint",
                "id": 2563,
                "title": "E1101: (Flask) Method 'jinja_env' has no 'add_extension', 'filter' member (no-member)",
                "labels": [],
                "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run `pylint hello.py` (after installing flask 1.0.2), where `hello.py` is a simple flask app as below:\r\n```python\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.jinja_env.add_extension('jinja2.ext.do')\r\napp.jinja_env.filters['somefilter'] = lambda s: s\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return 'Hello, World!'\r\n```\r\n\r\n### Current behavior\r\npylint outputs the following for the file above:\r\n```shell\r\n************* Module hello\r\nhello.py:3:0: E1101: Method 'jinja_env' has no 'add_extension' member (no-member)\r\nhello.py:4:0: E1101: Method 'jinja_env' has no 'filters' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nIt should give no error because `add_extension` and `filters` are members of `Flask.jinja_env`.\r\n\r\n### pylint --version output\r\n```shell\r\npylint 2.1.1\r\nastroid 2.0.4\r\npython 3.6.6\r\n```\r\n### Check the docs below for `jinja environment`\r\n[Flask.jinja_env](http://flask.pocoo.org/docs/1.0/api/?highlight=jinja_env#flask.Flask.jinja_env)\r\n[Flask.jinja_env.filters](http://flask.pocoo.org/docs/1.0/templating/#registering-filters)\r\n[jinja2.Environment.add_extension](http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment.add_extension)\r\n* Also, `jinja_env` is a cached property. Somewhat like [this](https://github.com/pydanny/cached-property).\r\n\r\n### workaround\r\napart from disabling, if we change code as follows, pylint shows no errors.\r\n```python\r\napp.jinja_env().add_extension('jinja2.ext.do')\r\napp.jinja_env().filters['somefilter'] = lambda s: s\r\n```\r\n"
            }
        ]
    },
    "regebro/pyroma": {
        "all": [
            {
                "repo_url": "https://github.com/regebro/pyroma",
                "id": 28,
                "title": "pyroma 2.3.1 not wokring on Windows 10",
                "labels": [],
                "description": "`pyroma` fails to run and results in the following error. `black` is just as an example here. `pyroma` fails when run on other folders containing `python` code as well.\r\n\r\n#### Error information\r\n```\r\n$ pyroma.exe -d black/\r\n------------------------------\r\nChecking black/\r\nException when running setup.\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\site-packages\\pyroma\\projectdata.py\", line 138, in run_setup\r\n    exec_(f.read(), glocals, glocals)\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\encodings\\cp1252.py\", line 23, in decode\r\n    return codecs.charmap_decode(input,self.errors,decoding_table)[0]\r\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position 22: character maps to <undefined>\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\sanbha\\AppData\\Local\\Programs\\Python\\Python36\\Lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Users\\sanbha\\AppData\\Local\\Programs\\Python\\Python36\\Lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\sanbha\\work\\black\\env\\Scripts\\pyroma.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\site-packages\\pyroma\\__init__.py\", line 63, in main\r\n    rating = run(mode, argument)\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\site-packages\\pyroma\\__init__.py\", line 75, in run\r\n    data = projectdata.get_data(os.path.abspath(argument))\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\site-packages\\pyroma\\projectdata.py\", line 167, in get_data\r\n    distro = run_setup('setup.py', stop_after='config')\r\n  File \"c:\\users\\sanbha\\work\\black\\env\\lib\\site-packages\\pyroma\\projectdata.py\", line 151, in run_setup\r\n    script_name)\r\nRuntimeError: 'distutils.core.setup()' was never called -- perhaps 'setup.py' is not a Distutils setup script?\r\n```\r\n\r\n#### Steps to reproduce\r\n1. Clone `black` repository &rightarrow; `git clone git@github.com:ambv/black.git`\r\n2. Create `virtualenv` &rightarrow; `virtualenv black/`\r\n3. Activate `virtualenv` &rightarrow; `$ . env/Scripts/activate`\r\n4. Install `pyroma` using `pip` &rightarrow; `pip install pyroma`\r\n5. Run `pyroma` &rightarrow; `pyroma -d black/`\r\n\r\n#### Environment\r\nOperating system: Windows 10 Enterprise\r\nPython version: 3.6.6, PE32+ executable (console) x86-64, for MS Windows\r\n`pyroma` version: 2.3.1\r\nBash version: GNU bash, version 4.4.19(2)-release (x86_64-pc-msys)\r\n"
            },
            {
                "repo_url": "https://github.com/regebro/pyroma",
                "id": 16,
                "title": "[Question] Continuous integration behavior",
                "labels": [],
                "description": "### 1. Summary\n\nMy pyroma Final rating:\n\n1. Local \u2014 10/10,\n1. Travis CI \u2014 9/10,\n1. AppVeyor \u2014 0/10,\n1. CircleCI \u2014 0/10.\n\n### 2. Local environment\n\n+ Windows 10 Enterprise LTSB 64-bit EN,\n+ Python 3.6.4,\n+ pyroma 2.3.\n\n### 3. Configuration\n\nSee my `Readme.rst`, `requirements.txt`, `setup.cfg`, `setup.py`, `.travis.yml`, `appveyor.yml` and `circle.yml` in [**test repository**](https://github.com/Kristinita/SashaPyromaDebugging).\n\nI add [**flake8**](https://pypi.python.org/pypi/flake8), [**pydocstyle**](http://www.pydocstyle.org/) and [**vulture**](https://github.com/jendrikseipp/vulture) in CI `yml` files, to demonstrate, that another tools correct works for me in Continuous Integration.\n\n### 4. Steps to reproduce\n\nIn root folder of my repository I run:\n\n    pyroma .\n\n### 5. Expected behavior\n\nLocal:\n\n```\nD:\\SashaPyromaDebugging>pyroma .\n------------------------------\nChecking .\nRegistered VCS backend: git\nRegistered VCS backend: hg\nConfig variable 'Py_DEBUG' is unset, Python ABI tag may be incorrect\nConfig variable 'WITH_PYMALLOC' is unset, Python ABI tag may be incorrect\n\nConfig variable 'Py_DEBUG' is unset, Python ABI tag may be incorrect\nConfig variable 'WITH_PYMALLOC' is unset, Python ABI tag may be incorrect\n\nRegistered VCS backend: svn\nRegistered VCS backend: bzr\nFound erichek\n------------------------------\nFinal rating: 10/10\nYour cheese is so fresh most people think it's a cream: Masc\n```\n\n### 6. CI behavior\n\n+ [**Travis CI**](https://travis-ci.org/Kristinita/SashaPyromaDebugging/builds/336832977),\n+ [**AppVeyor**](https://ci.appveyor.com/project/Kristinita/sashapyromadebugging/build/1.0.1),\n+ [**CircleCI**](https://circleci.com/gh/Kristinita/SashaPyromaDebugging/1).\n\nThanks."
            },
            {
                "repo_url": "https://github.com/regebro/pyroma",
                "id": 18,
                "title": "perf(requirements): Non-old setuptools version in requirements",
                "labels": [],
                "description": "### 1. Summary\r\n\r\nSome machines can have old setuptools version, and pyroma can work incorrect.\r\n\r\nFor example, old setuptools version uses in AppVeyor and Circle CI at the time (28.8.0).\r\n\r\n### 2. Behavior before pull-request\r\n\r\n+ [**AppVeyor**](https://ci.appveyor.com/project/Kristinita/sashapyromadebugging/build/1.0.1),\r\n+ [**Circle CI**](https://circleci.com/gh/Kristinita/SashaPyromaDebugging/1).\r\n\r\n```bash\r\n$ pyroma .\r\n\r\n------------------------------\r\nChecking .\r\nRegistered VCS backend: git\r\nRegistered VCS backend: hg\r\nRegistered VCS backend: svn\r\nRegistered VCS backend: bzr\r\nFound nothing\r\n------------------------------\r\nYour package does not have name data!\r\nYour package does not have version data!\r\nThe version number should be a string.\r\nThe package's version number does not comply with PEP-386 or PEP-440.\r\nThe package had no description!\r\nThe package's long_description is quite short.\r\nYour package does not have classifiers data.\r\nYou should specify what Python versions you support.\r\nYour package does not have keywords data.\r\nYour package does not have author data.\r\nYour package does not have author_email data.\r\nYour package does not have url data.\r\nYour package does not have license data.\r\nYou should specify license in classifiers.\r\nYou are using Setuptools or Distribute but do not specify if this package is zip_safe or not. You should specify it, as it defaults to True, which you probably do not want.\r\n------------------------------\r\nFinal rating: 0/10\r\nThis cheese seems to contain no dairy products\r\n------------------------------\r\n\r\npyroma . returned exit code 2\r\n```\r\n\r\n### 3. Behavior after pull request\r\n\r\nIf `pip install -U setuptools` in CI scripts:\r\n\r\n+ [**AppVeyor**](https://ci.appveyor.com/project/Kristinita/sashapyromadebugging/build/1.0.2),\r\n+ [**Circle CI**](https://circleci.com/gh/Kristinita/SashaPyromaDebugging/3).\r\n\r\n```bash\r\n$ pyroma .\r\n\r\n------------------------------\r\nChecking .\r\nRegistered VCS backend: git\r\nRegistered VCS backend: hg\r\nRegistered VCS backend: svn\r\nRegistered VCS backend: bzr\r\nFound erichek\r\n------------------------------\r\nThe package's long_description is quite short.\r\n------------------------------\r\nFinal rating: 9/10\r\nCottage Cheese\r\n------------------------------\r\n\r\n```\r\n\r\nThanks.\r\n"
            },
            {
                "repo_url": "https://github.com/regebro/pyroma",
                "id": 1,
                "title": " check-manifest integration / merge",
                "labels": [],
                "description": "Hi,\r\nThere is another tool which may overlap with Pyroma. Merging them together might be useful for the users: https://github.com/mgedmin/check-manifest\r\n-- Anonymous"
            }
        ],
        "suitable": []
    },
    "rubik/radon": {
        "all": [
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 85,
                "title": "Support configuration file",
                "labels": [],
                "description": "I use radon on CodeClimate, and it's the only engine that requires configuration inside my `.codeclimate.yml` file. It would be much more straightforward to have a `.radon.yml` or `.radon.txt` file with the configurations, so I could run `codeclimate analyze -r radon` and/or `radon` itself and have the same output without having to figure which parameters codeclimate passes for each configuration on `.codeclimate.yml`.\n"
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 137,
                "title": "Feature request: HTML reports",
                "labels": [],
                "description": "Would it be possible to add HTML reporting of all three types of metrics (cc, mi, raw) linked to the source code (perhaps in a similar way to [flake-8](https://github.com/lordmauve/flake8-html))?"
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 128,
                "title": "integration \"radon raw\" results into jenkins",
                "labels": [],
                "description": "It would be great if the results of \"radon raw\" command can be integrated into Jenkins through the plugin https://wiki.jenkins.io/display/JENKINS/SLOCCount+Plugin.\r\n\r\nThe plugin needs SLOCCount or cloc report files, example contents of a cloc report file is given at http://cloc.sourceforge.net/#combine_reports."
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 139,
                "title": "radon fails to read files with utf-8 with BOM encoding on Windows",
                "labels": [],
                "description": "![image](https://user-images.githubusercontent.com/576443/38365929-cbeef992-38e6-11e8-9a0f-69404555d250.png)\r\n\r\n[utf8-bom.zip](https://github.com/rubik/radon/files/1879986/utf8-bom.zip)\r\n"
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 123,
                "title": "should the with statement add to cyclomatic complexity?",
                "labels": [],
                "description": "The docs state that the `with` statement adds to cyclomatic complexity because a `with` roughly corresponds to a `try`/`except`.\r\n\r\nWhile a `with` statement does translate to a `try`/`except`/`finally` under the hood, why should this count towards the complexity of the code containing the `with` statement?  There is no additional execution branch present in the code containing the `with` statement, is there?  That complexity (i.e. additional execution branch) is factored out to the code that defines the context manager utilized by the `with` statement.\r\n\r\nFor example, say I define a context manager:\r\n```python\r\n@contextmanager\r\ndef transaction(db):\r\n    db.begin()\r\n    try:\r\n        yield None\r\n    except:\r\n        db.rollback()\r\n        raise\r\n    else:\r\n        db.commit()\r\n```\r\n...and utilize this in a function:\r\n```python\r\ndef write_to _db(db):\r\n    with transaction(db):\r\n        db.insert(...)\r\n```\r\nThe `transaction` context manager function is going to have a complexity based on the code paths introduced by the `try`/`except`/`else`, but I wouldn't think you would want to double-count that complexity for the `with` statement used within the `write_to_db` function."
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 155,
                "title": "Since 2.3.1, radon produces no output to the console",
                "labels": [],
                "description": "Radon 2.3.0 works fine with python 3.7.0 and 3.6.6\r\n\r\nStarting with 2.3.1, no output to the console\r\n\r\nLinux Mint 17.3"
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 156,
                "title": "How does Radon cc calculate a class's complexity?",
                "labels": [],
                "description": "I can not find any documentation about how Radon cc calculates a class's complexity, then I assume from its outputs that it average a class's methods' complexities and round it to the nearest integer.\r\n\r\nThen I test Radon with this class. It has 6 methods, 5 with complexity of 1 and the other with complexity of 5. THen the average is 1.66 and Radon should report 2. In fact, it returns 1.\r\n\r\nIf I add 1 more IF statement to it, then the complexity is raised to 2 (average is 1.8). \r\n\r\nI attach here the test file.\r\n\r\nBest,\r\n[large_class.py.txt](https://github.com/rubik/radon/files/2491955/large_class.py.txt)\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 143,
                "title": "raw metrics of single line docstrings",
                "labels": [],
                "description": "First, I have not read the code... just experimenting with some samples. Sorry if I got any wrong conclusion.\r\n\r\nI have noticed that single-line docstrings are counted as `single_comments` but not `comments`.\r\n\r\nThe problem is that on \"Comment Stats\", the `C` seems to refers to `comments` so single line docstrings are never include even on `C + M`. I guess a quick solution would be make:\r\n\r\n```\r\nC = single_comments + non_single_comments\r\n```\r\n\r\n`comments` should not be used because lines with`# ` is counted both on `comments` and `single_comments`.\r\n\r\n---------\r\n\r\nGoing a bit off-topic. IMO a better solution would be to remove the `multi` count, instead have `docstring` count that would count lines for both single-line or multi-line docstring. And `comments` would count just lines with `#`.\r\n\r\nwhat do you think?\r\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/rubik/radon",
                "id": 156,
                "title": "How does Radon cc calculate a class's complexity?",
                "labels": [],
                "description": "I can not find any documentation about how Radon cc calculates a class's complexity, then I assume from its outputs that it average a class's methods' complexities and round it to the nearest integer.\r\n\r\nThen I test Radon with this class. It has 6 methods, 5 with complexity of 1 and the other with complexity of 5. THen the average is 1.66 and Radon should report 2. In fact, it returns 1.\r\n\r\nIf I add 1 more IF statement to it, then the complexity is raised to 2 (average is 1.8). \r\n\r\nI attach here the test file.\r\n\r\nBest,\r\n[large_class.py.txt](https://github.com/rubik/radon/files/2491955/large_class.py.txt)\r\n\r\n"
            }
        ]
    },
    "twolfson/restructuredtext-lint": {
        "all": [
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 23,
                "title": "Automatic error fixing",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "This may be out of scope but I'd love to see this tool to be able to automatic fix issues, this makes for many users the difference between ignoring issues and actually fixing them. I guess most issues are rather easily fixable automatically.\n"
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 47,
                "title": "add support for Python 3.7",
                "labels": [],
                "description": "Original patch by Miro Hron\u010dok. See https://bugzilla.redhat.com/show_bug.cgi\\?id\\=1605884"
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 1,
                "title": "Create RestructuredtextLinter class",
                "labels": [
                    "enhancement"
                ],
                "description": "If we implement settings, move to a class where we can initialize with those settings. Then, we will keep `run` as a sugar method which automatically instantiates a new class.\n"
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 43,
                "title": "New check to enforce line length?",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "I would like to be able to lint my RST files for excessively long lines. Since this is likely to be controversial, the new check might best be ignored by default?\r\n\r\ni.e. something similar to the ``flake8`` code ``E501`` for maximum line length, which can be configured at the command line:\r\n\r\n```\r\n  --max-line-length=n   Maximum allowed line length for the entirety of this\r\n                        run. (Default: 79)\r\n```\r\n\r\nI would suggest using the same default line length (and double checking if this counts the new line character or not)."
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 38,
                "title": "Supply directory names at command line to search",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Related Python linting tools like ``pep8``, ``flake8`` and ``pydocstyle`` will accept a mixture of filenames and directory names (e.g. ``.``, ``Tests`` or ``Tests/``). When a directory is given, they appear to recurse under it and lint any matching files (here presumably using ``*.py``).\r\n\r\nI would like to be able to run commands like ``rst-lint *.rst Scripts/ Tests/`` or just ``rsl-lint .`` and have it recurse under the given directories to find ``*.rst`` files. This pattern might be set by a new optional argument."
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 23,
                "title": "Automatic error fixing",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "This may be out of scope but I'd love to see this tool to be able to automatic fix issues, this makes for many users the difference between ignoring issues and actually fixing them. I guess most issues are rather easily fixable automatically.\n"
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 43,
                "title": "New check to enforce line length?",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "I would like to be able to lint my RST files for excessively long lines. Since this is likely to be controversial, the new check might best be ignored by default?\r\n\r\ni.e. something similar to the ``flake8`` code ``E501`` for maximum line length, which can be configured at the command line:\r\n\r\n```\r\n  --max-line-length=n   Maximum allowed line length for the entirety of this\r\n                        run. (Default: 79)\r\n```\r\n\r\nI would suggest using the same default line length (and double checking if this counts the new line character or not)."
            },
            {
                "repo_url": "https://github.com/twolfson/restructuredtext-lint",
                "id": 38,
                "title": "Supply directory names at command line to search",
                "labels": [
                    "enhancement",
                    "help wanted"
                ],
                "description": "Related Python linting tools like ``pep8``, ``flake8`` and ``pydocstyle`` will accept a mixture of filenames and directory names (e.g. ``.``, ``Tests`` or ``Tests/``). When a directory is given, they appear to recurse under it and lint any matching files (here presumably using ``*.py``).\r\n\r\nI would like to be able to run commands like ``rst-lint *.rst Scripts/ Tests/`` or just ``rsl-lint .`` and have it recurse under the given directories to find ``*.rst`` files. This pattern might be set by a new optional argument."
            }
        ]
    },
    "myint/rstcheck": {
        "all": [
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 26,
                "title": "Added support for regex",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 30,
                "title": "Option to validate console and doctest",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi,\r\n\r\nI'm currently trying to automate the validation `rst` files used to document our project and while developing my own solution I found `rstcheck`. It does almost all that we need, however a key component for us is to validate the shell commands and also doctest. I see you explicitly do not run doctest, noting the obvious danger of doing so. It would be the same with shell sessions `.. code-block:: console` and `.. code-block:: pycon`.\r\n\r\nHowever, would it be acceptable to have a command line switch to enable such tests, default-off? If so I'd like to submit patches to provide those.... otherwise I'll need to create a complimentary project to check those, not so great :-)"
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 31,
                "title": "extended control of C/C++ validation",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi,\r\n\r\nThe current `c_checker()` and `cpp_checker()` uses a simple `-I. -I..` which will get you some basic tests, but in real world we're often using things like `pkg-config --cflags glib-2.0` and the likes to provide definitions and more include paths. Then a way to control `INCLUDE_FLAGS` would be required. I'm not sure how to best provide these extensions in a compatible way so we don't break sphinx, maybe using comments?\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. code-block: c\r\n  regular code block here\r\n```\r\nEventually allow these to be linked in addition to syntax check:\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. rstcheck-link: yes\r\n.. code-block: c\r\n  regular code block here\r\n```\r\n\r\nLikewise, sometimes in tutorial/documentation we split the code into multiple pieces that can't be validated at once. I could work-around that by using an external C/C++ file with include statements, however if we could add a argument to \"append to previous block\" it would be amazing, allowing things like `rstcheck-mode` with a choice of `new`, `append` and `ignore`:\r\n\r\n```\r\n.. code-block: c\r\n\r\n  void on_event(void *ctx) {\r\n   ...\r\n  }\r\n\r\nThis provides a function to callback when event happens...\r\n\r\n.. rstcheck-mode: append\r\n.. code-block: c\r\n\r\n  int main(void) {\r\n   my_lib_init();\r\n   my_lib_on_event_set(on_event, NULL);\r\n   return 0;\r\n  }\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 50,
                "title": "Incompatiblitily with sphinx 1.8",
                "labels": [],
                "description": "This code is causing problems `sphinx.errors.ApplicationError: Source directory and destination directory cannot be identical`\r\nhttps://github.com/myint/rstcheck/blob/0bcb5101493063d49235d5dc55b08b2ecfd6a9ee/rstcheck.py#L892\r\n\r\nRef https://github.com/rtfd/readthedocs.org/pull/4631"
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 19,
                "title": "Erronous info: Hyperlink target \"my-reference-label\" is not referenced.",
                "labels": [
                    "enhancement",
                    "help wanted",
                    "bug"
                ],
                "description": "rstcheck reports an errnous problem on the example from http://www.sphinx-doc.org/en/1.4.8/markup/inline.html#cross-referencing-arbitrary-locations\r\n```\r\n.. _my-reference-label:\r\n\r\nSection to cross-reference\r\n--------------------------\r\n\r\nThis is the text of the section.\r\n\r\nIt refers to the section itself, see :ref:`my-reference-label`.\r\n```\r\n`index.rst:1: (INFO/1) Hyperlink target \"my-reference-label\" is not referenced.\r\n`"
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 49,
                "title": "Support for ipython in code blocks",
                "labels": [
                    "question"
                ],
                "description": "Would adding the following to the checker dictionary after line 708 of `rstcheck.py` make it work for ipython?\r\n``` 'ipython': lambda source, _: lambda: check_python(source)```"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 31,
                "title": "extended control of C/C++ validation",
                "labels": [
                    "enhancement"
                ],
                "description": "Hi,\r\n\r\nThe current `c_checker()` and `cpp_checker()` uses a simple `-I. -I..` which will get you some basic tests, but in real world we're often using things like `pkg-config --cflags glib-2.0` and the likes to provide definitions and more include paths. Then a way to control `INCLUDE_FLAGS` would be required. I'm not sure how to best provide these extensions in a compatible way so we don't break sphinx, maybe using comments?\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. code-block: c\r\n  regular code block here\r\n```\r\nEventually allow these to be linked in addition to syntax check:\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. rstcheck-link: yes\r\n.. code-block: c\r\n  regular code block here\r\n```\r\n\r\nLikewise, sometimes in tutorial/documentation we split the code into multiple pieces that can't be validated at once. I could work-around that by using an external C/C++ file with include statements, however if we could add a argument to \"append to previous block\" it would be amazing, allowing things like `rstcheck-mode` with a choice of `new`, `append` and `ignore`:\r\n\r\n```\r\n.. code-block: c\r\n\r\n  void on_event(void *ctx) {\r\n   ...\r\n  }\r\n\r\nThis provides a function to callback when event happens...\r\n\r\n.. rstcheck-mode: append\r\n.. code-block: c\r\n\r\n  int main(void) {\r\n   my_lib_init();\r\n   my_lib_on_event_set(on_event, NULL);\r\n   return 0;\r\n  }\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/myint/rstcheck",
                "id": 19,
                "title": "Erronous info: Hyperlink target \"my-reference-label\" is not referenced.",
                "labels": [
                    "enhancement",
                    "help wanted",
                    "bug"
                ],
                "description": "rstcheck reports an errnous problem on the example from http://www.sphinx-doc.org/en/1.4.8/markup/inline.html#cross-referencing-arbitrary-locations\r\n```\r\n.. _my-reference-label:\r\n\r\nSection to cross-reference\r\n--------------------------\r\n\r\nThis is the text of the section.\r\n\r\nIt refers to the section itself, see :ref:`my-reference-label`.\r\n```\r\n`index.rst:1: (INFO/1) Hyperlink target \"my-reference-label\" is not referenced.\r\n`"
            }
        ]
    },
    "pyupio/safety": {
        "all": [
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 90,
                "title": "pip 10 api breakage",
                "labels": [],
                "description": "Quoting distutils-sig:\r\n\r\n> We're in the process of starting to plan for a release of pip (the\r\nlong-awaited pip 10). We're likely still a month or two away from a\r\nrelease, but now is the time for people to start ensuring that\r\neverything works for them. One key change in the new version will be\r\nthat all of the internal APIs of pip will no longer be available, so\r\nany code that currently calls functions in the \"pip\" namespace will\r\nbreak. Calling pip's internal APIs has never been supported, and\r\nalways carried a risk of such breakage, so projects doing so should,\r\nin theory, be prepared for such things. However, reality is not always\r\nthat simple, and we are aware that people will need time to deal with\r\nthe implications.\r\n\r\n> Just in case it's not clear, simply finding where the internal APIs\r\nhave moved to and calling them under the new names is *not* what\r\npeople should do. We can't stop people calling the internal APIs,\r\nobviously, but the idea of this change is to give people the incentive\r\nto find a supported approach, not just to annoy people who are doing\r\nthings we don't want them to ;-)\r\n\r\n> So please - if you're calling pip's internals in your code, take the\r\nopportunity *now* to check out the in-development version of pip, and\r\nensure your project will still work when pip 10 is released.\r\n\r\n> And many thanks to anyone else who helps by testing out the new\r\nversion, as well :-)\r\n\r\n> Thanks,\r\nPaul\r\n_________\r\n\r\nSafety uses `pip.get_installed_distributions` which has moved to https://github.com/pypa/pip/blob/master/src/pip/_internal/utils/misc.py#L333"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 158,
                "title": "`safety check --bare` should not produce output when no vulnerabilities are found",
                "labels": [],
                "description": "* safety version: 1.8.4\r\n* Python version: 2.7.5\r\n* Operating System: CentOS\r\n\r\n### Description\r\n\r\nAttempting to use `safety check --bare` in a cronjob expecting output and email only if vulnerabilities are seen.\r\n\r\nUnfortunately the --bare option renders an empty string which still produces a blank line which means cron will generate email even when no vulnerabilities are seen.\r\n\r\n### What I Did\r\n\r\n```\r\nMAILTO=\"my email address\"\r\n15 12 * * * safety check --bare\r\n```\r\n\r\n### Work-around\r\n\r\nIn order to get the behavior I needed, I had to write a small shell script to check the status code of running `safety check` and deliver the output when it was non-zero. While this works, `safety check` should be made to work directly in cron."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 161,
                "title": "Adding Proxy Support. ",
                "labels": [],
                "description": "This uses native requests modules proxy behind the scenes. Provided the command line options to pass the proxy configs. \r\nThis will help corporate people. \r\nThis PR is addressing issue: [Add proxy command line option](https://github.com/pyupio/safety/issues/157)\r\nPlease review the PR and tell me what else need to be done to get it merged."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 70,
                "title": "Add support for tox.ini",
                "labels": [
                    "new feature",
                    "approved"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 159,
                "title": "Removed newline from end if bare report and no vulnerabilities ",
                "labels": [],
                "description": "Pull request resolving this issue.\r\n[Issue 158: safety check --bare` should not produce output when no vulnerabilities are found](https://github.com/pyupio/safety/issues/158)\r\nPlease share what else need to be done for this to be accepted. \r\nFound no contribution guide. \r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 119,
                "title": "UnicodeEncodeError: 'charmap' codec can't encode characters in position 0-79: character maps to <undefined>",
                "labels": [],
                "description": "* safety version: 1.7.0\r\n* Python version: Python 3.6.1\r\n* Operating System: `Windows-10-10.0.16299-SP0`, `AMD64`\r\n\r\n### Description\r\n- Trying to use `safety check`\r\n- Same error always results: `UnicodeEncodeError: 'charmap' codec can't encode characters in position 0-79: character maps to <undefined>`\r\n\r\n### What I Did\r\n```\r\nsafety check -r simple-requirements.txt\r\n```\r\n\r\n#### Contents of `simple-requirements.txt`\r\n```\r\nsafety\r\n```\r\n- There are absolutely no unicode characters in this file\r\n\r\n#### Traceback\r\n```\r\n$ safety check -r simple-requirements.txt\r\nWarning: unpinned requirement 'safety' found in simple-requirements.txt, unable to check.\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\nicholas\\appdata\\local\\programs\\python\\python36\\Lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\users\\nicholas\\appdata\\local\\programs\\python\\python36\\Lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\nicholas\\.virtualenvs\\pybotics-d30fj9Hx\\Scripts\\safety.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\core.py\", line 722, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\core.py\", line 697, in main\r\n    rv = self.invoke(ctx)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\core.py\", line 895, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\core.py\", line 535, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\safety\\cli.py\", line 66, in check\r\n    key=key\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\termui.py\", line 420, in secho\r\n    return echo(style(text, **styles), file=file, nl=nl, err=err, color=color)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\site-packages\\click\\utils.py\", line 259, in echo\r\n    file.write(message)\r\n  File \"c:\\users\\nicholas\\.virtualenvs\\pybotics-d30fj9hx\\lib\\encodings\\cp1252.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 0-79: character maps to <undefined>\r\n```\r\n\r\n### Similar Issues\r\n- https://github.com/pyupio/safety/issues/22"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 163,
                "title": "Update pip to 18.1",
                "labels": [],
                "description": "\nThis PR updates [pip](https://pypi.org/project/pip) from **9.0.3** to **18.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 18.1\n   ```\n   =================\n\nFeatures\n--------\n\n- Allow PEP 508 URL requirements to be used as dependencies.\n\n  As a security measure, pip will raise an exception when installing packages from\n  PyPI if those packages depend on packages not also hosted on PyPI.\n  In the future, PyPI will block uploading packages with such external URL dependencies directly. (`4187 &lt;https://github.com/pypa/pip/issues/4187&gt;`_)\n- Upgrade pyparsing to 2.2.1. (`5013 &lt;https://github.com/pypa/pip/issues/5013&gt;`_)\n- Allows dist options (--abi, --python-version, --platform, --implementation) when installing with --target (`5355 &lt;https://github.com/pypa/pip/issues/5355&gt;`_)\n- Support passing ``svn+ssh`` URLs with a username to ``pip install -e``. (`5375 &lt;https://github.com/pypa/pip/issues/5375&gt;`_)\n- pip now ensures that the RECORD file is sorted when installing from a wheel file. (`5525 &lt;https://github.com/pypa/pip/issues/5525&gt;`_)\n- Add support for Python 3.7. (`5561 &lt;https://github.com/pypa/pip/issues/5561&gt;`_)\n- Malformed configuration files now show helpful error messages, instead of tracebacks. (`5798 &lt;https://github.com/pypa/pip/issues/5798&gt;`_)\n\nBug Fixes\n---------\n\n- Checkout the correct branch when doing an editable Git install. (`2037 &lt;https://github.com/pypa/pip/issues/2037&gt;`_)\n- Run self-version-check only on commands that may access the index, instead of\n  trying on every run and failing to do so due to missing options. (`5433 &lt;https://github.com/pypa/pip/issues/5433&gt;`_)\n- Allow a Git ref to be installed over an existing installation. (`5624 &lt;https://github.com/pypa/pip/issues/5624&gt;`_)\n- Show a better error message when a configuration option has an invalid value. (`5644 &lt;https://github.com/pypa/pip/issues/5644&gt;`_)\n- Always revalidate cached simple API pages instead of blindly caching them for up to 10\n  minutes. (`5670 &lt;https://github.com/pypa/pip/issues/5670&gt;`_)\n- Avoid caching self-version-check information when cache is disabled. (`5679 &lt;https://github.com/pypa/pip/issues/5679&gt;`_)\n- Avoid traceback printing on autocomplete after flags in the CLI. (`5751 &lt;https://github.com/pypa/pip/issues/5751&gt;`_)\n- Fix incorrect parsing of egg names if pip needs to guess the package name. (`5819 &lt;https://github.com/pypa/pip/issues/5819&gt;`_)\n\nVendored Libraries\n------------------\n\n- Upgrade certifi to 2018.8.24\n- Upgrade packaging to 18.0\n- Add pep517 version 0.2\n- Upgrade pytoml to 0.1.19\n- Upgrade pkg_resources to 40.4.3 (via setuptools)\n\nImproved Documentation\n----------------------\n\n- Fix &quot;Requirements Files&quot; reference in User Guide (`user_guide_fix_requirements_file_ref &lt;https://github.com/pypa/pip/issues/user_guide_fix_requirements_file_ref&gt;`_)\n   ```\n   \n  \n  \n   ### 18.0\n   ```\n   =================\n\nProcess\n-------\n\n- Switch to a Calendar based versioning scheme.\n- Formally document our deprecation process as a minimum of 6 months of deprecation\n  warnings.\n- Adopt and document NEWS fragment writing style.\n- Switch to releasing a new, non bug fix version of pip every 3 months.\n\nDeprecations and Removals\n-------------------------\n\n- Remove the legacy format from pip list. (3651, 3654)\n- Dropped support for Python 3.3. (3796)\n- Remove support for cleaning up egg fragment postfixes. (4174)\n- Remove the shim for the old get-pip.py location. (5520)\n\n  For the past 2 years, it&#39;s only been redirecting users to use the newer\n  https://bootstrap.pypa.io/get-pip.py location.\n\nFeatures\n--------\n\n- Introduce a new --prefer-binary flag, to prefer older wheels over newer source packages. (3785)\n- Improve autocompletion function on file name completion after options\n  which have ``&lt;file&gt;``, ``&lt;dir&gt;`` or ``&lt;path&gt;`` as metavar. (4842, 5125)\n- Add support for installing PEP 518 build dependencies from source. (5229)\n- Improve status message when upgrade is skipped due to only-if-needed strategy. (5319)\n\nBug Fixes\n---------\n\n- Update pip&#39;s self-check logic to not use a virtualenv specific file and honor cache-dir. (3905)\n- Remove compiled pyo files for wheel packages. (4471)\n- Speed up printing of newly installed package versions. (5127)\n- Restrict install time dependency warnings to directly-dependant packages. (5196, 5457)\n\n  Warning about the entire package set has resulted in users getting confused as\n  to why pip is printing these warnings.\n- Improve handling of PEP 518 build requirements: support environment markers and extras. (5230, 5265)\n- Remove username/password from log message when using index with basic auth. (5249)\n- Remove trailing os.sep from PATH directories to avoid false negatives. (5293)\n- Fix &quot;pip wheel pip&quot; being blocked by the &quot;don&#39;t use pip to modify itself&quot; check. (5311, 5312)\n- Disable pip&#39;s version check (and upgrade message) when installed by a different package manager. (5346)\n\n  This works better with Linux distributions where pip&#39;s upgrade message may\n  result in users running pip in a manner that modifies files that should be\n  managed by the OS&#39;s package manager.\n- Check for file existence and unlink first when clobbering existing files during a wheel install. (5366)\n- Improve error message to be more specific when no files are found as listed in as listed in PKG-INFO. (5381)\n- Always read ``pyproject.toml`` as UTF-8. This fixes Unicode handling on Windows and Python 2. (5482)\n- Fix a crash that occurs when PATH not set, while generating script location warning. (5558)\n- Disallow packages with ``pyproject.toml`` files that have an empty build-system table. (5627)\n\nVendored Libraries\n------------------\n\n- Update CacheControl to 0.12.5.\n- Update certifi to 2018.4.16.\n- Update distro to 1.3.0.\n- Update idna to 2.7.\n- Update ipaddress to 1.0.22.\n- Update pkg_resources to 39.2.0 (via setuptools).\n- Update progress to 1.4.\n- Update pytoml to 0.1.16.\n- Update requests to 2.19.1.\n- Update urllib3 to 1.23.\n\nImproved Documentation\n----------------------\n\n- Document how to use pip with a proxy server. (512, 5574)\n- Document that the output of pip show is in RFC-compliant mail header format. (5261)\n   ```\n   \n  \n  \n   ### 10.0.1\n   ```\n   ===================\n\nFeatures\n--------\n\n- Switch the default repository to the new &quot;PyPI 2.0&quot; running at\n  https://pypi.org/. (5214)\n\nBug Fixes\n---------\n\n- Fix a bug that made get-pip.py unusable on Windows without renaming. (5219)\n- Fix a TypeError when loading the cache on older versions of Python 2.7.\n  (5231)\n- Fix and improve error message when EnvironmentError occurs during\n  installation. (5237)\n- A crash when reinstalling from VCS requirements has been fixed. (5251)\n- Fix PEP 518 support when pip is installed in the user site. (5524)\n\nVendored Libraries\n------------------\n\n- Upgrade distlib to 0.2.7\n   ```\n   \n  \n  \n   ### 10.0.0\n   ```\n   ===================\n\nBug Fixes\n---------\n\n- Prevent false-positive installation warnings due to incomplete name\n  normalizaton. (5134)\n- Fix issue where installing from Git with a short SHA would fail. (5140)\n- Accept pre-release versions when checking for conflicts with pip check or pip\n  install. (5141)\n- ``ioctl(fd, termios.TIOCGWINSZ, ...)`` needs 8 bytes of data (5150)\n- Do not warn about script location when installing to the directory containing\n  sys.executable. This is the case when &#39;pip install&#39;ing without activating a\n  virtualenv. (5157)\n- Fix PEP 518 support. (5188)\n- Don&#39;t warn about script locations if ``--target`` is specified. (5203)\n   ```\n   \n  \n  \n   ### 10.0.0b2\n   ```\n   =====================\n\nBug Fixes\n---------\n\n- Fixed line endings in CA Bundle - 10.0.0b1 was inadvertently released with Windows\n  line endings. (5131)\n   ```\n   \n  \n  \n   ### 10.0.0b1\n   ```\n   =====================\n\nDeprecations and Removals\n-------------------------\n\n- Removed the deprecated ``--egg`` parameter to ``pip install``. (1749)\n- Removed support for uninstalling projects which have been installed using\n  distutils. distutils installed projects do not include metadata indicating\n  what files belong to that install and thus it is impossible to *actually*\n  uninstall them rather than just remove the metadata saying they&#39;ve been\n  installed while leaving all of the actual files behind. (2386)\n- Removed the deprecated ``--download`` option to ``pip install``. (2643)\n- Removed the deprecated --(no-)use-wheel flags to ``pip install`` and ``pip\n  wheel``. (2699)\n- Removed the deprecated ``--allow-external``, ``--allow-all-external``, and\n  ``--allow-unverified`` options. (3070)\n- Switch the default for ``pip list`` to the columns format, and deprecate the\n  legacy format. (3654, 3686)\n- Deprecate support for Python 3.3. (3796)\n- Removed the deprecated ``--default-vcs`` option. (4052)\n- Removed the ``setup.py test`` support from our sdist as it wasn&#39;t being\n  maintained as a supported means to run our tests. (4203)\n- Dropped support for Python 2.6. (4343)\n- Removed the --editable flag from pip download, as it did not make sense\n  (4362)\n- Deprecate SVN detection based on dependency links in ``pip freeze``. (4449)\n- Move all of pip&#39;s APIs into the pip._internal package, properly reflecting\n  the fact that pip does not currently have any public APIs. (4696, 4700)\n\nFeatures\n--------\n\n- Add `--progress-bar &lt;progress_bar&gt;` to ``pip download``, ``pip install`` and\n  ``pip wheel`` commands, to allow selecting a specific progress indicator or,\n  to completely suppress, (for example in a CI environment) use\n  ``--progress-bar off. (2369, 2756)\n- Add `--no-color` to `pip`. All colored output is disabled if this flag is\n  detected. (2449)\n- pip uninstall now ignores the absence of a requirement and prints a warning.\n  (3016, 4642)\n- Improved the memory and disk efficiency of the HTTP cache. (3515)\n- Support for packages specifying build dependencies in pyproject.toml (see\n  `PEP 518 &lt;https://www.python.org/dev/peps/pep-0518/&gt;`__). Packages which\n  specify one or more build dependencies this way will be built into wheels in\n  an isolated environment with those dependencies installed. (3691)\n- pip now supports environment variable expansion in requirement files using\n  only ``${VARIABLE}`` syntax on all platforms. (3728)\n- Allowed combinations of -q and -v to act sanely. Then we don&#39;t need warnings\n  mentioned in the issue. (4008)\n- Add `--exclude-editable` to ``pip freeze`` and ``pip list`` to exclude\n  editable packages from installed package list. (4015, 4016)\n- Improve the error message for the common ``pip install ./requirements.txt``\n  case. (4127)\n- Add support for the new `` url`` syntax from PEP 508. (4175)\n- Add setuptools version to the statistics sent to BigQuery. (4209)\n- Report the line which caused the hash error when using requirement files.\n  (4227)\n- Add a pip config command for managing configuration files. (4240)\n- Allow ``pip download`` to be used with a specific platform when ``--no-deps``\n  is set. (4289)\n- Support build-numbers in wheel versions and support sorting with\n  build-numbers. (4299)\n- Change pip outdated to use PackageFinder in order to do the version lookup so\n  that local mirrors in Environments that do not have Internet connections can\n  be used as the Source of Truth for latest version. (4336)\n- pip now retries on more HTTP status codes, for intermittent failures.\n  Previously, it only retried on the standard 503. Now, it also retries on 500\n  (transient failures on AWS S3), 520 and 527 (transient failures on\n  Cloudflare). (4473)\n- pip now displays where it is looking for packages, if non-default locations\n  are used. (4483)\n- Display a message to run the right command for modifying pip on Windows\n  (4490)\n- Add Man Pages for pip (4491)\n- Make uninstall command less verbose by default (4493)\n- Switch the default upgrade strategy to be &#39;only-if-needed&#39; (4500)\n- Installing from a local directory or a VCS URL now builds a wheel to install,\n  rather than running ``setup.py install``. Wheels from these sources are not\n  cached. (4501)\n- Don&#39;t log a warning when installing a dependency from Git if the name looks\n  like a commit hash. (4507)\n- pip now displays a warning when it installs scripts from a wheel outside the\n  PATH. These warnings can be suppressed using a new --no-warn-script-location\n  option. (4553)\n- Local Packages can now be referenced using forward slashes on Windows.\n  (4563)\n- pip show learnt a new Required-by field that lists currently installed\n  packages that depend on the shown package (4564)\n- The command-line autocompletion engine ``pip show`` now autocompletes\n  installed distribution names. (4749)\n- Change documentation theme to be in line with Python Documentation (4758)\n- Add auto completion of short options. (4954)\n- Run &#39;setup.py develop&#39; inside pep518 build environment. (4999)\n- pip install now prints an error message when it installs an incompatible\n  version of a dependency. (5000)\n- Added a way to distinguish between pip installed packages and those from the\n  system package manager in &#39;pip list&#39;. Specifically, &#39;pip list -v&#39; also shows\n  the installer of package if it has that meta data. (949)\n- Show install locations when list command ran with &quot;-v&quot; option. (979)\n\nBug Fixes\n---------\n\n- Allow pip to work if the ``GIT_DIR`` and ``GIT_WORK_TREE`` environment\n  variables are set. (1130)\n- Make ``pip install --force-reinstall`` not require passing ``--upgrade``.\n  (1139)\n- Return a failing exit status when `pip install`, `pip download`, or `pip\n  wheel` is called with no requirements. (2720)\n- Interactive setup.py files will no longer hang indefinitely. (2732, 4982)\n- Correctly reset the terminal if an exception occurs while a progress bar is\n  being shown. (3015)\n- &quot;Support URL-encoded characters in URL credentials.&quot; (3236)\n- Don&#39;t assume sys.__stderr__.encoding exists (3356)\n- Fix ``pip uninstall`` when ``easy-install.pth`` lacks a trailing newline.\n  (3741)\n- Keep install options in requirements.txt from leaking. (3763)\n- pip no longer passes global options from one package to later packages in the\n  same requirement file. (3830)\n- Support installing from Git refs (3876)\n- Use pkg_resources to parse the entry points file to allow names with colons.\n  (3901)\n- ``-q`` specified once correctly sets logging level to WARNING, instead of\n  CRITICAL. Use `-qqq` to have the previous behavior back. (3994)\n- Shell completion scripts now use correct executable names (e.g., ``pip3``\n  instead of ``pip``) (3997)\n- Changed vendored encodings from ``utf8`` to ``utf-8``. (4076)\n- Fixes destination directory of data_files when ``pip install --target`` is\n  used. (4092)\n- Limit the disabling of requests&#39; pyopenssl to Windows only. Fixes\n  &quot;SNIMissingWarning / InsecurePlatformWarning not fixable with pip 9.0 /\n  9.0.1&quot; (for non-Windows) (4098)\n- Support the installation of wheels with non-PEP 440 version in their\n  filenames. (4169)\n- Fall back to sys.getdefaultencoding() if locale.getpreferredencoding()\n  returns None in `pip.utils.encoding.auto_decode`. (4184)\n- Fix a bug where `SETUPTOOLS_SHIM` got called incorrectly for relative path\n  requirements by converting relative paths to absolute paths prior to calling\n  the shim. (4208)\n- Return the latest version number in search results. (4219)\n- Improve error message on permission errors (4233)\n- Fail gracefully when ``/etc/image_version`` (or another distro version file)\n  appears to exists but is not readable. (4249)\n- Avoid importing setuptools in the parent pip process, to avoid a race\n  condition when upgrading one of setuptools dependencies. (4264)\n- Fix for an incorrect ``freeze`` warning message due to a package being\n  included in multiple requirements files that were passed to ``freeze``.\n  Instead of warning incorrectly that the package is not installed, pip now\n  warns that the package was declared multiple times and lists the name of each\n  requirements file that contains the package in question. (4293)\n- Generalize help text for ``compile``/``no-compile`` flags. (4316)\n- Handle the case when ``/etc`` is not readable by the current user by using a\n  hardcoded list of possible names of release files. (4320)\n- Fixed a ``NameError`` when attempting to catch ``FileNotFoundError`` on\n  Python 2.7. (4322)\n- Ensure USER_SITE is correctly initialised. (4437)\n- Reinstalling an editable package from Git no longer assumes that the\n  ``master`` branch exists. (4448)\n- This fixes an issue where when someone who tries to use git with pip but pip\n  can&#39;t because git is not in the path environment variable. This clarifies the\n  error given to suggest to the user what might be wrong. (4461)\n- Improve handling of text output from build tools (avoid Unicode errors)\n  (4486)\n- Fix a &quot;No such file or directory&quot; error when using --prefix. (4495)\n- Allow commands to opt out of --require-venv. This allows pip help to work\n  even when the environment variable PIP_REQUIRE_VIRTUALENV is set. (4496)\n- Fix warning message on mismatched versions during installation. (4655)\n- pip now records installed files in a deterministic manner improving\n  reproducibility. (4667)\n- Fix an issue where ``pip install -e`` on a Git url would fail to update if a\n  branch or tag name is specified that happens to match the prefix of the\n  current ``HEAD`` commit hash. (4675)\n- Fix an issue where a variable assigned in a try clause was accessed in the\n  except clause, resulting in an undefined variable error in the except clause.\n  (4811)\n- Use log level `info` instead of `warning` when ignoring packages due to\n  environment markers. (4876)\n- Replaced typo mistake in subversion support. (4908)\n- Terminal size is now correctly inferred when using Python 3 on Windows.\n  (4966)\n- Abort if reading configuration causes encoding errors. (4976)\n- Add a ``--no-user`` option and use it when installing build dependencies.\n  (5085)\n\nVendored Libraries\n------------------\n\n- Upgraded appdirs to 1.4.3.\n- Upgraded CacheControl to 0.12.3.\n- Vendored certifi at 2017.7.27.1.\n- Vendored chardet at 3.0.4.\n- Upgraded colorama to 0.3.9.\n- Upgraded distlib to 0.2.6.\n- Upgraded distro to 1.2.0.\n- Vendored idna at idna==2.6.\n- Upgraded ipaddress to 1.0.18.\n- Vendored msgpack-python at 0.4.8.\n- Removed the vendored ordereddict.\n- Upgraded progress to 1.3.\n- Upgraded pyparsing to 2.2.0.\n- Upgraded pytoml to 0.1.14.\n- Upgraded requests to 2.18.4.\n- Upgraded pkg_resources (via setuptools) to 36.6.0.\n- Upgraded six to 1.11.0.\n- Vendored urllib3 at 1.22.\n- Upgraded webencodings to 0.5.1.\n\nImproved Documentation\n----------------------\n\n- Added documentation on usage of --build command line option (4262)\n-  (4358)\n- Document how to call pip from your code, including the fact that we do not\n  provide a Python API. (4743)\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pip\n  - Changelog: https://pyup.io/changelogs/pip/\n  - Homepage: https://pip.pypa.io/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 127,
                "title": "Replaced use of pip internal function.",
                "labels": [],
                "description": "As discussed in this thread: https://github.com/pypa/pip/issues/5243\r\nuse of the functions inside pip._internal is strongly discouraged. As\r\nsuch I have replaced this functions usage with the pip maintainers\r\nrecommended solution."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 46,
                "title": "Make --full-report the default?",
                "labels": [
                    "question"
                ],
                "description": "Should `--full-report` be the default option?\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 52,
                "title": "Add --offline option",
                "labels": [
                    "new feature"
                ],
                "description": "safety-db is now installable via pip, add it as an option.\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 71,
                "title": "Add support for conda.yml",
                "labels": [
                    "new feature",
                    "approved"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 47,
                "title": "Add Pipfile support",
                "labels": [
                    "new feature",
                    "approved"
                ],
                "description": "Safety already works with the currently active virtual environment, but it would be nice to to run:\r\n\r\n```\r\nsafety check -r Pipfile\r\n```\r\nor\r\n\r\n```\r\nsafety check -r Pipfile.lock\r\n```\r\n\r\nIt's probably the best to wait for https://github.com/pypa/pipfile/pull/57 before working on this."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 45,
                "title": "Check for Python versions with security issues",
                "labels": [
                    "under consideration",
                    "new feature"
                ],
                "description": "What do you think about checking if Python itself or some of its modules are subject to security issues? @haypo has been working on a list of Python versions with security issues, https://python-security.readthedocs.io/vulnerabilities.html\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 94,
                "title": "Update flake8 to 3.5.0",
                "labels": [],
                "description": "\nThere's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.\nYou are currently using **3.3.0**. I have updated it to **3.5.0**\n\n\n\nThese links might come in handy:  <a href=\"https://pypi.python.org/pypi/flake8\">PyPI</a> | <a href=\"https://pyup.io/changelogs/flake8/\">Changelog</a> | <a href=\"https://gitlab.com/pycqa/flake8\">Repo</a> \n\n\n\n### Changelog\n> \n>### 3.5.0\n\n>-------------------\n\n>You can view the `3.5.0 milestone`_ on GitLab for more details.\n\n>New Dependency Information\n>~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>- Allow for PyFlakes 1.6.0 (See also `GitLab359`_)\n\n>- Start using new PyCodestyle checks for bare excepts and ambiguous identifier\n>  (See also `GitLab361`_)\n\n>Features\n>~~~~~~~~\n\n>- Print out information about configuring VCS hooks (See also `GitLab335`_)\n\n>- Allow users to develop plugins &quot;local&quot; to a repository without using\n>  setuptools. See our documentation on local plugins for more information.\n>  (See also `GitLab357`_)\n\n>Bugs Fixed\n>~~~~~~~~~~\n\n>- Catch and helpfully report ``UnicodeDecodeError``\\ s when parsing\n>  configuration files. (See also `GitLab358`_)\n\n\n>.. all links\n>.. _3.5.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/20\n\n>.. issue links\n>.. _GitLab335:\n>    https://gitlab.com/pycqa/flake8/issues/335\n>.. _GitLab357:\n>    https://gitlab.com/pycqa/flake8/issues/357\n>.. _GitLab358:\n>    https://gitlab.com/pycqa/flake8/issues/358\n>.. _GitLab359:\n>    https://gitlab.com/pycqa/flake8/issues/359\n>.. _GitLab361:\n>    https://gitlab.com/pycqa/flake8/issues/361\n\n>.. merge request links\n\n\n\n\n>### 3.4.1\n\n>-------------------\n\n>You can view the `3.4.1 milestone`_ on GitLab for more details.\n\n>- Fix minor regression when users specify only a ``--select`` list with items\n>  in the enabled/extended select list.  (See also `GitLab354`_)\n\n>.. all links\n>.. _3.4.1 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/19\n\n>.. issue links\n>.. _GitLab354:\n>    https://gitlab.com/pycqa/flake8/issues/354\n\n>.. merge request links\n\n\n\n\n>### 3.4.0\n\n>-------------------\n\n>You can view the `3.4.0 milestone`_ on GitLab for more details.\n\n>- Refine logic around ``--select`` and ``--ignore`` when combined with the\n>  default values for each. (See also `GitLab318`_)\n\n>- Handle spaces as an alternate separate for error codes, e.g.,\n>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)\n\n>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.\n>  (See also `GitLab330`_)\n\n>- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)\n\n>- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.\n>  (See also `GitLab!193`_)\n\n>- Remove unused import of ``os`` in the git hook template (See also\n>  `GitLab!194`_)\n\n>.. all links\n>.. _3.4.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/18\n\n>.. issue links\n>.. _GitLab318:\n>    https://gitlab.com/pycqa/flake8/issues/318\n>.. _GitLab329:\n>    https://gitlab.com/pycqa/flake8/issues/329\n>.. _GitLab330:\n>    https://gitlab.com/pycqa/flake8/issues/330\n>.. _GitLab341:\n>    https://gitlab.com/pycqa/flake8/issues/341\n\n>.. merge request links\n>.. _GitLab!193:\n>    https://gitlab.com/pycqa/flake8/merge_requests/193\n>.. _GitLab!194:\n>    https://gitlab.com/pycqa/flake8/merge_requests/194\n\n\n\n\n\n\n\n\n*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*\n\nHappy merging! \ud83e\udd16\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 147,
                "title": "How can I obtain the CVE of the vulnerabilities?",
                "labels": [],
                "description": "Hi,\r\n\r\nIs there a way of print a report including CVE id of the vulnerabilities?\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 76,
                "title": "rst broken on pypi for 1.5.1",
                "labels": [],
                "description": "https://pypi.python.org/pypi/safety (https://pypi.python.org/pypi/safety/1.5.1)"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 134,
                "title": "issue-131: write log messages to stderr instead of stdout",
                "labels": [],
                "description": "Log messages should go to stderr. This way others can use `safety` inside their own scripts without getting stdout all mixed up. Solves issue #131 "
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 145,
                "title": "Add GitLab integration",
                "labels": [],
                "description": "* safety version:\r\n* Python version:\r\n* Operating System:\r\n\r\n### Description\r\n\r\nI have not found any GitLab integration yet. Do you plan to add GitLab integration ? \r\nIf not do you think it is something doable ? I can try to open a PR to integrate this.\r\n\r\nThank you in advance\r\nPS: great work by the way for this package \ud83d\udc4d \r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 146,
                "title": "Update cryptography to 2.3.1",
                "labels": [],
                "description": "\nThis PR updates [cryptography](https://pypi.org/project/cryptography) from **2.3** to **2.3.1**.\n\n\n\n*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*\n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/cryptography\n  - Changelog: https://pyup.io/changelogs/cryptography/\n  - Repo: https://github.com/pyca/cryptography\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 100,
                "title": "Issue with GitHub integration",
                "labels": [],
                "description": "* safety version: GitHub integration\r\n* Python version: 2.7.x\r\n* Operating System:\r\n\r\n### Description\r\n\r\nWe have an status integrated for varryfying each PR going into the master branch.\r\n\r\nI now encounter that this status is Pending for over 12 hours.\r\n\r\n\r\nIs there currently a server issue or am I doing something wrong with the integration?\r\n\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 73,
                "title": "Add an --email option?",
                "labels": [
                    "under consideration",
                    "question"
                ],
                "description": "When running Safety in a cron job it might make sense to add an email address which could be used to mail a report if something is vulnerable.\r\n\r\nIdeas?"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 153,
                "title": "Wrong error code on Windows.",
                "labels": [],
                "description": "* safety version: 1.8.4\r\n* Python version: 2.7.15\r\n* Operating System: Windows XP\r\n\r\n### Description\r\n\r\nWe try to integrate `safety` checks in https://github.com/chevah/python-package/. It works as advertised for a wide variety of platforms, but on Windows the error code is always zero, even if vulnerabilities are found.\r\n\r\n### What I Did\r\n\r\nEg., if I build our Python package from branch `4974-safety-pip-module` with an older PyCryptodome, run `safety` and check error code:\r\n```\r\nchecked 27 packages, using default DB\r\n\r\n---\r\n\r\n-> pycryptodome, installed 3.6.5, affected <3.6.6, id 36384\r\n\r\npycryptodome before 3.6.6 has a vulnerability on AESNI ECB with payloads smaller than 16 bytes.\r\n\r\n--\r\n\r\nError code from safety is: 0\r\n```\r\nOn all the other platforms (Linux, OS X, various Unices and BSDs) the error code is not zero and we can catch it and act on it.\r\n\r\nAnyway, thanks for `safety`, a great project that eases our (also open-source) effort to package Python for many platforms!"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 155,
                "title": "Dockerise safety",
                "labels": [],
                "description": "### Description\r\n\r\nDockerise the safety command/tool to make it easier to be used in local development and within CI/CD pipelines.\r\n\r\n### What I Did\r\n\r\nHere's a copy of my Dockerfile that I used to do this locally, it may be valuable to others (or if someone wants to PR it back into master):\r\n\r\n```\r\nFROM ubuntu:18.04\r\n\r\nENV LC_ALL=C.UTF-8\r\nENV LANG=C.UTF-8\r\n\r\nRUN apt-get -qy update && \\\r\n    apt-get -qy install python3-pip python-dev build-essential && \\\r\n    pip3 install safety && \\\r\n    apt-get -qy clean && \\\r\n    rm -rf /var/lib/apt/lists/* && \\\r\n    rm -rf /tmp/*\r\n\r\nENTRYPOINT [\"/usr/local/bin/safety\"]\r\n```\r\n\r\nThen you can simply run a command as per the README.md, like so:\r\n\r\n`echo \"insecure-package==0.1\" | docker run --rm docker-pyup-safety check --stdin`"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 151,
                "title": "Remove API dependency on pip.",
                "labels": [],
                "description": "pip doesn't have a public API. This more-or-less inlines https://github.com/pypa/pip/blob/404838abcca467648180b358598c597b74d568c9/src/pip/_internal/utils/misc.py#L340-L394.\r\n\r\nFixes #90."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 108,
                "title": "Support scanning setup.py files",
                "labels": [],
                "description": "It would be nice if it was possible to pass setup.py files to `safety check --file`"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 132,
                "title": "Support -r inside requirements.txt files",
                "labels": [],
                "description": "* safety version: 1.8.1\r\n* Python version: 2.7.15rc1\r\n* Operating System: Ubuntu 18\r\n\r\n### Description\r\n\r\n`safety` doesn't seem to handle `-r {file}` lines inside requirements.txt files.\r\n\r\n### What I Did\r\n\r\n```\r\n$ safety check -r requirements/development.txt \r\n...\r\n\u2502 checked 0 packages, using default DB                                         \u2502\r\n\u2502 No known security vulnerabilities found.                                     \u2502\r\n...\r\n\r\n\r\n$ cat requirements/development.txt \r\n-r common/project.txt\r\n\r\n\r\n$ safety check -r requirements/common/project.txt\r\n...\r\n\u2502 checked 60 packages, using default DB                                        \u2502\r\n...\r\n\u2502 django                     \u2502 1.8.18    \u2502 >=1.8,<1.8.19            \u2502 35797    \u2502\r\n\u2502 django                     \u2502 1.8.18    \u2502 >=1.8,<1.8.19            \u2502 35796    \u2502\r\n...\r\n```"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 156,
                "title": "Update sphinx to 1.8.1",
                "labels": [],
                "description": "\nThis PR updates [Sphinx](https://pypi.org/project/Sphinx) from **1.5.5** to **1.8.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 1.8.1\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* LaTeX ``\\pagestyle`` commands have been moved to the LaTeX template. No\n  changes in PDF, except possibly if ``\\sphinxtableofcontents``, which\n  contained them, had been customized in :file:`conf.py`. (refs: 5455)\n\nBugs fixed\n----------\n\n* 5418: Incorrect default path for sphinx-build -d/doctrees files\n* 5421: autodoc emits deprecation warning for :confval:`autodoc_default_flags`\n* 5422: lambda object causes PicklingError on storing environment\n* 5417: Sphinx fails to build with syntax error in Python 2.7.5\n* 4911: add latexpdf to make.bat for non make-mode\n* 5436: Autodoc does not work with enum subclasses with properties/methods\n* 5437: autodoc: crashed on modules importing eggs\n* 5433: latex: ImportError: cannot import name &#39;DEFAULT_SETTINGS&#39;\n* 5431: autodoc: ``autofunction`` emits a warning for callable objects\n* 5457: Fix TypeError in error message when override is prohibited\n* 5453: PDF builds of &#39;howto&#39; documents have no page numbers\n* 5463: mathbase: math_role and MathDirective was disappeared in 1.8.0\n* 5454: latex: Index has disappeared from PDF for Japanese documents\n* 5432: py domain: ``:type:`` field can&#39;t process ``:term:`` references\n* 5426: py domain: TypeError has been raised for class attribute\n   ```\n   \n  \n  \n   ### 1.8.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.8.0b2\n   ```\n   * html: search box overrides to other elements if scrolled\n* i18n: warnings for translation catalogs have wrong line numbers (refs: 5321)\n* 5325: latex: cross references has been broken by multiply labeled objects\n* C++, fixes for symbol addition and lookup. Lookup should no longer break\n  in partial builds. See also 5337.\n* 5348: download reference to remote file is not displayed\n* 5282: html theme: ``pygments_style`` of theme was overrided by ``conf.py``\n  by default\n* 4379: toctree shows confusible warning when document is excluded\n* 2401: autodoc: ``:members:`` causes ``:special-members:`` not to be shown\n* autodoc: ImportError is replaced by AttributeError for deeper module\n* 2720, 4034: Incorrect links with ``:download:``, duplicate names, and\n  parallel builds\n* 5290: autodoc: failed to analyze source code in egg package\n* 5399: Sphinx crashes if unknown po file exists\n   ```\n   \n  \n  \n   ### 1.8.0b1\n   ```\n   * 5083: Fix wrong make.bat option for internationalization.\n* 5115: napoleon: add admonitions added by 4613 to the docs.\n   ```\n   \n  \n  \n   ### 1.7.10\n   ```\n   ===============================\n\nDependencies\n------------\n\nIncompatible changes\n--------------------\n\nDeprecated\n----------\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.9\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 5359: Make generated texinfo files reproducible by sorting the anchors\n\nBugs fixed\n----------\n\n* 5361: crashed on incremental build if document uses include directive\n   ```\n   \n  \n  \n   ### 1.7.8\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* The type of ``env.included`` has been changed to dict of set\n\nBugs fixed\n----------\n\n* 5320: intersphinx: crashed if invalid url given\n* 5326: manpage: crashed when invalid docname is specified as ``man_pages``\n* 5322: autodoc: ``Any`` typehint causes formatting error\n* 5327: &quot;document isn&#39;t included in any toctree&quot; warning on rebuild with\n  generated files\n* 5335: quickstart: escape sequence has been displayed with MacPorts&#39; python\n   ```\n   \n  \n  \n   ### 1.7.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5198: document not in toctree warning when including files only for parallel\n  builds\n* LaTeX: reduce &quot;Token not allowed in a PDF string&quot; hyperref warnings in latex\n  console output (refs: 5236)\n* LaTeX: suppress &quot;remreset Warning: The remreset package is obsolete&quot; in latex\n  console output with recent LaTeX (refs: 5237)\n* 5234: PDF output: usage of PAPER environment variable is broken since Sphinx\n  1.5\n* LaTeX: fix the :confval:`latex_engine` documentation regarding Latin Modern\n  font with XeLaTeX/LuaLateX (refs: 5251)\n* 5280: autodoc: Fix wrong type annotations for complex typing\n* autodoc: Optional types are wrongly rendered\n* 5291: autodoc crashed by ForwardRef types\n* 5211: autodoc: No docs generated for functools.partial functions\n* 5306: autodoc: ``getargspec()`` raises NameError for invalid typehints\n* 5298: imgmath: math_number_all causes equations to have two numbers in html\n* 5294: sphinx-quickstart blank prompts in PowerShell\n   ```\n   \n  \n  \n   ### 1.7.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5037: LaTeX ``\\sphinxupquote{}`` breaks in Russian\n* sphinx.testing uses deprecated pytest API; ``Node.get_marker(name)``\n* 5016: crashed when recommonmark.AutoStrictify is enabled\n* 5022: latex: crashed with docutils package provided by Debian/Ubuntu\n* 5009: latex: a label for table is vanished if table does not have a caption\n* 5048: crashed with numbered toctree\n* 2410: C, render empty argument lists for macros.\n* C++, fix lookup of full template specializations with no template arguments.\n* 4667: C++, fix assertion on missing references in global scope when using\n  intersphinx. Thanks to Alan M. Carroll.\n* 5019: autodoc: crashed by Form Feed Character\n* 5032: autodoc: loses the first staticmethod parameter for old styled classes\n* 5036: quickstart: Typing Ctrl-U clears the whole of line\n* 5066: html: &quot;relations&quot; sidebar is not shown by default\n* 5091: latex: curly braces in index entries are not handled correctly\n* 5070: epub: Wrong internal href fragment links\n* 5104: apidoc: Interface of ``sphinx.apidoc:main()`` has changed\n* 4272: PDF builds of French projects have issues with XeTeX\n* 5076: napoleon raises RuntimeError with python 3.7\n* 5125: sphinx-build: Interface of ``sphinx:main()`` has changed\n* sphinx-build: ``sphinx.cmd.build.main()`` refers ``sys.argv`` instead of given\n  argument\n* 5146: autosummary: warning is emitted when the first line of docstring ends\n  with literal notation\n* autosummary: warnings of autosummary indicates wrong location (refs: 5146)\n* 5143: autodoc: crashed on inspecting dict like object which does not support\n  sorting\n* 5139: autodoc: Enum argument missing if it shares value with another\n* 4946: py domain: rtype field could not handle &quot;None&quot; as a type\n* 5176: LaTeX: indexing of terms containing `, ``!``, or ``&quot;`` fails\n* 5161: html: crashes if copying static files are failed\n* 5167: autodoc: Fix formatting type annotations for tuples with more than two\n  arguments\n* 3329: i18n: crashed by auto-symbol footnote references\n* 5158: autosummary: module summary has been broken when it starts with heading\n   ```\n   \n  \n  \n   ### 1.7.5\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4924: html search: Upper characters problem in any other languages\n* 4932: apidoc: some subpackage is ignored if sibling subpackage contains a\n  module starting with underscore\n* 4863, 4938, 4939: i18n doesn&#39;t handle node.title correctly tat used for\n  contents, topic, admonition, table and section.\n* 4913: i18n: literal blocks in bullet list are not translated\n* 4962: C++, raised TypeError on duplicate declaration.\n* 4825: C++, properly parse expr roles and give better error messages when\n  (escaped) line breaks are present.\n* C++, properly use ``desc_addname`` nodes for prefixes of names.\n* C++, parse pack expansions in function calls.\n* 4915, 4916: links on search page are broken when using dirhtml builder\n* 4969: autodoc: constructor method should not have return annotation\n* latex: deeply nested enumerated list which is beginning with non-1 causes\n  LaTeX engine crashed\n* 4978: latex: shorthandoff is not set up for Brazil locale\n* 4928: i18n: Ignore dot-directories like .git/ in LC_MESSAGES/\n* 4946: py domain: type field could not handle &quot;None&quot; as a type\n* 4979: latex: Incorrect escaping of curly braces in index entries\n* 4956: autodoc: Failed to extract document from a subclass of the class on\n  mocked module\n* 4973: latex: glossary directive adds whitespace to each item\n* 4980: latex: Explicit labels on code blocks are duplicated\n* 4919: node.asdom() crashes if toctree has :numbered: option\n* 4914: autodoc: Parsing error when using dataclasses without default values\n* 4931: autodoc: crashed when handler for autodoc-skip-member raises an error\n* 4931: autodoc: crashed when subclass of mocked class are processed by\n  napoleon module\n* 5007: sphinx-build crashes when error log contains a &quot;%&quot; character\n   ```\n   \n  \n  \n   ### 1.7.4\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4885, 4887: domains: Crashed with duplicated objects\n* 4889: latex: sphinx.writers.latex causes recusrive import\n   ```\n   \n  \n  \n   ### 1.7.3\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4769: autodoc loses the first staticmethod parameter\n* 4790: autosummary: too wide two column tables in PDF builds\n* 4795: Latex customization via ``_templates/longtable.tex_t`` is broken\n* 4789: imgconverter: confused by convert.exe of Windows\n* 4783: On windows, Sphinx crashed when drives of srcdir and outdir are\n  different\n* 4812: autodoc ignores type annotated variables\n* 4817: wrong URLs on warning messages\n* 4784: latex: :confval:`latex_show_urls` assigns incorrect footnote numbers if\n  hyperlinks exists inside substitutions\n* 4837: latex with class memoir Error: Font command ``\\sf`` is not supported\n* 4803: latex: too slow in proportion to number of auto numbered footnotes\n* 4838: htmlhelp: The entries in .hhp file is not ordered\n* toctree directive tries to glob for URL having query_string\n* 4871: html search: Upper characters problem in German\n* 4717: latex: Compilation for German docs failed with LuaLaTeX and XeLaTeX\n* 4459: duplicated labels detector does not work well in parallel build\n* 4878: Crashed with extension which returns invalid metadata\n   ```\n   \n  \n  \n   ### 1.7.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n* 4520: apidoc: folders with an empty __init__.py are no longer excluded from\n  TOC\n\nBugs fixed\n----------\n\n* 4669: sphinx.build_main and sphinx.make_main throw NameError\n* 4685: autosummary emits meaningless warnings\n* autodoc: crashed when invalid options given\n* pydomain: always strip parenthesis if empty (refs: 1042)\n* 4689: autosummary: unexpectedly strips docstrings containing &quot;i.e.&quot;\n* 4701: viewcode: Misplaced ``&lt;div&gt;`` in viewcode html output\n* 4444: Don&#39;t require numfig to use :numref: on sections\n* 4727: Option clash for package textcomp\n* 4725: Sphinx does not work with python 3.5.0 and 3.5.1\n* 4716: Generation PDF file with TexLive on Windows, file not found error\n* 4574: vertical space before equation in latex\n* 4720: message when an image is mismatched for builder is not clear\n* 4655, 4684: Incomplete localization strings in Polish and Chinese\n* 2286: Sphinx crashes when error is happens in rendering HTML pages\n* 4688: Error to download remote images having long URL\n* 4754: sphinx/pycode/__init__.py raises AttributeError\n* 1435: qthelp builder should htmlescape keywords\n* epub: Fix docTitle elements of toc.ncx is not escaped\n* 4520: apidoc: Subpackage not in toc (introduced in 1.6.6) now fixed\n* 4767: html: search highlighting breaks mathjax equations\n   ```\n   \n  \n  \n   ### 1.7.1\n   ```\n   =====================================\n\nDeprecated\n----------\n\n* 4623: ``sphinx.build_main()`` is deprecated.\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed (Since 1.7.0)\n* 4664: ``sphinx.ext.intersphinx.debug()`` is deprecated.\n\nFor more details, see `deprecation APIs list\n&lt;http://www.sphinx-doc.org/en/master/extdev/index.htmldeprecated-apis&gt;`_\n\nBugs fixed\n----------\n\n* 4608: epub: Invalid meta tag is generated\n* 4260: autodoc: keyword only argument separator is not disappeared if it is\n  appeared at top of the argument list\n* 4622: epub: :confval:`epub_scheme` does not effect to content.opf\n* 4627: graphviz: Fit graphviz images to page\n* 4617: quickstart: PROJECT_DIR argument is required\n* 4623: sphinx.build_main no longer exists in 1.7.0\n* 4615: The argument of ``sphinx.build`` has been changed in 1.7.0\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed\n* 4630: Have order on msgids in sphinx.pot deterministic\n* 4563: autosummary: Incorrect end of line punctuation detection\n* 4577: Enumerated sublists with explicit start with wrong number\n* 4641: A external link in TOC cannot contain &quot;?&quot; with ``:glob:`` option\n* C++, add missing parsing of explicit casts and typeid in expression parsing.\n* C++, add missing parsing of ``this`` in expression parsing.\n* 4655: Fix incomplete localization strings in Polish\n* 4653: Fix error reporting for parameterless ImportErrors\n* 4664: Reading objects.inv fails again\n* 4662: ``any`` refs with ``term`` targets crash when an ambiguity is\n  encountered\n   ```\n   \n  \n  \n   ### 1.7.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.7.0b3\n   ```\n   * 4019: inheritance_diagram AttributeError stoping make process\n* 4531: autosummary: methods are not treated as attributes\n* 4538: autodoc: ``sphinx.ext.autodoc.Options`` has been moved\n* 4539: autodoc emits warnings for partialmethods\n* 4223: doctest: failing tests reported in wrong file, at wrong line\n* i18n: message catalogs are not compiled if specific filenames are given for\n  ``sphinx-build`` as arguments (refs: 4560)\n* 4027: sphinx.ext.autosectionlabel now expects labels to be the same as they\n  are in the raw source; no smart quotes, nothig fancy.\n* 4581: apidoc: Excluded modules still included\n\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.0b2\n   ```\n   * 4415: autodoc classifies inherited classmethods as regular methods\n* 4415: autodoc classifies inherited staticmethods as regular methods\n* 4472: DOCUMENTATION_OPTIONS is not defined\n* 4491: autodoc: prefer _MockImporter over other importers in sys.meta_path\n* 4490: autodoc: type annotation is broken with python 3.7.0a4+\n* utils package is no longer installed\n* 3952: apidoc: module header is too escaped\n* 4275: Formats accepted by sphinx.util.i18n.format_date are limited\n* 4493: recommonmark raises AttributeError if AutoStructify enabled\n* 4209: intersphinx: In link title, &quot;v&quot; should be optional if target has no\n  version\n* 4230: slowdown in writing pages with sphinx 1.6\n* 4522: epub: document is not rebuilt even if config changed\n   ```\n   \n  \n  \n   ### 1.7.0b1\n   ```\n   * Add support for docutils 0.14\n* Add tests for the ``sphinx.ext.inheritance_diagram`` extension.\n   ```\n   \n  \n  \n   ### 1.6.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 1922: html search: Upper characters problem in French\n* 4412: Updated jQuery version from 3.1.0 to 3.2.1\n* 4438: math: math with labels with whitespace cause html error\n* 2437: make full reference for classes, aliased with &quot;alias of&quot;\n* 4434: pure numbers as link targets produce warning\n* 4477: Build fails after building specific files\n* 4449: apidoc: include &quot;empty&quot; packages that contain modules\n* 3917: citation labels are tranformed to ellipsis\n* 4501: graphviz: epub3 validation error caused if graph is not clickable\n* 4514: graphviz: workaround for wrong map ID which graphviz generates\n* 4525: autosectionlabel does not support parallel build\n* 3953: Do not raise warning when there is a working intersphinx inventory\n* 4487: math: ValueError is raised on parallel build. Thanks to jschueller.\n* 2372: autosummary: invalid signatures are shown for type annotated functions\n* 3942: html: table is not aligned to center even if ``:align: center``\n   ```\n   \n  \n  \n   ### 1.6.6\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4181: autodoc: Sort dictionary keys when possible\n* ``VerbatimHighlightColor`` is a new\n  :ref:`LaTeX &#39;sphinxsetup&#39; &lt;latexsphinxsetup&gt;` key (refs: 4285)\n* Easier customizability of LaTeX macros involved in rendering of code-blocks\n* Show traceback if conf.py raises an exception (refs: 4369)\n* Add :confval:`smartquotes` to disable smart quotes through ``conf.py``\n  (refs: 3967)\n* Add :confval:`smartquotes_action` and :confval:`smartquotes_excludes`\n  (refs: 4142, 4357)\n\nBugs fixed\n----------\n\n* 4334: sphinx-apidoc: Don&#39;t generate references to non-existing files in TOC\n* 4206: latex: reST label between paragraphs loses paragraph break\n* 4231: html: Apply fixFirefoxAnchorBug only under Firefox\n* 4221: napoleon depends on autodoc, but users need to load it manually\n* 2298: automodule fails to document a class attribute\n* 4099: C++: properly link class reference to class from inside constructor\n* 4267: PDF build broken by Unicode U+2116 NUMERO SIGN character\n* 4249: PDF output: Pygments error highlighting increases line spacing in\n  code blocks\n* 1238: Support ``:emphasize-lines:`` in PDF output\n* 4279: Sphinx crashes with pickling error when run with multiple processes and\n  remote image\n* 1421: Respect the quiet flag in sphinx-quickstart\n* 4281: Race conditions when creating output directory\n* 4315: For PDF &#39;howto&#39; documents, ``latex_toplevel_sectioning=&#39;part&#39;`` generates\n  ``\\chapter`` commands\n* 4214: Two todolist directives break sphinx-1.6.5\n* Fix links to external option docs with intersphinx (refs: 3769)\n* 4091: Private members not documented without :undoc-members:\n   ```\n   \n  \n  \n   ### 1.6.5\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4107: Make searchtools.js compatible with pre-Sphinx1.5 templates\n* 4112: Don&#39;t override the smart_quotes setting if it was already set\n* 4125: Display reference texts of original and translated passages on\n  i18n warning message\n* 4147: Include the exception when logging PO/MO file read/write\n\nBugs fixed\n----------\n\n* 4085: Failed PDF build from image in parsed-literal using ``:align:`` option\n* 4100: Remove debug print from autodoc extension\n* 3987: Changing theme from alabaster causes HTML build to fail\n* 4096: C++, don&#39;t crash when using the wrong role type. Thanks to mitya57.\n* 4070, 4111: crashes when the warning message contains format strings (again)\n* 4108: Search word highlighting breaks SVG images\n* 3692: Unable to build HTML if writing .buildinfo failed\n* 4152: HTML writer crashes if a field list is placed on top of the document\n* 4063: Sphinx crashes when labeling directive ``.. todolist::``\n* 4134: [doc] :file:`docutils.conf` is not documented explicitly\n* 4169: Chinese language doesn&#39;t trigger Chinese search automatically\n* 1020: ext.todo todolist not linking to the page in pdflatex\n* 3965: New quickstart generates wrong SPHINXBUILD in Makefile\n* 3739: ``:module:`` option is ignored at content of pyobjects\n* 4149: Documentation: Help choosing :confval:`latex_engine`\n* 4090: [doc] :confval:`latex_additional_files` with extra LaTeX macros should\n  not use ``.tex`` extension\n* Failed to convert reST parser error to warning (refs: 4132)\n   ```\n   \n  \n  \n   ### 1.6.4\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 3926: Add ``autodoc_warningiserror`` to suppress the behavior of ``-W``\n  option during importing target modules on autodoc\n\nBugs fixed\n----------\n\n* 3924: docname lost after dynamically parsing RST in extension\n* 3946: Typo in sphinx.sty (this was a bug with no effect in default context)\n* :pep: and :rfc: does not supports ``default-role`` directive (refs: 3960)\n* 3960: default_role = &#39;guilabel&#39; not functioning\n* Missing ``texinputs_win/Makefile`` to be used in latexpdf builder on windows.\n* 4026: nature: Fix macOS Safari scrollbar color\n* 3877: Fix for C++ multiline signatures.\n* 4006: Fix crash on parallel build\n* 3969: private instance attributes causes AttributeError\n* 4041: C++, remove extra name linking in function pointers.\n* 4038: C, add missing documentation of ``member`` role.\n* 4044: An empty multicolumn cell causes extra row height in PDF output\n* 4049: Fix typo in output of sphinx-build -h\n* 4062: hashlib.sha1() must take bytes, not unicode on Python 3\n* Avoid indent after index entries in latex (refs: 4066)\n* 4070: crashes when the warning message contains format strings\n* 4067: Return non-zero exit status when make subprocess fails\n* 4055: graphviz: the :align: option does not work for SVG output\n* 4055: graphviz: the :align: center option does not work for latex output\n* 4051: ``warn()`` function for HTML theme outputs &#39;None&#39; string\n   ```\n   \n  \n  \n   ### 1.6.3\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* latex: hint that code-block continues on next page (refs: 3764, 3792)\n\nBugs fixed\n----------\n\n* 3821: Failed to import sphinx.util.compat with docutils-0.14rc1\n* 3829: sphinx-quickstart template is incomplete regarding use of alabaster\n* 3772: &#39;str object&#39; has no attribute &#39;filename&#39;\n* Emit wrong warnings if citation label includes hyphens (refs: 3565)\n* 3858: Some warnings are not colored when using --color option\n* 3775: Remove unwanted whitespace in default template\n* 3835: sphinx.ext.imgmath fails to convert SVG images if project directory\n  name contains spaces\n* 3850: Fix color handling in make mode&#39;s help command\n* 3865: use of self.env.warn in sphinx extension fails\n* 3824: production lists apply smart quotes transform since Sphinx 1.6.1\n* latex: fix ``\\sphinxbfcode`` swallows initial space of argument\n* 3878: Quotes in auto-documented class attributes should be straight quotes\n  in PDF output\n* 3881: LaTeX figure floated to next page sometimes leaves extra vertical\n  whitespace\n* 3885: duplicated footnotes raises IndexError\n* 3873: Failure of deprecation warning mechanism of\n  ``sphinx.util.compat.Directive``\n* 3874: Bogus warnings for &quot;citation not referenced&quot; for cross-file citations\n* 3860: Don&#39;t download images when builders not supported images\n* 3860: Remote image URIs without filename break builders not supported remote\n  images\n* 3833: command line messages are translated unintentionally with ``language``\n  setting.\n* 3840: make checking ``epub_uid`` strict\n* 3851, 3706: Fix about box drawing characters for PDF output\n* 3900: autosummary could not find methods\n* 3902: Emit error if ``latex_documents`` contains non-unicode string in py2\n   ```\n   \n  \n  \n   ### 1.6.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* 3789: Do not require typing module for python&gt;=3.5\n\nBugs fixed\n----------\n\n* 3754: HTML builder crashes if HTML theme appends own stylesheets\n* 3756: epub: Entity &#39;mdash&#39; not defined\n* 3758: Sphinx crashed if logs are emitted in conf.py\n* 3755: incorrectly warns about dedent with literalinclude\n* 3742: `RTD &lt;https://readthedocs.org/&gt;`_ PDF builds of Sphinx own docs are\n  missing an index entry in the bookmarks and table of contents. This is\n  `rtfd/readthedocs.org2857\n  &lt;https://github.com/rtfd/readthedocs.org/issues/2857&gt;`_ issue, a workaround\n  is obtained using some extra LaTeX code in Sphinx&#39;s own :file:`conf.py`\n* 3770: Build fails when a &quot;code-block&quot; has the option emphasize-lines and the\n  number indicated is higher than the number of lines\n* 3774: Incremental HTML building broken when using citations\n* 3763: got epubcheck validations error if epub_cover is set\n* 3779: &#39;ImportError&#39; in sphinx.ext.autodoc due to broken &#39;sys.meta_path&#39;.\n  Thanks to Tatiana Tereshchenko.\n* 3796: env.resolve_references() crashes when non-document node given\n* 3803: Sphinx crashes with invalid PO files\n* 3791: PDF &quot;continued on next page&quot; for long tables isn&#39;t internationalized\n* 3788: smartquotes emits warnings for unsupported languages\n* 3807: latex Makefile for ``make latexpdf`` is only for unixen\n* 3781: double hyphens in option directive are compiled as endashes\n* 3817: latex builder raises AttributeError\n   ```\n   \n  \n  \n   ### 1.6.1\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.6\n   ```\n   * LDML format  support in i18n feature\n* ``sphinx.addnodes.termsep``\n* Some functions and classes in ``sphinx.util.pycompat``:\n  ``zip_longest``, ``product``, ``all``, ``any``, ``next``, ``open``,\n  ``class_types``, ``base_exception``, ``relpath``, ``StringIO``, ``BytesIO``.\n  Please use the standard library version instead;\n\nIf any deprecation warning like ``RemovedInSphinxXXXWarning`` are displayed,\nplease refer :ref:`when-deprecation-warnings-are-displayed`.\n\nFeatures added\n--------------\n   ```\n   \n  \n  \n   ### 1.6b3\n   ```\n   * 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* The ``make latexpdf`` from 1.6b1 (for GNU/Linux and Mac OS, using\n  ``latexmk``) aborted earlier in case of LaTeX errors than was the case with\n  1.5 series, due to hard-coded usage of ``--halt-on-error`` option. (refs 3695)\n* 3683: sphinx.websupport module is not provided by default\n* 3683: Failed to build document if builder.css_file.insert() is called\n* 3714: viewcode extension not taking ``highlight_code=&#39;none&#39;`` in account\n* 3698: Moving :doc: to std domain broke backwards compatibility\n* 3633: misdetect unreferenced citations\n   ```\n   \n  \n  \n   ### 1.6b2\n   ```\n   * 3662: ``builder.css_files`` is deprecated.  Please use ``add_stylesheet()``\n  API instead.\n   ```\n   \n  \n  \n   ### 1.6b1\n   ```\n   * ``sphinx.util.compat.Directive`` class is now deprecated. Please use instead\n  ``docutils.parsers.rst.Directive``\n* ``sphinx.util.compat.docutils_version`` is now deprecated\n* 2367: ``Sphinx.warn()``, ``Sphinx.info()`` and other logging methods are now\n  deprecated.  Please use ``sphinx.util.logging`` (:ref:`logging-api`) instead.\n* 3318: ``notice`` is now deprecated as LaTeX environment name and will be\n  removed at Sphinx 1.7. Extension authors please use ``sphinxadmonition``\n  instead (as Sphinx does since 1.5.)\n* ``Sphinx.status_iterator()`` and ``Sphinx.old_status_iterator()`` is now\n  deprecated.  Please use ``sphinx.util:status_iterator()`` instead.\n* ``Sphinx._directive_helper()`` is deprecated. Please use\n  ``sphinx.util.docutils.directive_helper()`` instead.\n* ``BuildEnvironment.set_warnfunc()`` is now deprecated\n* Following methods of ``BuildEnvironment`` is now deprecated.\n\n  - ``BuildEnvironment.note_toctree()``\n  - ``BuildEnvironment.get_toc_for()``\n  - ``BuildEnvironment.get_toctree_for()``\n  - ``BuildEnvironment.create_index()``\n\n  Please use ``sphinx.environment.adapters`` modules instead.\n* latex package  ``footnote`` is not loaded anymore by its bundled replacement\n  ``footnotehyper-sphinx``. The redefined macros keep the same names as in the\n  original package.\n* 3429: deprecate config setting ``latex_keep_old_macro_names``. It will be\n  removed at 1.7, and already its default value has changed from ``True`` to\n  ``False``.\n* 3221: epub2 builder is deprecated\n* 3254: ``sphinx.websupport`` is now separated into independent package;\n  ``sphinxcontrib-websupport``.  ``sphinx.websupport`` will be removed in\n  Sphinx-2.0.\n* 3628: ``sphinx_themes`` entry_point is deprecated.  Please use\n  ``sphinx.html_themes`` instead.\n   ```\n   \n  \n  \n   ### 1.5.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 3614: Sphinx crashes with requests-2.5.0\n* 3618: autodoc crashes with tupled arguments\n* 3664: No space after the bullet in items of a latex list produced by Sphinx\n* 3657: EPUB builder crashes if document startswith genindex exists\n* 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* 3685: AttributeError when using 3rd party domains\n* 3702: LaTeX writer styles figure legends with a hard-coded ``\\small``\n* 3708: LaTeX writer allows irc scheme\n* 3717: Stop enforcing that favicon&#39;s must be .ico\n* 3731, 3732: Protect isenumclass predicate against non-class arguments\n* 3320: Warning about reference target not being found for container types\n* Misspelled ARCHIVEPREFIX in Makefile for latex build repertory\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/sphinx\n  - Changelog: https://pyup.io/changelogs/sphinx/\n  - Homepage: http://sphinx-doc.org/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 109,
                "title": "Update coverage to 4.5.1",
                "labels": [],
                "description": "\nThere's a new version of [coverage](https://pypi.python.org/pypi/coverage) available.\nYou are currently using **4.4**. I have updated it to **4.5.1**\n\n\n\nThese links might come in handy:  <a href=\"https://pypi.python.org/pypi/coverage\">PyPI</a> | <a href=\"https://pyup.io/changelogs/coverage/\">Changelog</a> | <a href=\"https://bitbucket.org/ned/coveragepy\">Repo</a> \n\n\n\n### Changelog\n> \n>### 4.5.1\n\n>----------------------------\n\n>- Now that 4.5 properly separated the ``[run] omit`` and ``[report] omit``\n>  settings, an old bug has become apparent.  If you specified a package name\n>  for ``[run] source``, then omit patterns weren&#39;t matched inside that package.\n>  This bug (`issue 638`_) is now fixed.\n\n>- On Python 3.7, reporting about a decorated function with no body other than a\n>  docstring would crash coverage.py with an IndexError (`issue 640`_).  This is\n>  now fixed.\n\n>- Configurer plugins are now reported in the output of ``--debug=sys``.\n\n>.. _issue 638: https://bitbucket.org/ned/coveragepy/issues/638/run-omit-is-ignored-since-45\n>.. _issue 640: https://bitbucket.org/ned/coveragepy/issues/640/indexerror-reporting-on-an-empty-decorated\n\n\n>.. _changes_45:\n\n\n\n>### 4.5\n\n>--------------------------\n\n>- A new kind of plugin is supported: configurators are invoked at start-up to\n>  allow more complex configuration than the .coveragerc file can easily do.\n>  See :ref:`api_plugin` for details.  This solves the complex configuration\n>  problem described in `issue 563`_.\n\n>- The ``fail_under`` option can now be a float.  Note that you must specify the\n>  ``[report] precision`` configuration option for the fractional part to be\n>  used.  Thanks to Lars Hupfeldt Nielsen for help with the implementation.\n>  Fixes `issue 631`_.\n\n>- The ``include`` and ``omit`` options can be specified for both the ``[run]``\n>  and ``[report]`` phases of execution.  4.4.2 introduced some incorrect\n>  interactions between those phases, where the options for one were confused\n>  for the other.  This is now corrected, fixing `issue 621`_ and `issue 622`_.\n>  Thanks to Daniel Hahler for seeing more clearly than I could.\n\n>- The ``coverage combine`` command used to always overwrite the data file, even\n>  when no data had been read from apparently combinable files.  Now, an error\n>  is raised if we thought there were files to combine, but in fact none of them\n>  could be used.  Fixes `issue 629`_.\n\n>- The ``coverage combine`` command could get confused about path separators\n>  when combining data collected on Windows with data collected on Linux, as\n>  described in `issue 618`_.  This is now fixed: the result path always uses\n>  the path separator specified in the ``[paths]`` result.\n\n>- On Windows, the HTML report could fail when source trees are deeply nested,\n>  due to attempting to create HTML filenames longer than the 250-character\n>  maximum.  Now filenames will never get much larger than 200 characters,\n>  fixing `issue 627`_.  Thanks to Alex Sandro for helping with the fix.\n\n>.. _issue 563: https://bitbucket.org/ned/coveragepy/issues/563/platform-specific-configuration\n>.. _issue 618: https://bitbucket.org/ned/coveragepy/issues/618/problem-when-combining-windows-generated\n>.. _issue 621: https://bitbucket.org/ned/coveragepy/issues/621/include-ignored-warning-when-using\n>.. _issue 622: https://bitbucket.org/ned/coveragepy/issues/622/report-omit-overwrites-run-omit\n>.. _issue 627: https://bitbucket.org/ned/coveragepy/issues/627/failure-generating-html-reports-when-the\n>.. _issue 629: https://bitbucket.org/ned/coveragepy/issues/629/multiple-use-of-combine-leads-to-empty\n>.. _issue 631: https://bitbucket.org/ned/coveragepy/issues/631/precise-coverage-percentage-value\n\n\n>.. _changes_442:\n\n\n\n>### 4.4.2\n\n>----------------------------\n\n>- Support for Python 3.7.  In some cases, class and module docstrings are no\n>  longer counted in statement totals, which could slightly change your total\n>  results.\n\n>- Specifying both ``--source`` and ``--include`` no longer silently ignores the\n>  include setting, instead it displays a warning. Thanks, Lo\u00efc Dachary.  Closes\n>  `issue 265`_ and `issue 101`_.\n\n>- Fixed a race condition when saving data and multiple threads are tracing\n>  (`issue 581`_). It could produce a &quot;dictionary changed size during iteration&quot;\n>  RuntimeError.  I believe this mostly but not entirely fixes the race\n>  condition.  A true fix would likely be too expensive.  Thanks, Peter Baughman\n>  for the debugging, and Olivier Grisel for the fix with tests.\n\n>- Configuration values which are file paths will now apply tilde-expansion,\n>  closing `issue 589`_.\n\n>- Now secondary config files like tox.ini and setup.cfg can be specified\n>  explicitly, and prefixed sections like `[coverage:run]` will be read. Fixes\n>  `issue 588`_.\n\n>- Be more flexible about the command name displayed by help, fixing\n>  `issue 600`_. Thanks, Ben Finney.\n\n>.. _issue 101: https://bitbucket.org/ned/coveragepy/issues/101/settings-under-report-affect-running\n>.. _issue 581: https://bitbucket.org/ned/coveragepy/issues/581/race-condition-when-saving-data-under\n>.. _issue 588: https://bitbucket.org/ned/coveragepy/issues/588/using-rcfile-path-to-toxini-uses-run\n>.. _issue 589: https://bitbucket.org/ned/coveragepy/issues/589/allow-expansion-in-coveragerc\n>.. _issue 600: https://bitbucket.org/ned/coveragepy/issues/600/get-program-name-from-command-line-when\n\n\n>.. _changes_441:\n\n\n\n>### 4.4.1\n\n>----------------------------\n\n>- No code changes: just corrected packaging for Python 2.7 Linux wheels.\n\n\n>.. _changes_44:\n\n\n\n\n\n\n\n*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*\n\nHappy merging! \ud83e\udd16\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 138,
                "title": "Update pyyaml to 3.13",
                "labels": [],
                "description": "\nThis PR updates [PyYAML](https://pypi.org/project/PyYAML) from **3.12** to **3.13**.\n\n\n\n*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*\n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pyyaml\n  - Homepage: http://pyyaml.org/wiki/PyYAML\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 136,
                "title": "Load and pretty-print previously saved results",
                "labels": [],
                "description": "* safety version: 1.8.1 (current at the moment)\r\n* Python version: 3.6.3\r\n* Operating System: Debian 8 (Docker container)\r\n\r\n### Description\r\n\r\nThis is a feature suggestion.\r\nIt'd be nice to be able to recall the saved results in the tidy way _safety_ displays.\r\n\r\nFirstly, a user may run the check and save its result:\r\n```shell\r\nsafety check --json > vulns_2018-06-26.json\r\n```\r\n\r\nTo review the pretty-printed result later, do:\r\n```shell\r\nsafety review --stdin < vulns_2018-06-26.json\r\n# Alternatively, \r\nsafety review --file=vulns_2018-06-26.json\r\n```\r\n\r\n_safety_ reads the input JSON and display its readings:\r\n\r\n```\r\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\r\n\u2502                                                                              \u2502\r\n\u2502                               /$$$$$$            /$$                         \u2502\r\n\u2502                              /$$__  $$          | $$                         \u2502\r\n\u2502           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           \u2502\r\n\u2502          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           \u2502\r\n\u2502         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           \u2502\r\n\u2502          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           \u2502\r\n\u2502          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           \u2502\r\n\u2502         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           \u2502\r\n\u2502                                                          /$$  | $$           \u2502\r\n\u2502                                                         |  $$$$$$/           \u2502\r\n\u2502  by pyup.io                                              \\______/            \u2502\r\n\u2502                                                                              \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 REPORT                                                                       \u2502\r\n\u2502 checked 144 packages, using default DB                                       \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 package                    \u2502 installed \u2502 affected                 \u2502 ID       \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 pyjwt                      \u2502 1.5.0     \u2502 <1.5.1                   \u2502 35014    \u2502\r\n\u2502 newrelic                   \u2502 2.78.0.57 \u2502 >=1.1.0.192,<=2.106.0.87 \u2502 35805    \u2502\r\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\r\n```\r\n\r\nAdding `--bare` and `--full-report` supports would be great, too.\r\n\r\n### What I Did\r\n\r\nI thought of this idea."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 131,
                "title": "Output vulnerable packages to stderr",
                "labels": [],
                "description": "### Description\r\n\r\nThis is a feature request.\r\n\r\nIt would be nice that when running in CI mode, safety can output the errors to stderr.\r\nIn this way, it would be easier to highlight them in the whole CI output.\r\n\r\nI see that the current design for formatter/reported does not make it easy to make the distinction between the normal banner and extra formatting and the actual error report.\r\n\r\nSo at this point, I don't know if it make sense to redesign, but I just wanted to report this so that in the case there is a redesign for this part of the code you can consider making this type of filtering easier :)\r\n\r\nThanks for the nice tool!"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 149,
                "title": "Update watchdog to 0.9.0",
                "labels": [],
                "description": "\nThis PR updates [watchdog](https://pypi.org/project/watchdog) from **0.8.3** to **0.9.0**.\n\n\n\n*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*\n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/watchdog\n  - Changelog: https://pyup.io/changelogs/watchdog/\n  - Repo: http://github.com/gorakhargosh/watchdog\n  - Docs: https://pythonhosted.org/watchdog/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 128,
                "title": "don't crash on requirements file from stdin with recursive include",
                "labels": [],
                "description": "* safety version: 1.8.1\r\n* Python version: 3.5.5\r\n* Operating System: ubuntu 16.04 (via the ubuntu:16.04 docker image) (also for OSX 10.13.4 (17E199))\r\n\r\n### Description\r\n\r\nRun safety on a requirements file with [a recursive requirement](https://pip.readthedocs.io/en/1.1/requirements.html#recursive-requirements) from `--stdin` e.g. `-r requirements.txt` from `requirements-dev.txt`\r\n\r\nwhat happened/what went wrong: safety crashed\r\nwhat you expected to happen: safety not to crash and check the remaining lines. Logging a warning to stderr would be good too.\r\n\r\n### What I Did\r\n\r\n```\r\nwget https://raw.githubusercontent.com/mozilla/pontoon/6fe02c4734d6f60df45dd2f829cfdc3d40faa9b6/requirements-dev.txt\r\n\r\nIf there was a crash, please include the traceback here.\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/safety\", line 11, in <module>\r\n    sys.exit(cli())\r\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 722, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 697, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 1066, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 895, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 535, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/safety/cli.py\", line 63, in check\r\n    vulns = safety.check(packages=packages, key=key, db_mirror=db, cached=cache, ignore_ids=ignore)\r\n  File \"/usr/local/lib/python3.5/dist-packages/safety/safety.py\", line 133, in check\r\n    name = pkg.key.replace(\"_\", \"-\").lower()\r\nAttributeError: 'RequirementFile' object has no attribute 'key'\r\n```"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 164,
                "title": "Added Dockerfile and readme instructions #155",
                "labels": [],
                "description": "Referencing issue #155 I added a minimal Dockerfile and usage instructions to the Readme. Use in e.g. gitlab-ci with:\r\n\r\n```\r\nsafety:\r\n    image: safety\r\n    stage: test\r\n    script:\r\n        - export HTTPS_PROXY=\"https://${PROXY_HOST}:${PROXY_PORT}\"\r\n        - safety check -r requirements.txt --full-report\r\n```"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 135,
                "title": "Support for constraints file?",
                "labels": [],
                "description": "* safety version: 1.8.1 (latest at the moment)\r\n* Python version: 3.6.2\r\n* Operating System: Debian 8 (Docker container)\r\n\r\n### Description\r\n\r\nThis is a feature suggestion.\r\nMy project has a constraints file (i.e. `constraints.txt`) which pins the libraries' versions.\r\nI was wondering if there's a plan to support constraints, e.g.\r\n```\r\nsafety check -r requirements.txt -c constraints.txt\r\n```\r\n\r\n### What I Did\r\n\r\nIn the meantime, I'm working it around by actually installing the requirements and then running _safety_ with stdin mode:\r\n```shell\r\npip install -r requirements.txt -c constraints.txt \r\npip freeze | safety check --stdin\r\n```\r\n\r\nNice project. Cheers!"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 157,
                "title": "Add --proxy= command line option",
                "labels": [],
                "description": "* safety version: 1.8.4\r\n* Python version: All\r\n* Operating System: All\r\n\r\n### Description\r\n\r\nTrying to run safety within a corporate, _(paranoid),_ environment.\r\nA lot of error print out about socket timeout, etc., then error termination. \r\n\r\n### What I Did\r\n`pip install safety`  # N.B. pip.ini contains a proxy setting that allows it to work\r\n`safety check`  # Resulted in the errors above\r\n`set HTTPS_PROXY=` _the_proxy_from_pip.ini_\r\n`safety check`  # This time it worked.\r\n```\r\nNot permitted to paste from company machine!\r\n```\r\nThe underlying `requests` library has `--proxy` option that can be used to address this problem but it is not exposed by the `safety` command line.  While the work around is simple enough a lot of people who should be running `safety check` would not be happy about using it and possibly not aware - if the help for safety exposed a `--proxy=` then it should point them in the correct direction."
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 133,
                "title": "Unpinned warnings ignore --json",
                "labels": [],
                "description": "* safety version: 1.8.1\r\n* Python version: 3.6.5\r\n* Operating System: MacOSX\r\n\r\n### Description\r\n\r\nIf a requirements.txt file has unpinned entries, parsing output with `--json` is difficult, as the warnings are not in the data structure.\r\n\r\n### What I Did\r\n\r\nI ran `safety check --json -r ./requirements.txt` against a requirements file that had unpinned entries, and received some warnings, as expected. However the warnings were logged to stdout, outside the json structure, meaning the tools couldn't safely parse the output:\r\n\r\n```\r\nWarning: unpinned requirement 'simplejson' found in ./requirements.txt, unable to check.\r\n[]\r\n```\r\n\r\nPerhaps these should be in the json, with the module name, perhaps empty version strings, and the description field containing the warning message.\r\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 162,
                "title": "Update wheel to 0.32.1",
                "labels": [],
                "description": "\nThis PR updates [wheel](https://pypi.org/project/wheel) from **0.29.0** to **0.32.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 0.32.1\n   ```\n   - Fixed ``AttributeError: &#39;Requirement&#39; object has no attribute &#39;url&#39;`` on\n  setuptools/pkg_resources versions older than 18.8 (PR by Benoit Pierre)\n- Fixed ``AttributeError: &#39;module&#39; object has no attribute\n  &#39;algorithms_available&#39;`` on Python &lt; 2.7.9 (PR by Benoit Pierre)\n- Fixed permissions on the generated ``.dist-info/RECORD`` file\n   ```\n   \n  \n  \n   ### 0.32.0\n   ```\n   - Removed wheel signing and verifying features\n- Removed the &quot;wheel install&quot; and &quot;wheel installscripts&quot; commands\n- Added the ``wheel pack`` command\n- Allowed multiple license files to be specified using the ``license_files``\n  option\n- Deprecated the ``license_file`` option\n- Eliminated duplicate lines from generated requirements in\n  ``.dist-info/METADATA`` (thanks to Wim Glenn for the contribution)\n- Fixed handling of direct URL specifiers in requirements\n  (PR by Benoit Pierre)\n- Fixed canonicalization of extras (PR by Benoit Pierre)\n- Warn when the deprecated ``[wheel]`` section is used in ``setup.cfg``\n  (PR by Jon Dufresne)\n   ```\n   \n  \n  \n   ### 0.31.1\n   ```\n   - Fixed arch as ``None`` when converting eggs to wheels\n   ```\n   \n  \n  \n   ### 0.31.0\n   ```\n   - Fixed displaying of errors on Python 3\n- Fixed single digit versions in wheel files not being properly recognized\n- Fixed wrong character encodings being used (instead of UTF-8) to read and\n  write ``RECORD`` (this sometimes crashed bdist_wheel too)\n- Enabled Zip64 support in wheels by default\n- Metadata-Version is now 2.1\n- Dropped DESCRIPTION.rst and metadata.json from the list of generated files\n- Dropped support for the non-standard, undocumented ``provides-extra`` and\n  ``requires-dist`` keywords in setup.cfg metadata\n- Deprecated all wheel signing and signature verification commands\n- Removed the (already defunct) ``tool`` extras from setup.py\n   ```\n   \n  \n  \n   ### 0.30.0\n   ```\n   - Added py-limited-api {cp32|cp33|cp34|...} flag to produce cpNN.abi3.{arch}\n  tags on CPython 3.\n- Documented the ``license_file`` metadata key\n- Improved Python, abi tagging for ``wheel convert``. Thanks Ales Erjavec.\n- Fixed ``&gt;`` being prepended to lines starting with &quot;From&quot; in the long\n  description\n- Added support for specifying a build number (as per PEP 427).\n  Thanks Ian Cordasco.\n- Made the order of files in generated ZIP files deterministic.\n  Thanks Matthias Bach.\n- Made the order of requirements in metadata deterministic. Thanks Chris Lamb.\n- Fixed ``wheel install`` clobbering existing files\n- Improved the error message when trying to verify an unsigned wheel file\n- Removed support for Python 2.6, 3.2 and 3.3.\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/wheel\n  - Changelog: https://pyup.io/changelogs/wheel/\n  - Repo: https://github.com/pypa/wheel\n</details>\n\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 163,
                "title": "Update pip to 18.1",
                "labels": [],
                "description": "\nThis PR updates [pip](https://pypi.org/project/pip) from **9.0.3** to **18.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 18.1\n   ```\n   =================\n\nFeatures\n--------\n\n- Allow PEP 508 URL requirements to be used as dependencies.\n\n  As a security measure, pip will raise an exception when installing packages from\n  PyPI if those packages depend on packages not also hosted on PyPI.\n  In the future, PyPI will block uploading packages with such external URL dependencies directly. (`4187 &lt;https://github.com/pypa/pip/issues/4187&gt;`_)\n- Upgrade pyparsing to 2.2.1. (`5013 &lt;https://github.com/pypa/pip/issues/5013&gt;`_)\n- Allows dist options (--abi, --python-version, --platform, --implementation) when installing with --target (`5355 &lt;https://github.com/pypa/pip/issues/5355&gt;`_)\n- Support passing ``svn+ssh`` URLs with a username to ``pip install -e``. (`5375 &lt;https://github.com/pypa/pip/issues/5375&gt;`_)\n- pip now ensures that the RECORD file is sorted when installing from a wheel file. (`5525 &lt;https://github.com/pypa/pip/issues/5525&gt;`_)\n- Add support for Python 3.7. (`5561 &lt;https://github.com/pypa/pip/issues/5561&gt;`_)\n- Malformed configuration files now show helpful error messages, instead of tracebacks. (`5798 &lt;https://github.com/pypa/pip/issues/5798&gt;`_)\n\nBug Fixes\n---------\n\n- Checkout the correct branch when doing an editable Git install. (`2037 &lt;https://github.com/pypa/pip/issues/2037&gt;`_)\n- Run self-version-check only on commands that may access the index, instead of\n  trying on every run and failing to do so due to missing options. (`5433 &lt;https://github.com/pypa/pip/issues/5433&gt;`_)\n- Allow a Git ref to be installed over an existing installation. (`5624 &lt;https://github.com/pypa/pip/issues/5624&gt;`_)\n- Show a better error message when a configuration option has an invalid value. (`5644 &lt;https://github.com/pypa/pip/issues/5644&gt;`_)\n- Always revalidate cached simple API pages instead of blindly caching them for up to 10\n  minutes. (`5670 &lt;https://github.com/pypa/pip/issues/5670&gt;`_)\n- Avoid caching self-version-check information when cache is disabled. (`5679 &lt;https://github.com/pypa/pip/issues/5679&gt;`_)\n- Avoid traceback printing on autocomplete after flags in the CLI. (`5751 &lt;https://github.com/pypa/pip/issues/5751&gt;`_)\n- Fix incorrect parsing of egg names if pip needs to guess the package name. (`5819 &lt;https://github.com/pypa/pip/issues/5819&gt;`_)\n\nVendored Libraries\n------------------\n\n- Upgrade certifi to 2018.8.24\n- Upgrade packaging to 18.0\n- Add pep517 version 0.2\n- Upgrade pytoml to 0.1.19\n- Upgrade pkg_resources to 40.4.3 (via setuptools)\n\nImproved Documentation\n----------------------\n\n- Fix &quot;Requirements Files&quot; reference in User Guide (`user_guide_fix_requirements_file_ref &lt;https://github.com/pypa/pip/issues/user_guide_fix_requirements_file_ref&gt;`_)\n   ```\n   \n  \n  \n   ### 18.0\n   ```\n   =================\n\nProcess\n-------\n\n- Switch to a Calendar based versioning scheme.\n- Formally document our deprecation process as a minimum of 6 months of deprecation\n  warnings.\n- Adopt and document NEWS fragment writing style.\n- Switch to releasing a new, non bug fix version of pip every 3 months.\n\nDeprecations and Removals\n-------------------------\n\n- Remove the legacy format from pip list. (3651, 3654)\n- Dropped support for Python 3.3. (3796)\n- Remove support for cleaning up egg fragment postfixes. (4174)\n- Remove the shim for the old get-pip.py location. (5520)\n\n  For the past 2 years, it&#39;s only been redirecting users to use the newer\n  https://bootstrap.pypa.io/get-pip.py location.\n\nFeatures\n--------\n\n- Introduce a new --prefer-binary flag, to prefer older wheels over newer source packages. (3785)\n- Improve autocompletion function on file name completion after options\n  which have ``&lt;file&gt;``, ``&lt;dir&gt;`` or ``&lt;path&gt;`` as metavar. (4842, 5125)\n- Add support for installing PEP 518 build dependencies from source. (5229)\n- Improve status message when upgrade is skipped due to only-if-needed strategy. (5319)\n\nBug Fixes\n---------\n\n- Update pip&#39;s self-check logic to not use a virtualenv specific file and honor cache-dir. (3905)\n- Remove compiled pyo files for wheel packages. (4471)\n- Speed up printing of newly installed package versions. (5127)\n- Restrict install time dependency warnings to directly-dependant packages. (5196, 5457)\n\n  Warning about the entire package set has resulted in users getting confused as\n  to why pip is printing these warnings.\n- Improve handling of PEP 518 build requirements: support environment markers and extras. (5230, 5265)\n- Remove username/password from log message when using index with basic auth. (5249)\n- Remove trailing os.sep from PATH directories to avoid false negatives. (5293)\n- Fix &quot;pip wheel pip&quot; being blocked by the &quot;don&#39;t use pip to modify itself&quot; check. (5311, 5312)\n- Disable pip&#39;s version check (and upgrade message) when installed by a different package manager. (5346)\n\n  This works better with Linux distributions where pip&#39;s upgrade message may\n  result in users running pip in a manner that modifies files that should be\n  managed by the OS&#39;s package manager.\n- Check for file existence and unlink first when clobbering existing files during a wheel install. (5366)\n- Improve error message to be more specific when no files are found as listed in as listed in PKG-INFO. (5381)\n- Always read ``pyproject.toml`` as UTF-8. This fixes Unicode handling on Windows and Python 2. (5482)\n- Fix a crash that occurs when PATH not set, while generating script location warning. (5558)\n- Disallow packages with ``pyproject.toml`` files that have an empty build-system table. (5627)\n\nVendored Libraries\n------------------\n\n- Update CacheControl to 0.12.5.\n- Update certifi to 2018.4.16.\n- Update distro to 1.3.0.\n- Update idna to 2.7.\n- Update ipaddress to 1.0.22.\n- Update pkg_resources to 39.2.0 (via setuptools).\n- Update progress to 1.4.\n- Update pytoml to 0.1.16.\n- Update requests to 2.19.1.\n- Update urllib3 to 1.23.\n\nImproved Documentation\n----------------------\n\n- Document how to use pip with a proxy server. (512, 5574)\n- Document that the output of pip show is in RFC-compliant mail header format. (5261)\n   ```\n   \n  \n  \n   ### 10.0.1\n   ```\n   ===================\n\nFeatures\n--------\n\n- Switch the default repository to the new &quot;PyPI 2.0&quot; running at\n  https://pypi.org/. (5214)\n\nBug Fixes\n---------\n\n- Fix a bug that made get-pip.py unusable on Windows without renaming. (5219)\n- Fix a TypeError when loading the cache on older versions of Python 2.7.\n  (5231)\n- Fix and improve error message when EnvironmentError occurs during\n  installation. (5237)\n- A crash when reinstalling from VCS requirements has been fixed. (5251)\n- Fix PEP 518 support when pip is installed in the user site. (5524)\n\nVendored Libraries\n------------------\n\n- Upgrade distlib to 0.2.7\n   ```\n   \n  \n  \n   ### 10.0.0\n   ```\n   ===================\n\nBug Fixes\n---------\n\n- Prevent false-positive installation warnings due to incomplete name\n  normalizaton. (5134)\n- Fix issue where installing from Git with a short SHA would fail. (5140)\n- Accept pre-release versions when checking for conflicts with pip check or pip\n  install. (5141)\n- ``ioctl(fd, termios.TIOCGWINSZ, ...)`` needs 8 bytes of data (5150)\n- Do not warn about script location when installing to the directory containing\n  sys.executable. This is the case when &#39;pip install&#39;ing without activating a\n  virtualenv. (5157)\n- Fix PEP 518 support. (5188)\n- Don&#39;t warn about script locations if ``--target`` is specified. (5203)\n   ```\n   \n  \n  \n   ### 10.0.0b2\n   ```\n   =====================\n\nBug Fixes\n---------\n\n- Fixed line endings in CA Bundle - 10.0.0b1 was inadvertently released with Windows\n  line endings. (5131)\n   ```\n   \n  \n  \n   ### 10.0.0b1\n   ```\n   =====================\n\nDeprecations and Removals\n-------------------------\n\n- Removed the deprecated ``--egg`` parameter to ``pip install``. (1749)\n- Removed support for uninstalling projects which have been installed using\n  distutils. distutils installed projects do not include metadata indicating\n  what files belong to that install and thus it is impossible to *actually*\n  uninstall them rather than just remove the metadata saying they&#39;ve been\n  installed while leaving all of the actual files behind. (2386)\n- Removed the deprecated ``--download`` option to ``pip install``. (2643)\n- Removed the deprecated --(no-)use-wheel flags to ``pip install`` and ``pip\n  wheel``. (2699)\n- Removed the deprecated ``--allow-external``, ``--allow-all-external``, and\n  ``--allow-unverified`` options. (3070)\n- Switch the default for ``pip list`` to the columns format, and deprecate the\n  legacy format. (3654, 3686)\n- Deprecate support for Python 3.3. (3796)\n- Removed the deprecated ``--default-vcs`` option. (4052)\n- Removed the ``setup.py test`` support from our sdist as it wasn&#39;t being\n  maintained as a supported means to run our tests. (4203)\n- Dropped support for Python 2.6. (4343)\n- Removed the --editable flag from pip download, as it did not make sense\n  (4362)\n- Deprecate SVN detection based on dependency links in ``pip freeze``. (4449)\n- Move all of pip&#39;s APIs into the pip._internal package, properly reflecting\n  the fact that pip does not currently have any public APIs. (4696, 4700)\n\nFeatures\n--------\n\n- Add `--progress-bar &lt;progress_bar&gt;` to ``pip download``, ``pip install`` and\n  ``pip wheel`` commands, to allow selecting a specific progress indicator or,\n  to completely suppress, (for example in a CI environment) use\n  ``--progress-bar off. (2369, 2756)\n- Add `--no-color` to `pip`. All colored output is disabled if this flag is\n  detected. (2449)\n- pip uninstall now ignores the absence of a requirement and prints a warning.\n  (3016, 4642)\n- Improved the memory and disk efficiency of the HTTP cache. (3515)\n- Support for packages specifying build dependencies in pyproject.toml (see\n  `PEP 518 &lt;https://www.python.org/dev/peps/pep-0518/&gt;`__). Packages which\n  specify one or more build dependencies this way will be built into wheels in\n  an isolated environment with those dependencies installed. (3691)\n- pip now supports environment variable expansion in requirement files using\n  only ``${VARIABLE}`` syntax on all platforms. (3728)\n- Allowed combinations of -q and -v to act sanely. Then we don&#39;t need warnings\n  mentioned in the issue. (4008)\n- Add `--exclude-editable` to ``pip freeze`` and ``pip list`` to exclude\n  editable packages from installed package list. (4015, 4016)\n- Improve the error message for the common ``pip install ./requirements.txt``\n  case. (4127)\n- Add support for the new `` url`` syntax from PEP 508. (4175)\n- Add setuptools version to the statistics sent to BigQuery. (4209)\n- Report the line which caused the hash error when using requirement files.\n  (4227)\n- Add a pip config command for managing configuration files. (4240)\n- Allow ``pip download`` to be used with a specific platform when ``--no-deps``\n  is set. (4289)\n- Support build-numbers in wheel versions and support sorting with\n  build-numbers. (4299)\n- Change pip outdated to use PackageFinder in order to do the version lookup so\n  that local mirrors in Environments that do not have Internet connections can\n  be used as the Source of Truth for latest version. (4336)\n- pip now retries on more HTTP status codes, for intermittent failures.\n  Previously, it only retried on the standard 503. Now, it also retries on 500\n  (transient failures on AWS S3), 520 and 527 (transient failures on\n  Cloudflare). (4473)\n- pip now displays where it is looking for packages, if non-default locations\n  are used. (4483)\n- Display a message to run the right command for modifying pip on Windows\n  (4490)\n- Add Man Pages for pip (4491)\n- Make uninstall command less verbose by default (4493)\n- Switch the default upgrade strategy to be &#39;only-if-needed&#39; (4500)\n- Installing from a local directory or a VCS URL now builds a wheel to install,\n  rather than running ``setup.py install``. Wheels from these sources are not\n  cached. (4501)\n- Don&#39;t log a warning when installing a dependency from Git if the name looks\n  like a commit hash. (4507)\n- pip now displays a warning when it installs scripts from a wheel outside the\n  PATH. These warnings can be suppressed using a new --no-warn-script-location\n  option. (4553)\n- Local Packages can now be referenced using forward slashes on Windows.\n  (4563)\n- pip show learnt a new Required-by field that lists currently installed\n  packages that depend on the shown package (4564)\n- The command-line autocompletion engine ``pip show`` now autocompletes\n  installed distribution names. (4749)\n- Change documentation theme to be in line with Python Documentation (4758)\n- Add auto completion of short options. (4954)\n- Run &#39;setup.py develop&#39; inside pep518 build environment. (4999)\n- pip install now prints an error message when it installs an incompatible\n  version of a dependency. (5000)\n- Added a way to distinguish between pip installed packages and those from the\n  system package manager in &#39;pip list&#39;. Specifically, &#39;pip list -v&#39; also shows\n  the installer of package if it has that meta data. (949)\n- Show install locations when list command ran with &quot;-v&quot; option. (979)\n\nBug Fixes\n---------\n\n- Allow pip to work if the ``GIT_DIR`` and ``GIT_WORK_TREE`` environment\n  variables are set. (1130)\n- Make ``pip install --force-reinstall`` not require passing ``--upgrade``.\n  (1139)\n- Return a failing exit status when `pip install`, `pip download`, or `pip\n  wheel` is called with no requirements. (2720)\n- Interactive setup.py files will no longer hang indefinitely. (2732, 4982)\n- Correctly reset the terminal if an exception occurs while a progress bar is\n  being shown. (3015)\n- &quot;Support URL-encoded characters in URL credentials.&quot; (3236)\n- Don&#39;t assume sys.__stderr__.encoding exists (3356)\n- Fix ``pip uninstall`` when ``easy-install.pth`` lacks a trailing newline.\n  (3741)\n- Keep install options in requirements.txt from leaking. (3763)\n- pip no longer passes global options from one package to later packages in the\n  same requirement file. (3830)\n- Support installing from Git refs (3876)\n- Use pkg_resources to parse the entry points file to allow names with colons.\n  (3901)\n- ``-q`` specified once correctly sets logging level to WARNING, instead of\n  CRITICAL. Use `-qqq` to have the previous behavior back. (3994)\n- Shell completion scripts now use correct executable names (e.g., ``pip3``\n  instead of ``pip``) (3997)\n- Changed vendored encodings from ``utf8`` to ``utf-8``. (4076)\n- Fixes destination directory of data_files when ``pip install --target`` is\n  used. (4092)\n- Limit the disabling of requests&#39; pyopenssl to Windows only. Fixes\n  &quot;SNIMissingWarning / InsecurePlatformWarning not fixable with pip 9.0 /\n  9.0.1&quot; (for non-Windows) (4098)\n- Support the installation of wheels with non-PEP 440 version in their\n  filenames. (4169)\n- Fall back to sys.getdefaultencoding() if locale.getpreferredencoding()\n  returns None in `pip.utils.encoding.auto_decode`. (4184)\n- Fix a bug where `SETUPTOOLS_SHIM` got called incorrectly for relative path\n  requirements by converting relative paths to absolute paths prior to calling\n  the shim. (4208)\n- Return the latest version number in search results. (4219)\n- Improve error message on permission errors (4233)\n- Fail gracefully when ``/etc/image_version`` (or another distro version file)\n  appears to exists but is not readable. (4249)\n- Avoid importing setuptools in the parent pip process, to avoid a race\n  condition when upgrading one of setuptools dependencies. (4264)\n- Fix for an incorrect ``freeze`` warning message due to a package being\n  included in multiple requirements files that were passed to ``freeze``.\n  Instead of warning incorrectly that the package is not installed, pip now\n  warns that the package was declared multiple times and lists the name of each\n  requirements file that contains the package in question. (4293)\n- Generalize help text for ``compile``/``no-compile`` flags. (4316)\n- Handle the case when ``/etc`` is not readable by the current user by using a\n  hardcoded list of possible names of release files. (4320)\n- Fixed a ``NameError`` when attempting to catch ``FileNotFoundError`` on\n  Python 2.7. (4322)\n- Ensure USER_SITE is correctly initialised. (4437)\n- Reinstalling an editable package from Git no longer assumes that the\n  ``master`` branch exists. (4448)\n- This fixes an issue where when someone who tries to use git with pip but pip\n  can&#39;t because git is not in the path environment variable. This clarifies the\n  error given to suggest to the user what might be wrong. (4461)\n- Improve handling of text output from build tools (avoid Unicode errors)\n  (4486)\n- Fix a &quot;No such file or directory&quot; error when using --prefix. (4495)\n- Allow commands to opt out of --require-venv. This allows pip help to work\n  even when the environment variable PIP_REQUIRE_VIRTUALENV is set. (4496)\n- Fix warning message on mismatched versions during installation. (4655)\n- pip now records installed files in a deterministic manner improving\n  reproducibility. (4667)\n- Fix an issue where ``pip install -e`` on a Git url would fail to update if a\n  branch or tag name is specified that happens to match the prefix of the\n  current ``HEAD`` commit hash. (4675)\n- Fix an issue where a variable assigned in a try clause was accessed in the\n  except clause, resulting in an undefined variable error in the except clause.\n  (4811)\n- Use log level `info` instead of `warning` when ignoring packages due to\n  environment markers. (4876)\n- Replaced typo mistake in subversion support. (4908)\n- Terminal size is now correctly inferred when using Python 3 on Windows.\n  (4966)\n- Abort if reading configuration causes encoding errors. (4976)\n- Add a ``--no-user`` option and use it when installing build dependencies.\n  (5085)\n\nVendored Libraries\n------------------\n\n- Upgraded appdirs to 1.4.3.\n- Upgraded CacheControl to 0.12.3.\n- Vendored certifi at 2017.7.27.1.\n- Vendored chardet at 3.0.4.\n- Upgraded colorama to 0.3.9.\n- Upgraded distlib to 0.2.6.\n- Upgraded distro to 1.2.0.\n- Vendored idna at idna==2.6.\n- Upgraded ipaddress to 1.0.18.\n- Vendored msgpack-python at 0.4.8.\n- Removed the vendored ordereddict.\n- Upgraded progress to 1.3.\n- Upgraded pyparsing to 2.2.0.\n- Upgraded pytoml to 0.1.14.\n- Upgraded requests to 2.18.4.\n- Upgraded pkg_resources (via setuptools) to 36.6.0.\n- Upgraded six to 1.11.0.\n- Vendored urllib3 at 1.22.\n- Upgraded webencodings to 0.5.1.\n\nImproved Documentation\n----------------------\n\n- Added documentation on usage of --build command line option (4262)\n-  (4358)\n- Document how to call pip from your code, including the fact that we do not\n  provide a Python API. (4743)\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pip\n  - Changelog: https://pyup.io/changelogs/pip/\n  - Homepage: https://pip.pypa.io/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 94,
                "title": "Update flake8 to 3.5.0",
                "labels": [],
                "description": "\nThere's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.\nYou are currently using **3.3.0**. I have updated it to **3.5.0**\n\n\n\nThese links might come in handy:  <a href=\"https://pypi.python.org/pypi/flake8\">PyPI</a> | <a href=\"https://pyup.io/changelogs/flake8/\">Changelog</a> | <a href=\"https://gitlab.com/pycqa/flake8\">Repo</a> \n\n\n\n### Changelog\n> \n>### 3.5.0\n\n>-------------------\n\n>You can view the `3.5.0 milestone`_ on GitLab for more details.\n\n>New Dependency Information\n>~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>- Allow for PyFlakes 1.6.0 (See also `GitLab359`_)\n\n>- Start using new PyCodestyle checks for bare excepts and ambiguous identifier\n>  (See also `GitLab361`_)\n\n>Features\n>~~~~~~~~\n\n>- Print out information about configuring VCS hooks (See also `GitLab335`_)\n\n>- Allow users to develop plugins &quot;local&quot; to a repository without using\n>  setuptools. See our documentation on local plugins for more information.\n>  (See also `GitLab357`_)\n\n>Bugs Fixed\n>~~~~~~~~~~\n\n>- Catch and helpfully report ``UnicodeDecodeError``\\ s when parsing\n>  configuration files. (See also `GitLab358`_)\n\n\n>.. all links\n>.. _3.5.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/20\n\n>.. issue links\n>.. _GitLab335:\n>    https://gitlab.com/pycqa/flake8/issues/335\n>.. _GitLab357:\n>    https://gitlab.com/pycqa/flake8/issues/357\n>.. _GitLab358:\n>    https://gitlab.com/pycqa/flake8/issues/358\n>.. _GitLab359:\n>    https://gitlab.com/pycqa/flake8/issues/359\n>.. _GitLab361:\n>    https://gitlab.com/pycqa/flake8/issues/361\n\n>.. merge request links\n\n\n\n\n>### 3.4.1\n\n>-------------------\n\n>You can view the `3.4.1 milestone`_ on GitLab for more details.\n\n>- Fix minor regression when users specify only a ``--select`` list with items\n>  in the enabled/extended select list.  (See also `GitLab354`_)\n\n>.. all links\n>.. _3.4.1 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/19\n\n>.. issue links\n>.. _GitLab354:\n>    https://gitlab.com/pycqa/flake8/issues/354\n\n>.. merge request links\n\n\n\n\n>### 3.4.0\n\n>-------------------\n\n>You can view the `3.4.0 milestone`_ on GitLab for more details.\n\n>- Refine logic around ``--select`` and ``--ignore`` when combined with the\n>  default values for each. (See also `GitLab318`_)\n\n>- Handle spaces as an alternate separate for error codes, e.g.,\n>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)\n\n>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.\n>  (See also `GitLab330`_)\n\n>- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)\n\n>- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.\n>  (See also `GitLab!193`_)\n\n>- Remove unused import of ``os`` in the git hook template (See also\n>  `GitLab!194`_)\n\n>.. all links\n>.. _3.4.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/18\n\n>.. issue links\n>.. _GitLab318:\n>    https://gitlab.com/pycqa/flake8/issues/318\n>.. _GitLab329:\n>    https://gitlab.com/pycqa/flake8/issues/329\n>.. _GitLab330:\n>    https://gitlab.com/pycqa/flake8/issues/330\n>.. _GitLab341:\n>    https://gitlab.com/pycqa/flake8/issues/341\n\n>.. merge request links\n>.. _GitLab!193:\n>    https://gitlab.com/pycqa/flake8/merge_requests/193\n>.. _GitLab!194:\n>    https://gitlab.com/pycqa/flake8/merge_requests/194\n\n\n\n\n\n\n\n\n*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*\n\nHappy merging! \ud83e\udd16\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 156,
                "title": "Update sphinx to 1.8.1",
                "labels": [],
                "description": "\nThis PR updates [Sphinx](https://pypi.org/project/Sphinx) from **1.5.5** to **1.8.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 1.8.1\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* LaTeX ``\\pagestyle`` commands have been moved to the LaTeX template. No\n  changes in PDF, except possibly if ``\\sphinxtableofcontents``, which\n  contained them, had been customized in :file:`conf.py`. (refs: 5455)\n\nBugs fixed\n----------\n\n* 5418: Incorrect default path for sphinx-build -d/doctrees files\n* 5421: autodoc emits deprecation warning for :confval:`autodoc_default_flags`\n* 5422: lambda object causes PicklingError on storing environment\n* 5417: Sphinx fails to build with syntax error in Python 2.7.5\n* 4911: add latexpdf to make.bat for non make-mode\n* 5436: Autodoc does not work with enum subclasses with properties/methods\n* 5437: autodoc: crashed on modules importing eggs\n* 5433: latex: ImportError: cannot import name &#39;DEFAULT_SETTINGS&#39;\n* 5431: autodoc: ``autofunction`` emits a warning for callable objects\n* 5457: Fix TypeError in error message when override is prohibited\n* 5453: PDF builds of &#39;howto&#39; documents have no page numbers\n* 5463: mathbase: math_role and MathDirective was disappeared in 1.8.0\n* 5454: latex: Index has disappeared from PDF for Japanese documents\n* 5432: py domain: ``:type:`` field can&#39;t process ``:term:`` references\n* 5426: py domain: TypeError has been raised for class attribute\n   ```\n   \n  \n  \n   ### 1.8.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.8.0b2\n   ```\n   * html: search box overrides to other elements if scrolled\n* i18n: warnings for translation catalogs have wrong line numbers (refs: 5321)\n* 5325: latex: cross references has been broken by multiply labeled objects\n* C++, fixes for symbol addition and lookup. Lookup should no longer break\n  in partial builds. See also 5337.\n* 5348: download reference to remote file is not displayed\n* 5282: html theme: ``pygments_style`` of theme was overrided by ``conf.py``\n  by default\n* 4379: toctree shows confusible warning when document is excluded\n* 2401: autodoc: ``:members:`` causes ``:special-members:`` not to be shown\n* autodoc: ImportError is replaced by AttributeError for deeper module\n* 2720, 4034: Incorrect links with ``:download:``, duplicate names, and\n  parallel builds\n* 5290: autodoc: failed to analyze source code in egg package\n* 5399: Sphinx crashes if unknown po file exists\n   ```\n   \n  \n  \n   ### 1.8.0b1\n   ```\n   * 5083: Fix wrong make.bat option for internationalization.\n* 5115: napoleon: add admonitions added by 4613 to the docs.\n   ```\n   \n  \n  \n   ### 1.7.10\n   ```\n   ===============================\n\nDependencies\n------------\n\nIncompatible changes\n--------------------\n\nDeprecated\n----------\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.9\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 5359: Make generated texinfo files reproducible by sorting the anchors\n\nBugs fixed\n----------\n\n* 5361: crashed on incremental build if document uses include directive\n   ```\n   \n  \n  \n   ### 1.7.8\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* The type of ``env.included`` has been changed to dict of set\n\nBugs fixed\n----------\n\n* 5320: intersphinx: crashed if invalid url given\n* 5326: manpage: crashed when invalid docname is specified as ``man_pages``\n* 5322: autodoc: ``Any`` typehint causes formatting error\n* 5327: &quot;document isn&#39;t included in any toctree&quot; warning on rebuild with\n  generated files\n* 5335: quickstart: escape sequence has been displayed with MacPorts&#39; python\n   ```\n   \n  \n  \n   ### 1.7.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5198: document not in toctree warning when including files only for parallel\n  builds\n* LaTeX: reduce &quot;Token not allowed in a PDF string&quot; hyperref warnings in latex\n  console output (refs: 5236)\n* LaTeX: suppress &quot;remreset Warning: The remreset package is obsolete&quot; in latex\n  console output with recent LaTeX (refs: 5237)\n* 5234: PDF output: usage of PAPER environment variable is broken since Sphinx\n  1.5\n* LaTeX: fix the :confval:`latex_engine` documentation regarding Latin Modern\n  font with XeLaTeX/LuaLateX (refs: 5251)\n* 5280: autodoc: Fix wrong type annotations for complex typing\n* autodoc: Optional types are wrongly rendered\n* 5291: autodoc crashed by ForwardRef types\n* 5211: autodoc: No docs generated for functools.partial functions\n* 5306: autodoc: ``getargspec()`` raises NameError for invalid typehints\n* 5298: imgmath: math_number_all causes equations to have two numbers in html\n* 5294: sphinx-quickstart blank prompts in PowerShell\n   ```\n   \n  \n  \n   ### 1.7.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5037: LaTeX ``\\sphinxupquote{}`` breaks in Russian\n* sphinx.testing uses deprecated pytest API; ``Node.get_marker(name)``\n* 5016: crashed when recommonmark.AutoStrictify is enabled\n* 5022: latex: crashed with docutils package provided by Debian/Ubuntu\n* 5009: latex: a label for table is vanished if table does not have a caption\n* 5048: crashed with numbered toctree\n* 2410: C, render empty argument lists for macros.\n* C++, fix lookup of full template specializations with no template arguments.\n* 4667: C++, fix assertion on missing references in global scope when using\n  intersphinx. Thanks to Alan M. Carroll.\n* 5019: autodoc: crashed by Form Feed Character\n* 5032: autodoc: loses the first staticmethod parameter for old styled classes\n* 5036: quickstart: Typing Ctrl-U clears the whole of line\n* 5066: html: &quot;relations&quot; sidebar is not shown by default\n* 5091: latex: curly braces in index entries are not handled correctly\n* 5070: epub: Wrong internal href fragment links\n* 5104: apidoc: Interface of ``sphinx.apidoc:main()`` has changed\n* 4272: PDF builds of French projects have issues with XeTeX\n* 5076: napoleon raises RuntimeError with python 3.7\n* 5125: sphinx-build: Interface of ``sphinx:main()`` has changed\n* sphinx-build: ``sphinx.cmd.build.main()`` refers ``sys.argv`` instead of given\n  argument\n* 5146: autosummary: warning is emitted when the first line of docstring ends\n  with literal notation\n* autosummary: warnings of autosummary indicates wrong location (refs: 5146)\n* 5143: autodoc: crashed on inspecting dict like object which does not support\n  sorting\n* 5139: autodoc: Enum argument missing if it shares value with another\n* 4946: py domain: rtype field could not handle &quot;None&quot; as a type\n* 5176: LaTeX: indexing of terms containing `, ``!``, or ``&quot;`` fails\n* 5161: html: crashes if copying static files are failed\n* 5167: autodoc: Fix formatting type annotations for tuples with more than two\n  arguments\n* 3329: i18n: crashed by auto-symbol footnote references\n* 5158: autosummary: module summary has been broken when it starts with heading\n   ```\n   \n  \n  \n   ### 1.7.5\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4924: html search: Upper characters problem in any other languages\n* 4932: apidoc: some subpackage is ignored if sibling subpackage contains a\n  module starting with underscore\n* 4863, 4938, 4939: i18n doesn&#39;t handle node.title correctly tat used for\n  contents, topic, admonition, table and section.\n* 4913: i18n: literal blocks in bullet list are not translated\n* 4962: C++, raised TypeError on duplicate declaration.\n* 4825: C++, properly parse expr roles and give better error messages when\n  (escaped) line breaks are present.\n* C++, properly use ``desc_addname`` nodes for prefixes of names.\n* C++, parse pack expansions in function calls.\n* 4915, 4916: links on search page are broken when using dirhtml builder\n* 4969: autodoc: constructor method should not have return annotation\n* latex: deeply nested enumerated list which is beginning with non-1 causes\n  LaTeX engine crashed\n* 4978: latex: shorthandoff is not set up for Brazil locale\n* 4928: i18n: Ignore dot-directories like .git/ in LC_MESSAGES/\n* 4946: py domain: type field could not handle &quot;None&quot; as a type\n* 4979: latex: Incorrect escaping of curly braces in index entries\n* 4956: autodoc: Failed to extract document from a subclass of the class on\n  mocked module\n* 4973: latex: glossary directive adds whitespace to each item\n* 4980: latex: Explicit labels on code blocks are duplicated\n* 4919: node.asdom() crashes if toctree has :numbered: option\n* 4914: autodoc: Parsing error when using dataclasses without default values\n* 4931: autodoc: crashed when handler for autodoc-skip-member raises an error\n* 4931: autodoc: crashed when subclass of mocked class are processed by\n  napoleon module\n* 5007: sphinx-build crashes when error log contains a &quot;%&quot; character\n   ```\n   \n  \n  \n   ### 1.7.4\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4885, 4887: domains: Crashed with duplicated objects\n* 4889: latex: sphinx.writers.latex causes recusrive import\n   ```\n   \n  \n  \n   ### 1.7.3\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4769: autodoc loses the first staticmethod parameter\n* 4790: autosummary: too wide two column tables in PDF builds\n* 4795: Latex customization via ``_templates/longtable.tex_t`` is broken\n* 4789: imgconverter: confused by convert.exe of Windows\n* 4783: On windows, Sphinx crashed when drives of srcdir and outdir are\n  different\n* 4812: autodoc ignores type annotated variables\n* 4817: wrong URLs on warning messages\n* 4784: latex: :confval:`latex_show_urls` assigns incorrect footnote numbers if\n  hyperlinks exists inside substitutions\n* 4837: latex with class memoir Error: Font command ``\\sf`` is not supported\n* 4803: latex: too slow in proportion to number of auto numbered footnotes\n* 4838: htmlhelp: The entries in .hhp file is not ordered\n* toctree directive tries to glob for URL having query_string\n* 4871: html search: Upper characters problem in German\n* 4717: latex: Compilation for German docs failed with LuaLaTeX and XeLaTeX\n* 4459: duplicated labels detector does not work well in parallel build\n* 4878: Crashed with extension which returns invalid metadata\n   ```\n   \n  \n  \n   ### 1.7.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n* 4520: apidoc: folders with an empty __init__.py are no longer excluded from\n  TOC\n\nBugs fixed\n----------\n\n* 4669: sphinx.build_main and sphinx.make_main throw NameError\n* 4685: autosummary emits meaningless warnings\n* autodoc: crashed when invalid options given\n* pydomain: always strip parenthesis if empty (refs: 1042)\n* 4689: autosummary: unexpectedly strips docstrings containing &quot;i.e.&quot;\n* 4701: viewcode: Misplaced ``&lt;div&gt;`` in viewcode html output\n* 4444: Don&#39;t require numfig to use :numref: on sections\n* 4727: Option clash for package textcomp\n* 4725: Sphinx does not work with python 3.5.0 and 3.5.1\n* 4716: Generation PDF file with TexLive on Windows, file not found error\n* 4574: vertical space before equation in latex\n* 4720: message when an image is mismatched for builder is not clear\n* 4655, 4684: Incomplete localization strings in Polish and Chinese\n* 2286: Sphinx crashes when error is happens in rendering HTML pages\n* 4688: Error to download remote images having long URL\n* 4754: sphinx/pycode/__init__.py raises AttributeError\n* 1435: qthelp builder should htmlescape keywords\n* epub: Fix docTitle elements of toc.ncx is not escaped\n* 4520: apidoc: Subpackage not in toc (introduced in 1.6.6) now fixed\n* 4767: html: search highlighting breaks mathjax equations\n   ```\n   \n  \n  \n   ### 1.7.1\n   ```\n   =====================================\n\nDeprecated\n----------\n\n* 4623: ``sphinx.build_main()`` is deprecated.\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed (Since 1.7.0)\n* 4664: ``sphinx.ext.intersphinx.debug()`` is deprecated.\n\nFor more details, see `deprecation APIs list\n&lt;http://www.sphinx-doc.org/en/master/extdev/index.htmldeprecated-apis&gt;`_\n\nBugs fixed\n----------\n\n* 4608: epub: Invalid meta tag is generated\n* 4260: autodoc: keyword only argument separator is not disappeared if it is\n  appeared at top of the argument list\n* 4622: epub: :confval:`epub_scheme` does not effect to content.opf\n* 4627: graphviz: Fit graphviz images to page\n* 4617: quickstart: PROJECT_DIR argument is required\n* 4623: sphinx.build_main no longer exists in 1.7.0\n* 4615: The argument of ``sphinx.build`` has been changed in 1.7.0\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed\n* 4630: Have order on msgids in sphinx.pot deterministic\n* 4563: autosummary: Incorrect end of line punctuation detection\n* 4577: Enumerated sublists with explicit start with wrong number\n* 4641: A external link in TOC cannot contain &quot;?&quot; with ``:glob:`` option\n* C++, add missing parsing of explicit casts and typeid in expression parsing.\n* C++, add missing parsing of ``this`` in expression parsing.\n* 4655: Fix incomplete localization strings in Polish\n* 4653: Fix error reporting for parameterless ImportErrors\n* 4664: Reading objects.inv fails again\n* 4662: ``any`` refs with ``term`` targets crash when an ambiguity is\n  encountered\n   ```\n   \n  \n  \n   ### 1.7.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.7.0b3\n   ```\n   * 4019: inheritance_diagram AttributeError stoping make process\n* 4531: autosummary: methods are not treated as attributes\n* 4538: autodoc: ``sphinx.ext.autodoc.Options`` has been moved\n* 4539: autodoc emits warnings for partialmethods\n* 4223: doctest: failing tests reported in wrong file, at wrong line\n* i18n: message catalogs are not compiled if specific filenames are given for\n  ``sphinx-build`` as arguments (refs: 4560)\n* 4027: sphinx.ext.autosectionlabel now expects labels to be the same as they\n  are in the raw source; no smart quotes, nothig fancy.\n* 4581: apidoc: Excluded modules still included\n\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.0b2\n   ```\n   * 4415: autodoc classifies inherited classmethods as regular methods\n* 4415: autodoc classifies inherited staticmethods as regular methods\n* 4472: DOCUMENTATION_OPTIONS is not defined\n* 4491: autodoc: prefer _MockImporter over other importers in sys.meta_path\n* 4490: autodoc: type annotation is broken with python 3.7.0a4+\n* utils package is no longer installed\n* 3952: apidoc: module header is too escaped\n* 4275: Formats accepted by sphinx.util.i18n.format_date are limited\n* 4493: recommonmark raises AttributeError if AutoStructify enabled\n* 4209: intersphinx: In link title, &quot;v&quot; should be optional if target has no\n  version\n* 4230: slowdown in writing pages with sphinx 1.6\n* 4522: epub: document is not rebuilt even if config changed\n   ```\n   \n  \n  \n   ### 1.7.0b1\n   ```\n   * Add support for docutils 0.14\n* Add tests for the ``sphinx.ext.inheritance_diagram`` extension.\n   ```\n   \n  \n  \n   ### 1.6.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 1922: html search: Upper characters problem in French\n* 4412: Updated jQuery version from 3.1.0 to 3.2.1\n* 4438: math: math with labels with whitespace cause html error\n* 2437: make full reference for classes, aliased with &quot;alias of&quot;\n* 4434: pure numbers as link targets produce warning\n* 4477: Build fails after building specific files\n* 4449: apidoc: include &quot;empty&quot; packages that contain modules\n* 3917: citation labels are tranformed to ellipsis\n* 4501: graphviz: epub3 validation error caused if graph is not clickable\n* 4514: graphviz: workaround for wrong map ID which graphviz generates\n* 4525: autosectionlabel does not support parallel build\n* 3953: Do not raise warning when there is a working intersphinx inventory\n* 4487: math: ValueError is raised on parallel build. Thanks to jschueller.\n* 2372: autosummary: invalid signatures are shown for type annotated functions\n* 3942: html: table is not aligned to center even if ``:align: center``\n   ```\n   \n  \n  \n   ### 1.6.6\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4181: autodoc: Sort dictionary keys when possible\n* ``VerbatimHighlightColor`` is a new\n  :ref:`LaTeX &#39;sphinxsetup&#39; &lt;latexsphinxsetup&gt;` key (refs: 4285)\n* Easier customizability of LaTeX macros involved in rendering of code-blocks\n* Show traceback if conf.py raises an exception (refs: 4369)\n* Add :confval:`smartquotes` to disable smart quotes through ``conf.py``\n  (refs: 3967)\n* Add :confval:`smartquotes_action` and :confval:`smartquotes_excludes`\n  (refs: 4142, 4357)\n\nBugs fixed\n----------\n\n* 4334: sphinx-apidoc: Don&#39;t generate references to non-existing files in TOC\n* 4206: latex: reST label between paragraphs loses paragraph break\n* 4231: html: Apply fixFirefoxAnchorBug only under Firefox\n* 4221: napoleon depends on autodoc, but users need to load it manually\n* 2298: automodule fails to document a class attribute\n* 4099: C++: properly link class reference to class from inside constructor\n* 4267: PDF build broken by Unicode U+2116 NUMERO SIGN character\n* 4249: PDF output: Pygments error highlighting increases line spacing in\n  code blocks\n* 1238: Support ``:emphasize-lines:`` in PDF output\n* 4279: Sphinx crashes with pickling error when run with multiple processes and\n  remote image\n* 1421: Respect the quiet flag in sphinx-quickstart\n* 4281: Race conditions when creating output directory\n* 4315: For PDF &#39;howto&#39; documents, ``latex_toplevel_sectioning=&#39;part&#39;`` generates\n  ``\\chapter`` commands\n* 4214: Two todolist directives break sphinx-1.6.5\n* Fix links to external option docs with intersphinx (refs: 3769)\n* 4091: Private members not documented without :undoc-members:\n   ```\n   \n  \n  \n   ### 1.6.5\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4107: Make searchtools.js compatible with pre-Sphinx1.5 templates\n* 4112: Don&#39;t override the smart_quotes setting if it was already set\n* 4125: Display reference texts of original and translated passages on\n  i18n warning message\n* 4147: Include the exception when logging PO/MO file read/write\n\nBugs fixed\n----------\n\n* 4085: Failed PDF build from image in parsed-literal using ``:align:`` option\n* 4100: Remove debug print from autodoc extension\n* 3987: Changing theme from alabaster causes HTML build to fail\n* 4096: C++, don&#39;t crash when using the wrong role type. Thanks to mitya57.\n* 4070, 4111: crashes when the warning message contains format strings (again)\n* 4108: Search word highlighting breaks SVG images\n* 3692: Unable to build HTML if writing .buildinfo failed\n* 4152: HTML writer crashes if a field list is placed on top of the document\n* 4063: Sphinx crashes when labeling directive ``.. todolist::``\n* 4134: [doc] :file:`docutils.conf` is not documented explicitly\n* 4169: Chinese language doesn&#39;t trigger Chinese search automatically\n* 1020: ext.todo todolist not linking to the page in pdflatex\n* 3965: New quickstart generates wrong SPHINXBUILD in Makefile\n* 3739: ``:module:`` option is ignored at content of pyobjects\n* 4149: Documentation: Help choosing :confval:`latex_engine`\n* 4090: [doc] :confval:`latex_additional_files` with extra LaTeX macros should\n  not use ``.tex`` extension\n* Failed to convert reST parser error to warning (refs: 4132)\n   ```\n   \n  \n  \n   ### 1.6.4\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 3926: Add ``autodoc_warningiserror`` to suppress the behavior of ``-W``\n  option during importing target modules on autodoc\n\nBugs fixed\n----------\n\n* 3924: docname lost after dynamically parsing RST in extension\n* 3946: Typo in sphinx.sty (this was a bug with no effect in default context)\n* :pep: and :rfc: does not supports ``default-role`` directive (refs: 3960)\n* 3960: default_role = &#39;guilabel&#39; not functioning\n* Missing ``texinputs_win/Makefile`` to be used in latexpdf builder on windows.\n* 4026: nature: Fix macOS Safari scrollbar color\n* 3877: Fix for C++ multiline signatures.\n* 4006: Fix crash on parallel build\n* 3969: private instance attributes causes AttributeError\n* 4041: C++, remove extra name linking in function pointers.\n* 4038: C, add missing documentation of ``member`` role.\n* 4044: An empty multicolumn cell causes extra row height in PDF output\n* 4049: Fix typo in output of sphinx-build -h\n* 4062: hashlib.sha1() must take bytes, not unicode on Python 3\n* Avoid indent after index entries in latex (refs: 4066)\n* 4070: crashes when the warning message contains format strings\n* 4067: Return non-zero exit status when make subprocess fails\n* 4055: graphviz: the :align: option does not work for SVG output\n* 4055: graphviz: the :align: center option does not work for latex output\n* 4051: ``warn()`` function for HTML theme outputs &#39;None&#39; string\n   ```\n   \n  \n  \n   ### 1.6.3\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* latex: hint that code-block continues on next page (refs: 3764, 3792)\n\nBugs fixed\n----------\n\n* 3821: Failed to import sphinx.util.compat with docutils-0.14rc1\n* 3829: sphinx-quickstart template is incomplete regarding use of alabaster\n* 3772: &#39;str object&#39; has no attribute &#39;filename&#39;\n* Emit wrong warnings if citation label includes hyphens (refs: 3565)\n* 3858: Some warnings are not colored when using --color option\n* 3775: Remove unwanted whitespace in default template\n* 3835: sphinx.ext.imgmath fails to convert SVG images if project directory\n  name contains spaces\n* 3850: Fix color handling in make mode&#39;s help command\n* 3865: use of self.env.warn in sphinx extension fails\n* 3824: production lists apply smart quotes transform since Sphinx 1.6.1\n* latex: fix ``\\sphinxbfcode`` swallows initial space of argument\n* 3878: Quotes in auto-documented class attributes should be straight quotes\n  in PDF output\n* 3881: LaTeX figure floated to next page sometimes leaves extra vertical\n  whitespace\n* 3885: duplicated footnotes raises IndexError\n* 3873: Failure of deprecation warning mechanism of\n  ``sphinx.util.compat.Directive``\n* 3874: Bogus warnings for &quot;citation not referenced&quot; for cross-file citations\n* 3860: Don&#39;t download images when builders not supported images\n* 3860: Remote image URIs without filename break builders not supported remote\n  images\n* 3833: command line messages are translated unintentionally with ``language``\n  setting.\n* 3840: make checking ``epub_uid`` strict\n* 3851, 3706: Fix about box drawing characters for PDF output\n* 3900: autosummary could not find methods\n* 3902: Emit error if ``latex_documents`` contains non-unicode string in py2\n   ```\n   \n  \n  \n   ### 1.6.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* 3789: Do not require typing module for python&gt;=3.5\n\nBugs fixed\n----------\n\n* 3754: HTML builder crashes if HTML theme appends own stylesheets\n* 3756: epub: Entity &#39;mdash&#39; not defined\n* 3758: Sphinx crashed if logs are emitted in conf.py\n* 3755: incorrectly warns about dedent with literalinclude\n* 3742: `RTD &lt;https://readthedocs.org/&gt;`_ PDF builds of Sphinx own docs are\n  missing an index entry in the bookmarks and table of contents. This is\n  `rtfd/readthedocs.org2857\n  &lt;https://github.com/rtfd/readthedocs.org/issues/2857&gt;`_ issue, a workaround\n  is obtained using some extra LaTeX code in Sphinx&#39;s own :file:`conf.py`\n* 3770: Build fails when a &quot;code-block&quot; has the option emphasize-lines and the\n  number indicated is higher than the number of lines\n* 3774: Incremental HTML building broken when using citations\n* 3763: got epubcheck validations error if epub_cover is set\n* 3779: &#39;ImportError&#39; in sphinx.ext.autodoc due to broken &#39;sys.meta_path&#39;.\n  Thanks to Tatiana Tereshchenko.\n* 3796: env.resolve_references() crashes when non-document node given\n* 3803: Sphinx crashes with invalid PO files\n* 3791: PDF &quot;continued on next page&quot; for long tables isn&#39;t internationalized\n* 3788: smartquotes emits warnings for unsupported languages\n* 3807: latex Makefile for ``make latexpdf`` is only for unixen\n* 3781: double hyphens in option directive are compiled as endashes\n* 3817: latex builder raises AttributeError\n   ```\n   \n  \n  \n   ### 1.6.1\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.6\n   ```\n   * LDML format  support in i18n feature\n* ``sphinx.addnodes.termsep``\n* Some functions and classes in ``sphinx.util.pycompat``:\n  ``zip_longest``, ``product``, ``all``, ``any``, ``next``, ``open``,\n  ``class_types``, ``base_exception``, ``relpath``, ``StringIO``, ``BytesIO``.\n  Please use the standard library version instead;\n\nIf any deprecation warning like ``RemovedInSphinxXXXWarning`` are displayed,\nplease refer :ref:`when-deprecation-warnings-are-displayed`.\n\nFeatures added\n--------------\n   ```\n   \n  \n  \n   ### 1.6b3\n   ```\n   * 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* The ``make latexpdf`` from 1.6b1 (for GNU/Linux and Mac OS, using\n  ``latexmk``) aborted earlier in case of LaTeX errors than was the case with\n  1.5 series, due to hard-coded usage of ``--halt-on-error`` option. (refs 3695)\n* 3683: sphinx.websupport module is not provided by default\n* 3683: Failed to build document if builder.css_file.insert() is called\n* 3714: viewcode extension not taking ``highlight_code=&#39;none&#39;`` in account\n* 3698: Moving :doc: to std domain broke backwards compatibility\n* 3633: misdetect unreferenced citations\n   ```\n   \n  \n  \n   ### 1.6b2\n   ```\n   * 3662: ``builder.css_files`` is deprecated.  Please use ``add_stylesheet()``\n  API instead.\n   ```\n   \n  \n  \n   ### 1.6b1\n   ```\n   * ``sphinx.util.compat.Directive`` class is now deprecated. Please use instead\n  ``docutils.parsers.rst.Directive``\n* ``sphinx.util.compat.docutils_version`` is now deprecated\n* 2367: ``Sphinx.warn()``, ``Sphinx.info()`` and other logging methods are now\n  deprecated.  Please use ``sphinx.util.logging`` (:ref:`logging-api`) instead.\n* 3318: ``notice`` is now deprecated as LaTeX environment name and will be\n  removed at Sphinx 1.7. Extension authors please use ``sphinxadmonition``\n  instead (as Sphinx does since 1.5.)\n* ``Sphinx.status_iterator()`` and ``Sphinx.old_status_iterator()`` is now\n  deprecated.  Please use ``sphinx.util:status_iterator()`` instead.\n* ``Sphinx._directive_helper()`` is deprecated. Please use\n  ``sphinx.util.docutils.directive_helper()`` instead.\n* ``BuildEnvironment.set_warnfunc()`` is now deprecated\n* Following methods of ``BuildEnvironment`` is now deprecated.\n\n  - ``BuildEnvironment.note_toctree()``\n  - ``BuildEnvironment.get_toc_for()``\n  - ``BuildEnvironment.get_toctree_for()``\n  - ``BuildEnvironment.create_index()``\n\n  Please use ``sphinx.environment.adapters`` modules instead.\n* latex package  ``footnote`` is not loaded anymore by its bundled replacement\n  ``footnotehyper-sphinx``. The redefined macros keep the same names as in the\n  original package.\n* 3429: deprecate config setting ``latex_keep_old_macro_names``. It will be\n  removed at 1.7, and already its default value has changed from ``True`` to\n  ``False``.\n* 3221: epub2 builder is deprecated\n* 3254: ``sphinx.websupport`` is now separated into independent package;\n  ``sphinxcontrib-websupport``.  ``sphinx.websupport`` will be removed in\n  Sphinx-2.0.\n* 3628: ``sphinx_themes`` entry_point is deprecated.  Please use\n  ``sphinx.html_themes`` instead.\n   ```\n   \n  \n  \n   ### 1.5.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 3614: Sphinx crashes with requests-2.5.0\n* 3618: autodoc crashes with tupled arguments\n* 3664: No space after the bullet in items of a latex list produced by Sphinx\n* 3657: EPUB builder crashes if document startswith genindex exists\n* 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* 3685: AttributeError when using 3rd party domains\n* 3702: LaTeX writer styles figure legends with a hard-coded ``\\small``\n* 3708: LaTeX writer allows irc scheme\n* 3717: Stop enforcing that favicon&#39;s must be .ico\n* 3731, 3732: Protect isenumclass predicate against non-class arguments\n* 3320: Warning about reference target not being found for container types\n* Misspelled ARCHIVEPREFIX in Makefile for latex build repertory\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/sphinx\n  - Changelog: https://pyup.io/changelogs/sphinx/\n  - Homepage: http://sphinx-doc.org/\n</details>\n\n"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 164,
                "title": "Added Dockerfile and readme instructions #155",
                "labels": [],
                "description": "Referencing issue #155 I added a minimal Dockerfile and usage instructions to the Readme. Use in e.g. gitlab-ci with:\r\n\r\n```\r\nsafety:\r\n    image: safety\r\n    stage: test\r\n    script:\r\n        - export HTTPS_PROXY=\"https://${PROXY_HOST}:${PROXY_PORT}\"\r\n        - safety check -r requirements.txt --full-report\r\n```"
            },
            {
                "repo_url": "https://github.com/pyupio/safety",
                "id": 157,
                "title": "Add --proxy= command line option",
                "labels": [],
                "description": "* safety version: 1.8.4\r\n* Python version: All\r\n* Operating System: All\r\n\r\n### Description\r\n\r\nTrying to run safety within a corporate, _(paranoid),_ environment.\r\nA lot of error print out about socket timeout, etc., then error termination. \r\n\r\n### What I Did\r\n`pip install safety`  # N.B. pip.ini contains a proxy setting that allows it to work\r\n`safety check`  # Resulted in the errors above\r\n`set HTTPS_PROXY=` _the_proxy_from_pip.ini_\r\n`safety check`  # This time it worked.\r\n```\r\nNot permitted to paste from company machine!\r\n```\r\nThe underlying `requests` library has `--proxy` option that can be used to address this problem but it is not exposed by the `safety` command line.  While the work around is simple enough a lot of people who should be running `safety check` would not be happy about using it and possibly not aware - if the help for safety exposed a `--proxy=` then it should point them in the correct direction."
            }
        ]
    },
    "myint/scspell": {
        "all": [
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 23,
                "title": "scspell does not match backslashed words",
                "labels": [
                    "enhancement"
                ],
                "description": "I noticed this while spell-checking in a code that uses backslashed words for Doxygen, e.g.\r\n```\r\n/**\r\n * This is a test that uses backslashes.\r\n * \\author J. Doe\r\n * \\date Today\r\n * \\another keyword\r\n */\r\n```\r\nThe output is, e.g.\r\n```\r\ntest.h:5: Unmatched 'nother' --> {nother}\r\n   (i)gnore, (I)gnore all, (r)eplace, (R)eplace all, (a)dd to dictionary, or\r\n   show (c)ontext? [i]\r\n```\r\n"
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 28,
                "title": "Create a dictionary from a directory",
                "labels": [
                    "enhancement"
                ],
                "description": "Probably requires https://github.com/myint/scspell/issues/22\r\n\r\nIt'd be handy to be able to easily create dictionaries from existing libraries, especially various languages stdlib.  The idea is\r\n- Assume the input is all spell checked\r\n- Create a new dictionary file based on the code\r\n- Optionally subtract out content from the base dictionary."
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 18,
                "title": "Do not control files names",
                "labels": [
                    "question"
                ],
                "description": "Is there a way not to check spelling of file names?\r\n"
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 30,
                "title": "feat: Create programmatic API",
                "labels": [],
                "description": "TODO\r\n- [ ] Determine how `file_id_ref` should be handled\r\n- [ ] Clarify intent on what parts of the API for meant for external use or not\r\n\r\nAdded `spell_check_str`\r\n- Doesn't requie file to be on disk\r\n- Does not read stdin or write to stdout\r\n- Acts as an iterator in the report-only use case\r\n- Acts as a coroutine in the auto-apply use case\r\n\r\nFixes #29\r\n\r\nBREAKING CHANGE: `spell_check_token`s API changed"
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 22,
                "title": "scspell should support directory traversal",
                "labels": [],
                "description": "I think it'd be handy for scspell to have directory-recursing\r\nabilities.  By way of illustration, here's my attempt at it for one\r\nproject:\r\n\r\nhttps://github.com/chapel-lang/chapel/blob/master/util/chplspell\r\n\r\nAll the complexity of that script is in service of two user\r\nconveniences:\r\n\r\n1. The script has a built in default set of directories and file globs\r\nto search for within them, and\r\n\r\n2. If any files or directories are given on the command line, they are\r\nused as the base of the search instead of the default ones.\r\n\r\nThis way, the user can just type ``chplspell`` and get all the right\r\nfiles in the tree spell-checked, with the right dictionaries and\r\noptions.\r\n\r\n\r\nIf this functionality were moved inside scspell, then this script\r\ncould be replaced by effectively a one-liner, invoking scspell with a\r\ndescription of those defaults and passing through the rest of the\r\ncommandline.  And then any other projects that want to use scspell in\r\na similar manner would only need their own similar one-liner instead\r\nof a complex script.\r\n\r\nI don't know what would be the best interface for that.  The two\r\nalternatives I've thought of are:\r\n\r\n1. Pass everything as commandline arguments.\r\n2. Pass everything through a config file.\r\n\r\nIn the first alternative, that \"one-liner\" would be a very long line,\r\nlike the following (more generic files and directories than in the\r\nabove script):\r\n\r\n    #!/bin/bash\r\n    exec scspell --defdir doc --defdir man --defdir src \\\r\n                 --defglob \"*.c\" --defglob \"*.h\" --defglob \"*.cpp\" \\\r\n                 --use-builtin-base-dict \\\r\n                 --relative-to $PROJ_HOME \\\r\n                 --override-dictionary $PROJ_HOME/.scspell/dictionary \\\r\n                 \"$@\"\r\n\r\n\r\nIn the second alternative, it would be a simpler one-liner.  The\r\nconfig file would specify all the other options from the command line\r\nabove.\r\n\r\n    #!/bin/bash\r\n    exec scspell --project-config $PROJ_HOME/.scspell/$PROJ.scspell.conf \"$@\"\r\n\r\n\r\nPresumably using ConfigParser.\r\n\r\n\r\nI'm not sure how to cleanly associate certain of the globs\r\n(e.g. *.tex) with certain behavior (e.g. --no-c-escapes).  I could\r\nimagine --deftexglob \"*.tex\", but in addition to being a little gross,\r\nit'd get grosser if there turn out to be languages that need their own\r\n--no-c-escapes sort of switch.  (The above script gets away with\r\nincludeing README* in default globs, and *.tex in the latex globs only\r\nbecause there's no README.tex in tree.)\r\n\r\n\r\nThoughts?\r\n"
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 29,
                "title": "API for getting all of the spelling corrections",
                "labels": [
                    "enhancement"
                ],
                "description": "I'm imagining the API would provide an iterator over the file, returning results and `spell_check_file` would iterate over these, handling them.\r\n\r\nThis opens the door for programmatic use of scspell."
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 25,
                "title": "python2 set-dictionary issue",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "``` console\r\ntom@computer:~/$ scspell --set-dictionary=/home/tom/Dropbox/work/data/spelling.txt\r\nTraceback (most recent call last):\r\n  File \"/home/tom/hacking/energysage/env/bin/scspell\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 899, in main\r\n    set_dictionary(args.dictionary)\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 648, in set_dictionary\r\n    config.write(f)\r\n  File \"/usr/lib/python2.7/ConfigParser.py\", line 414, in write\r\n    fp.write(\"\\n\")\r\nTypeError: write() argument 1 must be unicode, not str\r\ntom@computer:~/$ Python 2.7.13\r\ntom@computer:~/$ pip freeze | grep -i scspell\r\nscspell3k==2.1\r\n```\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 24,
                "title": "option to report list of unique misspellings",
                "labels": [
                    "enhancement"
                ],
                "description": "It would be great if scspell could print just a unique list of misspelled tokens. Lots of tools enable me to find the misspelled word in its context after the fact (ag, grep). I just want to use scspell's awesome token parsing abilities. Currently I'm doing something like this:\r\n\r\n`scspell --report-only files... | cut -d' ' -f 2 | sort -u`\r\n\r\nbut it seems like it would be much more efficient to do it in the program itself.\r\n\r\n"
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/myint/scspell",
                "id": 25,
                "title": "python2 set-dictionary issue",
                "labels": [
                    "help wanted",
                    "bug"
                ],
                "description": "``` console\r\ntom@computer:~/$ scspell --set-dictionary=/home/tom/Dropbox/work/data/spelling.txt\r\nTraceback (most recent call last):\r\n  File \"/home/tom/hacking/energysage/env/bin/scspell\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 899, in main\r\n    set_dictionary(args.dictionary)\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 648, in set_dictionary\r\n    config.write(f)\r\n  File \"/usr/lib/python2.7/ConfigParser.py\", line 414, in write\r\n    fp.write(\"\\n\")\r\nTypeError: write() argument 1 must be unicode, not str\r\ntom@computer:~/$ Python 2.7.13\r\ntom@computer:~/$ pip freeze | grep -i scspell\r\nscspell3k==2.1\r\n```\r\n\r\n"
            }
        ]
    },
    "Kuniwak/vint": {
        "all": [
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 228,
                "title": "\"Undefined variable\" not triggered in assignment",
                "labels": [
                    "bug"
                ],
                "description": "Given the following Vim file, only `baz` in the 3rd line is detected as \"Undefined variable: baz (ProhibitUsingUndeclaredVariable)\":\r\n\r\n```vim\r\nfunction F()\r\n  let foo = foo\r\n  let foo = {'foo': foo}\r\n  let bar = {'bar': baz}\r\nendfunction\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 180,
                "title": "Ignore warnings always with \"--error\", when (re-)enabled in comments",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "When using `vint --error` the following should not trigger a warning later in the code:\n\n``` vim\n\" vint: -ProhibitUnnecessaryDoubleQuote\nlet foo = \"bar\"\n\" vint: +ProhibitUnnecessaryDoubleQuote\nlet foo = \"bar\"\n```\n\nUsing `--error` should really only report errors.\n\nWhile at it, I think it would be useful to have a shortcut that can be used to disable a warning just for one line (the next one or the line where it is added as a comment, \u00e0 la `\" noqa`.\n\nRef: https://github.com/neomake/neomake/pull/575/commits/17dbbeee4143d626722a66591e6e869d3d88cadd\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 126,
                "title": "Feature request: warn about missing `autocmd!` from `augroup`",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "Usually when defining an `augroup`, you want to include `autocmd!` at the top to clear any old autocommands before defining new ones. More info: http://learnvimscriptthehardway.stevelosh.com/chapters/14.html\n\nIt might be nice for vint to warn about `augroup`s that are missing an `autocmd!` at the top. What do you think?\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 225,
                "title": "UnicodeDecodeError with chardet 3",
                "labels": [
                    "waiting for reply",
                    "bug"
                ],
                "description": "The following minimal vim file will cause an error:\r\n```vim\r\nscriptencoding utf-8\r\n\" :purple_heart: \ud83d\udc9c\r\n\" set list listchars=tab:\u00bb\u00b7,trail:\u00b7,eol:\u00ac,nbsp:_,extends:\u276f,precedes:\u276e\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\u2026/Vcs/vint/.venv/bin/vint\", line 11, in <module>\r\n    load_entry_point('vim-vint', 'console_scripts', 'vint')()\r\n  File \"\u2026/Vcs/vint/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"\u2026/Vcs/vint/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"\u2026/Vcs/vint/vint/linting/linter.py\", line 106, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"\u2026/Vcs/vint/vint/ast/parsing.py\", line 63, in parse_file\r\n    decoded = bytes_seq.decode(encoding)\r\n  File \"\u2026/Vcs/vint/.venv/lib/python3.6/encodings/cp1254.py\", line 15, in decode\r\n    return codecs.charmap_decode(input,errors,decoding_table)\r\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x9d in position 105: character maps to <undefined>\r\n```\r\n\r\n`encoding_hint` in `parse_file` from `chardet.detect(bytes_seq)` is: `{'encoding': 'Windows-1254', 'confidence': 0.5658124254347925, 'language': 'Turkish'}`.\r\n\r\nWith chardet 2.3 it is `{'encoding': 'ISO-8859-2', 'confidence': 0.6680924803464797}`.\r\n\r\nThey seem to temporarily have disabled `ISO-8859-2` as per the README on PyPI.\r\n\r\nBut anyway, since `scriptencoding` is present, this should be used by vint directly, and `parse_file` should fall back to `utf-8` probably anyway in case of errors?!\r\n\r\n`b'scriptencoding' in bytes_seq` could be used here for starters."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 163,
                "title": "Incorrect E477",
                "labels": [
                    "bug",
                    "vim-vimlparser"
                ],
                "description": "In a function in my vimrc, I use `Gdiff!`. Without any extra arguments, vint returns:\n\n```\n.vimrc:588:3: E477: No ! allowed (see ynkdir/vim-vimlparser)\n```\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 223,
                "title": "Tests fail if vint is not installed",
                "labels": [
                    "need PR",
                    "bug"
                ],
                "description": "Hello.\r\n\r\ntest/acceptance/test_cli.py calls `vint` with args. When vint isn't installed there is no `vint` command in PATH, so tests fail. Also relying on the installed `vint` executable defies testing purposes as already installed version is tested, not the current one.\r\n\r\nSolution: explicitly call `bin/vint`. Fix: `sed -i -e \"s|'vint'|'bin/vint'|g\" test/acceptance/test_cli{,_vital}.py`"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 125,
                "title": "Warns about comparison against empty string",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "Given a comparison like:\n\n```\nif l:foo == ''\n```\n\nVint will complain that `==` should be replaced with an explicitly case-(in)sensitive alternative like `==#` or `==?`.\n\nIt seems like case-sensitivity for empty strings isn't really meaningful (or am I missing something?) so the linter probably shouldn't warn about it. What do you think?\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 63,
                "title": "Move _build_argparser on vint/__init__.py to vint/linting/env.py",
                "labels": [
                    "refactor"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 83,
                "title": "Multi-line comment config bug",
                "labels": [
                    "bug"
                ],
                "description": "First comment configs are always ignored:\n\n```\nvint: -ProhibitSomethingEvil\nvint: -ProhibitSomethingBad\n```\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 206,
                "title": "Line/col is wrong with parse error in map function",
                "labels": [
                    "bug"
                ],
                "description": "Given the following file, the error should be reported somewhere in line 2, but is not:\r\n```vim\r\n\" line 1\r\ncall map(foo, \"extend(bar, {'auto_enabled': 0}, 'error'\")\r\n```\r\n\r\nIt seems to refer to the end of the string being eval'd:\r\n```\r\nt-syntaxerror-wrong-linecol.vim:1:46: unexpected token: <EOL> (see ynkdir/vim-vimlparser)\r\n```\r\n\r\nThe exception is\r\n\r\n> VimLParserException('vimlparser: unexpected token: <EOL>: line 1 col 46',)"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 104,
                "title": "Should care variables on a map command family and autocmd family",
                "labels": [
                    "ciritical",
                    "bug"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 120,
                "title": "Implement AutocmdParser",
                "labels": [
                    "implement"
                ],
                "description": "- [x] Implement AutocmdParser"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 283,
                "title": "Add vint.__version__ for better version handling",
                "labels": [],
                "description": "This will provide the correct version when using\r\n`pip install --editable`."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 121,
                "title": "\u6587\u5b57\u5217\u5185\u306e\u6587\u5b57\u5217\u3067 Prefer single quoted strings \u304c\u51fa\u308b",
                "labels": [
                    "need PR",
                    "bug"
                ],
                "description": "sample.vim\n\n``` vim\necho map([], '\"hi\"')\n```\n\n```\n$ vint sample.vim\nsample.vim:1:14: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\n\n$ vint --version\n0.3.1\n```\n\n\u6587\u5b57\u5217\u4e2d\u3067\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3068\u5b09\u3057\u3044\u3067\u3059\uff01\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 285,
                "title": "ProhibitAutocmdWithNoGroup: Ignore for buffer-specific autocommands",
                "labels": [],
                "description": "This rule should be relaxed to allow for defining autocmd outside augroup, as long as the `<buffer>` option is set.\r\n\r\nThis is used for example to create filetype-specific autocommands by placing them in a `filetype/&filetype/commands.vim` file or similar."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 122,
                "title": "\u7701\u7565\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u540d\u3092\u691c\u51fa\u3057\u3066\u6b32\u3057\u3044",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "`:exec` \u3068\u304b `:echom` \u307f\u305f\u3044\u306a\u3084\u3064\u3092\u691c\u51fa\u3057\u3066\u6b32\u3057\u3044\u3067\u3059\u3002(\u5b9f\u969b\u306f `:execute` `:echomsg`\u3000\u304c\u597d\u307e\u3057\u3044)\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 222,
                "title": "Allow newer verions of the required packages",
                "labels": [
                    "need PR"
                ],
                "description": "Hello.\r\n\r\nvint requires exact versions of several packages. These versions are outdated nowadays.\r\nPlease allow vint to be used with newer versions.\r\n\r\n|   package  | vint requires | latest version |\r\n|:----------:|:-------------:|:--------------:|\r\n| pytest     | == 2.6.4      | 3.1.0          |\r\n| pytest-cov | == 1.8.1      | 2.5.1          |\r\n| coverage   | == 3.7.1      | 4.4.1          |\r\n| mock       | == 1.0.1      | 2.0.0          |\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 214,
                "title": "AbstractPolicy: no need to use a constructor for setting members",
                "labels": [],
                "description": ""
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 175,
                "title": "If inner if statements, suppress warning (prohibit set nocompatible policy)",
                "labels": [
                    "need PR",
                    "bug"
                ],
                "description": "`set nocompatible`\u304c\u5b58\u5728\u3059\u308b\u3068\u8b66\u544a\u304c\u51fa\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u8b66\u544a\u3092\u51fa\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u3002\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f[vimrc\u30a2\u30f3\u30c1\u30d1\u30bf\u30fc\u30f3](http://rbtnn.hateblo.jp/entry/2014/11/30/174749)\u306e\u300c\u5b9f\u306f\u5fc5\u8981\u306e\u306a\u3044set nocompatible\u300d\u3067\u3082\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u3067\u3059\u3002\n\n``` vim\nif &compatible\n  set nocompatible\nendif\n```\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 124,
                "title": "\u6587\u5b57\u5217\u9023\u7d50\u6f14\u7b97\u5b50\u306e\u524d\u5f8c\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u30dd\u30ea\u30b7\u30fc",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "Vim script \u306b\u304a\u3044\u3066\u3001`.` \u6f14\u7b97\u5b50\u306f\u3001\u6587\u5b57\u5217\u9023\u7d50\u6f14\u7b97\u5b50\u3068\u8f9e\u66f8\u306e\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6587\u5b57\u5217\u9023\u7d50\u306e\u5834\u5408\u306f `.` \u306e\u524d\u5f8c\u306b\u30b9\u30da\u30fc\u30b9\u3092\u958b\u3051\u308b\u3079\u304d\u3067\u3059\u3002\n\n\u53c2\u8003: [`:help expr-entry`](http://vim-jp.org/vimdoc-ja/eval.html#expr-entry)\n\n> Note \u30c9\u30c3\u30c8\u306f\u6587\u5b57\u5217\u9023\u7d50\u306b\u3082\u4f7f\u308f\u308c\u308b\u3002\u6df7\u4e71\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u6587\u5b57\u5217\u9023\u7d50\u306e\u30c9\u30c3\u30c8\u306e\n> \u5468\u308a\u306b\u306f\u5fc5\u305a\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u3053\u3068\u3002\n\n`.` \u6f14\u7b97\u5b50\u306e\u524d\u5f8c\u304c\u6587\u5b57\u5217\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9f\u306b\u5206\u304b\u308b\u5834\u5408\u3060\u3051\u3067\u826f\u3044\u306e\u3067\u3001\u3053\u308c\u3092\u691c\u51fa\u3059\u308b\u30dd\u30ea\u30b7\u30fc\u304c\u3042\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 230,
                "title": "New Rule Suggestion: Prohibit equality comparisons with get() calls with no defaults",
                "labels": [
                    "need PR"
                ],
                "description": "I have a suggestion for a new rule, which I might try and submit a pull request myself for, at some point. I think it would be a good idea to complain about the following code:\r\n\r\n```vim\r\nif get(l:some_dictionary, 'foo') ==# 'bar'\r\n```\r\n\r\nThe problem with the code above is that if the key is not defined, then the comparison returns `1`, as the default value is `0`, and `0 ==# 'bar'` returns `1` because the String on the right hand side is first converted to a Number, and the result of that conversion is `0`. Using a default value fixes the problem.\r\n\r\n\r\n```vim\r\nif get(l:some_dictionary, 'foo', '') ==# 'bar'\r\n```\r\n\r\nIt might even be an idea, and easier to implement, to just always ask for a default value to be used when calling `get`."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 179,
                "title": "\"Undefined variable\" with slicing",
                "labels": [
                    "ciritical",
                    "need PR",
                    "bug"
                ],
                "description": "With a file like the following:\r\n\r\n``` vim\r\nfunction! F()\r\n  let s = '123'\r\n  let foobar = 1\r\n  echo s[foobar:foobar+1]\r\nendfunction\r\n```\r\n\r\nvint will wrongly say:\r\n\r\n> t.vim:4:10: Undefined variable: foobar:foobar (see :help E738)\r\n\r\nThe workaround is to use `s[(foobar):(foobar+1)]`, but both works in Vim."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 208,
                "title": "Feature request: lint for variable statement",
                "labels": [
                    "question"
                ],
                "description": "I'm not sure if this shouldn't be an issue, but here is the problem:\r\n```vim\r\nb:foobar_num = 33\r\nb:foobar_str = \"hello\"\r\n```\r\nExpected error:\r\n```vim\r\nb:foobar_num = 33\r\n~~~~~~~~~~~~~~~~~ Missing `let` or `set` keyword.\r\nb:foobar_str = \"hello\"\r\n~~~~~~~~~~~~~~~~~~~~~~ Missing `let` or `set` keyword.\r\n```\r\nThese are undefined. I hope there is a lint for catching statements like these that aren't proper variable declaration.\r\n\r\nI wouldn't mind looking into adding this. Please let me know where to look."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 287,
                "title": "\"ImportError No module named pathlib\" on startup",
                "labels": [
                    "bug"
                ],
                "description": "I just did a fresh install of vint via `pip install vim-vint`. Then when I run `vint`:\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/home/jesse/.local/bin/vint\", line 7, in <module>\r\n>     from vint import main\r\n>   File \"/home/jesse/.local/lib/python2.7/site-packages/vint/__init__.py\", line 1, in <module>\r\n>     from vint.bootstrap import (\r\n>   File \"/home/jesse/.local/lib/python2.7/site-packages/vint/bootstrap.py\", line 3, in <module>\r\n>     from pathlib import Path\r\n> ImportError: No module named pathlib\r\n\r\nHere is my .vintrc.yaml:\r\n\r\n```\r\ncmdargs:\r\n    env:\r\n        neovim: true\r\npolicies:\r\n    # Disable a violation\r\n    ProhibitImplicitScopeVariable:\r\n        enabled: false\r\n```\r\n\r\nI also tried it with only the neovim:true setting, with a blank settings file, and I even tried deleting the settings file, but I get the same output on running vint.\r\n\r\nI'm on Ubuntu 16.04 LTS. Additional system info:\r\n\r\n> \u25b7 which python\r\n> /usr/bin/python\r\n> \u25b7 python --version\r\n> Python 2.7.12\r\n> \u25b7 which pip\r\n> /usr/bin/pip\r\n> \u25b7 pip --version\r\n> pip 8.1.1 from /usr/lib/python2.7/dist-packages (python 2.7)"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 188,
                "title": "$XDG_CONFIG_HOME support",
                "labels": [
                    "need PR",
                    "implement",
                    "feature"
                ],
                "description": "It's discouraged to put configuration dotfiles into home directory. Please use `$XDG_CONFIG_HOME` as a default user folder for `vintrc`. If this env var isn't set, the default fallback to `~/.config` should be used.\r\n\r\nYou can find more at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html. Please keep in mind, that this spec is applied console applications too. For example systemd, git, mc, htop and many others follow this spec."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 191,
                "title": "vint do not support a:firstline and a:lastline.",
                "labels": [
                    "bug"
                ],
                "description": "```viml\r\n\tfunction Cont() range\r\n\t  execute (a:firstline + 1) . \",\" . a:lastline . 's/^/\\t\\\\ '\r\n\tendfunction\r\n```\r\nI get errors : \r\n```log\r\nconfig/nvim/autoload/zvim/util.vim|91 col 45 warning| Undefined variable: a:firstline (ProhibitUsingUndeclaredVariable)\r\nconfig/nvim/autoload/zvim/util.vim|91 col 66 warning| Undefined variable: a:lastline (ProhibitUsingUndeclaredVariable)\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 195,
                "title": "ProhibitEqualTildeOperator: be smarter about cases where it is not required",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "It would be nice if the `ProhibitEqualTildeOperator` (\"Use robust operators `==#` or `==?` instead of `==`\") policy would ignore cases/violations when there is no ambiguity, e.g. when comparing numbers (as string), spaces (`line !~ '^  '`) or with the empty string (`if foo == ''`).\r\n\r\nI don't mind using it always myself, but I can see that maintainers/people do not like it.\r\n\r\nWhat do you think?\r\nThe case for empty strings could be handled rather easily probably, and otherwise we could check if the upper-case version of all chars is the same as the lower-case version?!"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 198,
                "title": "Syntastic: `unrecognized error format (crashed checker?)`?",
                "labels": [
                    "bug"
                ],
                "description": "I'm getting an error when I run `:SyntasticCheck` on VimL files. I have vim configured with only the options suggested for new users in Syntastic's README:\r\n\r\n```viml\r\nlet g:syntastic_vim_checkers = ['vint']\r\n\r\nset statusline+=%#warningmsg#\r\nset statusline+=%{SyntasticStatuslineFlag()}\r\nset statusline+=%*\r\n\r\nlet g:syntastic_always_populate_loc_list = 1\r\nlet g:syntastic_auto_loc_list = 1\r\nlet g:syntastic_check_on_open = 1\r\nlet g:syntastic_check_on_wq = 0\r\n```\r\n\r\nHere's the output for the Syntastic debug log:\r\n\r\n```\r\nsyntastic: warning: checker vim/vint: unrecognized error format (crashed checker?)\r\nsyntastic: 255.519186: g:syntastic_version = '3.8.0-3 (Vim 800, Darwin, GUI)'\r\nsyntastic: 255.519360: &shell = '/bin/bash', &shellcmdflag = '-c', \r\n  &shellpipe = '2>&1 | tee', \r\n  &shellquote = '', \r\n  &shellredir = '>%s 2>&1', \r\n  &shelltemp = 1, \r\n  &shellxquote = '', \r\n  &autochdir = 0, \r\n  &shellxescape = ''\r\nsyntastic: 255.519927: UpdateErrors: vint\r\nsyntastic: 255.520186: CacheErrors: vint\r\nsyntastic: 255.520800: g:syntastic_aggregate_errors = 0\r\nsyntastic: 255.520984: getcwd() = '/Users/rlue'\r\nsyntastic: 255.521474: CacheErrors: Invoking checker: vim/vint\r\nsyntastic: 255.522067: SyntasticMake: called with options: \r\n  {'preprocess': 'vint', \r\n   'errorformat': '%f:%l:%c:%t: %m', \r\n   'makeprg': 'vint /Users/rlue/.vim/config/mappings.vim --json', \r\n   'returns': [0, 1]}\r\nsyntastic: 255.847839: system: command run in 0.325377s\r\nsyntastic: 255.848224: checker output: \r\n  ['Traceback (most recent call last):', \r\n   '  File \"/usr/local/bin/vint\", line 11, in <module>', \r\n   '    sys.exit(main())', \r\n   '  File \"/usr/local/lib/python2.7/site-packages/vint/__init__.py\", line 11, in main', \r\n   '    init_cli()', \r\n   '  File \"/usr/local/lib/python2.7/site-packages/vint/bootstrap.py\", line 22, in init_cli', \r\n   '    cli.start()', \r\n   '  File \"/usr/local/lib/python2.7/site-packages/vint/linting/cli.py\", line 26, in start', \r\n   '    config_dict = self._build_config_dict(env)',\r\n   '  File \"/usr/local/lib/python2.7/site-packages/vint/linting/cli.py\", line 56, in _build_config_dict', \r\n   '    ConfigDefaultSource(env),', \r\n   '  File \"/usr/local/lib/python2.7/site-packages/vint/linting/config/config_file_source.py\", line 12, in __init__', \r\n   ' with config_file_path.open() as file_obj:', \r\n   '  File \"/usr/local/lib/python2.7/site-packages/pathlib.py\", line 1077, in open', \r\n   '    return io.open(str(self), mode, buffering, encoding, errors, newline)', \r\n   'LookupError: unknown encoding: ', '']\r\nsyntastic: warning: checker vim/vint: unrecognized error format (crashed checker?)\r\nsyntastic: 255.849312: preprocess: []\r\nsyntastic: 255.849533: raw loclist: []\r\nsyntastic: 255.849727: getLocList: checker vim/vint returned 1\r\nsyntastic: 255.849863: vim/vint raw: []\r\nsyntastic: 255.850016: quiet_messages filter: {}\r\nsyntastic: 255.850130: getLocList: checker vim/vint run in 0.328544s\r\nsyntastic: 255.850399: aggregated: {'_sorted': 0, '_name': '', '_owner': 2, '_columns': 1, '_rawLoclist': []}\r\n```\r\n\r\nIt appears this problem has [cropped up with other linters](https://github.com/vim-syntastic/syntastic/issues/1843), as well. Maybe a null value is being passed as an argument to `io.open`?\r\n\r\n```\r\nFile \"/usr/local/lib/python2.7/site-packages/pathlib.py\", line 1077, in open\r\n    return io.open(str(self), mode, buffering, encoding, errors, newline)\r\nLookupError: unknown encoding: \r\n```\r\n\r\nI'd dig through the traceback in more detail, but I don't know python at all. :\\"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 201,
                "title": "ProhibitImplicitScopeBuiltinVariable is not defined",
                "labels": [
                    "bug"
                ],
                "description": "When I enable this policy in my .vintrc.yaml and run vint I get this:\r\n````\r\nvint WARNING: Policy `ProhibitImplicitScopeBuiltinVariable` is not defined\r\n````"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 127,
                "title": "Maintainer Wanted",
                "labels": [
                    "help wanted"
                ],
                "description": "I have maintained the vint for half a year, but I will be busy for the next half a year.\nSo I will be not able to maintain constantly.\n\nIf you interest in the Vint, please help to make Vint better.\n- [Design diagram](https://github.com/Kuniwak/vint/wiki/Vint-design)\n##### EDIT\n\nI mean that \"I'm going to continue to maintain Vint, but now I need more help.\"\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 202,
                "title": "Crash when parsing \"silent redir => foo\"",
                "labels": [],
                "description": "Vint crashes when it tries to parse the following line:\r\n\r\n```viml\r\nsilent redir => foo\r\n```\r\n\r\nWithout `silent`, it works, with `>` instead of `=>` it works, too.\r\n\r\nI'm using Vint 0.3.11.\r\n\r\nThis is the error message:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/vint\", line 11, in <module>\r\n    load_entry_point('vim-vint==0.3.11', 'console_scripts', 'vint')()\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/linting/linter.py\", line 106, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/parsing.py\", line 61, in parse_file\r\n    return self.parse(decoded_and_lf_normalized)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/parsing.py\", line 38, in parse\r\n    plugin.process(ast)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/__init__.py\", line 32, in process\r\n    processed_ast = self._ref_tester.process(ast)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/reference_reachability_tester.py\", line 43, in process\r\n    scope_linker.process(ast)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/scope_linker.py\", line 312, in process\r\n    attached_ast = id_classifier.attach_identifier_attributes(ast)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/identifier_classifier.py\", line 122, in attach_identifier_attributes\r\n    ast_with_parsed_redir = redir_assignment_parser.process(ast)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/redir_assignment_parser.py\", line 33, in process\r\n    traverse(ast, on_enter=enter_handler)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 243, in traverse\r\n    node[prop_name])\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 9, in for_each\r\n    call_if_def(func, node)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 23, in call_if_def\r\n    func(node)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 242, in <lambda>\r\n    accessor_func(lambda child_node: traverse(child_node, on_enter, on_leave),\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 246, in traverse\r\n    handler(node, on_enter=on_enter, on_leave=on_leave)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/plugin/scope_plugin/redir_assignment_parser.py\", line 48, in traverse_redir_content\r\n    traverse(node[REDIR_CONTENT], on_enter=on_enter, on_leave=on_leave)\r\n  File \"/usr/local/lib/python2.7/dist-packages/vint/ast/traversing.py\", line 227, in traverse\r\n    node_type = NodeType(node['type'])\r\nTypeError: 'NoneType' object has no attribute '__getitem__'\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 210,
                "title": ":packadd and :packloadall should be permitted",
                "labels": [
                    "vim-vimlparser"
                ],
                "description": "Vim 8 added [support for packages](http://vimhelp.appspot.com/repeat.txt.html#packages), with these new commands:\r\n\r\n* [`:packadd`](http://vimhelp.appspot.com/repeat.txt.html#%3Apackadd)\r\n* [`:packloadall`](http://vimhelp.appspot.com/repeat.txt.html#%3Apackl)\r\n\r\nCurrently, vint reports `E492: Not an editor command` if either of these commands appear in a script."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 147,
                "title": "Feature request: Add a way to specify options to each policy",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "This feature request is mainly for `ProhibitAbbreviationOption`.\n\nFor example, I would like to use `ProhibitAbbreviationOption` but for `cpoption`.\nIn README, I found\n\n``` vim\n\" vint: -ProhibitAbbreviationOption\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\n\" vint: +ProhibitAbbreviationOption\n\n\" do something...\n\n\" vint: -ProhibitAbbreviationOption\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n```\n\nBut I cannot be bothered to write these comment on every Vimscript files.\nIt would be really nice if I could specify option in `~/.vintrc.yaml` like:\n\n```\npolicies:\n  ProhibitAbberviationOption\n    exclude:\n      - cpoption\n```\n\nSo I would like to have (at least) a way to specify options to each policy.\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 205,
                "title": "Parsing of custom commands / heredoc in general",
                "labels": [],
                "description": "I have found that there are several parser functions based on `parse_cmd_lua` to handle `python <<EOF` blocks, but they do not match custom commands like in https://github.com/davidhalter/jedi-vim/blob/b885e10e0db39ee735475464cd5af0cd93ff4959/autoload/jedi.vim#L182-L186.\r\n\r\nSince none of them appear to delegate parsing of the inner block to e.g. `python`, I think it could be generalized to handle any `<<` block?\r\nIs this maybe what the FIXME with `parse_cmd_usercmd` is referring to?"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 186,
                "title": "Vint throwing exception on non-alpha options",
                "labels": [
                    "ciritical",
                    "bug"
                ],
                "description": "Vint is throwing an exception for non-alpha options (i.e. `[a-z]+`), which appear to be valid options in Neovim (e.g. `<F13>`).\n\nFor example, the following option (necessary to to get control-shift working in iTerm2.app for me) that overrides the \"F13 key\" to map hex codes (see this [post](http://www.daniellesucher.com/2014/04/24/my-new-favorite-vim-tmux-bug/)), e.g.\n\n```\nset <F13>=^[[25~\nmap  <F13> <S-CR>\nmap! <F13> <S-CR>\n```\n\ngives:\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/bin/vint\", line 11, in <module>\n    sys.exit(main())\n...\n  File \"/usr/local/lib/python3.5/site-packages/vint/linting/policy/prohibit_abbreviation_option.py\", line 62, in is_valid\n    option_name = re.match(r'[a-z]+', option_expr).group(0)\nAttributeError: 'NoneType' object has no attribute 'group'\n```\n\nI was able to work around it by replacing the option in `.vimrc` with\n\n```\nset t_F3=^[[25~\nmap  <F13> <S-CR>\nmap! <F13> <S-CR>\n```\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 209,
                "title": "Support for vim8 lambda expressions",
                "labels": [
                    "question",
                    "vim-vimlparser"
                ],
                "description": "Could you please add support for vim8 lambda expressions?\r\n\r\n    {args -> expr}\r\n\r\nAlternatively, is there a way to make vint skip certain lines entirely (so that it doesn't even try to parse them)?\r\n\r\nThanks!"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 184,
                "title": "Feature request: A style error for abbreviated vim commands",
                "labels": [],
                "description": "Like `ProhibitAbbreviationOption` for vim options, it will be great to add another rule in style problems for abbreviated vim commands (Write `setlocal` instead of `setl` for exemple).\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 279,
                "title": "Allow PyYAML 4.x",
                "labels": [],
                "description": "PyYAML 4.x is out, and includes fixes for security vulnerabilities and other good stuff.\r\n\r\nvint is currently pinned to 3.x . This means other packages in the same environment can not depend on 4.1, otherwise a Conflict exception is raised.\r\n\r\nI've done a build with 4.1 and the only error appears related, in that pypy isnt supported  by 4.1 ;(:\r\n\r\nhttps://travis-ci.org/jayvdb/vint/builds/397900637\r\n\r\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 288,
                "title": "setup.py: fix requirements",
                "labels": [],
                "description": "Fixes https://github.com/Kuniwak/vint/issues/287\r\n\r\nPlease review carefully.\r\n\r\nBased on pytest's setup.py, which supports different marker levels, but I hope we do not need that: https://github.com/pytest-dev/pytest/blob/master/setup.py."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 190,
                "title": "linting/policy/prohibit_abbreviation_option.py: list index out of range",
                "labels": [
                    "ciritical",
                    "bug"
                ],
                "description": "Crashes when running `vint --style-problem delimitMate/autoload/delimitMate.vim`\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/vint\", line 11, in <module>\r\n    load_entry_point('vim-vint==0.3.10', 'console_scripts', 'vint')()\r\n  File \"/usr/lib/python3.5/site-packages/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"/usr/lib/python3.5/site-packages/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/linter.py\", line 129, in lint_file\r\n    on_leave=lambda node: self._handle_leave(node, lint_context))\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 243, in traverse\r\n    node[prop_name])\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 9, in for_each\r\n    call_if_def(func, node)\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 23, in call_if_def\r\n    func(node)\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 242, in <lambda>\r\n    accessor_func(lambda child_node: traverse(child_node, on_enter, on_leave),\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 243, in traverse\r\n    node[prop_name])\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 9, in for_each\r\n    call_if_def(func, node)\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 23, in call_if_def\r\n    func(node)\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 242, in <lambda>\r\n    accessor_func(lambda child_node: traverse(child_node, on_enter, on_leave),\r\n  File \"/usr/lib/python3.5/site-packages/vint/ast/traversing.py\", line 233, in traverse\r\n    should_traverse_children = on_enter(node) is not SKIP_CHILDREN\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/linter.py\", line 128, in <lambda>\r\n    on_enter=lambda node: self._handle_enter(node, lint_context),\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/linter.py\", line 136, in _handle_enter\r\n    self._fire_listeners(node, lint_context)\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/linter.py\", line 154, in _fire_listeners\r\n    violation = listening_policy.get_violation_if_found(node, lint_context)\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/policy/abstract_policy.py\", line 38, in get_violation_if_found\r\n    if self.is_valid(node, lint_context):\r\n  File \"/usr/lib/python3.5/site-packages/vint/linting/policy/prohibit_abbreviation_option.py\", line 59, in is_valid\r\n    option_expr = excmd_node['str'].split()[1]\r\nIndexError: list index out of range\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 266,
                "title": "Configuration for ProhibitUnusedVariable",
                "labels": [],
                "description": "I would like to configure `ProhibitUnusedVariable` (which is not enabled by default currently) to ignore variables named `_`.\r\n\r\nI could also imagine to make this the default.\r\n\r\nApart from that vimlint allows to configure this for specific variables:\r\n```vim\r\n    \" @vimlint(EVL102, 1, l:true)\r\n    \u2026\r\n    \" @vimlint(EVL102, 0, l:true)\r\n```\r\n\r\nConfiguration based on e.g. `identifier.value` does not appear to be possible with vint, is it?"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 290,
                "title": "Get PosixPath NotImplementedError in Windows",
                "labels": [],
                "description": "Error originates from linting/cli.py. Using PurePosixPath instead seems to fix this."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 274,
                "title": "Strike false positives of ProhibitUnusedVariable",
                "labels": [
                    "waiting for reply",
                    "bug"
                ],
                "description": "```console\r\n$ git rev-parse HEAD\r\n2533f5e142ef58a1127c0b00b8dd42eb520f0a5e\r\n\r\n$ git diff\r\ndiff --git a/vint/asset/default_config.yaml b/vint/asset/default_config.yaml\r\nindex 3d664ba..c1639e4 100644\r\n--- a/vint/asset/default_config.yaml\r\n+++ b/vint/asset/default_config.yaml\r\n@@ -11,6 +11,6 @@ cmdargs:\r\n policies:\r\n   # Experimental\r\n   ProhibitUnusedVariable:\r\n-    enabled: no\r\n+    enabled: yes\r\n   ProhibitImplicitScopeVariable:\r\n     enabled: no\r\n\r\n$ ./bin/vint test/fixture/cli/vital.vim\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:25:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:71:11: Unused variable: s:_assertion (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:71:40: Unused variable: scriptfilename (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:123:11: Unused variable: s:define (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:131:11: Unused variable: s:set_config (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Assertion.vim:131:24: Unused variable: config (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:15:11: Unused variable: s:noop (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:15:18: Unused variable: resolve (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:15:27: Unused variable: reject (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:70:11: Unused variable: s:_publish (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:150:11: Unused variable: s:_notify_done (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:158:11: Unused variable: s:_all (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:158:37: Unused variable: reject (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:165:7: Unused variable: wait_group (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:179:11: Unused variable: s:_race (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:206:11: Unused variable: s:all (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:210:11: Unused variable: s:race (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:214:11: Unused variable: s:resolve (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:226:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:234:11: Unused variable: s:_promise_then (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:252:11: Unused variable: s:_promise_catch (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:257:11: Unused variable: s:_on_finally (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Async/Promise.vim:265:11: Unused variable: s:_promise_finally (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:20:11: Unused variable: s:compare (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:46:13: Unused variable: s:sign_extension (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:53:13: Unused variable: s:lshift32 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:56:13: Unused variable: s:rshift32 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:60:13: Unused variable: s:sign_extension (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:67:11: Unused variable: s:_vital_created (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:85:11: Unused variable: s:invert (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:106:11: Unused variable: s:or (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Bitwise.vim:123:11: Unused variable: s:xor (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:13:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:19:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:23:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:175:11: Unused variable: s:consume_all_blocking (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:209:11: Unused variable: s:queue (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:214:11: Unused variable: s:is_busy (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:220:11: Unused variable: s:shutdown (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:228:11: Unused variable: s:log_clear (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/ConcurrentProcess.vim:233:11: Unused variable: s:log_dump (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Base64.vim:6:11: Unused variable: s:encode (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Base64.vim:11:11: Unused variable: s:encodebin (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Base64.vim:16:11: Unused variable: s:decode (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Base64.vim:73:40: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:45:11: Unused variable: s:to_string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:121:11: Unused variable: s:sub (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:288:11: Unused variable: s:div (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:292:11: Unused variable: s:mod (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:320:11: Unused variable: s:sign (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/BigNum.vim:329:11: Unused variable: s:neg (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:154:11: Unused variable: s:from_funcname (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:183:11: Unused variable: s:from_method (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:216:11: Unused variable: s:call (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:260:11: Unused variable: s:is_binding_supported (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:315:11: Unused variable: s:_eval (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:329:11: Unused variable: s:_execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:343:11: Unused variable: s:_chain (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:351:30: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:352:54: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Closure.vim:371:11: Unused variable: s:_function_exists (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Collection.vim:6:11: Unused variable: s:get_f (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Counter.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Counter.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:22:11: Unused variable: s:from_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:67:11: Unused variable: s:make_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:72:11: Unused variable: s:pick (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:82:11: Unused variable: s:omit (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:92:11: Unused variable: s:clear (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:105:11: Unused variable: s:max_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:112:11: Unused variable: s:min_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:131:11: Unused variable: s:foldl (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Dict.vim:135:11: Unused variable: s:foldr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:23:11: Unused variable: s:_call_string_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:50:11: Unused variable: s:is_either (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:71:11: Unused variable: s:from_left (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:77:11: Unused variable: s:from_right (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:94:11: Unused variable: s:apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:137:11: Unused variable: s:flat_map (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:142:11: Unused variable: s:return (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:148:13: Unused variable: s:null_to_left (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:148:28: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:148:31: Unused variable: __ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Either.vim:152:13: Unused variable: s:null_to_left (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:14:11: Unused variable: s:from_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:18:11: Unused variable: s:_f_from_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:27:11: Unused variable: s:file_readlines (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:37:11: Unused variable: s:_f_file_readlines (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:47:11: Unused variable: s:iterate (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:54:11: Unused variable: s:_f_iterate (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:62:11: Unused variable: s:zip (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:72:11: Unused variable: s:_f_zip (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:108:11: Unused variable: s:filter (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:114:11: Unused variable: s:map (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:148:11: Unused variable: s:first (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:153:11: Unused variable: s:rest (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:163:11: Unused variable: s:drop (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/LazyList.vim:169:9: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:15:11: Unused variable: s:map (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:24:11: Unused variable: s:foldl (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:33:11: Unused variable: s:foldl1 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:42:11: Unused variable: s:foldr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:51:11: Unused variable: s:foldr1 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:60:11: Unused variable: s:uniq_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:69:11: Unused variable: s:max_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:78:11: Unused variable: s:min_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:87:11: Unused variable: s:span (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:96:11: Unused variable: s:break (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:105:11: Unused variable: s:take_while (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:114:11: Unused variable: s:drop_while (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:123:11: Unused variable: s:sort (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:132:11: Unused variable: s:sort_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:141:11: Unused variable: s:all (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:150:11: Unused variable: s:any (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:159:11: Unused variable: s:partition (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:168:11: Unused variable: s:map_accum (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:177:11: Unused variable: s:find (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:186:11: Unused variable: s:find_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:195:11: Unused variable: s:find_last_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:204:11: Unused variable: s:find_indices (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:213:11: Unused variable: s:group_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:222:11: Unused variable: s:binary_search (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:235:11: Unused variable: s:_provide_unary_callable (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List/Closure.vim:242:11: Unused variable: s:_provide_binary_callable (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:6:11: Unused variable: s:pop (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:10:11: Unused variable: s:push (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:15:11: Unused variable: s:shift (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:19:11: Unused variable: s:unshift (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:35:11: Unused variable: s:conj (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:80:11: Unused variable: s:clear (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:89:11: Unused variable: s:concat (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:132:11: Unused variable: s:_compare_by_string_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:132:37: Unused variable: a (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:132:40: Unused variable: b (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:139:11: Unused variable: s:sort_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:149:11: Unused variable: s:_compare_with (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:192:11: Unused variable: s:max_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:204:11: Unused variable: s:min_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:214:11: Unused variable: s:char_range (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:230:11: Unused variable: s:has_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:237:11: Unused variable: s:span (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:244:11: Unused variable: s:break (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:270:11: Unused variable: s:drop_while (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:283:11: Unused variable: s:partition (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:306:11: Unused variable: s:and (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:311:11: Unused variable: s:or (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:315:11: Unused variable: s:map_accum (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:340:11: Unused variable: s:foldl1 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:365:11: Unused variable: s:foldr1 (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:391:11: Unused variable: s:with_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:397:11: Unused variable: s:find (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:408:11: Unused variable: s:find_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:433:11: Unused variable: s:find_last_index (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:457:11: Unused variable: s:find_indices (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:483:11: Unused variable: s:has_common_items (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:487:11: Unused variable: s:intersect (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:499:11: Unused variable: s:group_by (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:518:11: Unused variable: s:binary_search (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:575:11: Unused variable: s:combinations (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:611:11: Unused variable: s:_call_binary_string_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:628:11: Unused variable: s:_call_binary_string_expr_val_memo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/List.vim:636:11: Unused variable: s:_call_string_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:14:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:32:11: Unused variable: s:empty (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:36:11: Unused variable: s:exists (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:40:11: Unused variable: s:set (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:48:11: Unused variable: s:unset (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:54:11: Unused variable: s:get (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:61:11: Unused variable: s:get_unsafe (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:65:11: Unused variable: s:get_or (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:69:11: Unused variable: s:has (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:103:11: Unused variable: s:map (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:107:11: Unused variable: s:bind (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Optional.vim:140:11: Unused variable: s:echo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/OrderedSet.vim:5:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Set.vim:7:11: Unused variable: s:set (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Set.vim:11:11: Unused variable: s:frozenset (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/Set.vim:15:11: Unused variable: s:_hash_func (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String/Interpolation.vim:5:11: Unused variable: s:interpolate (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:11:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:15:11: Unused variable: s:_vital_created (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:27:11: Unused variable: s:replace (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:33:11: Unused variable: s:replace_first (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:42:11: Unused variable: s:scan (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:48:11: Unused variable: s:reverse (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:52:11: Unused variable: s:starts_with (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:56:11: Unused variable: s:ends_with (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:76:11: Unused variable: s:split_leftright (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:77:14: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:98:11: Unused variable: s:nsplit (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:148:11: Unused variable: s:contains_multibyte (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:155:11: Unused variable: s:chop (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:160:11: Unused variable: s:chomp (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:189:11: Unused variable: s:trim (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:193:11: Unused variable: s:trim_start (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:197:11: Unused variable: s:trim_end (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:202:11: Unused variable: s:wrap (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:218:11: Unused variable: s:nr2enc_char (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:229:11: Unused variable: s:nr2hex (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:241:11: Unused variable: s:diffidx (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:245:11: Unused variable: s:substitute_last (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:249:11: Unused variable: s:dstring (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:255:11: Unused variable: s:lines (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:272:11: Unused variable: s:pad_right (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:292:11: Unused variable: s:pad_between_letters (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:306:11: Unused variable: s:justify_equal_spacing (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:322:11: Unused variable: s:levenshtein_distance (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:370:11: Unused variable: s:split_by_displaywidth (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:430:11: Unused variable: s:hash (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:468:11: Unused variable: s:truncate_skipping (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:537:11: Unused variable: s:remove_ansi_sequences (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:541:11: Unused variable: s:escape_pattern (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:546:11: Unused variable: s:unescape_pattern (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:556:11: Unused variable: s:iconv (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:580:11: Unused variable: s:repair_posix_text (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:593:11: Unused variable: s:join_posix_lines (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Data/String.vim:611:11: Unused variable: s:split_posix_text (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Database/SQLite.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Database/SQLite.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Database/SQLite.vim:15:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Database/SQLite.vim:84:11: Unused variable: s:query (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Database/SQLite.vim:92:11: Unused variable: s:debug_mode_to (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:9:7: Unused variable: s:Process (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:10:7: Unused variable: s:Bitwise (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:46:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:51:11: Unused variable: s:now (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:84:11: Unused variable: s:from_format (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:118:7: Unused variable: locale (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:164:11: Unused variable: s:from_julian_day (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:240:11: Unused variable: s:compare (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:289:39: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:410:7: Unused variable: locale (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:675:11: Unused variable: s:_mod (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:685:11: Unused variable: s:_month_abbr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:688:11: Unused variable: s:_month_full (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:691:11: Unused variable: s:_weekday_abbr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:694:11: Unused variable: s:_weekday_full (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:697:11: Unused variable: s:_am_pm_lower (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/DateTime.vim:700:11: Unused variable: s:_am_pm_upper (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Lua/Prelude.vim:13:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Lua/Prelude.vim:13:27: Unused variable: V (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Lua/Prelude.vim:20:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Lua/Prelude.vim:26:11: Unused variable: s:plus (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Lua/Prelude.vim:39:11: Unused variable: s:lua_namespace (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:16:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:20:11: Unused variable: s:touch (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:40:11: Unused variable: s:term (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:44:11: Unused variable: s:kill (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:48:11: Unused variable: s:read (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:90:11: Unused variable: s:state (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:108:11: Unused variable: s:writeln (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/ProcessManager.vim:126:11: Unused variable: s:debug_processes (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Text/Sexp.vim:9:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Text/Sexp.vim:12:7: Unused variable: s:LuaP (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Text/Sexp.vim:20:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Deprecated/Text/Sexp.vim:27:11: Unused variable: s:parse (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Experimental/Functor.vim:50:11: Unused variable: s:bind (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Experimental/Functor.vim:57:11: Unused variable: s:curry (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Experimental/Functor.vim:64:11: Unused variable: s:__curry_stub (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Hash/MD5.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Hash/MD5.vim:11:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Hash/MD5.vim:42:11: Unused variable: s:sum (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Interpreter/Brainf__k.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Interpreter/Brainf__k.vim:14:9: Unused variable: s:LuaP (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Interpreter/Brainf__k.vim:21:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Interpreter/Brainf__k.vim:26:11: Unused variable: s:run (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Interpreter/Brainf__k.vim:38:11: Unused variable: s:run_lua_parse_execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Locale/Message.vim:6:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Locale/Message.vim:45:29: Unused variable: text (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:41:11: Unused variable: s:options_dict2chars (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:52:11: Unused variable: s:options_chars2raw (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:70:11: Unused variable: s:execute_map_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:80:11: Unused variable: s:execute_abbr_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:90:11: Unused variable: s:execute_unmap_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:96:11: Unused variable: s:__get_map_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:119:11: Unused variable: s:get_unabbr_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:123:11: Unused variable: s:__get_unmap_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:140:11: Unused variable: s:get_all_modes (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Mapping.vim:145:11: Unused variable: s:get_all_modes_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:7:11: Unused variable: s:modulo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:12:11: Unused variable: s:fib (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:46:11: Unused variable: s:lcm (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:57:11: Unused variable: s:gcd (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:68:11: Unused variable: s:sum (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:79:11: Unused variable: s:round (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:92:11: Unused variable: s:str2nr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Math.vim:116:11: Unused variable: s:nr2str (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:6:5: Unused variable: s:_DICT_TYPE (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:7:5: Unused variable: s:_NUM_TYPE (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:9:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:13:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:18:45: Unused variable: cmdline (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:18:54: Unused variable: cursorpos (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:183:34: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:183:59: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:183:93: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/OptionParser.vim:401:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:6:13: Unused variable: s:glob (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:10:13: Unused variable: s:glob (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:17:13: Unused variable: s:globpath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:21:13: Unused variable: s:globpath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:60:11: Unused variable: s:is_numeric (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:67:11: Unused variable: s:is_number (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:72:11: Unused variable: s:is_string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:77:11: Unused variable: s:is_funcref (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:82:11: Unused variable: s:is_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:87:11: Unused variable: s:is_dict (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:92:11: Unused variable: s:is_float (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:97:11: Unused variable: s:truncate_skipping (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:228:11: Unused variable: s:is_windows (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:232:11: Unused variable: s:is_cygwin (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:236:11: Unused variable: s:is_mac (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:240:11: Unused variable: s:is_unix (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:253:11: Unused variable: s:smart_execute_command (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:261:11: Unused variable: s:escape_pattern (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:269:11: Unused variable: s:getchar (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:274:11: Unused variable: s:getchar_safe (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:279:11: Unused variable: s:input_safe (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:297:11: Unused variable: s:set_default (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Prelude.vim:364:11: Unused variable: s:path2project_directory (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Process.vim:14:5: Unused variable: s:is_unix (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Process.vim:24:11: Unused variable: s:spawn (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Process.vim:75:11: Unused variable: s:system (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Process.vim:139:11: Unused variable: s:get_last_status (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Mt19937ar.vim:55:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Mt19937ar.vim:59:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Mt19937ar.vim:179:11: Unused variable: s:srand (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Mt19937ar.vim:190:11: Unused variable: s:rand (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Xor128.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Xor128.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Xor128.vim:74:11: Unused variable: s:srand (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random/Xor128.vim:85:11: Unused variable: s:rand (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random.vim:62:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random.vim:108:31: Undefined variable: s:next (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Random.vim:138:11: Unused variable: s:_common (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:32:5: Unused variable: s:T_NUMBER (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:33:5: Unused variable: s:T_STRING (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:34:5: Unused variable: s:T_FUNC (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:36:5: Unused variable: s:T_DICT (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:37:5: Unused variable: s:T_FLOAT (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:38:5: Unused variable: s:T_BOOL (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:39:5: Unused variable: s:T_NONE (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:40:5: Unused variable: s:T_JOB (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:41:5: Unused variable: s:T_CHANNEL (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:51:11: Unused variable: s:of (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:55:11: Unused variable: s:chars (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:59:11: Unused variable: s:lines (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:64:11: Unused variable: s:from_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:68:11: Unused variable: s:from_dict (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:97:11: Unused variable: s:range (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:164:11: Unused variable: s:generate (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:193:11: Unused variable: s:generator (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:694:11: Unused variable: s:_succ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:744:11: Unused variable: s:_not (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:756:11: Unused variable: s:_list (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:760:11: Unused variable: s:_plus (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Stream.vim:889:11: Unused variable: s:_throw_closed_stream_exception (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:7:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:14:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:21:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:24:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:27:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:27:29: Unused variable: value (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Base.vim:33:26: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:7:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:16:11: Unused variable: s:getfilename (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:20:11: Unused variable: s:filereadable (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:25:11: Unused variable: s:readfile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:30:11: Unused variable: s:writefile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:36:11: Unused variable: s:delete (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:41:11: Unused variable: s:deletefile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Deprecated.vim:59:11: Unused variable: s:check_old_cache (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:7:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:14:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:21:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:24:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:27:23: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:27:29: Unused variable: value (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Dummy.vim:33:26: Unused variable: name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/File.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/File.vim:5:7: Unused variable: s:V (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/File.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/File.vim:51:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/File.vim:103:39: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Memory.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Memory.vim:7:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/Memory.vim:15:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/SingleFile.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/SingleFile.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache/SingleFile.vim:16:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache.vim:13:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache.vim:23:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Cache.vim:38:11: Unused variable: s:unregister (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:6:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:26:11: Unused variable: s:open (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:76:11: Unused variable: s:move (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:141:11: Unused variable: s:copy_dir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:218:11: Unused variable: s:copy (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:282:11: Unused variable: s:mkdir_nothrow (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:293:13: Unused variable: s:rmdir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:303:13: Unused variable: s:rmdir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:314:13: Unused variable: s:rmdir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/File.vim:332:13: Unused variable: s:rmdir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:15:5: Unused variable: s:is_mac (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:21:13: Unused variable: s:to_slash (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:25:13: Unused variable: s:to_slash (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:31:13: Unused variable: s:from_slash (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:35:13: Unused variable: s:from_slash (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:48:11: Unused variable: s:path_separator (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:74:11: Unused variable: s:unify_separator (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:80:13: Unused variable: s:which (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:84:13: Unused variable: s:which (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:156:11: Unused variable: s:dirname (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:172:11: Unused variable: s:basename (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:200:11: Unused variable: s:abspath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:211:11: Unused variable: s:relpath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:227:13: Unused variable: s:realpath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:235:13: Unused variable: s:realpath (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:241:13: Unused variable: s:is_root_directory (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:245:13: Unused variable: s:is_root_directory (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Filepath.vim:250:11: Unused variable: s:contains (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Mock.vim:4:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Mock.vim:8:11: Unused variable: s:is_supported (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Mock.vim:8:26: Unused variable: options (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Mock.vim:12:11: Unused variable: s:execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/System.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/System.vim:10:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/System.vim:18:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/System.vim:22:11: Unused variable: s:is_supported (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/System.vim:41:11: Unused variable: s:execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Vimproc.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Vimproc.vim:8:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Vimproc.vim:14:11: Unused variable: s:is_available (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Vimproc.vim:27:11: Unused variable: s:is_supported (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process/Vimproc.vim:37:11: Unused variable: s:execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process.vim:7:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process.vim:15:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/System/Process.vim:53:11: Unused variable: s:execute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/CSV.vim:8:11: Unused variable: s:parse_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/CSV.vim:53:11: Unused variable: s:dump_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/INI.vim:50:11: Unused variable: s:parse_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/LTSV.vim:8:11: Unused variable: s:parse_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/LTSV.vim:33:11: Unused variable: s:dump_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/LTSV.vim:42:47: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Lexer.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Lexer.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Lexer.vim:54:11: Unused variable: s:lexer (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Lexer.vim:71:11: Unused variable: s:simple_parser (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Parser.vim:70:11: Unused variable: s:parser (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/TOML.vim:16:11: Unused variable: s:parse_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/TOML.vim:228:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/TOML.vim:235:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/TOML.vim:298:11: Unused variable: s:_nr2char (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:5:7: Unused variable: s:S (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:33:5: Unused variable: s:default_cell_style (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:68:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:306:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:321:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:545:81: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:600:33: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:600:97: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Text/Table.vim:628:60: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:13:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:18:13: Unused variable: s:is_cmdwin (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:22:13: Unused variable: s:is_cmdwin (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:27:11: Unused variable: s:open (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:68:11: Unused variable: s:get_selected_text (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:85:11: Unused variable: s:get_last_selected (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:146:11: Unused variable: s:edit_content (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Buffer.vim:171:11: Unused variable: s:parse_cmdarg (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/BufferManager.vim:4:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/BufferManager.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/BufferManager.vim:78:28: Unused variable: bufname (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/BufferManager.vim:160:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/BufferManager.vim:191:11: Unused variable: s:_distance (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:40:13: Unused variable: s:shiftwidth (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:45:13: Unused variable: s:shiftwidth (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:49:13: Unused variable: s:shiftwidth (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:56:13: Unused variable: s:writefile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:60:13: Unused variable: s:writefile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:87:13: Unused variable: s:doautocmd (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:95:13: Unused variable: s:doautocmd (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:101:13: Unused variable: s:getbufvar (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:105:13: Unused variable: s:getbufvar (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:112:13: Unused variable: s:getwinvar (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Compat.vim:116:13: Unused variable: s:getwinvar (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Guard.vim:5:11: Unused variable: s:_undefined (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Guard.vim:10:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Guard.vim:16:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Guard.vim:19:11: Unused variable: s:_vital_created (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Guard.vim:178:11: Unused variable: s:store (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Message.vim:6:11: Unused variable: s:echo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Message.vim:26:11: Unused variable: s:error (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Message.vim:30:11: Unused variable: s:warn (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Message.vim:34:11: Unused variable: s:capture (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Message.vim:49:11: Unused variable: s:get_hit_enter_max_length (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:66:11: Unused variable: s:get_major_version (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:75:11: Unused variable: s:set_major_version (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:79:11: Unused variable: s:exec_file (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:89:11: Unused variable: s:exec_code (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:101:13: Unused variable: s:eval_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:111:13: Unused variable: s:eval_expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Python.vim:111:25: Unused variable: expr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ScriptLocal.vim:140:11: Unused variable: s:sfuncs (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ScriptLocal.vim:156:60: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ScriptLocal.vim:156:95: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ScriptLocal.vim:181:11: Unused variable: s:svars (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Search.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Search.vim:8:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Search.vim:14:11: Unused variable: s:finddef (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:29:11: Unused variable: s:_vital_created (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:35:11: Unused variable: s:is_numeric (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:40:11: Unused variable: s:is_special (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:45:11: Unused variable: s:is_predicate (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:51:11: Unused variable: s:is_comparable (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/Type.vim:73:13: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:4:11: Unused variable: s:trace_window (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:10:11: Unused variable: s:trace_tabpage (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:44:11: Unused variable: s:exists (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:48:11: Unused variable: s:tabnr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:52:11: Unused variable: s:winnr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/ViewTracer.vim:56:11: Unused variable: s:jump (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/BorderLayout.vim:22:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/BorderLayout.vim:34:11: Unused variable: s:_border_layout_apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/BorderLayout.vim:97:11: Unused variable: s:_border_layout_adjust_size (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/BorderLayout.vim:97:40: Unused variable: wl (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/BorderLayout.vim:97:44: Unused variable: data (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/FlowLayout.vim:9:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/FlowLayout.vim:13:11: Unused variable: s:_flow_layout_apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/FlowLayout.vim:37:11: Unused variable: s:_flow_layout_adjust_size (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/FlowLayout.vim:37:38: Unused variable: wl (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/FlowLayout.vim:37:42: Unused variable: data (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:9:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:13:11: Unused variable: s:_grid_layout_apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:16:7: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:52:11: Unused variable: s:_grid_layout_adjust_size (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:52:38: Unused variable: wl (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout/GridLayout.vim:52:42: Unused variable: data (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:6:7: Unused variable: s:L (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:15:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:31:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:61:11: Unused variable: s:_layout_apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:126:11: Unused variable: s:_layout_prepare (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:159:11: Unused variable: s:_layout_walias (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:164:11: Unused variable: s:_layout_winnr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:180:11: Unused variable: s:_layout_bufopen (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:186:11: Unused variable: s:_layout_buffer (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:191:11: Unused variable: s:_layout_buffers (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:230:11: Unused variable: s:_facade_apply (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Vim/WindowLayout.vim:235:11: Unused variable: s:_facade_adjust_size (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:7:7: Unused variable: s:string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:16:11: Unused variable: s:decodeEntityReference (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:31:11: Unused variable: s:encodeEntityReference (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:48:11: Unused variable: s:parseFile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTML.vim:52:11: Unused variable: s:parseURL (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/Cookie.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/Cookie.vim:14:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/Cookie.vim:31:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/Cookie.vim:128:11: Unused variable: s:export (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/Cookie.vim:140:11: Unused variable: s:import (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/CookieJar.vim:8:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/CookieJar.vim:14:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP/CookieJar.vim:19:11: Unused variable: s:new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:12:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:20:11: Unused variable: s:decodeURI (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:137:11: Unused variable: s:get (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:146:11: Unused variable: s:post (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:253:11: Unused variable: s:parseHeader (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:297:36: Unused variable: settings (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:542:42: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/HTTP.vim:626:42: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:4:11: Unused variable: s:_true (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:8:11: Unused variable: s:_false (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:12:11: Unused variable: s:_null (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:30:11: Unused variable: s:_vital_created (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:42:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:44:7: Unused variable: s:string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:47:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:54:11: Unused variable: s:decode (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:67:10: Unused variable: null (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:67:15: Unused variable: true (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:67:20: Unused variable: false (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:70:10: Unused variable: null (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:70:15: Unused variable: true (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:70:20: Unused variable: false (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:121:9: Unused variable: ns (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/JSON.vim:149:9: Unused variable: ns (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTP.vim:1:5: Unused variable: s:save_cpo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTP.vim:11:11: Unused variable: s:canonicalize (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTP.vim:20:11: Unused variable: s:default_port (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTP.vim:20:26: Unused variable: uriobj (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:1:5: Unused variable: s:save_cpo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:5:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:9:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:14:11: Unused variable: s:canonicalize (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:18:11: Unused variable: s:default_port (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI/HTTPS.vim:18:26: Unused variable: uriobj (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:1:5: Unused variable: s:save_cpo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:8:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:39:11: Unused variable: s:new_from_seq_string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:46:11: Unused variable: s:is_uri (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:51:11: Unused variable: s:like_uri (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:56:11: Unused variable: s:encode (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:75:11: Unused variable: s:decode (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:128:24: Undefined variable: s:_eat_scheme (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:135:25: Undefined variable: s:_eat_query (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:142:28: Undefined variable: s:_eat_fragment (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:166:41: Unused variable: uriobj (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:204:24: Undefined variable: s:_eat_path_abempty (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:212:26: Undefined variable: s:_eat_path_absolute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:214:26: Undefined variable: s:_eat_path_noscheme (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:216:26: Undefined variable: s:_eat_path_rootless (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:238:28: Undefined variable: s:_eat_userinfo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:245:22: Undefined variable: s:_eat_host (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:248:24: Undefined variable: s:_eat_port (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:265:11: Unused variable: s:_uri_new (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:275:11: Unused variable: s:_uri_scheme (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:288:11: Unused variable: s:_uri_userinfo (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:301:11: Unused variable: s:_uri_host (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:314:11: Unused variable: s:_uri_port (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:330:11: Unused variable: s:_uri_path (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:343:11: Unused variable: s:_uri_authority (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:354:11: Unused variable: s:_uri_opaque (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:364:11: Unused variable: s:_uri_query (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:379:11: Unused variable: s:_uri_fragment (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:394:11: Unused variable: s:_uri_canonicalize (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:399:11: Unused variable: s:_uri_default_port (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:411:11: Unused variable: s:_uri_clone (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:415:11: Unused variable: s:_uri_relative (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:431:25: Undefined variable: s:_eat_query (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:437:28: Undefined variable: s:_eat_fragment (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:476:24: Undefined variable: s:_eat_path_abempty (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:483:26: Undefined variable: s:_eat_path_absolute (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:485:26: Undefined variable: s:_eat_path_noscheme (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:585:11: Unused variable: s:_uri_to_iri (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:597:11: Unused variable: s:_uri_to_string (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:630:11: Unused variable: s:_has_error (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/URI.vim:709:11: Unused variable: s:new_default_pattern_set (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:4:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:7:7: Unused variable: s:S (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:11:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:166:11: Unused variable: s:createElement (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:289:11: Unused variable: s:parseFile (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/__vital__/Web/XML.vim:293:11: Unused variable: s:parseURL (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/_vital.vim:1:5: Unused variable: s:_plugin_name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:53:11: Unused variable: s:import (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:78:11: Unused variable: s:load (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:105:11: Unused variable: s:unload (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:112:11: Unused variable: s:exists (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:120:11: Unused variable: s:search (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:127:11: Unused variable: s:plugin_name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:145:7: Unused variable: tr (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:158:11: Unused variable: s:_import (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:184:11: Unused variable: s:_get_module (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:231:11: Unused variable: s:_module_sid_base_dir (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:251:10: Unused variable: _ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:251:24: Unused variable: __ (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:297:60: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vital/vital.vim:297:95: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:17:5: Unused variable: s:Dict (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:201:11: Unused variable: s:is_module_name (see :help E738)\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:399:71: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:438:41: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:438:50: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:438:54: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:525:80: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:536:45: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:547:48: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/autoload/vitalizer.vim:548:45: Prefer single quoted strings (see Google VimScript Style Guide (Strings))\r\ntest/fixture/cli/vital.vim/test/ConcurrentProcess.vim:104:8: Unused variable: out (see :help E738)\r\ntest/fixture/cli/vital.vim/test/ConcurrentProcess.vim:104:13: Unused variable: err (see :help E738)\r\ntest/fixture/cli/vital.vim/test/ConcurrentProcess.vim:109:8: Unused variable: out (see :help E738)\r\ntest/fixture/cli/vital.vim/test/ConcurrentProcess.vim:109:13: Unused variable: err (see :help E738)\r\ntest/fixture/cli/vital.vim/test/ConcurrentProcess.vim:119:13: Unused variable: err (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Data/Set.vim:230:7: Unused variable: r2 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Data/Set.vim:246:7: Unused variable: r2 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Data/String.vim:270:9: Unused variable: be_nonsense (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Math.vim:103:7: Unused variable: Math (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Math.vim:122:7: Unused variable: Math (see :help E738)\r\ntest/fixture/cli/vital.vim/test/Text/TOML.vim:16:9: Unused variable: toml (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/Vim/ScriptLocal/symlink.vim:1:11: Unused variable: s:double (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/Vim/ScriptLocal/symlink.vim:5:11: Unused variable: s:_square (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/Vim/ScriptLocal/test.vim:1:11: Unused variable: s:double (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/Vim/ScriptLocal/test.vim:5:11: Unused variable: s:_square (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic1.vim:1:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic1.vim:5:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic1.vim:9:11: Unused variable: s:return0 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic1.vim:13:11: Unused variable: s:return1 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic2.vim:1:11: Unused variable: s:_vital_loaded (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic2.vim:5:11: Unused variable: s:_vital_depends (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/cyclic/autoload/vital/__latest__/Cyclic2.vim:9:11: Unused variable: s:return1 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/symlink_root/symlink/autoload/vital/__symlink__/Selfmodule.vim:1:11: Unused variable: s:return1 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/symlink_source/autoload/vital/__symlink__/Selfmodule.vim:1:11: Unused variable: s:return1 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/testplugin/autoload/vital/__latest__/InvalidSelfmodule.vim:1:11: Unused variable: s:return1 (see :help E738)\r\ntest/fixture/cli/vital.vim/test/_testdata/vital/testplugin/autoload/vital/__testplugin__/Selfmodule.vim:1:11: Unused variable: s:return1 (see :help E738)\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 135,
                "title": "\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u95a2\u6570\u306bg:\u3092\u3064\u3051\u306a\u3044\u3068\u30b9\u30bf\u30a4\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u3067\u5f15\u3063\u304b\u304b\u308b",
                "labels": [
                    "feature"
                ],
                "description": "\u4f8b\u3048\u3070IsInstalled\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u3066g:\u306a\u3057\u3067\u4f7f\u3046\u3068\n\n```\nMake the scope explicit like `g:IsInstalled` (see Anti-pattern of vimrc (Scope of identifier))\n```\n\n\u3068\u3044\u3046\u8b66\u544a\u304c\u51fa\u307e\u3059\u304c\u3001`:h E124`\u3092\u898b\u307e\u3059\u3068\n\n```\n                                                E124 E125 E853 E884\n :fu[nction][!] {name}([arguments]) [range] [abort] [dict]\n                         {name}\u3068\u3044\u3046\u540d\u524d\u3067\u65b0\u3057\u3044\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u95a2\u6570\u540d\u306f\u30a2\u30eb\n                         \u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u6570\u5b57\u3068 '_' \u304b\u3089\u306a\u308a\u3001\u901a\u5e38\u306e\u95a2\u6570\u306f\u30a2\u30eb\u30d5\u30a1\n                         \u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306f \"s:\" \u3067\u59cb\u307e\u3089\n                         \u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002Note: \"b:\" \u3084 \"g:\" \u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\n                         (7.4.260 \u304b\u3089\u306f\u95a2\u6570\u540d\u306b\u30b3\u30ed\u30f3\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f E884 \u30a8\n                         \u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002\u4f8b \"foo:bar()\"\u3002\u3053\u306e\u30d1\u30c3\u30c1\u4ee5\u524d\u306f\u30a8\u30e9\u30fc\n                         \u306b\u306f\u306a\u3089\u306a\u3044)\u3002\n```\n\n\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u5927\u6587\u5b57\u304bs:\u3067\u59cb\u307e\u308c\u3070\u3044\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u4fee\u6b63\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 289,
                "title": "Add missing builtin functions and autocmd events based on Vim 8.1.72",
                "labels": [],
                "description": "I noticed some functions (e.g. `json_decode()`) are not recognized as builtin functions. I have updated the list of builtin functions in vint based on `:help eval@en` using MacVim 8.1.72."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 271,
                "title": "\"unexpected token\" with var as dict key",
                "labels": [
                    "bug",
                    "vim-vimlparser"
                ],
                "description": "Given `t.vim`:\r\n```vim\r\nfunction! F()\r\n  echo {'foo': {bar: baz}}\r\nendfunction\r\n```\r\n\r\n`vint t.py` says:\r\n```\r\nt.vim:2:22: unexpected token: baz (see vim-jp/vim-vimlparser)\r\n```\r\n\r\nvimlint however correctly says:\r\n```\r\nt.vim:2:17:Error: EVL101: undefined variable `l:bar`\r\nt.vim:2:22:Error: EVL101: undefined variable `l:baz`\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 181,
                "title": "Ignore ProhibitNoAbortFunction for functions that cannot fail (static return)",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "Do you think it makes sense to ignore the \"Use the abort attribute for functions in autoload (see Google VimScript Style Guide (Functions))\" policy in case the function just returns a string?\n\nWe're using vint for Neomake, and its makers often just return a static string, dict or list and I think the \"abort\" might not be required there?!\n\nI can see that it is a good habit in general (although I do not fully understand why), but it causes linting job failures for PRs because of legacy code.\n\nWhat do you think?\nFeel free to close this as out-of-scope, of course.\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 52,
                "title": "\u30a8\u30e9\u30fc\u306e\u8aac\u660e\u3078\u306e\u30b8\u30e3\u30f3\u30d7\u65b9\u6cd5\u306e\u6539\u826f",
                "labels": [
                    "feature"
                ],
                "description": "\u3044\u307e\u306f see Google Vim script Styleguide \u3068\u304b\u306a\u3063\u3066\u3044\u3066\u3001\u7406\u7531\u306b\u305f\u3069\u308a\u7740\u304f\u307e\u3067\u306e\u30b9\u30c8\u30ec\u30b9\u304c\u5927\u304d\u3044\u3002\n\u305f\u3068\u3048\u3070 URL \u306b\u5909\u66f4\u3059\u308b\u306a\u3069\u3057\u3066\u3001\u7c21\u5358\u306b\u6587\u732e\u307e\u3067\u305f\u3069\u308a\u3064\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n#47\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 263,
                "title": "ProhibitAbbreviationOption only checked for first arg to :set",
                "labels": [],
                "description": "Given `t-option.vim`:\r\n```vim\r\n\" vint: +ProhibitAbbreviationOption\r\nset ts=8 noet\r\n```\r\n\r\nvint will only complain about `ts`, but not `noet`:\r\n```\r\nt-option.vim:2:1: Use the full option name `tabstop` instead of `ts` (see :help option-summary)\r\n```\r\n\r\nThe policy looks at only the first word here: https://github.com/Kuniwak/vint/blob/8c34196252b43d7361d0f58cb78cf2d3e4e4fbd0/vint/linting/policy/prohibit_abbreviation_option.py#L59.\r\n\r\nI think this should loop over all arguments?"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 4,
                "title": "VimLParser \u306e type \u3092 NodeType(type) \u3057\u3066\u304a\u304f",
                "labels": [
                    "refactor"
                ],
                "description": ""
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 265,
                "title": "Fix UnicodeDecodeError",
                "labels": [
                    "waiting for reply"
                ],
                "description": "Original code does not take into account scriptencoding is comment or not.\r\nSo UnicodeDecodeError occures in the code\r\n\r\n```viml\r\n\" scriptencoding \u3068\u306f\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/tmsanrinsha/python/bin/vint\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/linting/linter.py\", line 107, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/ast/parsing.py\", line 37, in parse_file\r\n    decoded = decoder.read(file_path)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/encodings/decoder.py\", line 30, in read\r\n    string = self.strategy.decode(hunk, debug_hint=debug_hint_for_the_loc)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/encodings/decoding_strategy.py\", line 45, in decode\r\n    string_candidate = strategy.decode(bytes_seq, debug_hint)\r\n  File \"/Users/tmsanrinsha/python/lib/python/site-packages/vint/encodings/decoding_strategy.py\", line 77, in decode\r\n    return bytes_seq.decode(encoding=encoding_part.decode(encoding='ascii'))\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe3 in position 0: ordinal not in range(128)\r\n```\r\n\r\nThis PR fixes the problem.\r\n\r\nSample output:\r\n\r\n```python\r\n#!/usr/bin/env python\r\nimport re\r\n\r\ndef _split_by_scriptencoding(bytes_seq):\r\n    # type: (bytes) -> [(str, bytes)]\r\n    max_end_index = len(bytes_seq)\r\n    start_index = 0\r\n    bytes_seq_and_loc_list = []\r\n\r\n    for m in re.finditer(b'^\\s*(scriptencoding)', bytes_seq, re.MULTILINE):\r\n        end_index = m.start(1)\r\n\r\n        if end_index == 0:\r\n            continue\r\n\r\n        bytes_seq_and_loc_list.append((\r\n            \"{start_index}:{end_index}\".format(start_index=start_index, end_index=end_index),\r\n            bytes_seq[start_index:end_index]\r\n        ))\r\n        start_index = end_index\r\n\r\n    bytes_seq_and_loc_list.append((\r\n        \"{start_index}:{end_index}\".format(start_index=start_index, end_index=max_end_index),\r\n        bytes_seq[start_index:max_end_index]\r\n    ))\r\n\r\n    return bytes_seq_and_loc_list\r\n\r\n\r\nstr = '''scriptencoding utf-8\r\n\" scriptencoding \u3042\r\necho 'scriptencoding \u3044'\r\n scriptencoding utf-8\r\n'''\r\n\r\nprint(_split_by_scriptencoding(str.encode()))\r\n```\r\n\r\noutput\r\n\r\n```\r\n[('0:69', b'scriptencoding utf-8\\n\" scriptencoding \\xe3\\x81\\x82\\necho \\'scriptencoding \\xe3\\x81\\x84\\'\\n '), ('69:90', b'scriptencoding utf-8\\n')]\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 146,
                "title": "vint throws an error when using escaped characters",
                "labels": [
                    "need PR",
                    "bug"
                ],
                "description": "With the following minimal vimrc : \n\n`nnoremap a :normal 0f.dt(^[`\n\nWhere the `^[` character is the one that you get when pressing `<c-v><Esc>`\ngives the following error.\n\n`/home/user/.tvimrc:0:0: Cannot detect encoding (binary file?): /home/ldap/hipped/.tvimrc (see no reference)`\n\nI know that they is another alternative to give `<Esc>` in viml, but it would be great if vint was able to read files with escaped sequences.\n\nIf you don't want to add handling of escaped sequences, maybe it would be great to show on which line the escaped characters are ? WIth the current implementation, the error always says line 0, column 0, even when the escape character is on another line.\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 264,
                "title": "An idea of new rule: Must not use augroup in ftdetect/*.vim",
                "labels": [],
                "description": "`:help ftdetect`\r\n\r\n> Note that there is no \"augroup\" command, this has already been done\r\n> when sourcing your file.\r\n\r\nrefs:\r\nThis PR added `augroup` to `ftdetect/gofiletype.vim` according to vint's warning.\r\nhttps://github.com/fatih/vim-go/pull/1558/files#diff-349dca49094d5651df28e5df61a4e0c9\r\nThis PR fixed it.\r\nhttps://github.com/fatih/vim-go/pull/1645"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 182,
                "title": "#177 breaks pip install for python2",
                "labels": [
                    "wontfix"
                ],
                "description": "Issuing `pip install vim-vint` results in an error: \n\n```\nComplete output from command python setup.py egg_info:\nerror in vim-vint setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers\n```\n\nUsing pip3 or specifying vim-vint=0.3.9 installs vim-vint correctly.\n\nI can't find any documentation on `~=`, which suggests that this is the culprit.\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 133,
                "title": "Feature request: warn to use <nomodeline> with User autocmds",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "As recommended by the `:h <nomodeline>` docs:\n\n```\nAfter applying the autocommands the modelines are\nprocessed, so that their settings overrule the\nsettings from autocommands, like what happens when\nediting a file. This is skipped when the <nomodeline>\nargument is present. You probably want to use\n<nomodeline> for events that are not used when loading\na buffer, such as |User|.\n```\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 261,
                "title": "Wrong offset with undefined var in map expression",
                "labels": [
                    "bug"
                ],
                "description": "Given `t.vim`:\r\n```vim\r\necho map([], 's:foo . s:bar')\r\n```\r\n\r\nRunning `vint t.vim` displays:\r\n```\r\nt.vim:1:14: Undefined variable: s:foo (see :help E738)\r\nt.vim:1:22: Undefined variable: s:bar (see :help E738)\r\n```\r\n\r\nThe columns here should be 15 and 23, and not 14 and 22."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 189,
                "title": "Inline python declared with `exec s:inline_python` results in treating python as error",
                "labels": [
                    "bug"
                ],
                "description": "While the following vimscript is linted correctly:\r\n```VimL\r\npython << EOF\r\nimport os\r\nEOF\r\n```\r\nthe following, even though equivalen, results in an error on third line:\r\n```VimL\r\nlet s:inline_python = 'python << EOF'\r\nexec s:inline_python\r\nimport os\r\nEOF\r\n```\r\nThis way of declaring inline python can be useful when `s:inline_python` has different value depending on the python interpreter that should be used."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 238,
                "title": "Python3: The 'typing>=3.6.2' distribution was not found and is required by vim-vint",
                "labels": [
                    "ciritical",
                    "waiting for reply",
                    "bug"
                ],
                "description": "I get this exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/vint\", line 6, in <module>\r\n    from pkg_resources import load_entry_point\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 3038, in <module>\r\n    @_call_aside\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 3022, in _call_aside\r\n    f(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 3051, in _initialize_master_working_set\r\n    working_set = WorkingSet._build_master()\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 657, in _build_master\r\n    ws.require(__requires__)\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 971, in require\r\n    needed = self.resolve(parse_requirements(requirements))\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 857, in resolve\r\n    raise DistributionNotFound(req, requirers)\r\npkg_resources.DistributionNotFound: The 'typing>=3.6.2' distribution was not found and is required by vim-vint\r\n```\r\n`typing` is a standard library in Python 3."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 284,
                "title": "Functions used in commands or autocommands are reported as unsued",
                "labels": [],
                "description": "```vim\r\nfunction! s:foo1()\r\nendfunction\r\n\r\nfunction! s:foo2()\r\nendfunction\r\n\r\nfunction! s:foo3()\r\n  echom 1\r\nendfunction\r\n\r\ncall s:foo1()\r\n\r\ncommand Foo call s:foo2()\r\n\r\naugroup Foo\r\nautocmd BufEnter * call s:foo3()\r\naugroup END\r\n```\r\n\r\n```\r\n% vint t/vint-unused.vim\r\nt/vint-unused.vim:4:11: Unused variable: s:foo2 (see :help E738)\r\nt/vint-unused.vim:7:11: Unused variable: s:foo3 (see :help E738)\r\n```\r\n\r\nUsing vint master (0.4a1+)."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 246,
                "title": "An idea of new rule: \"Use <Space> for space at tail in mapping\"",
                "labels": [
                    "need PR",
                    "discussion"
                ],
                "description": "```\r\n\" bad (there is space at the tail)\r\nnnoremap <C-h> :<C-u>help \r\n# good\r\nnnoremap <C-h> :<C-u>help<Space>\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 166,
                "title": "Use different exit codes for errors, warnings and style issues",
                "labels": [
                    "need PR",
                    "feature"
                ],
                "description": "The error code could be different based on if there were errors, warnings and/or style issues.\n\nE.g. based on the highest severity of all violations, `1` could be used if there is any error, `2` if there is not error, but a warning and 3 in case there are only style issues.\n\nThis would make it easier to integrate into CI, without having to grep the output etc.\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 282,
                "title": "Fix missing description on PyPI",
                "labels": [],
                "description": "![2018-06-29 14 42 55](https://user-images.githubusercontent.com/1124024/42075210-c109a502-7baa-11e8-83f9-5ff70fb75f7d.png)\r\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 242,
                "title": "vint errors on unicode characters",
                "labels": [
                    "bug"
                ],
                "description": "I was using vint.exe on my vimrc when it kept giving me the following error message:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Env\\Python3\\Scripts\\vint-script.py\", line 11, in <module>\r\n    load_entry_point('vim-vint==0.3.14', 'console_scripts', 'vint')()\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\linting\\cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\linting\\cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\linting\\linter.py\", line 106, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"c:\\env\\python3\\lib\\site-packages\\vint\\ast\\parsing.py\", line 58, in parse_file\r\n    decoded = bytes_seq.decode(encoding)\r\n  File \"c:\\env\\python3\\lib\\encodings\\cp1254.py\", line 15, in decode\r\n    return codecs.charmap_decode(input,errors,decoding_table)\r\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x8e in position 2939: character maps to <undefined>\r\n```\r\nBy trial and error, I narrowed it down to the character: \ud835\udcae\r\nWhen I removed the line containing the character, all is well.\r\n\r\nSystem: Win 10 Pro x64, python36 x64, cmd codepage 65001\r\nVint was installed using pip."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 232,
                "title": "ProhibitNoAbortFunction triggered for functions without bang",
                "labels": [],
                "description": "```\r\n% cat autoload/foo.vim \r\nfunction foo#bar() abort\r\nendfunction\r\n\r\n% vint autoload/foo.vim\r\nautoload/foo.vim:1:1: Use the abort attribute for functions in autoload (see Google VimScript Style Guide (Functions))\r\n```\r\n\r\nAdding a bang after `function` fixes it.\r\n\r\nMy use case is the following (where no bang is required):\r\n```vim\r\nfunction! neomake#makers#ft#python#flake8() abort\r\n    let maker = {}\r\n    function maker.fn(options) abort\r\n    endfunction\r\nendfunction\r\n```"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 233,
                "title": "Prefer is# and is? instead of ==# and ==?",
                "labels": [
                    "need PR"
                ],
                "description": "When you compare expressions with String literals, Vint will tell you to use `==#` or `==?` instead of `==`, as `==` changes depending on user configuration, and Vint will do the same with `is` and strings, preferring `is#` and `is?`. I think Vint should go one step further and disallow `==#` or `==?` for String literal comparisons too, and prefer `is#` or `is?` instead.\r\n\r\nIf you compare `0` with any string which does not contain numbers using `==#` or `==?`, The comparison will return `1`. This is because with something like `0 ==# 'foo'`, Vim converts the RHS to a Number, and that conversion yields `0`, so the result is `1`. This is almost certainly not what you want. This has been a source of bugs for my project.\r\n\r\nI would argue that if you're making a comparison between any value and a String, what you want is for that comparison to be true only if both sides of a comparison are String values. I think there's pretty much no reason to ever use `==#` or `==?`, and you should use `is#` or `is?` instead."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 286,
                "title": "\"E492: Not an editor command\" over a regex used in syntax",
                "labels": [],
                "description": "I'm trying to run Vint (0.3.19) on `syntax/rust.rs` from [rust.vim](https://github.com/rust-lang/rust.vim):\r\n\r\n```vim\r\nsyn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display             contained\r\n```\r\n\r\nI'm getting:\r\n```\r\n[{\"line_number\": 57, \"description\": \"E492: Not an editor command: _\\\\)\\\\%([^[:cntrl:][:punct:][:space:]]\\\\|_\\\\)*\\\" display contained\", \"reference\": \"vim-jp/vim-vimlparser\", \"policy_name\": \"SyntaxError\", \"column_number\": 105, \"file_path\": \"syntax/rust.vim\", \"severity\": \"error\"}]\r\n```\r\n\r\nOn a side note, was not able to suppress the error via:\r\n\r\n```vim\r\n\" vint: -SyntaxError\r\nsyn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\r\n\" vint: +SyntaxError\r\n```\r\n\r\nSeems ineffectual."
            }
        ],
        "suitable": [
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 225,
                "title": "UnicodeDecodeError with chardet 3",
                "labels": [
                    "waiting for reply",
                    "bug"
                ],
                "description": "The following minimal vim file will cause an error:\r\n```vim\r\nscriptencoding utf-8\r\n\" :purple_heart: \ud83d\udc9c\r\n\" set list listchars=tab:\u00bb\u00b7,trail:\u00b7,eol:\u00ac,nbsp:_,extends:\u276f,precedes:\u276e\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\u2026/Vcs/vint/.venv/bin/vint\", line 11, in <module>\r\n    load_entry_point('vim-vint', 'console_scripts', 'vint')()\r\n  File \"\u2026/Vcs/vint/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"\u2026/Vcs/vint/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"\u2026/Vcs/vint/vint/linting/linter.py\", line 106, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"\u2026/Vcs/vint/vint/ast/parsing.py\", line 63, in parse_file\r\n    decoded = bytes_seq.decode(encoding)\r\n  File \"\u2026/Vcs/vint/.venv/lib/python3.6/encodings/cp1254.py\", line 15, in decode\r\n    return codecs.charmap_decode(input,errors,decoding_table)\r\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x9d in position 105: character maps to <undefined>\r\n```\r\n\r\n`encoding_hint` in `parse_file` from `chardet.detect(bytes_seq)` is: `{'encoding': 'Windows-1254', 'confidence': 0.5658124254347925, 'language': 'Turkish'}`.\r\n\r\nWith chardet 2.3 it is `{'encoding': 'ISO-8859-2', 'confidence': 0.6680924803464797}`.\r\n\r\nThey seem to temporarily have disabled `ISO-8859-2` as per the README on PyPI.\r\n\r\nBut anyway, since `scriptencoding` is present, this should be used by vint directly, and `parse_file` should fall back to `utf-8` probably anyway in case of errors?!\r\n\r\n`b'scriptencoding' in bytes_seq` could be used here for starters."
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 127,
                "title": "Maintainer Wanted",
                "labels": [
                    "help wanted"
                ],
                "description": "I have maintained the vint for half a year, but I will be busy for the next half a year.\nSo I will be not able to maintain constantly.\n\nIf you interest in the Vint, please help to make Vint better.\n- [Design diagram](https://github.com/Kuniwak/vint/wiki/Vint-design)\n##### EDIT\n\nI mean that \"I'm going to continue to maintain Vint, but now I need more help.\"\n"
            },
            {
                "repo_url": "https://github.com/Kuniwak/vint",
                "id": 182,
                "title": "#177 breaks pip install for python2",
                "labels": [
                    "wontfix"
                ],
                "description": "Issuing `pip install vim-vint` results in an error: \n\n```\nComplete output from command python setup.py egg_info:\nerror in vim-vint setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers\n```\n\nUsing pip3 or specifying vim-vint=0.3.9 installs vim-vint correctly.\n\nI can't find any documentation on `~=`, which suggests that this is the culprit.\n"
            }
        ]
    },
    "jendrikseipp/vulture": {
        "all": [],
        "suitable": []
    }
}
