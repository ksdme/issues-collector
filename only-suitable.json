{
    "vfaronov/httpolice": [],
    "myint/autoflake": [
        {
            "repo_url": "https://github.com/myint/autoflake",
            "id": 35,
            "title": "Don't remove imports from __init__.py",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "A typical way to set up a project is to have the modules specify `__all__` variables and then have the `__init__.py` `from .module_name import *`.  This causes autoflake to remove all of the imports.\r\n\r\nPlease consider leaving the imports in `__init__.py`."
        },
        {
            "repo_url": "https://github.com/myint/autoflake",
            "id": 12,
            "title": "Add stdin and stdout options",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "Currently `autoflake` reads from a file by taking a filename, and outputs a diff with a patch to make. This works well for some command line usage, but doesn't integrate so well with replacing a buffer in Vim. This could be improved by offering an option to read the file from stdin, and an option for outputting the entire file contents, with the patch applied, to stdout. stdin support could either by via flag, or by reading a special filename `-`. Supposing there was a flag for stdout support, then `autoflake` could automatically remove unused imports in Vim with both flags like so.\n\n``` vim\nsilent 0,$!autoflake --stdin --output-file\n```\n\nThat command would take the contents of the current buffer, pass it to `autoflake` via stdin, get the new file after applying the patch back out again, and replace the current buffer with that text.\n\nAt the moment, I shall have to save my current buffer to a file, run `autoflake` on that temporary file and save the diff to another temporary file, and then use the `:diffpatch` command to apply the patch to the current buffer, in order to integrate `autoflake` with Vim.\n"
        }
    ],
    "hhatto/autopep8": [
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 227,
            "title": "Create diff for a specific pep8 issue",
            "labels": [],
            "description": "I'm trying to use autopep8 to automate a few things. This is my workflow:\n- I want to run pep8 on a code base and list all the results.\n- Then I want the user to specify specific issues he wants fixed\n- Then autopep8 should only fix these issues.\n\nI notice with `--select` I can choose which errors autopep8 fixes, how do I specify a specific issue (I guess this is characterized by line, column, issue code) to fix ?\n\nCould you help me on how to do this ?\n\nExample:\nI have a file with the line `print( sys.path, ( 2))` This raises \n\n```\ntest.py:1:7: E201 whitespace after '('\ntest.py:1:19: E201 whitespace after '('\n```\n\nSo, I run `autopep8 test.py --select=E201 --range 1 1 --diff` but this fixes both errors.\n"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 348,
            "title": "autopep8 on .rst documentation files",
            "labels": [],
            "description": "Thanks for autopep8, it really helps getting some code to a almost readable style when getting legacy code. \r\n\r\nI'm currently working on documentation which is in restructured text (.rst), and part of that has been converted from latex with latex2rst, so a lot of fixing needs to be done. I am dreaming about doing autopep8 -i *.rst as I sometimes to with .py files. \r\n\r\nAny chance of getting such a feature with autopep8 ? Do you know of any projects that could do this ? I'm going to ask https://github.com/myint/docformatter too if there is place for .rst transformation there..."
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 433,
            "title": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)",
            "labels": [],
            "description": "I use autopep8 as pre-commit hook for subversion.  I'm trying check if the input file content is fit for PEP8 by trying to fix it and compare the original file content.( I don't know is there better method)\r\nThe python source file contains Chinese utf-8 comments.\r\n\r\npre-commit code(use python to write):\r\n```\r\n193     def is_invalid_pep8(fname):\r\n194         \"\"\"check is pep8\"\"\"\r\n195         org_contents = file_contents(fname, look_cmd)\r\n196         with open(\"/tmp/autopep8.debug.py\", \"wb\") as f:\r\n197             f.write(org_contents)\r\n198         new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n199         # sys.stderr.write(\"org size=%d new_size=%d u(org)size=%d\\n\" % (\r\n200         #         #    len(org_contents), len(new_contents),\r\n201         #         len(unicode(org_contents,\"utf-8\"))))\r\n202         return unicode(org_contents, \"utf-8\") != new_contents\r\n```\r\nHere is the error message\r\n```\r\nERROR from SVN:\r\nA repository hook failed: Commit blocked by pre-commit hook (exit code 1) with output:\r\nTraceback (most recent call last):\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 243, in <module>\r\n    sys.exit(main())\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 233, in main\r\n    errors += check_py(look_cmd, filelist)\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 205, in check_py\r\n    is_invalid_pep8(ff)]\r\n  File \"/trac/tfxsvn/hooks/pre-commit\", line 198, in is_invalid_pep8\r\n    new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\r\n  File \"/lib/python2.7/site-packages/autopep8.py\", line 3177, in fix_code\r\n    source = source.decode(encoding or get_encoding())\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe7 in position 168: ordinal not in range(128)\r\nW: e2851c1a8e477a3b636c8ad7232bc2977cd5d5fa and refs/remotes/git-svn differ, using rebase:\r\n\r\n```"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 343,
            "title": "Document `options` parameter in `fix_code()`",
            "labels": [
                "enhancement"
            ],
            "description": "The documentation lists options for the CLI side of `autopep8`, but not for using it as a module. It's logical therefore to assume that all CLI options that make sense as module options would also be module options, but that does not seem to be the case.\r\n\r\nMy code:\r\n```\r\ndata.write(autopep8.fix_code(output, options={'aggressive': 3, 'max-line-length': 70}))\r\n```\r\nThe result:\r\n```\r\nTraceback (most recent call last):\r\n  File \"dbsync.py\", line 172, in <module>\r\n    main()\r\n  File \"dbsync.py\", line 169, in main\r\n    'max-line-length': 79}))\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3015, in fix_code\r\n    options = _get_options(options, apply_config)\r\n  File \"D:\\some\\path\\pyenv\\lib\\site-packages\\autopep8.py\", line 3033, in _get_options\r\n    raise ValueError(\"No such option '{}'\".format(name))\r\nValueError: No such option 'max-line-length'\r\n```\r\n\r\nIf the options for `fix_code()` are divergent from the CLI, that should be noted in the documentation."
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 441,
            "title": "Lots of (wrong) code added",
            "labels": [],
            "description": "Very simple example:\r\n\r\n```python\r\nif True:\r\n    if True:\r\n        if (\r\n                link.is_wheel and\r\n                isinstance(link.comes_from, HTMLPage) and\r\n                link.comes_from.url.startswith(index_url)\r\n        ):\r\n            _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n```diff\r\n--- original/t.py\r\n+++ fixed/t.py\r\n@@ -1,8 +1,24 @@\r\n if True:\r\n     if True:\r\n         if (\r\n-                link.is_wheel and\r\n-                isinstance(link.comes_from, HTMLPage) and\r\n-                link.comes_from.url.startswith(index_url)\r\n+                linkis_wheel and\r\n+            is_wheel and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            isinstancelinkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            linkcomes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            comes_fromHTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            HTMLPageand and\r\n+            . (., ) link.comes_from.url.startswith(index_url)\r\n         ):\r\n             _store_wheel_in_cache(file_path, index_url)\r\n```\r\n\r\n\r\n1.4 seems fine though -- I'll revert"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 324,
            "title": "indentation of lists in function arguments",
            "labels": [],
            "description": "autopep8 seems to turn this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n    ],\r\n    a=1,\r\n    b=2,\r\n    )\r\n```\r\n\r\ninto this:\r\n\r\n```\r\nfunc([\r\n    1,\r\n    2,\r\n    3,\r\n],\r\n    a=1,\r\n    b=2,\r\n)\r\n```\r\n\r\n...even though neither pep8 nor pycodestyle seem to detect the original indentation as problematic. While not wrong syntactically, it certainly looks odd, and the main thing is that neither pep8 nor pycodestyle themselves report the original code as problematic.\r\n\r\nWhere is autopep8 getting this from if not pycodestyle, and can it be suppressed?\r\n\r\nIndentation and pep8/pycodestyle/autopep8 agree if the list opening bracket is moved to the next line.\r\n\r\n```\r\n$ ~/pyutils/bin/autopep8 --version\r\nautopep8 1.3.1 (pycodestyle: 2.3.1)\r\n$ ~/pyutils/bin/pycodestyle --version\r\n2.3.1\r\n$ ~/pyutils/bin/python --version\r\nPython 2.7.13\r\n$ uname -a\r\nLinux flyingv.net.ic.ac.uk 4.10.10-200.fc25.x86_64 #1 SMP Thu Apr 13 01:11:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nHave confirmed this occurs with latest autopep8"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 366,
            "title": "Inconsistencies in code E101 / E121 compared to pycodestyle",
            "labels": [],
            "description": "Hi,\r\nI just noticed that the following description/fixes differ between autopep8 & pep8:\r\nFrom autopep8:\r\nE101 - Reindent all lines.\r\nE111 (Does not appear in the readme but can be selected)\r\nE121 - Fix indentation to be a multiple of four.\r\n\r\nFrom pep8 (https://media.readthedocs.org/pdf/pep8/1.7.0/pep8.pdf):\r\nE101 indentation contains mixed spaces and tabs\r\nE111 indentation is not a multiple of four\r\nE121 continuation line under-indented for hanging indent\r\n\r\npycodestyle findings are consistent with pep8 but autopep8 fixes are different.\r\nIn fact, if you consider the following code:\r\n```\r\ndef foo():\r\n     print 'indented with 5 spaces'   # E111 according to pycodestyle\r\n\tprint 'indented with 1 tab'      # E101  & E113 according to pycodestyle\r\n\t print 'indented with 1 tab + 1 space'    # E101  & E111 according to pycodestyle\r\n```\r\nRunning any of the following will fix the 3 lines\r\nautopep8 --select=E101 my_file.py -d\r\nautopep8 --select=E111 my_file.py -d\r\n\r\nAnd running the following won't fix anything:\r\nautopep8 --select=E121 my_file.py -d\r\n\r\nSo there seems to be multiple issues:\r\n1) E111 does not appear in the list of fixes that can be selected in the autopep8/readme (fixes seems to be strictly similar to what E101 does though)\r\n2) autopep8's E121 definition is wrong\r\n3) E101 is fixing more than what it should\r\n\r\nPersonally I don't have any problem with autopep8's E101 fixing more than strictly pep8's E101 but I was wondering if that was the intended behavior. Let me know your thoughts."
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 254,
            "title": "Add settings for applying line shortening via a hanging indent with a de-dented closing parenthesis",
            "labels": [],
            "description": "`autopep8` fixes most problems with syntax quite well, apart from one issue really irks me. Suppose you have the following Python code.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\", \"here is another one\", \"and a third one\")\n```\n\nWhen I see these lines, I prefer to handle the long line like so.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\n    \"here is a very long string literal\", \n    \"here is another one\", \n    \"and a third one\",\n)\n```\n\nWhen I apply `autopep8` to the file, I instead get this.\n\n``` python\ndef some_function_name():\n    pass\n\nsome_function_name(\"here is a very long string literal\",\n                   \"here is another one\", \"and a third one\")\n```\n\nBoth results are valid according to PEP8, but I find the latter, which is the output of `autopep8` much harder to read. It also doesn't play nearly as nicely with diffs, say when you change the function name, or add another argument.\n\nI wonder, would it be possible to add two settings to `autopep8` which can be passed either via the command line or set up in a `setup.cfg` file which solve long lines by using \"hanging indent\" style, with the closing parenthesis on the same level of indentation as the first line with the opening parenthesis? This would also conform to PEP8 standards, but in a manner in which some individuals, like myself, will find it more pleasing to the eye.\n\nAdding a trailing comma would be nice to have, but not totally essential.\n"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 282,
            "title": "Describe --experimental option",
            "labels": [],
            "description": "The README should describe what \"--experimental\" actually does.\r\nDoes it change the way things are indented? Or does it just add some more fixers/codes?"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 246,
            "title": "Precedence of excluding vs. including files",
            "labels": [
                "needs patch"
            ],
            "description": "In trying to help answer someone's question on Stack Overflow, I came across what may be a bug, or perhaps just something that's unclear to me.\n\nThe full details are [here](http://stackoverflow.com/a/37758122/149428) on SO, but I've copied below for your convenience.\n\nAlso here are the details requested in the contributor guidelines:\n\n```\n$ autopep8 --version\nautopep8 1.2.4\n\n$ pep8 --version\n1.7.0\n\n$ python --version\nPython 2.7.11\n\n$ uname -a\nDarwin <my machine name> 15.4.0 Darwin Kernel Version 15.4.0: Fri Feb 26 22:08:05 PST 2016; root:xnu-3248.40.184~3/RELEASE_X86_64 x86_64\n```\n\nTo create this setup, I simply ran `mktmpenv` followed by `pip install autopep8`.\n\nThis style to avoid specific files works for me (using either single or double quotes):\n\n```\nautopep8 --diff --recursive --exclude=\"*.styl\" .\n```\n\nThis also works:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *.py\n```\n\nHowever this does not exclude .styl files:\n\n```\nautopep8 --diff --exclude=\"*.styl\" *\n```\n\nIn my opinion, it appears [OP has] identified a bug in autopep8.\n\nHowever, perhaps it's not a bug, but rather an opinionated decision that star inclusion should take precedence over star exclusion.\n\nIn other words, is running this command intended to process (a) all files, or (b) no files?\n\n```\nautopep8 --diff --exclude=\"*\" *\n```\n"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 242,
            "title": "Unable to retain tabs indentation (no override?)",
            "labels": [],
            "description": "pep8 recommends spaces as the preferred format but for those misguided souls like mine who believe in tab indentation (which is permissible via pep8 configuration) autopep8 seems to be forcing it into space based indentation.\n\nSince pep8 allows for tabs (even if it discourages the same), autopep8 should also be configurable to allow for it?\n"
        },
        {
            "repo_url": "https://github.com/hhatto/autopep8",
            "id": 220,
            "title": "Formatting over maximum line length with -aa or --experimental",
            "labels": [],
            "description": "I am on Windows 7.\nOther version info:\nautopep8 1.2.1\npep8 1.6.2\nPython 3.5.0 (64-bit)\n\nThe following code formatted with the specified autopep8 version will result in code that is longer than the maximum line length. I would expect the following code not to be changed or changed in a manner that E501 is respected.\n\n``` Python\nclass Version(object):\n    def __init__(self, version_string, splitter='.'):\n        super(Version, self).__init__()\n\n        self._version_string = version_string\n        self._splitter = splitter\n        filtered_split = filter(\n            lambda x: len(x) > 0, str(version_string).split(splitter))\n        self._version_parts = list(\n            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n                '_' in str(x) else str(x)), filtered_split))\n```\n\nThe diff from autopep8 looks like this (regardless of -aa or --experimental):\n`autopep8 -d --experimental util.py`\n\n``` Diff\n--- original/util.py\n+++ fixed/util.py\n@@ -32,9 +32,8 @@\n         self._splitter = splitter\n         filtered_split = filter(\n             lambda x: len(x) > 0, str(version_string).split(splitter))\n-        self._version_parts = list(\n-            map(lambda x: int(x) if str(x).isnumeric() else (Version(x, '_') if\n-                '_' in str(x) else str(x)), filtered_split))\n+        self._version_parts = list(map(lambda x: int(x) if str(x).isnumeric() else (\n+            Version(x, '_') if '_' in str(x) else str(x)), filtered_split))\n\n```\n"
        }
    ],
    "PyCQA/bandit": [
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 356,
            "title": "New plugin to check for use of pyghmi",
            "labels": [
                "hacktoberfest",
                "enhancement"
            ],
            "description": "**Is your feature request related to a problem? Please describe.**\r\nIPMI is known to be a non-secure protocol.  \r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA13-207A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pyghmi (python IPMI library).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 406,
            "title": "Missing documentation on the custom formatter",
            "labels": [],
            "description": "**Describe the bug**\r\nThe custom formatter added under commit https://github.com/PyCQA/bandit/commit/d159335700938f25ebd2606c066e3895e2a3d577 doesn't have anything documented in the docs here: https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to https://bandit.readthedocs.io/en/latest/formatters/index.html\r\n2. Notice a custom formatter is not listed\r\n\r\n**Expected behavior**\r\nShould have a link for custom\r\n\r\n**Bandit version**\r\nmaster\r\n\r\n**Additional context**\r\n\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 355,
            "title": "New check plugin to detect use of SNMPv1 and SNMPv2",
            "labels": [
                "hacktoberfest",
                "enhancement"
            ],
            "description": "**Is your feature request related to a problem? Please describe.**\r\nSNMPv1 and SNMPv2 are known to be non-secure protocols.  SNMPv3 can be secure if used properly with encryption and authentication.  But correct options must be chosen.\r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA17-156A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pysnmp (Python SNMP library) and use with SNMP version 1, 2, and 3 (with no auth, no priv).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 297,
            "title": "tools/openstack_coverage.py is no longer needed or used",
            "labels": [
                "bug",
                "good first issue"
            ],
            "description": "### Summary \r\nWe can remove tools/openstack_coverage.py since this project is no longer openstack specific.  Although, we still could use a coverage job of some kind.  So while removing this, we should also add a coverage job to travis CI/etc.\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 346,
            "title": "One-liner in bandit config to skip B101 assert_used in files matching a filter",
            "labels": [
                "enhancement"
            ],
            "description": "Currently you can exclude a directory and you can skip certain tests across all scanned files. It would be very handy to be able to exclude test_* pytest files from the B101 assert test with a simple one liner in the .bandit config file.\r\n\r\nThis is a feature request for something like:\r\n\r\nIn .bandit\r\n```\r\n[bandit]\r\npytest_filter: test_* #excludes B101 in files matching test_*\r\n```\r\n\r\nExcluding all B101 is not a good solution, because I want to know about B101 in non-test modules.\r\n\r\nAlso, I'd like to be able to exclude on file filter like test_* rather than directory test/ because that filter works better across projects I have seen where test directory might not be named consistently, but all the pytests are generally named a special way e.g. test_*\r\n\r\nThis will allow a more general (across projects) config file to be set up.\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 401,
            "title": "PEP-518 support: configure bandit via pyproject.toml",
            "labels": [],
            "description": "Thank you for cool lib.\r\n\r\nAdded support for configuring via [pyproject.toml](https://www.python.org/dev/peps/pep-0518/) (`tool.bandit` section). Closes #212, because now all projects moves from setup.cfg to pyproject.toml.\r\n\r\n1. Parse files ends with `.toml` as toml and get `tool.bandit` section.\r\n1. Tests included (just inherited from YAML config tests).\r\n1. Documentation updated, config example included into docs too."
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 394,
            "title": "Docs lack information on baseline function and how to use it",
            "labels": [
                "hacktoberfest",
                "bug",
                "good first issue"
            ],
            "description": "**Describe the bug**\r\nThe bandit baseline command and function is missing from the docs and README.  This can be a very useful feature and should be properly documented.\r\n\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 293,
            "title": "Bandit code description",
            "labels": [
                "enhancement"
            ],
            "description": "### Summary \r\nOn the original [commit  353634f](https://github.com/openstack/bandit/commit/51b1781a97a27b0c15309c6fc7d36d54d81bc7c7#diff-970ecf8bd8241cd988a58f21e2ccd970) was describe the rules as following:\r\n```\r\nIDs break down as follows:\r\n - B1xx - misc tests\r\n - B2xx - application/framework miss-configuration\r\n - B3xx - blacklists (calls)\r\n - B4xx - blacklists (imports)\r\n - B5xx - cryptography\r\n - B6xx - injection\r\n - B7xx - XSS\r\n```\r\nI think this could be in written on the README file.\r\nAlso I think could be usesful create a CVE for known \"CVE cases\".\r\n\r\nWhat do you thinkg about it?\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 322,
            "title": "change yaml.load id from b506 to b612",
            "labels": [],
            "description": "Resolves #306 \r\n\r\nI found the next unused number in the 6xx series which was 612 and basically did a find/replace of b506 to b612. Made sure to correct the ordering in the readme though."
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 306,
            "title": "yaml_load should not be B5xx cryptography group",
            "labels": [
                "bug",
                "good first issue"
            ],
            "description": "**Describe the bug**\r\nThe yaml_load plugin has bandit ID B506.  The 5xx group according to [1] is defined as the group for cryptography.  This plugin would be more appropriate as a type of injection B6xx\r\n\r\n**To Reproduce**\r\nn/a\r\n\r\n**Expected behavior**\r\nn/a\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 317,
            "title": "config file as described in README.rst does not work",
            "labels": [
                "good first issue"
            ],
            "description": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. create `.bandit` file with content:\r\n```\r\n[bandit]\r\ntests: B101,B102,B301\r\n\r\n```\r\n2. run `bandit -c .bandit -r module/`\r\n3. get error:\r\n`[main]\tERROR\t.bandit : Error parsing file.`\r\n\r\n**Expected behavior**\r\nworking as described in readme\r\n\r\n**Bandit version**\r\n```\r\nbandit 1.4.0\r\n```\r\n\r\n**Additional context**\r\nDocs say it should be YAML and not INI. https://bandit.readthedocs.io/en/latest/config.html"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 196,
            "title": "AST parsing hits recursion limit",
            "labels": [],
            "description": "The parsing of certain ASTs will hit Python's recursion limit. This happens if AST nodes are nested to a depth greater than \"sys.getrecursionlimit()\", which defaults to 1000 for me.\n\nA simple example:\n\n    python -c 'print (\"+\" * 1000) + \"1\"' > unary.py\n    bandit unary.py\n\nWhen this occurs, Bandit will report an exception:\n\n    Exception RuntimeError: RuntimeError('maximum recursion depth exceeded',) in <generator object iter_fields at 0x108ab2eb0> ignored\n    [manager]   ERROR   Exception occurred when executing tests against /Users/dwyde/test/unary.py. Run \"bandit --debug /Users/dwyde/test/unary.py\" to see the full traceback.\n\nThe start of the traceback with --debug:\n\n    [manager]       DEBUG     Exception string: maximum recursion depth exceeded while calling a Python object\n    [manager]       DEBUG     Exception traceback: Traceback (most recent call last):\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 259, in _parse_file\n        score = self._execute_ast_visitor(fname, data, nosec_lines)\n      File \"/Users/dwyde/code/bandit/bandit/core/manager.py\", line 290, in _execute_ast_visitor\n        score = res.process(data)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 278, in process\n        self.generic_visit(f_ast)\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 242, in generic_visit\n        if self.pre_visit(item):\n      File \"/Users/dwyde/code/bandit/bandit/core/node_visitor.py\", line 187, in pre_visit\n        LOG.debug(ast.dump(node))\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 110, in dump\n        return _format(node)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 94, in _format\n        fields = [(a, _format(b)) for a, b in iter_fields(node)]\n\nFound when running Bandit against\nhttps://bitbucket.org/logilab/astroid/src/1.4.0/astroid/tests/testdata/python2/data/joined_strings.py"
        },
        {
            "repo_url": "https://github.com/PyCQA/bandit",
            "id": 367,
            "title": "Docs plugin listing shows title instead of check name",
            "labels": [
                "hacktoberfest",
                "bug",
                "good first issue"
            ],
            "description": "**Describe the bug**\r\nIn the docs found here:\r\nhttps://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n\r\nB109 and B111 show a description instead of a plugin name.  This looks inconsistent since all the other plugin names are listed.  I believe this is a result of a recent change to remove these deprecated plugins.\r\n\r\n**To Reproduce**\r\n1) Navigate to https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing\r\n2) Notice B109 and B111 look different.\r\n\r\n**Expected behavior**\r\nI'd expect consistency in all the plugin names listed there.\r\n\r\n**Bandit version**\r\n<!--- Paste the output from \"bandit --version\" between quotes below -->\r\n```\r\nmaster\r\n```\r\n"
        }
    ],
    "myint/cppclean": [
        {
            "repo_url": "https://github.com/myint/cppclean",
            "id": 120,
            "title": "Support Windows by using `setuptools` in `setup.py` instead of `distutils`",
            "labels": [
                "help wanted"
            ],
            "description": "`pip --install cppclean` is not sufficient on my Computer.\r\n\r\nI'm unable to execute `py cppclean` after that.  \r\nI have to execute `py $AbsolutePathToCppclean`\r\nI don't work much with python."
        }
    ],
    "theandrewdavis/cpplint": [],
    "willkg/dennis": [
        {
            "repo_url": "https://github.com/willkg/dennis",
            "id": 42,
            "title": "transform: RTL transform",
            "labels": [
                "enhancement"
            ],
            "description": "We need a right-to-left transform. This will surface problematic strings that have order-based placement variables.\n\nThe `.po` file doesn't specify whether it's RTL or LTR--that information is elsewhere. So in the documentation we need to mention this. We might want to provide some options: they could translate in-place the Hebrew `.po` file, they could create an xx-rtl and make sure the locale data specifies that it's RTL. Other options?\n"
        },
        {
            "repo_url": "https://github.com/willkg/dennis",
            "id": 81,
            "title": "Check for matching Sphinx documentation syntax",
            "labels": [],
            "description": "It would be nice if dennis was able to detect when Sphinx documentation strings are translated without retaining the syntax, similar to how `W303` checks that HTML syntax must match.\n\nThe most common mistakes are adding spaces (e.g. below), or translating keywords\n\n```\n:term:`Zip`\n: term: `Zip`\n```\n"
        },
        {
            "repo_url": "https://github.com/willkg/dennis",
            "id": 70,
            "title": "merge and generalize lint rules",
            "labels": [],
            "description": "The linter is kind of a mess right now. Issues:\n1. We have \"lint rules\" and \"template lint rules\", but we should really have \"rules for id strings\" and \"rules for translated strings\". In other words, one file with all the rules in them and they're all of type `LintRule`. That'll reduce a ton of repeated code.\n2. Lint rules do goofy things to make sure they only look at strings that apply to them. For example, some lint rules only apply to strings with python-format variables. Right now, we do goofy things at the beginning to handle that. We should do something better. Maybe call the lint rule with more context so it's easier for it to figure out whether it should check things?\n3. The documentation for lint rules is split between the docs and the code and it's almost certainly out of sync. We need a better way to deal with that. Maybe document it in the code and extract it with autodoc?\n4. We should have better registration infrastructure for lint rules. Right now it's pretty hard-coded-esque and not plugin-friendly.\n"
        }
    ],
    "jimo1001/docutils-ast-writer": [],
    "myint/eradicate": [],
    "retr0h/git-url-parse": [],
    "sk-/html-linter": [],
    "timothycrosley/isort": [
        {
            "repo_url": "https://github.com/timothycrosley/isort",
            "id": 728,
            "title": "Feature request: Give support to '-' to read from standard input",
            "labels": [],
            "description": "Here's a little example showing how to achieve this simple but at the same time useful time when it comes to integrate these type of tools with text editor plugins:\r\n\r\n - Make sure this option doesn't conflict with existing one: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3446-L3457)\r\n - Read from standard input: [https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L3955-L3963)"
        },
        {
            "repo_url": "https://github.com/timothycrosley/isort",
            "id": 698,
            "title": "README incorrectly claims that isort sorts alphabetically",
            "labels": [],
            "description": "It, in fact, sorts by the type being imported (inferred from the naming) and then alphabetically within each of those types.\r\n\r\nThis isn't a problem per-se, but did just lead to some confusion when trying to work out why I was getting particularly output; I had to examine the isort code to work out what the expected behaviour was."
        },
        {
            "repo_url": "https://github.com/timothycrosley/isort",
            "id": 454,
            "title": "Enhancement request: Change formatting options per section",
            "labels": [
                "enhancement"
            ],
            "description": "I just found isort (how have I survived so long without it?!) and let me first say a resounding THANK YOU.\n\nI would like to request/suggest formatting options be adjustable per section (vs. always global).\n\nFor example, one might set (globally):\n`multi_line_output=3`\n`include_trailing_comma=true`\n\nThen for (only) section FUTURE, change:\n`multi_line_output=5`\n\nThen for (only) section LOCALFOLDER, add:\n`force_grid_wrap=true`\n\nand so on.\n\nEffectively allowing additions/changes to formatting options tailored for each section, vs. all formatting settings being global.\n\nIf this is already possible/available, please feel free to point me in the right direction -- but from quite a bit of documentation review and experimentation, I do not believe this is currently possible.\n"
        },
        {
            "repo_url": "https://github.com/timothycrosley/isort",
            "id": 447,
            "title": "Option to eliminate localfolder section/combine with firstparty",
            "labels": [
                "enhancement"
            ],
            "description": "By default isort will take a module with PEP8-compliant imports like this:\n\n```\nimport decimal\n\nimport django\n\nfrom .utils import spellcheck\nfrom myblog.models import Post\n```\n\nAnd sort them into four sections like this:\n\n```\nimport decimal\n\nimport django\n\nfrom myblog.models import Post\n\nfrom .utils import spellcheck\n```\n\nI understand the rationale behind the four sections and their ordering, but PEP8 only mentions three distinct sections for imports (see https://www.python.org/dev/peps/pep-0008/#imports). It would be nice if isort accommodated projects which want to maintain a three-section PEP8 import style. I suspect this can be done most easily by having an option where any import that would go into the \"localfolder\" section gets put into the \"firstparty\" section instead.\n"
        }
    ],
    "myint/language-check": [
        {
            "repo_url": "https://github.com/myint/language-check",
            "id": 51,
            "title": "Ignoring spelling errors with numbers in them.",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "Using language-check for catching spelling errors with numbers in them would fail.\r\n\r\nE.g. `d0g` would produce no errors while `dogg` would.\r\n\r\nLanguage Tool has the ability to toggle spell checking with numbers off and on (http://wiki.languagetool.org/hunspell-support). It would be nice if langauge-check has this ability also.\r\n \r\n"
        },
        {
            "repo_url": "https://github.com/myint/language-check",
            "id": 50,
            "title": "Upgrade to LanguageTool latest version",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "### 1. Briefly\r\n\r\nI don't understand, how I can ignore English words, if I use Russian language by default.\r\n\r\nIt feature by default, if I run LanguageTool, use:\r\n\r\n1. command line,\r\n1. [**Sublime Text LanguageTool**](https://github.com/gtarawneh/languagetool-sublime) plugin.\r\n\r\n### 2. Environment\r\n\r\n+ Windows 10 LTSB Enterprise EN,\r\n+ Python 3.6.3,\r\n+ LanguageTool 3.6,\r\n+ language-check 1.1.\r\n\r\n### 3. Argumentation\r\n\r\nI write texts in Russian, where can be many words from English. Now language-check check English words as errors.\r\n\r\n### 4. Settings\r\n\r\nMy file `SashaExample.txt`:\r\n\r\n```markdown\r\nSasha Belissimo!\r\n\r\n\u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n```\r\n\r\nMy file [**`eric_languagetool.py`**](https://github.com/Kristinita/SashaPythonista/blob/master/tests/eric_languagetool.py):\r\n\r\n```python\r\nfrom eric_config import all_txt_in_eric_room_wihtout_subfolders\r\nfrom eric_config import log\r\n\r\nimport language_check\r\nimport os\r\n\r\ntool_language = language_check.LanguageTool('ru-RU')\r\n\r\nfailure_tests = False\r\n\r\nfor filename in all_txt_in_eric_room_wihtout_subfolders:\r\n\r\n    filename_without_path = os.path.basename(filename)\r\n\r\n    log.debug(filename_without_path + \"\\n\")\r\n    file_text = open(filename_without_path).read()\r\n\r\n    error_list = tool_language.check(file_text)\r\n    print(*error_list, sep='\\n\\n')\r\n    if not error_list:\r\n        log.debug(\r\n            \"Not detect errors and typos in\" +\r\n            filename_without_path +\r\n            \"\\n\\n\")\r\n    else:\r\n        log.warning(\r\n            \"Detect error(s) or/and typo(s) in \" + filename_without_path + \"\\n\\n\")\r\n        failure_tests = True\r\n\r\nif not failure_tests:\r\n    log.notice(\"LanguageTool no detect errors and typos for all files.\")\r\n\r\nif failure_tests:\r\n    log.warning(\r\n        \"LanguageTool detect error(s) or/and typo(s). Please, review it.\")\r\n\r\n```\r\n\r\n### 5. Expected behavior\r\n\r\n**If** I run in console:\r\n\r\n```shell\r\nD:\\SashaPythonista>java -jar \"D:/Chocolatey/lib/languagetool/tools/LanguageTool-3.6/languagetool.jar\" SashaExample.txt\r\n```\r\n\r\nNo errors:\r\n\r\n![LanguageTool CLI](https://i.imgur.com/vGEXMaz.png)\r\n\r\nAlso, I can't errors, if I can use Sublime Text LanguageTool package.\r\n\r\n### 6. Actual behavior\r\n\r\nI run `eric_languagetool.py` for `SashaExample.txt`:\r\n\r\n```shell\r\nD:\\SashaPythonista>language-check --heelp\r\n'language-check' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nD:\\SashaPythonista>python \"tests/eric_languagetool.py\"\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n```\r\n\r\nThe same in Interpreter:\r\n\r\n```python\r\n>>> import language_check\r\n>>> tool_language = language_check.LanguageTool('ru-RU')\r\n>>> file_text = u'Sasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!'\r\n>>> error_list = tool_language.check(file_text)\r\n>>> print(*error_list, sep='\\n\\n')\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n>>>\r\n```\r\n\r\nEnglish words in Russian texts check as errors.\r\n\r\n### 7. Did not help\r\n\r\nI don't find, how I can solve this problem, in:\r\n\r\n1. language-check description,\r\n1. issues of this repository.\r\n\r\nThanks."
        },
        {
            "repo_url": "https://github.com/myint/language-check",
            "id": 8,
            "title": "Documentation",
            "labels": [
                "enhancement"
            ],
            "description": "Hey, this lacks a bit of documentation a bit. Especially the match class could expose a few more public methods and have at least in code documentation so one can easily do something else than printing with matches.\n"
        },
        {
            "repo_url": "https://github.com/myint/language-check",
            "id": 27,
            "title": "Can't disable spell checking for Italian (it)",
            "labels": [],
            "description": "Here is a simple test case to show that `LanuageTool.disable_spellcheck()` is not working correctly for Italian. I'm not sure if this is a problem here or in LanguageTool, but I thought I'll start by reporting here:\n\n``` Python\nfrom language_check import LanguageTool\nt = LanguageTool(language='it')\nt.disable_spellchecking()\n#this contains MORFOLOGIK_RULE_IT:\nprint(t._spell_checking_rules)\n#this unfortunately contains MORFOLOGIK_RULE_IT_IT:\nprint(t.check('Non le fate piu?'))\n```\n"
        }
    ],
    "lxml/lxml": [
        {
            "repo_url": "https://github.com/lxml/lxml",
            "id": 236,
            "title": "Adds a `smart_prefix` option to XPath evaluations to overcome a counter-intuitive design flaw",
            "labels": [],
            "description": "> Namespaces are one honking great idea -- let's do more of those!\r\n\r\nUsing XPath to locate elements is quiet cumbersome when it comes to documents that have a default namespace:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{'x': 'http://www.w3.org/2000/svg', None: 'http://www.tei-c.org/ns/1.0'}\r\n>>> root.xpath('./text/body')\r\n[]\r\n>>> root.xpath('./text/body', namespaces=root.nsmap)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    root.xpath('./text/body', namespaces=root.nsmap)\r\n  File \"src/lxml/lxml.etree.pyx\", line 1584, in lxml.etree._Element.xpath (src/lxml/lxml.etree.c:59349)\r\n    evaluator = XPathElementEvaluator(self, namespaces=namespaces,\r\n  File \"src/lxml/xpath.pxi\", line 261, in lxml.etree.XPathElementEvaluator.__init__ (src/lxml/lxml.etree.c:170589)\r\n  File \"src/lxml/xpath.pxi\", line 133, in lxml.etree._XPathEvaluatorBase.__init__ (src/lxml/lxml.etree.c:168702)\r\n  File \"src/lxml/xpath.pxi\", line 57, in lxml.etree._XPathContext.__init__ (src/lxml/lxml.etree.c:167658)\r\n    _BaseContext.__init__(self, namespaces, extensions, error_log, enable_regexp,\r\n  File \"src/lxml/extensions.pxi\", line 84, in lxml.etree._BaseContext.__init__ (src/lxml/lxml.etree.c:156529)\r\n    if namespaces:\r\nTypeError: empty namespace prefix is not supported in XPath\r\n```\r\n\r\nThis is a [well](http://lxml.de/xpathxslt.html) [documented](http://lxml.de/FAQ.html#xpath-and-document-traversal) [issue](http://git.net/ml/python-lxml-devel/2009-08/msg00039.html) ([also here](https://stackoverflow.com/questions/8053568/how-do-i-use-empty-namespaces-in-an-lxml-xpath-query)) and is [commonly solved](https://stackoverflow.com/questions/31177707/parsing-xml-containing-default-namespace-to-get-an-element-value-using-lxml) by manipulating the namespace mapping with an ad-hoc prefix - which loses the information what the default namespace was unless preserved - and adding that to XPath expressions. ([another hack](https://stackoverflow.com/questions/5572247/how-to-find-xml-elements-via-xpath-in-python-in-a-namespace-agnostic-way), [stdlib as well](http://www.goodmami.org/2015/11/04/python-xpath-and-default-namespaces.html) with some insights)\r\n\r\nBut this solution doesn't play well in generalising code like adapter classes where it becomes tedious and error prone because XPath expressions are not always identical (did i mention they are counter-intuitive to type?) and keeping track of namespace mappings across loosely coupled code elements introduces boilerplates. \r\n\r\nUltimately, the interplay of document namespaces and XPath expressions is everything but pythonic and rather complicated than complex, though\r\n \r\n> There should be one-- and preferably only one --obvious way to do it.\r\n\r\nThe root of this issue is caused by [a flaw](https://lists.w3.org/Archives/Public/www-dom/2002JulSep/0159.html) in the [XPath 1.0](https://www.w3.org/TR/xpath/#node-tests) specs that `libxml2` follows in its implementation:\r\n\r\n> A QName in the node test is expanded into an expanded-name using the namespace declarations from the expression context. This is the same way expansion is done for element type names in start and end-tags except that the default namespace declared with xmlns is not used: **if the QName does not have a prefix, then the namespace URI is null** (this is the same way attribute names are expanded). It is an error if the QName has a prefix for which there is no namespace declaration in the expression context.\r\n\r\nWhile [XML namespaces](https://www.w3.org/TR/REC-xml-names/#ns-decl) actually have a notion of an unaliased default namespace:\r\n\r\n> If the attribute name matches DefaultAttName, then the namespace name in the attribute value is that of the default namespace in the scope of the element to which the declaration is attached.\r\n\r\n[XPath 2.0](https://www.w3.org/TR/xpath20/#node-tests) did eventually fix this:\r\n\r\n> A QName in a name test is resolved into an expanded QName using the statically known namespaces in the expression context. It is a static error [err:XPST0081] if the QName has a prefix that does not correspond to any statically known namespace. **An unprefixed QName, when used as a name test on an axis whose principal node kind is element, has the namespace URI of the default element/type namespace in the expression context**; otherwise, it has no namespace URI.\r\n\r\nThere's no XPath 2.0 implementation with Python bindings around (well, there is one to XQuilla that returns raw strings and is far off `lxml`'s capabilities), and it is very unlikely there's one to be implemented as the extension as a whole is a lot - which probably no one needs outside the XQuery/XSLT scene. [`libxml2` didn't intend to](https://www.mail-archive.com/xml@gnome.org/msg04082.html) ten years ago, but hey, [looking for a thesis](https://diplomky.redhat.com/topic/show/190/xpath-20-support-to-libxml) to write?\r\n\r\nThus I propose to backport that bug fix from XPath 2.0 to `lxml`'s XPath interfaces with an opt-in `smart_prefix` option without considering the whole standard as  \r\n\r\n> practicality beats purity.\r\n\r\nBehind the scenes the ad-hoc prefix 'solution' described above is applied, but completely hidden from the client code.\r\n\r\nThis pull request demonstrates the design and isn't completed yet, at least these issues still need to be addressed:\r\n\r\n- documentation\r\n- predicates are handled rather hackish and i have doubts that it works with more complex predicates\r\n  - i'd appreciate test proposals for practical examples with such\r\n  - support for predicates with the `smart_prefix` option could be dropped altogether, finer-grained selection is possible with Python and probably a common usage\r\n- should this even be the default behavior with opt-out? afaict it wouldn't break any code as supplying a namespace map with a default namespace (mapped to `None`) is currently invalid \r\n  - i'd keep it out of XSLT anyway\r\n- should result elements from such queries have a property that stores the option? so later calls on `.xpath()` of these elements would behave the same if no `smart_prefix` option is provided\r\n- can `regex.h` be used directly from Cython, but that's not specific to this here\r\n\r\nbtw, this is the first time i used Cython and my C usage was long ago, i'm happy about every feedback for improvements.\r\n\r\nNow, let's have some fun:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{None: 'http://www.tei-c.org/ns/1.0', 'x': 'http://www.w3.org/2000/svg'}\r\n>>> root.xpath('./text/body', namespaces=root.nsmap, smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n>>> root.xpath('./text/body', smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n```\r\n\r\n(oh, the inplace build option fails on my local machine without a helpful message. does anyone have a hint on that?)\r\n"
        }
    ],
    "mementoweb/py-memento-client": [
        {
            "repo_url": "https://github.com/mementoweb/py-memento-client",
            "id": 2,
            "title": "More efficient timegate query option",
            "labels": [],
            "description": "Great to see this library, I was just exploring using the `get_memento_info` for Netcapsule or Reconstruct and ran into the following issue.\n\nWhile the `get_memento_info` is a great general purpose function, I think there needs to be a more optimized option that performs just the basic \"Get memento from TimeGate at specified datetime\" and nothing else. Ideally, this means having a single HTTP request to the TimeGate to get the desired info.\n\nI propose adding an extra param, `include_uri_checks`, which will default to True, but when set to False, will disable any of the following additional checks.\n\nCurrently, the `get_memento_info` also includes the following:\n- A `get_original_uri` queries the original url to determine if its a URL-R or URl-M. This is unnecessary if the user knows that a URL-R is being passed in (and potentially slow). With `include_uri_checks` disabled, this test will be skipped.\n- Redirects are enabled on the TimeGate `HEAD` request, initiating potentially many redirects. This can be disabled to ensure just one request to the TimeGate. With `include_uri_checks` disabled,\n  the value of `Location` or `Content-Location` header will be used instead.\n- Redirects are followed with a head request to the URL-M to get the `Memento-Datetime` header. This also brings additional overhead. Instead, the datetime is usually already available Link header response from the TimeGate, getting the `datetime` from the `rel=memento` entry. (As a side note, I was surprised to find that this is not required, though luckily present in most implementations -- seems like the timegate should always return the datetime in the link header, rather than force user to make another request to the URL-M)\n- With this option, automatic redirecting, eg. `http://lanl.gov` -> `http://www.lanl.gov/worldview/` is disabled, as the users browser will follow the 302 explicitly and it will be reflected to the user.\n\nFor now, I've called this property `include_uri_checks` but can be changed to something else. If better to make a separate function, that can work as well.\n\nWith this option disabled, Reconstruct and Netcapsule can use start using this API, rather than relying on the existing Memento JSON api that's only on the aggregator.\n\nI've also included a simple test file with demonstrates these changes.\n\nLet me know if there are any questions/thoughts.\n"
        }
    ],
    "datapublica/munkres": [],
    "amperser/proselint": [
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 396,
            "title": "Add a manual page",
            "labels": [
                "enhancement"
            ],
            "description": "I have attached a simple manpage, but I guess it would be better to generate it automatically by using sphinx and [sphinxcontrib-autoprogram](https://pythonhosted.org/sphinxcontrib-autoprogram/) (or maybe [sphinx-argparse](https://github.com/ribozz/sphinx-argparse), but that doesn't seem to support click yet).\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 386,
            "title": "A/an distinction",
            "labels": [],
            "description": "I noticed that at least one check, oxford.venery_terms, does not take into account the a/an distinction in English, which results in the code not doing what it should:\n\n```\nlist = []\nfor term_pair in term_list:\n    for generic in generic_terms:\n        wrong = \"a {} of {}\".format(generic, term_pair[0])\n        right = \"a {} of {}\".format(term_pair[1], term_pair[0])\n        list += [[right, [wrong]]]\n```\n\nFor example, unless I am misinterpreting this code, it would suggest \"a army of caterpillars\" instead of \"an army of caterpillars.\"\n\nI imagine (though I haven't checked to confirm) that there are other locations in the code where the a/an distinction is relevant, so perhaps a general solution would be to write a helper function that automatically generates the appropriate article.\n\nAlternatively, I can think of another solution, but this would be a lot more complex and I'm not sure how workable this would be. You could have rules stack on each other; after all it is theoretically possible that fixing one rule violation in the prescribed fashion leads to another rule violation (the a/an example I have given here is a simple example). In such a case you would have certain rules stack on top of others and then modify them accordingly, so there could be an \"a/an\" rule corrector stacked on top of the venery terms rule corrector that corrects the mistakes made by the latter. You could generalize this to other areas, probably. But I'm guessing this would require a substantial rewrite of the project.\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 891,
            "title": "Fix typo in README closes #780",
            "labels": [],
            "description": "This fixes a spelling mistake in the README."
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 382,
            "title": "\"but however\" and \"but nevertheless\"",
            "labels": [],
            "description": "From @suchow:\n\n> This is complicated. \"But however, the man ate the cheese\" should become \"However, the man \u2026\" not \"But, the man...\", and \"but nevertheless\" sometimes needs to be rewritten in a more complicated way, e.g., \"He ran, but nevertheless was caught\" should be \"He ran, but was caught nevertheless.\"\n> \n> Maybe kill this and open a separate issue.\n\nThink about + implement a way to consider these usages. (The simple version originally in `after_the_deadline.redundancy`  [#376] simply replaced both phrases with `but`\u2014but that doesn't really make sense.)\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 892,
            "title": "Update pytest to 3.9.1",
            "labels": [],
            "description": "\nThis PR updates [pytest](https://pypi.org/project/pytest) from **3.7.3** to **3.9.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 3.8.2\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `4036 &lt;https://github.com/pytest-dev/pytest/issues/4036&gt;`_: The ``item`` parameter of ``pytest_warning_captured`` hook is now documented as deprecated. We realized only after\n  the ``3.8`` release that this parameter is incompatible with ``pytest-xdist``.\n\n  Our policy is to not deprecate features during bugfix releases, but in this case we believe it makes sense as we are\n  only documenting it as deprecated, without issuing warnings which might potentially break test suites. This will get\n  the word out that hook implementers should not use this parameter at all.\n\n  In a future release ``item`` will always be ``None`` and will emit a proper warning when a hook implementation\n  makes use of it.\n\n\n\nBug Fixes\n---------\n\n- `3539 &lt;https://github.com/pytest-dev/pytest/issues/3539&gt;`_: Fix reload on assertion rewritten modules.\n\n\n- `4034 &lt;https://github.com/pytest-dev/pytest/issues/4034&gt;`_: The ``.user_properties`` attribute of ``TestReport`` objects is a list\n  of (name, value) tuples, but could sometimes be instantiated as a tuple\n  of tuples.  It is now always a list.\n\n\n- `4039 &lt;https://github.com/pytest-dev/pytest/issues/4039&gt;`_: No longer issue warnings about using ``pytest_plugins`` in non-top-level directories when using ``--pyargs``: the\n  current ``--pyargs`` mechanism is not reliable and might give false negatives.\n\n\n- `4040 &lt;https://github.com/pytest-dev/pytest/issues/4040&gt;`_: Exclude empty reports for passed tests when ``-rP`` option is used.\n\n\n- `4051 &lt;https://github.com/pytest-dev/pytest/issues/4051&gt;`_: Improve error message when an invalid Python expression is passed to the ``-m`` option.\n\n\n- `4056 &lt;https://github.com/pytest-dev/pytest/issues/4056&gt;`_: ``MonkeyPatch.setenv`` and ``MonkeyPatch.delenv`` issue a warning if the environment variable name is not ``str`` on Python 2.\n\n  In Python 2, adding ``unicode`` keys to ``os.environ`` causes problems with ``subprocess`` (and possible other modules),\n  making this a subtle bug specially susceptible when used with ``from __future__ import unicode_literals``.\n\n\n\nImproved Documentation\n----------------------\n\n- `3928 &lt;https://github.com/pytest-dev/pytest/issues/3928&gt;`_: Add possible values for fixture scope to docs.\n   ```\n   \n  \n  \n   ### 3.8.1\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3286 &lt;https://github.com/pytest-dev/pytest/issues/3286&gt;`_: ``.pytest_cache`` directory is now automatically ignored by Git. Users who would like to contribute a solution for other SCMs please consult/comment on this issue.\n\n\n- `3749 &lt;https://github.com/pytest-dev/pytest/issues/3749&gt;`_: Fix the following error during collection of tests inside packages::\n\n      TypeError: object of type &#39;Package&#39; has no len()\n\n\n- `3941 &lt;https://github.com/pytest-dev/pytest/issues/3941&gt;`_: Fix bug where indirect parametrization would consider the scope of all fixtures used by the test function to determine the parametrization scope, and not only the scope of the fixtures being parametrized.\n\n\n- `3973 &lt;https://github.com/pytest-dev/pytest/issues/3973&gt;`_: Fix crash of the assertion rewriter if a test changed the current working directory without restoring it afterwards.\n\n\n- `3998 &lt;https://github.com/pytest-dev/pytest/issues/3998&gt;`_: Fix issue that prevented some caplog properties (for example ``record_tuples``) from being available when entering the debugger with ``--pdb``.\n\n\n- `3999 &lt;https://github.com/pytest-dev/pytest/issues/3999&gt;`_: Fix ``UnicodeDecodeError`` in python2.x when a class returns a non-ascii binary ``__repr__`` in an assertion which also contains non-ascii text.\n\n\n\nImproved Documentation\n----------------------\n\n- `3996 &lt;https://github.com/pytest-dev/pytest/issues/3996&gt;`_: New `Deprecations and Removals &lt;https://docs.pytest.org/en/latest/deprecations.html&gt;`_ page shows all currently\n  deprecated features, the rationale to do so, and alternatives to update your code. It also list features removed\n  from pytest in past major releases to help those with ancient pytest versions to upgrade.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3955 &lt;https://github.com/pytest-dev/pytest/issues/3955&gt;`_: Improve pre-commit detection for changelog filenames\n\n\n- `3975 &lt;https://github.com/pytest-dev/pytest/issues/3975&gt;`_: Remove legacy code around im_func as that was python2 only\n   ```\n   \n  \n  \n   ### 3.8.0\n   ```\n   =========================\n\nDeprecations and Removals\n-------------------------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: ``Config.warn`` and ``Node.warn`` have been\n  deprecated, see `&lt;https://docs.pytest.org/en/latest/deprecations.htmlconfig-warn-and-node-warn&gt;`_ for rationale and\n  examples.\n\n- `3936 &lt;https://github.com/pytest-dev/pytest/issues/3936&gt;`_: ``pytest.mark.filterwarnings`` second parameter is no longer regex-escaped,\n  making it possible to actually use regular expressions to check the warning message.\n\n  **Note**: regex-escaping the match string was an implementation oversight that might break test suites which depend\n  on the old behavior.\n\n\n\nFeatures\n--------\n\n- `2452 &lt;https://github.com/pytest-dev/pytest/issues/2452&gt;`_: Internal pytest warnings are now issued using the standard ``warnings`` module, making it possible to use\n  the standard warnings filters to manage those warnings. This introduces ``PytestWarning``,\n  ``PytestDeprecationWarning`` and ``RemovedInPytest4Warning`` warning types as part of the public API.\n\n  Consult `the documentation &lt;https://docs.pytest.org/en/latest/warnings.htmlinternal-pytest-warnings&gt;`_ for more info.\n\n\n- `2908 &lt;https://github.com/pytest-dev/pytest/issues/2908&gt;`_: ``DeprecationWarning`` and ``PendingDeprecationWarning`` are now shown by default if no other warning filter is\n  configured. This makes pytest more compliant with\n  `PEP-0506 &lt;https://www.python.org/dev/peps/pep-0565/recommended-filter-settings-for-test-runners&gt;`_. See\n  `the docs &lt;https://docs.pytest.org/en/latest/warnings.htmldeprecationwarning-and-pendingdeprecationwarning&gt;`_ for\n  more info.\n\n\n- `3251 &lt;https://github.com/pytest-dev/pytest/issues/3251&gt;`_: Warnings are now captured and displayed during test collection.\n\n\n- `3784 &lt;https://github.com/pytest-dev/pytest/issues/3784&gt;`_: ``PYTEST_DISABLE_PLUGIN_AUTOLOAD`` environment variable disables plugin auto-loading when set.\n\n\n- `3829 &lt;https://github.com/pytest-dev/pytest/issues/3829&gt;`_: Added the ``count`` option to ``console_output_style`` to enable displaying the progress as a count instead of a percentage.\n\n\n- `3837 &lt;https://github.com/pytest-dev/pytest/issues/3837&gt;`_: Added support for &#39;xfailed&#39; and &#39;xpassed&#39; outcomes to the ``pytester.RunResult.assert_outcomes`` signature.\n\n\n\nBug Fixes\n---------\n\n- `3911 &lt;https://github.com/pytest-dev/pytest/issues/3911&gt;`_: Terminal writer now takes into account unicode character width when writing out progress.\n\n\n- `3913 &lt;https://github.com/pytest-dev/pytest/issues/3913&gt;`_: Pytest now returns with correct exit code (EXIT_USAGEERROR, 4) when called with unknown arguments.\n\n\n- `3918 &lt;https://github.com/pytest-dev/pytest/issues/3918&gt;`_: Improve performance of assertion rewriting.\n\n\n\nImproved Documentation\n----------------------\n\n- `3566 &lt;https://github.com/pytest-dev/pytest/issues/3566&gt;`_: Added a blurb in usage.rst for the usage of -r flag which is used to show an extra test summary info.\n\n\n- `3907 &lt;https://github.com/pytest-dev/pytest/issues/3907&gt;`_: Corrected type of the exceptions collection passed to ``xfail``: ``raises`` argument accepts a ``tuple`` instead of ``list``.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Removed ``&quot;run all (no recorded failures)&quot;`` message printed with ``--failed-first`` and ``--last-failed`` when there are no failed tests.\n   ```\n   \n  \n  \n   ### 3.7.4\n   ```\n   =========================\n\nBug Fixes\n---------\n\n- `3506 &lt;https://github.com/pytest-dev/pytest/issues/3506&gt;`_: Fix possible infinite recursion when writing ``.pyc`` files.\n\n\n- `3853 &lt;https://github.com/pytest-dev/pytest/issues/3853&gt;`_: Cache plugin now obeys the ``-q`` flag when ``--last-failed`` and ``--failed-first`` flags are used.\n\n\n- `3883 &lt;https://github.com/pytest-dev/pytest/issues/3883&gt;`_: Fix bad console output when using ``console_output_style=classic``.\n\n\n- `3888 &lt;https://github.com/pytest-dev/pytest/issues/3888&gt;`_: Fix macOS specific code using ``capturemanager`` plugin in doctests.\n\n\n\nImproved Documentation\n----------------------\n\n- `3902 &lt;https://github.com/pytest-dev/pytest/issues/3902&gt;`_: Fix pytest.org links\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pytest\n  - Changelog: https://pyup.io/changelogs/pytest/\n  - Homepage: https://docs.pytest.org/en/latest/\n</details>\n\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 316,
            "title": ".proselintrc example and terminal screenshot in README",
            "labels": [
                "enhancement"
            ],
            "description": "Would be nice to have an explicit example section for .proselintrc, including both\n1. example contents (with some rules disabled)\n2. the relevant terminal terminal command(s)\n\nDoesn\u2019t _have_ to be a terminal screenshot, just something like\n\n``` sh\n$ postlint foo.markdown\n# (...) [error code]\n```\n\nI guess. But it\u2019d be nice with a screenshot for size.\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 885,
            "title": "Update click to 7.0",
            "labels": [],
            "description": "\nThis PR updates [click](https://pypi.org/project/click) from **6.7** to **7.0**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 7.0\n   ```\n   -----------\n\nReleased 2018-09-25\n\n-   Drop support for Python 2.6 and 3.3. (`967`_, `976`_)\n-   Wrap ``click.Choice``&#39;s missing message. (`202`_, `1000`_)\n-   Add native ZSH autocompletion support. (`323`_, `865`_)\n-   Document that ANSI color info isn&#39;t parsed from bytearrays in\n    Python 2. (`334`_)\n-   Document byte-stripping behavior of ``CliRunner``. (`334`_,\n    `1010`_)\n-   Usage errors now hint at the ``--help`` option. (`393`_, `557`_)\n-   Implement streaming pager. (`409`_, `889`_)\n-   Extract bar formatting to its own method. (`414`_)\n-   Add ``DateTime`` type for converting input in given date time\n    formats. (`423`_)\n-   ``secho``&#39;s first argument can now be ``None``, like in ``echo``.\n    (`424`_)\n-   Fixes a ``ZeroDivisionError`` in ``ProgressBar.make_step``, when the\n    arg passed to the first call of ``ProgressBar.update`` is 0.\n    (`447`_, `1012`_)\n-   Show progressbar only if total execution time is visible. (`487`_)\n-   Added the ability to hide commands and options from help. (`500`_)\n-   Document that options can be ``required=True``. (`514`_, `1022`_)\n-   Non-standalone calls to ``Context.exit`` return the exit code,\n    rather than calling ``sys.exit``. (`533`_, `667`_, `1098`_)\n-   ``click.getchar()`` returns Unicode in Python 3 on Windows,\n    consistent with other platforms. (`537`_, `821`_, `822`_,\n    `1088`_, `1108`_)\n-   Added ``FloatRange`` type. (`538`_, `553`_)\n-   Added support for bash completion of ``type=click.Choice`` for\n    ``Options`` and ``Arguments``. (`535`_, `681`_)\n-   Only allow one positional arg for ``Argument`` parameter\n    declaration. (`568`_, `574`_, `1014`_)\n-   Add ``case_sensitive=False`` as an option to Choice. (`569`_)\n-   ``click.getchar()`` correctly raises ``KeyboardInterrupt`` on &quot;^C&quot;\n    and ``EOFError`` on &quot;^D&quot; on Linux. (`583`_, `1115`_)\n-   Fix encoding issue with ``click.getchar(echo=True)`` on Linux.\n    (`1115`_)\n-   ``param_hint`` in errors now derived from param itself. (`598`_,\n    `704`_, `709`_)\n-   Add a test that ensures that when an argument is formatted into a\n    usage error, its metavar is used, not its name. (`612`_)\n-   Allow setting ``prog_name`` as extra in ``CliRunner.invoke``.\n    (`616`_, `999`_)\n-   Help text taken from docstrings truncates at the ``\\f`` form feed\n    character, useful for hiding Sphinx-style parameter documentation.\n    (`629`_, `1091`_)\n-   ``launch`` now works properly under Cygwin. (`650`_)\n-   Update progress after iteration. (`651`_, `706`_)\n-   ``CliRunner.invoke`` now may receive ``args`` as a string\n    representing a Unix shell command. (`664`_)\n-   Make ``Argument.make_metavar()`` default to type metavar. (`675`_)\n-   Add documentation for ``ignore_unknown_options``. (`684`_)\n-   Add bright colors support for ``click.style`` and fix the reset\n    option for parameters ``fg`` and ``bg``. (`703`_, `809`_)\n-   Add ``show_envvar`` for showing environment variables in help.\n    (`710`_)\n-   Avoid ``BrokenPipeError`` during interpreter shutdown when stdout or\n    stderr is a closed pipe. (`712`_, `1106`_)\n-   Document customizing option names. (`725`_, `1016`_)\n-   Disable ``sys._getframes()`` on Python interpreters that don&#39;t\n    support it. (`728`_)\n-   Fix bug in test runner when calling ``sys.exit`` with ``None``.\n    (`739`_)\n-   Clarify documentation on command line options. (`741`_, `1003`_)\n-   Fix crash on Windows console. (`744`_)\n-   Fix bug that caused bash completion to give improper completions on\n    chained commands. (`754`_, `774`_)\n-   Added support for dynamic bash completion from a user-supplied\n    callback. (`755`_)\n-   Added support for bash completions containing spaces. (`773`_)\n-   Allow autocompletion function to determine whether or not to return\n    completions that start with the incomplete argument. (`790`_,\n    `806`_)\n-   Fix option naming routine to match documentation and be\n    deterministic. (`793`_, `794`_)\n-   Fix path validation bug. (`795`_, `1020`_)\n-   Add test and documentation for ``Option`` naming: functionality.\n    (`799`_)\n-   Update doc to match arg name for ``path_type``. (`801`_)\n-   Raw strings added so correct escaping occurs. (`807`_)\n-   Fix 16k character limit of ``click.echo`` on Windows. (`816`_,\n    `819`_)\n-   Overcome 64k character limit when writing to binary stream on\n    Windows 7. (`825`_, `830`_)\n-   Add bool conversion for &quot;t&quot; and &quot;f&quot;. (`842`_)\n-   ``NoSuchOption`` errors take ``ctx`` so that ``--help`` hint gets\n    printed in error output. (`860`_)\n-   Fixed the behavior of Click error messages with regards to Unicode\n    on 2.x and 3.x. Message is now always Unicode and the str and\n    Unicode special methods work as you expect on that platform.\n    (`862`_)\n-   Progress bar now uses stderr by default. (`863`_)\n-   Add support for auto-completion documentation. (`866`_, `869`_)\n-   Allow ``CliRunner`` to separate stdout and stderr. (`868`_)\n-   Fix variable precedence. (`873`_, `874`_)\n-   Fix invalid escape sequences. (`877`_)\n-   Fix ``ResourceWarning`` that occurs during some tests. (`878`_)\n-   When detecting a misconfigured locale, don&#39;t fail if the ``locale``\n    command fails. (`880`_)\n-   Add ``case_sensitive=False`` as an option to ``Choice`` types.\n    (`887`_)\n-   Force stdout/stderr writable. This works around issues with badly\n    patched standard streams like those from Jupyter. (`918`_)\n-   Fix completion of subcommand options after last argument (`919`_,\n    `930`_)\n-   ``_AtomicFile`` now uses the ``realpath`` of the original filename\n    so that changing the working directory does not affect it.\n    (`920`_)\n-   Fix incorrect completions when defaults are present (`925`_,\n    `930`_)\n-   Add copy option attrs so that custom classes can be re-used.\n    (`926`_, `994`_)\n-   &quot;x&quot; and &quot;a&quot; file modes now use stdout when file is ``&quot;-&quot;``.\n    (`929`_)\n-   Fix missing comma in ``__all__`` list. (`935`_)\n-   Clarify how parameters are named. (`949`_, `1009`_)\n-   Stdout is now automatically set to non blocking. (`954`_)\n-   Do not set options twice. (`962`_)\n-   Move ``fcntl`` import. (`965`_)\n-   Fix Google App Engine ``ImportError``. (`995`_)\n-   Better handling of help text for dynamic default option values.\n    (`996`_)\n-   Fix ``get_winter_size()`` so it correctly returns ``(0,0)``.\n    (`997`_)\n-   Add test case checking for custom param type. (`1001`_)\n-   Allow short width to address cmd formatting. (`1002`_)\n-   Add details about Python version support. (`1004`_)\n-   Added deprecation flag to commands. (`1005`_)\n-   Fixed issues where ``fd`` was undefined. (`1007`_)\n-   Fix formatting for short help. (`1008`_)\n-   Document how ``auto_envvar_prefix`` works with command groups.\n    (`1011`_)\n-   Don&#39;t add newlines by default for progress bars. (`1013`_)\n-   Use Python sorting order for ZSH completions. (`1047`_, `1059`_)\n-   Document that parameter names are converted to lowercase by default.\n    (`1055`_)\n-   Subcommands that are named by the function now automatically have\n    the underscore replaced with a dash. If you register a function\n    named ``my_command`` it becomes ``my-command`` in the command line\n    interface.\n-   Hide hidden commands and options from completion. (`1058`_,\n    `1061`_)\n-   Fix absolute import blocking Click from being vendored into a\n    project on Windows. (`1068`_, `1069`_)\n-   Fix issue where a lowercase ``auto_envvar_prefix`` would not be\n    converted to uppercase. (`1105`_)\n\n.. _202: https://github.com/pallets/click/issues/202\n.. _323: https://github.com/pallets/click/issues/323\n.. _334: https://github.com/pallets/click/issues/334\n.. _393: https://github.com/pallets/click/issues/393\n.. _409: https://github.com/pallets/click/issues/409\n.. _414: https://github.com/pallets/click/pull/414\n.. _423: https://github.com/pallets/click/pull/423\n.. _424: https://github.com/pallets/click/pull/424\n.. _447: https://github.com/pallets/click/issues/447\n.. _487: https://github.com/pallets/click/pull/487\n.. _500: https://github.com/pallets/click/pull/500\n.. _514: https://github.com/pallets/click/issues/514\n.. _533: https://github.com/pallets/click/pull/533\n.. _535: https://github.com/pallets/click/issues/535\n.. _537: https://github.com/pallets/click/issues/537\n.. _538: https://github.com/pallets/click/pull/538\n.. _553: https://github.com/pallets/click/pull/553\n.. _557: https://github.com/pallets/click/pull/557\n.. _568: https://github.com/pallets/click/issues/568\n.. _569: https://github.com/pallets/click/issues/569\n.. _574: https://github.com/pallets/click/issues/574\n.. _583: https://github.com/pallets/click/issues/583\n.. _598: https://github.com/pallets/click/issues/598\n.. _612: https://github.com/pallets/click/pull/612\n.. _616: https://github.com/pallets/click/issues/616\n.. _629: https://github.com/pallets/click/pull/629\n.. _650: https://github.com/pallets/click/pull/650\n.. _651: https://github.com/pallets/click/issues/651\n.. _664: https://github.com/pallets/click/pull/664\n.. _667: https://github.com/pallets/click/issues/667\n.. _675: https://github.com/pallets/click/pull/675\n.. _681: https://github.com/pallets/click/pull/681\n.. _684: https://github.com/pallets/click/pull/684\n.. _703: https://github.com/pallets/click/issues/703\n.. _704: https://github.com/pallets/click/issues/704\n.. _706: https://github.com/pallets/click/pull/706\n.. _709: https://github.com/pallets/click/pull/709\n.. _710: https://github.com/pallets/click/pull/710\n.. _712: https://github.com/pallets/click/pull/712\n.. _719: https://github.com/pallets/click/issues/719\n.. _725: https://github.com/pallets/click/issues/725\n.. _728: https://github.com/pallets/click/pull/728\n.. _739: https://github.com/pallets/click/pull/739\n.. _741: https://github.com/pallets/click/issues/741\n.. _744: https://github.com/pallets/click/issues/744\n.. _754: https://github.com/pallets/click/issues/754\n.. _755: https://github.com/pallets/click/pull/755\n.. _773: https://github.com/pallets/click/pull/773\n.. _774: https://github.com/pallets/click/pull/774\n.. _790: https://github.com/pallets/click/issues/790\n.. _793: https://github.com/pallets/click/issues/793\n.. _794: https://github.com/pallets/click/pull/794\n.. _795: https://github.com/pallets/click/issues/795\n.. _799: https://github.com/pallets/click/pull/799\n.. _801: https://github.com/pallets/click/pull/801\n.. _806: https://github.com/pallets/click/pull/806\n.. _807: https://github.com/pallets/click/pull/807\n.. _809: https://github.com/pallets/click/pull/809\n.. _816: https://github.com/pallets/click/pull/816\n.. _819: https://github.com/pallets/click/pull/819\n.. _821: https://github.com/pallets/click/issues/821\n.. _822: https://github.com/pallets/click/issues/822\n.. _825: https://github.com/pallets/click/issues/825\n.. _830: https://github.com/pallets/click/pull/830\n.. _842: https://github.com/pallets/click/pull/842\n.. _860: https://github.com/pallets/click/issues/860\n.. _862: https://github.com/pallets/click/issues/862\n.. _863: https://github.com/pallets/click/pull/863\n.. _865: https://github.com/pallets/click/pull/865\n.. _866: https://github.com/pallets/click/issues/866\n.. _868: https://github.com/pallets/click/pull/868\n.. _869: https://github.com/pallets/click/pull/869\n.. _873: https://github.com/pallets/click/issues/873\n.. _874: https://github.com/pallets/click/pull/874\n.. _877: https://github.com/pallets/click/pull/877\n.. _878: https://github.com/pallets/click/pull/878\n.. _880: https://github.com/pallets/click/pull/880\n.. _883: https://github.com/pallets/click/pull/883\n.. _887: https://github.com/pallets/click/pull/887\n.. _889: https://github.com/pallets/click/pull/889\n.. _918: https://github.com/pallets/click/pull/918\n.. _919: https://github.com/pallets/click/issues/919\n.. _920: https://github.com/pallets/click/pull/920\n.. _925: https://github.com/pallets/click/issues/925\n.. _926: https://github.com/pallets/click/issues/926\n.. _929: https://github.com/pallets/click/pull/929\n.. _930: https://github.com/pallets/click/pull/930\n.. _935: https://github.com/pallets/click/pull/935\n.. _949: https://github.com/pallets/click/issues/949\n.. _954: https://github.com/pallets/click/pull/954\n.. _962: https://github.com/pallets/click/pull/962\n.. _965: https://github.com/pallets/click/pull/965\n.. _967: https://github.com/pallets/click/pull/967\n.. _976: https://github.com/pallets/click/pull/976\n.. _990: https://github.com/pallets/click/pull/990\n.. _991: https://github.com/pallets/click/pull/991\n.. _993: https://github.com/pallets/click/pull/993\n.. _994: https://github.com/pallets/click/pull/994\n.. _995: https://github.com/pallets/click/pull/995\n.. _996: https://github.com/pallets/click/pull/996\n.. _997: https://github.com/pallets/click/pull/997\n.. _999: https://github.com/pallets/click/pull/999\n.. _1000: https://github.com/pallets/click/pull/1000\n.. _1001: https://github.com/pallets/click/pull/1001\n.. _1002: https://github.com/pallets/click/pull/1002\n.. _1003: https://github.com/pallets/click/pull/1003\n.. _1004: https://github.com/pallets/click/pull/1004\n.. _1005: https://github.com/pallets/click/pull/1005\n.. _1007: https://github.com/pallets/click/pull/1007\n.. _1008: https://github.com/pallets/click/pull/1008\n.. _1009: https://github.com/pallets/click/pull/1009\n.. _1010: https://github.com/pallets/click/pull/1010\n.. _1011: https://github.com/pallets/click/pull/1011\n.. _1012: https://github.com/pallets/click/pull/1012\n.. _1013: https://github.com/pallets/click/pull/1013\n.. _1014: https://github.com/pallets/click/pull/1014\n.. _1016: https://github.com/pallets/click/pull/1016\n.. _1020: https://github.com/pallets/click/pull/1020\n.. _1022: https://github.com/pallets/click/pull/1022\n.. _1027: https://github.com/pallets/click/pull/1027\n.. _1047: https://github.com/pallets/click/pull/1047\n.. _1055: https://github.com/pallets/click/pull/1055\n.. _1058: https://github.com/pallets/click/pull/1058\n.. _1059: https://github.com/pallets/click/pull/1059\n.. _1061: https://github.com/pallets/click/pull/1061\n.. _1068: https://github.com/pallets/click/issues/1068\n.. _1069: https://github.com/pallets/click/pull/1069\n.. _1088: https://github.com/pallets/click/issues/1088\n.. _1091: https://github.com/pallets/click/pull/1091\n.. _1098: https://github.com/pallets/click/pull/1098\n.. _1105: https://github.com/pallets/click/pull/1105\n.. _1106: https://github.com/pallets/click/pull/1106\n.. _1108: https://github.com/pallets/click/pull/1108\n.. _1115: https://github.com/pallets/click/pull/1115\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/click\n  - Changelog: https://pyup.io/changelogs/click/\n  - Homepage: https://palletsprojects.com/p/click/\n</details>\n\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 275,
            "title": "Add rule for missing period at end of last sentence in a paragraph",
            "labels": [
                "easy"
            ],
            "description": ""
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 802,
            "title": "Simple regex checker for passive voice constructions",
            "labels": [],
            "description": "This is my first attempt to contribute, so please let me know if I need to do anything differently -- e.g. register the check with the application.\r\n\r\nI haven't tested the regex extensively, but it performed well on [this list](https://github.com/amperser/proselint/files/2096770/passive_voice_examples.txt).\r\n\r\nHere are the results on [Pythex](https://pythex.org/):\r\n\r\n[Passive voice regex test 2018-06-12.pdf](https://github.com/amperser/proselint/files/2096776/Passive.voice.regex.test.2018-06-12.pdf)\r\n\r\nHere is the regex itself -- I'm sure it can be improved, modularized into several regexes, etc. Happy to continue working on it when I can if you like the idea.\r\n\r\n```\r\n(\\b(?:be|am|is|are|was|were|have|has|had)\\b[\\w\\s]{,15}?(?:d|(?<!whe)n|ne|left|being)\\b(?: by\\b)?)\r\n```\r\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 164,
            "title": "Beef up rule on comparing uncomparables",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "```\nsource:     DFW's dictionary notes in The Telegraph\nsource_url: http://bit.ly/1qudVuC\n```\n\n> Unique\n> This is one of a class of adjectives, sometimes called \u201cuncomparables\u201d, that can be a little tricky. Among other uncomparables are precise, exact, correct, entire, accurate, preferable, inevitable, possible, false; there are probably two dozen in all. These adjectives all describe absolute, non-negotiable states: something is either false or it\u2019s not; something is either inevitable or it\u2019s not. Many writers get careless and try to modify uncomparables with comparatives like more and less or intensives like very. But if you really think about them, the core assertions in sentences like \u201cWar is becoming increasingly inevitable as Middle East tensions rise\u201d; \u201cTheir cost estimate was more accurate than the other firms\u2019\u201d; and \u201cAs a mortician, he has a very unique attitude\u201d are nonsense. If something is inevitable, it is bound to happen; it cannot be bound to happen and then somehow even more bound to happen. Unique already means one-of-a-kind, so the adj. phrase very unique is at best redundant and at worst stupid, like \u201caudible to the ear\u201d or \u201crectangular in shape\u201d. You can blame the culture of marketing for some of this difficulty. As the number and rhetorical volume of US ads increase, we become inured to hyperbolic language, which then forces marketers to load superlatives and uncomparables with high-octane modifiers (special - very special - Super-special! - Mega-Special!!), and so on. A deeper issue implicit in the problem of uncomparables is the dissimilarities between Standard Written English and the language of advertising. Advertising English, which probably deserves to be studied as its own dialect, operates under different syntactic rules than SWE, mainly because AE\u2019s goals and assumptions are different. Sentences like \u201cWe offer a totally unique dining experience\u201d; \u201cCome on down and receive your free gift\u201d; and \u201cSave up to 50 per cent\u2026 and more!\u201d are perfectly OK in Advertising English \u2014 but this is because Advertising English is aimed at people who are not paying close attention. If your audience is by definition involuntary, distracted and numbed, then free gift and totally unique stand a better chance of penetrating \u2014 and simple penetration is what AE is all about. One axiom of Standard Written English is that your reader is paying close attention and expects you to have done the same.\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 792,
            "title": "Online API",
            "labels": [],
            "description": "I am thinking of creating a standalone GUI for proselint. A simple alternative would be to simply send the text to http://proselint.com/write/ . Is there a plan to support this?"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 142,
            "title": "Add rule with technical dictionary",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "https://github.com/azu/technical-word-rules\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 133,
            "title": "Thing i haven't seen in any of the books but that is a weakening or condescending phrase",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "\"And we must remember\", \"And remember\",\u2026\n\nprobably can find a source for this somewhere but it made me roll my eyes when i read it, which suggests it's a problem.\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 132,
            "title": "Add check for using the right name for groups of things",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "e.g., a group of cats is a \"glaring\".\n\nhttp://www.oxforddictionaries.com/us/words/what-do-you-call-a-group-of\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 122,
            "title": "Check for inflamatory language",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "http://rationalwiki.org/wiki/Inflammatory_language\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 22,
            "title": "Check for lexical illusions",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "https://github.com/btford/write-good/blob/master/lib/lexical-illusions.js\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 564,
            "title": "Detects gender bias despite gender neutral alternative term (from GetSiteControl)",
            "labels": [
                "easy",
                "false alarm"
            ],
            "description": "A user says:\n\n> Detects gender bias on 'chairperson' despite the term being the gender neutral alternative to gendered nouns.\n\nText that will trigger false positive: `They thought the chairperson was interesting.`\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 98,
            "title": "Add rule about starting paragraph with \"But\"",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "```\nJustin Jung\u00e9 to me\nShow more\nMar 23\nHi Jordan,\n\nI'm grading more tutorial essays and keep making a similar set of comments about a problem that proselint might be able to flag.  \n\nHere's one instance of the comment:\n\nDon't start a paragraph with \"but.\"\n\nEvery paragraph should be self-contained.  \"But\" implies referring back to the previous paragraph to know what contrast is being made. \n\nOn a similar note, the first sentence of a new paragraph should use nouns instead of pronouns.  Pronouns often require referring back to previous sentences, breaking self-containment.\n\nIn this particular case, \"but\" can simply be deleted, because the sentence is sufficiently informative (effectively self-contained).  I'm merely flagging this use to explain why style guides forbid using \"but\" at the start of a paragraph.\n\n\nFlagging paragraphs that start with \"but\" should be trivial to implement.  Recognizing paragraph first-sentences with only pronouns and no nouns also seems feasible, though it won't catch every version of the general infraction.  \n\u2026\n```\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 78,
            "title": "Add rule about email capitalization",
            "labels": [
                "easy",
                "rule"
            ],
            "description": "E.g., don't complain if it's all in lowercase.\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 458,
            "title": "Is there any documentation?",
            "labels": [
                "enhancement"
            ],
            "description": "I've looked for proselint documentation here on Github and elsewhere and come up empty. Any chance we'll be getting something along those lines soon? Mainly I'm interested in the command line options. What does `--clean` do? What syntax do I use for `.proselintrc`?\n"
        },
        {
            "repo_url": "https://github.com/amperser/proselint",
            "id": 434,
            "title": "Extract Rules from The A.V. Club's Star Wars Style Guide",
            "labels": [
                "extraction"
            ],
            "description": "Most of these are simple spelling and capitalization rules, but some of them apply to formatting, i.e. italicization. It doesn't seem to me that proselint takes this into account, but maybe a message could be raised.\nhttp://www.avclub.com/article/there-are-two-es-wookiee-damn-it-message-v-club-co-230029\n"
        }
    ],
    "PyCQA/pycodestyle": [
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 745,
            "title": "The whl and egg package has pep8.py",
            "labels": [],
            "description": "When I install pycodestyle by pip, `pep8.py` was overwritten by pycodestyle installer.\r\nIs it correct behavior?\r\n\r\nI read #544 . This issues conclusion is following one.\r\n> All that said, I think we're all in agreement that we shouldn't break the pep8 package or CLI, so I'm closing this.\r\n\r\nThe following two packages have a `pep8.py` (version 1.7.1). \r\n- `pycodestyle-2.4.0-py2.py3-none-any.whl`\r\n- `pycodestyle-2.4.0-py3.6.egg`\r\n\r\n\r\nI can use `pip install --no-binary :all: pycodestyle` to avoid installing `pep8.py` because `pycodestyle-2.4.0.tar.gz` has no `pep8.py` .\r\n\r\n\r\nI want to use pycodestyle and *old* pep8 in same environment. I know workaround about this problem now. But, it was little bit complicated problem.\r\n\r\n\r\nP.S.\r\nI hope that all software uses pycodestyle instead of pep8 . But, some software still uses pep8. Thanks!"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 673,
            "title": "Inconsistent handling of kwarg with binary operator expression as value",
            "labels": [],
            "description": "I think pycodestyle's handling of binary operator expressions that are the values of kwargs could be improved.\r\n\r\nThere is a case that is a little ambiguous to me as to whether it should be a style error or not. Should calls where the binary operator subexpressions are aligned with the = of the kwarg be errors? Currently, this triggers E131.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n        b +\r\n        c\r\n)\r\n```\r\n\r\nOn the other side, dropping the lines indentation to the same as the kwarg is considered valid, which seems to me to go against the spirit of the pep8 guidelines.\r\n```python\r\ncall(\r\n  kwarg=a +\r\n  b +\r\n  c\r\n)\r\n```"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 712,
            "title": "Blank line between \"class\" and \"def\" lines",
            "labels": [],
            "description": "Hi All,\r\n\r\nCould you please clarify if the following piece of code violates PEP8 and pycodestyle should report an error:\r\n\r\n```py\r\nclass A:\r\n    def func():\r\n        pass\r\n```\r\n\r\nI haven't found an example of this in the testsuite, and pycodestyle doesn't report any errors on this, though PEP8 states:\r\n> Method definitions inside a class are surrounded by a single blank line.\r\n\r\nThanks,\r\nMikhail\r\n\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 691,
            "title": "Prevent confusion with unintentional traling commas",
            "labels": [],
            "description": "There is the common programmer mistake to leave a trailing comma on a value, that leads that value unexpectedly treated as a tuple [[1]](http://www.logophile.org/blog/2011/06/04/pythons-trailing-comma-syntax) [[2]](https://twitter.com/DieGelassenheit/status/918783004448784384)\r\n\r\nPEP8 guide already warn on this\r\nhttps://www.python.org/dev/peps/pep-0008/#when-to-use-trailing-commas\r\n\r\n```\r\nYes:\r\n\r\nFILES = ('setup.cfg',)\r\nOK, but confusing:\r\n\r\nFILES = 'setup.cfg',\r\n\r\n```\r\n\r\nWhat you think about to allow `pycodestyle` tool to produce a warning message in that case?\r\n\r\nPylint has that check since [1.7](https://pylint.readthedocs.io/en/latest/whatsnew/1.7.html) version"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 696,
            "title": "E712 is based on a misreading of PEP8",
            "labels": [],
            "description": "Quoth the specification,\r\n\r\n- Don't compare boolean values to True or False using ==.\r\n\r\n  ```\r\n  Yes:   if greeting:\r\n  No:    if greeting == True:\r\n  Worse: if greeting is True:\r\n  ```\r\n\r\npycodestyle considers both the \"yes\" and the \"worse\" case equivalently good; if anything, it should complain *more* about the \"Worse\" case than the \"Yes\" one.\r\n\r\nIt also complains, I believe spuriously, about SQLAlchemy's overridden use of `==` [as described in this Stack Overflow question](https://stackoverflow.com/questions/18998010/flake8-complains-on-boolean-comparison-in-filter-clause).\r\n\r\nCould this be restricted to just emitting the warning in the literal case of `if ... == True:`, or `is True:` which is probably redundant, and leaving more complex expressions alone?\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 704,
            "title": "Wrong or non-existent column number",
            "labels": [],
            "description": "In some occasions, pycodestyle is returning the wrong or non-existent column number. We are facing some issues on [AtomLinter/linter-flake8](https://github.com/AtomLinter/linter-flake8) due to this problem. This issue happens when using extended characters.\r\n\r\nA simple reproduction:\r\n1. Create a file named foo.py and include the content below. Notice that there is a single whitespace after the special dot character.\r\n```\r\n\u2022 \r\n```\r\n2. Execute `pycodestyle foo.py`. The output is `foo.py:1:4: W291 trailing whitespace`. The message references line 1 and column 4. There is no column 4 in the file.\r\n\r\nThis seems to be some encoding issue. It seems that the character `\u2022` is being treated as multiple characters."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 677,
            "title": "Fails to enforce 2 blank lines between functions when defined with async",
            "labels": [],
            "description": "When a function is defined with Async, pep8 fails to enforce the rule of having 2 blank lines above the function definition."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 665,
            "title": "\"E226 missing whitespace around arithmetic operator\" around high priority operator",
            "labels": [],
            "description": "According to [PEP8](https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements): \r\n\r\n> If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies)\r\n>    x = x*2 - 1\r\n\r\nI have this test program `t.py`: `y = x*x + 2`. When I run this under `flake8`:\r\n\r\n```\r\n$ flake8 --show-source --select=E226 t.py\r\n.py:3:6: E226 missing whitespace around arithmetic operator\r\ny = x*x + 2\r\n     ^\r\n```\r\n\r\nI wonder why I get an `E226` here? It seems to be in conflict with the PEP8 guidelines?\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 372,
            "title": "Suspicious E122 for arguments of method called on multiline glued string literal",
            "labels": [],
            "description": "This is kind of tricky case. Suppose I have the following Python snippet:\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n    foo='baz'))\n```\n\nEverything is fine here except warning \"7:5: E122 continuation line missing indentation or outdented\" about `foo` keyword argument of `format`. In fact the only indentation accepted by `pep8` for it is 4 spaces to the right relatively to the start of the string literal, i.e.\n\n``` python\ndef func(*args):\n    pass\n\n\nfunc('{foo} '\n     'bar'.format(\n         foo='baz'))\n```\n\nWhat is suspicious to me is that for any other kind of first argument of `func` that spans several physical lines, there are _two_ positions for `foo` accepted by `pep8`: 4 characters to the right of previous physical line and 4 characters to the right relatively to `func`. E.g. for dict literal\n\n``` python\n# Both cases are valid for pep8\nfunc({'foo': 1,\n      'bar': 2}.update(\n    foo='baz'))\n\n\nfunc({'foo': 1,\n      'bar': 2}.update(\n          foo='baz'))\n```\n\nor `dict` constructor:\n\n``` python\n# Both cases are valid for pep8\nfunc(dict(foo=1,\n          bar=2).update(\n    foo='baz'))\n\n\nfunc(dict(foo=1,\n          bar=2).update(\n              foo='baz'))\n```\n\nMoreover if I merely wrap glued string literal in parenthesis, `pep8` doesn't complain about normal indentation anymore, i.e.\n\n``` python\n# It's ok however\nfunc(('{foo} '\n     'bar').format(\n    foo='baz'))\n```\n\nFour space indentation relative to the start of `func` seems more natural to me and in my opinion it doesn't violate any PEP-8 guidelines. Am I wrong? Is it done so intentionally?\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 373,
            "title": "False positive \"E203 whitespace before ':' \" on list slice.",
            "labels": [
                "needs patch"
            ],
            "description": "I've encountered the problem in the following code:\n\n``` python\na = [1, 2, 3, 4, 5]\nb = a[1+1 : 2+2]  # E203\nc = a[1 + 1 : 2 + 2]  # E203\nd = a[1+1:2+2]\n```\n\nHowever, PEP8 chapter https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements handles this as good style:\n\n> However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted.\n> \n> Yes:\n> \n> ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n> ham[lower:upper], ham[lower:upper:], ham[lower::step]\n> ham[lower+offset : upper+offset]\n> ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n> ham[lower + offset : upper + offset]\n> No:\n> \n> ham[lower + offset:upper + offset]\n> ham[1: 9], ham[1 :9], ham[1:9 :3]\n> ham[lower : : upper]\n> ham[ : upper]\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 370,
            "title": "Check E228 only detects a missing whitespace on the left site of the modulo operator",
            "labels": [],
            "description": "At the moment `\"sometext %s\"%\"testing` will be detected by E228. This is correct.\n\nAt the moment `\"sometext %s\" %\"testing` will not be detected by E228. This is not correct.\n\nBecause of the description of E228 (`missing whitespace around modulo operator`) the check has to detect missing whitespaces on the left site and on the right site of the modulo operator.\n\nAt the moment E228 only detects missing whitespaces on the left site of the modulo operator.\n\nTested with latest PEP8 version (`1.5.7`).\n\n```\n% cat testing\n\"sometext %s\"%\"testing\"\nsometext %s\" %\"testing\"\nsometext %s\" % \"testing\"\n\n% pep8 --select E228 testing \ntesting:1:14: E228 missing whitespace around modulo operator\n```\n\nE225 is working like expected:\n\n```\n% pep8 --select E225 testing                                                                                                                            \ntesting:2:11: E225 missing whitespace around operator\ntesting:3:11: E225 missing whitespace around operator\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 344,
            "title": "Enforce 72 character docstring line width",
            "labels": [
                "extension"
            ],
            "description": "PEP8 states:\n\n> For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.\n\nThe current implementation only enforces the maximum line length (`E501`). I'd like to suggest the addition of an `E503` error to enforce the restriction of these \"flowing long blocks of text.\"\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 332,
            "title": "Randomly indented comment lines are not flagged",
            "labels": [
                "needs patch"
            ],
            "description": "foo.py:\n\n```\nif True:\n    if True:\n            # bah\n        pass\n```\n\n$ pep8 foo.py\n\nOriginally posted on autopep8: https://github.com/hhatto/autopep8/issues/169 (I can't see that comment indentation is in PEP8 itself, so I understand if this isn't something that you want to flag!)\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 338,
            "title": "E211 not detected in line with print statement/function",
            "labels": [
                "undecided"
            ],
            "description": "pep8 doesn't detect E211 (whitespace before \u2018(\u2018 ) in this file\n\n```\nfrom __future__ import print_function\n\nprint ('abc')\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 321,
            "title": "False negative for extraneous whitespace around colon",
            "labels": [
                "feature"
            ],
            "description": "@anthonymayer reported this in hhatto/autopep8#156.\n\n`example.py`:\n\n``` python\nx = [1, 2, 3, 4]\nx[1: 3]\n```\n\nI would expect a message about extraneous whitespace after the colon, but `pep8` seems to report nothing.\n\n```\n$ pep8 --version\n1.5.7\n$ pep8 example.py\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 636,
            "title": "Assumes 4 space indent.",
            "labels": [],
            "description": "I know that's the pep8 spec.. but we've got 2 space indent dictated at my work.  That breaks some things.  it'd be better to provide some sort of override rather than have magic numbers in the code... e.g. if hang > 4: on line 512."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 231,
            "title": "Relaxing E701 and E302 -- allowing one-liners",
            "labels": [
                "undecided",
                "feature"
            ],
            "description": "PEP8 allows you to type a bunch of dummy one-liners like this:\n\n```\nclass CustomException(Exception): pass\nclass AnotherException(Exception): pass\nclass YetAnotherException(Exception): pass\n```\n\nBut this code raises E701 (compound statement) and E302 (two lines between classes) errors. I propose to leave compound statements intact if they are a bunch of class/def definitions. This is what I've done in this pull request of autopep8 project: https://github.com/hhatto/autopep8/pull/87, but it wasn't merged since pep8 seems to be a better place for that.\n\nThis is not easy to implement since the current framework doesn't allow you to look at the next logical line. This is necessary because you need to look at previous and next line to determine if a definition is alone or inside a bunch of definitions.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 631,
            "title": "Should this line trigger some sort of linting error?",
            "labels": [],
            "description": "I had a hard time finding something in pep8 that would forbid this (and pycodestyle itself doesn't trigger a lint) but deep down inside I feel it surely should :)\r\n\r\n```python\r\n[(a,)for a in y]\r\n```\r\n\r\nMaybe something like \"expected spaces around keyword `for`\"?"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 604,
            "title": "Nested indents are not correctly validated",
            "labels": [],
            "description": "Indentation in nested structures such as\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n    'item1', 'item2', 'item3'])\r\n```\r\nare not marked as incorrect.\r\n\r\nEven though PEP8 doesn't explicitly states this case, it's clear conflict of two indentations - outer (function args) and inner (second argument).\r\n\r\nCorrectly should be aligned\r\n```python\r\nfoo(very_long_name_of_first_argument,\r\n    ['item1', 'item2', 'item3'])\r\n```\r\nor\r\n```python\r\nfoo(very_long_name_of_first_argument, [\r\n        'item1',\r\n        'item2',\r\n        'item3',\r\n    ])\r\n```"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 588,
            "title": "E201 not detected for tab instead of space",
            "labels": [],
            "description": "`printf 'foo(\\tbar)\\n' | pep8 -`\n\u2192 nothing detected\n\nwhile\n`printf 'foo( bar)\\n' | pep8 -`\ndetects stdin:1:5: E201 whitespace after '('\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 586,
            "title": "E101 wrong line detected",
            "labels": [],
            "description": "[E101.txt](https://github.com/PyCQA/pycodestyle/files/558374/E101.txt)\n\n```\n$ pep8  --max-line-length=220 --select E101 /tmp/E101.txt \n/tmp/E101.txt:10:1: E101 indentation contains mixed spaces and tabs\n```\n\nIt tells line 10 is wrong while the actually wrong lines are 2,3,5,6.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 582,
            "title": "E261 ignores tab/space mix",
            "labels": [],
            "description": "```\nprintf 'foo = \"bar\" \\t# comment\\n' | pep8 -\n```\n\nI expected the following output but got nothing:\n\n```\nstdin:1:12: E261 at least two spaces before inline comment\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 570,
            "title": "if and opening bracket without a space",
            "labels": [],
            "description": "Expanding on https://github.com/PyCQA/pycodestyle/issues/371#issuecomment-137404784 by @methane, the following are not flagged as erroneous:\n\n``` python\nif(1 == 2):\n    pass\n\nif[1, 2]:\n    pass\n\nif{1, 2}:\n    pass\n\nfor(a, b) in [(1, 2), (3, 4)]:\n    pass\n```\n\npep8 doesnt appear to clearly reject the first two (parentheses), however it goes against the recommendation of `if (` in the line continuation section.\n\ni.e. the following is not appropriate according to pep8, but it doesnt use extremely strong wording regarding this.\n\n``` python\nif(foo or\n        bar):\n    pass\n```\n\npep8 says:\n\"When the conditional part of an `if` -statement is long enough to require that it be written across multiple lines, it's worth noting that the combination of a two character keyword (i.e. `if` ), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional.  This can produce a visual conflict with the indented suite of code nested inside the if -statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the if -statement.  Acceptable options in this situation include, but are not limited to:\" _(and then it includes examples all containing_ `if (` _.)_\n\nThe `further` there indicates that the `if (` is expected, and of course the examples throughout all use `if (`.\nIronically pycodestyle does take an explicit position on further visually distinguishing subsequent lines. \n\nFor the unassigned data-structures, there is less in pep8 regarding whether they should be surrounded by space.  A single space is required around `=`, `:`, and `,`, and prevented when immediately inside a function call, so that addresses most cases of unassigned data-structures.  But it doesnt address when unassigned data-structures are used immediately near a keyword like `if` or `for`.\n\nI suspect some revision to the pep8 style guide is appropriate, but the fine people here can surely help bring other perspectives to this aspect of the style guide before trying to refine the style guide.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 531,
            "title": "Update (remove?) the GitHub project wiki",
            "labels": [],
            "description": "@SylvainDe [pointed out](https://github.com/PyCQA/pycodestyle/issues/518#issuecomment-223338961) in #518 that:\n\n> Also, wiki still has references to pep8 : https://github.com/PyCQA/pycodestyle/wiki . Not sure if better to  have one bug open to track all these issues or one bug per issue.\n\nThis made me think that perhaps the wiki content should be moved into other, better locations such as the pycodestyle docs themselves, and in the case of the related tools, possible the [PyCQA/meta](https://github.com/PyCQA/meta) repo which renders [here](http://meta.pycqa.org/en/latest/introduction.html)?\n\nAny objections to moving away from the wiki pages?\n\n/cc @sigmavirus24 \n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 506,
            "title": "Some better handling of error in the configuration file",
            "labels": [
                "needs patch"
            ],
            "description": "So, I have left some merge conflict markers in my `setup.cfg` and this how the pep8 (run through flake8) dealt with it:\n\n```\nConfigParser.py:546:_read:ParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nTraceback (most recent call last):\n  File \"/usr/bin/flake8\", line 9, in <module>\n    load_entry_point('flake8==2.0', 'console_scripts', 'flake8')()\n  File \"/usr/lib/python2.7/site-packages/flake8/main.py\", line 21, in main\n    flake8_style = get_style_guide(parse_argv=True, config_file=DEFAULT_CONFIG)\n  File \"/usr/lib/python2.7/site-packages/flake8/engine.py\", line 76, in get_style_guide\n    styleguide = StyleGuide(**kwargs)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1788, in __init__\n    arglist, parse_argv, config_file, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 2074, in process_options\n    options = read_config(options, args, arglist, parser)\n  File \"/home/matej/.local/lib/python2.7/site-packages/pep8.py\", line 1999, in read_config\n    if config.read(os.path.join(parent, fn) for fn in PROJECT_CONFIG):\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 305, in read\n    self._read(fp, filename)\n  File \"/usr/lib64/python2.7/ConfigParser.py\", line 546, in _read\n    raise e\nParsingError: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\n\nLocal variables in innermost frame:\nsectname: 'flake8'\ncursect: OrderedDict([('__name__', 'flake8'), ('ignore', ['E402,N806,N803,N802,E501']), ('tag_build', ['.dev']), ('tag_svn_revision', ['1'])])\ne: File contains parsing errors: /home/matej/archiv/knihovna/repos/m2crypto/setup.cfg\n    [line  2]: '<<<<<<< 642f88cb1b6027e184d9a662b255f7fea4d9eacc\\n'\n    [line  9]: '=======\\n'\n    [line 12]: '>>>>>>> Open trunk for 0.22.\\n'\nfpname: '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg'\nvi: '='\nmo: None\noptname: 'tag_svn_revision'\nfp: <open file '/home/matej/archiv/knihovna/repos/m2crypto/setup.cfg', mode 'r' at 0x2d07b70>\nlineno: 12\nline: ''\nself: <ConfigParser.RawConfigParser instance at 0x2d522d8>\noptval: '1'\n```\n\nIs the traceback really the best solution, couldn't we have some civilized way of dealing with errors?\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 480,
            "title": "Allow noqa for all line checks",
            "labels": [
                "needs patch"
            ],
            "description": "Up front, there has been a lot of discussion about this topic in issues (including but not limited to): #28 #180 #231 #376 #381 #472.\n\nWith the two largest types of responses having been: \"yes this definitely needs to be a feature\" and \"users should not add this much noise to their code\".\n\nI've thought about it quite a bit, and I believe that as a tool, it should be up to the user / developer to decide when it is appropriate to use these disables. Therefore I am creating this issue as a target to produce a pull request allowing noqa for any lines in a file / for all classes of errors, and will be closing the other issues which have (at least generally) not produced pull requests.\n\nNote that at a minimum, any pull request being considered should: pass all the tests, update the documentation accordingly, add no additional dependencies, and add no significant overhead to the performance of the code. With the stickiness of this issue, and the variety of feelings on the matter, expect that any proposed pull requests will likely get a good deal of scrutiny.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 785,
            "title": "Relax E127 with dictionary values: allow extra indent",
            "labels": [],
            "description": "Currently pycodestyle will complain about the following:\r\n\r\n```python\r\nmydict = {12345:\r\n              'foo'}\r\n```\r\n\r\n> t-61.py:2:15: E127 continuation line over-indented for visual indent\r\n\r\nWe are about to change this in https://github.com/Vimjas/vim-python-pep8-indent/pull/61, and there has been some discussion in https://github.com/python/peps/pull/113 - resulting in keeping this out of PEP8 itself (i.e. undefined).\r\n\r\nI think pycodestyle should handle this in a relaxed way, and allow for an extra indentation level for dictionary values (after `:` on the previous line)."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 458,
            "title": "Do not report E302 occurring on first logical line",
            "labels": [],
            "description": "67b8be8 introduced an exception for E302 if the\nfirst top level function or class was preceded\nwith only one comment line.\n\nPEP 263 explicitly allows for two lines of comments\nat the top of a module, in order to support a\nhash-bang and an encoding declaration.\n\nWhen the first top level function or class appears on the\nfirst logical line, i.e. preceded only by comments, E302\nshould not be reported as the pep8 utility typically\nignores comments appearing anywhere in the code being checked.\n\nFixes #412\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 457,
            "title": "PEP 8 Inspection over-generalizes blank lines around functions",
            "labels": [],
            "description": "PEP 8 only requires blank lines around \"top-level function and class definitions\" and \"method definitions inside a class\". However, pep8 marks any function without a line above it as failing the rule.\n\nThis is especially troublesome for functions that are inside other functions or methods, because they are often short and have no reason for a line above:\n\n``` python\ndef test():\n    def success_callback():  # no need for blank line above\n        print('Success! A wonderful thing has completed!')\n    def error_callback():  # no need for blank line above\n        print('Error! The entire program is crashing around us!')\n    run_async_function(success_callback, error_callback)\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 448,
            "title": "pep8 has conflicting definitions of a docstring",
            "labels": [],
            "description": "pep8 has\n- `DOCSTRING_REGEX` (used by `blank_lines`) which only allows `u` & `r` prefixes.  pep257 doesnt appear to exclude `b`, but it also doesnt explicitly mention it as allowed.\n- `is_string_literal` (used by `module_imports_on_top_of_file`) which strictly matches the Python 2 string prefix pattern that includes `u`, `r` & `b`\n\n`DOCSTRING_REGEX` dates back to 58a7812c, and the same rough restriction goes back to d8ee2baf in 2009.\n\n`is_string_literal` is from 2014 (1ee296bc).  I dont see any discussion on https://github.com/PyCQA/pep8/pull/304 regarding why `r` should now be appropriate for a docstring, and should be different from `blank_lines`.\n\nConsider\n\n``` python\nb\"\"\"foo\"\"\"\n\n# `blank_lines` uses DOCSTRING_REGEX, which only allows `u` & `r` prefixes\n\nimport sys\n\n\nclass Foo(object):\n\n    b\"\"\"Foo.\"\"\"\n    def blah(self):\n        pass\n\n    r\"\"\"Foo.\"\"\"\n    def baz(self):\n        pass\n\n    a = 1\n    r\"\"\"Foo.\"\"\"\n    def hmmm(self):\n        pass\n```\n\nOnly one pep8 result:\n\n```\ntest.py:11:5: E301 expected 1 blank line, found 0\n    def blah(self):\n    ^\n```\n\nFirstly, I have not found the part of pep8 which allows a docstring on the line preceding a function.\n\nQuite the opposite actually.  Regarding docstrings, pep8 does say \"This comment should appear after the def line.\"\n\nIf there is reason for docstrings on the preceding line, I then cant see why `b` should be excluded according to pep8, or pep257 if read as literally as seems very common around here, but of course it is very silly and should be excluded for common sense reasons, in both `blank_lines` and `module_imports_on_top_of_file`, and anywhere else relating to docstrings.\n\nAnd finally regarding this segment of the `blank_lines` code, allowing `a = 1` above is clearly a bug.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 438,
            "title": "Blank lines between methods definitions",
            "labels": [],
            "description": "In pep8.py is:\n\"Method definitions inside a class are separeted by a single blank line\"\n\nbut in https://www.python.org/dev/peps/pep-0008/ is\n\"Method definitions inside a class are surrounded by a single blank line.\"\n\nMaybe pep8 should work in different way in same cases:\n\n```\nclass LogsViewer(main.Main):\n                                                 #<- is this line needed?\n    def validate(self):\n        pass\n```\n\nbecause separated != surrounded\n\n**Updated because of misunderstanding** @doismellburning \n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 775,
            "title": "E303 too many blank lines (2)",
            "labels": [],
            "description": "quoting PEP 8 : \r\n\"_Surround top-level function and class definitions with two blank lines._\r\n\r\n_Method definitions inside a class are surrounded by a single blank line._\r\n\r\n_Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)._\"\r\n\r\nWhich may be usefull, for example, if you are used to split your function in really small unit accordingly to the SRP (and Clean Code book of Robert C. Martin).\r\n\r\nFor example if you have a snippet like this one, with a lot more of subfunction : \r\n\r\n\r\n```\r\nclass foo():\r\n    def usefull_function(self):\r\n        _sub_function_a()\r\n        _sub_function_b()    \r\n\r\n    def _sub_function_a(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_b(self):\r\n        #do_stuff\r\n\r\n\r\n    def other_function_with_subfunction(self):   # Two blank lines before this might be cleaner.\r\n        _sub_function_c()\r\n        _sub_function_d()\r\n\r\n    def _sub_function_c(self):\r\n        #do_stuff\r\n  \r\n    def _sub_function_d(self):\r\n        #do_stuff\r\n```\r\n\r\nThis snippet is here to give an example of why this can be used, but anyway, the PEP states it's ok.\r\n\r\n**Question :**\r\n- Should pycodestyle allow more blank lines that the recommandation (and not restriction)?\r\n\r\n**Options that could be implemented**\r\n- Selecting the number of exception to the recommandation that can be applied to a class (enhance the \"sparingly\" in the PEP8 quotation)\r\n- Selecting the max number of extra blank line before class, top-level function and method.\r\n\r\n**Pros :** \r\n- Real check of the PEP8.\r\n- Let you more option for clean code.\r\n\r\n**Cons :** \r\n- In the main use case, you want only one blank line before a def, and it will allow some wrong blank space to sneak in the code."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 432,
            "title": "Option --select=E901 works incorrectly if AST checking is enabled, e.g. via flake8",
            "labels": [],
            "description": "Option `--select=E901` works incorrectly when compilation is failed in `check_ast` method.\n\nIn this case error E901 is reported, but option `--select=E901` magically suppresses it.\nThis could be easily reproduced using, for example, `flake8` utility (which triggers `check_ast` call).\n\nConsider following sample file. It produces E901 error by `flake8` (by compile exception of type SyntaxError in `check_ast`):\n\n```\ndef f()\n    pass\n```\n\nBy default, we see syntax error with code E901 (and some other pep8 errors, which are filtered quite good by `--select`):\n\n```\ntest.py:1:7: E901 SyntaxError: invalid syntax\ntest.py:2:5: E113 unexpected indentation\n```\n\nAnd, if we wish to show only syntax errors via\n`flake8 --select=E901 <file>`, we will see NO errors at all. This is very-very frustrating. Errors filtering is implemented in `pep8` core, so `flake8` is irrelevant here (see https://gitlab.com/pycqa/flake8/issues/86 fir details)\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 412,
            "title": "Multiline comment before class at the beginning of file triggers E302",
            "labels": [],
            "description": "Possibly a duplicate of #174.\n\nI may be misunderstanding something, but I understood this to be fixed a while ago. I'm using pep8 1.5.7. If I begin a file with\n\n``` python\n# comment comment comment comment comment comment comment comment comment comment\nclass Foo(object):\n    pass\n```\n\nIt says there is no syntax error. But if I wrap it to:\n\n``` python\n# comment comment comment comment comment comment comment comment\n# comment comment\nclass Foo(object):\n    pass\n```\n\nI get \"E302 expected 2 blank lines, found 0\" for the \"class\" line.\n\nWas this fixed? Is there a config opt that turns it off? I couldn't find it in the docs.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 408,
            "title": "false positive: E122 continuation line missing indentation or outdented",
            "labels": [],
            "description": "It seems there's a false positive for E122.\n\nConsider the following snippet\n\n``` python\n# pep8test.py\ndef foo(bar):\n    pass\n\n# valid:\n{\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n# valid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n}\n\n# valid:\n{\n    'time_london':\n        'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello',\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n\n\n# invalid:\n{\n    'time_london':\n        foo('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhello'),\n    'title': (\n        'Brixton Summer Solstice Roof Party 2015 With DJ Kon'\n        ' (3 Hr Sunset Set)'\n    ),\n}\n```\n\nWhen running pep8 I get:\n\n```\npep8test.py:37:5: E122 continuation line missing indentation or outdented\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 758,
            "title": "E127: bugs?",
            "labels": [],
            "description": "New to Python, so sorry if I missed something, but E127 gives me trouble on two (probably related) occasions:\r\n\r\n### continuing a statement after backslash\r\n```\r\nassert self.foobar in ['bar', 'baz', 'befoozle'], \\\r\n        'Invalid foobar: {0}'.format(self.foobar)\r\nif demo:\r\n    normal_indent = 4 * space\r\n```\r\nHere, the continuation of ``assert`` is double-indented, in line with the usual practice of distinguishing indents due to breaks from those that follow program logic (as also discussed in PEP8 with slightly different examples). Is there a good reason ``pycodestyle`` doesn't like this (E127)?\r\n\r\n### aligning operators after backslash\r\n```\r\nself.foozle_timeout = max(self.foozles_left, 1) * foozle_time \\\r\n                      + self.foozle_tolerance\r\n```\r\nI understand that PEP8 recommends using parentheses/brackets/braces when possible, eliminating the need of a backslash. But still, it seems wrong that this is turned down (it follows the same operator alignment as in the PEP8 Knuth discussion, but without parentheses). If ``pycodestyle`` really wants to insist on using parentheses instead of a backslash here, it should do so explicitly, not by issuing E127.\r\n\r\nEDIT: Maybe I don't strictly have a cause to complain in the second issue, as this type of \"visual\" indent is discussed in PEP8 only in the context of aligning with opening delimiters. But I am not certain it should be forbidden, and the first issue seems unaffected."
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 403,
            "title": "\"E262 inline comment should start with '# '\" even though inline comment does start with '# '",
            "labels": [],
            "description": "to reproduce:\n\n```\n$ echo 'l = 1  #  foobar' | pep8 -\nstdin:1:8: E262 inline comment should start with '# '\n```\n\nThough evidently, the inline comment does start with `#` (hash followed by a space).\n\nPep8 itself also does not forbid an inline comment to have two spaces before the actual text starts.\n\nMy actual use case for starting an inline comment with two spaces after the hash are a snippet like the following:\n\n```\nl = [\n    \"foo\",  #  1\n    \"bar\",  #  2\n    ...\n    \"baz\",  # 10\n    ...\n]\n```\n\nThis is a minimal example which should demonstrate that allowing an inline comment with two leading spaces is useful in case one wants to right-align numbers. Having each line commented like above is useful because in case an error happens, the error will point out the element in the list from where the error originated. Since the list is several hundred elements long and its elements are not just simple strings as above, the comments make it easier to find the right element.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 396,
            "title": "Allow \"empty\" file to have a \\n character",
            "labels": [],
            "description": "W292 and W391 are conflicting when it comes to \"empty\" files. Normally empty files are not that useful. However in Python, it's often useful to have an empty `__init__.py` to declare a folder as a package without necessarily putting any logic there (In a perfect world those file would contain a docstring).\n\nWe could debate whether or not an \"empty\" file should contain a `\\n` or not. However, I don't see any real practical implication and think pep8 should simply accept both.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pycodestyle",
            "id": 391,
            "title": "Variable-length encoding (like UTF-8) confuses E128",
            "labels": [],
            "description": "E128 gets confused with variable-lenght (with multi-byte) encoding, such as UTF-8. Using a multi-byte character makes PEP8 return an E128 warning of under-indent. Tests show that it expects one more space for each multi-byte character, consistent with UTF-8 double-bytes for the extended I'm using.\n\nApparently PEP8 is either ignoring the shebang line or using len() directly with UTF-8 string without converting to unicode first (even with the 'u' prefix).\n\nExample `pep8utf8.py`:\n\n``` python\n# -*- coding: utf-8 -*-\n_EPSILON = {'pressao': {'psig': 1,\n                        'kPag': 5},  # No error here\n            'press\u00e3o': {'psig': 1,\n                        'kPag': 5},  # Error\n            }\n\n```\n\nRunning `pep8 --show-source pep8utf8.py` yields:\n\n```\npep8utf8.py:5:25: E128 continuation line under-indented for visual indent\n                        'kPag': 5},  # Error\n                        ^\n```\n\n**Note 1:** I have tried using unicode strings, but the error is still there.\n**Note 2:** Python 2.7.6 |Anaconda 2.1.0 (32-bit)| (default, Nov 11 2013, 10:50:31) [MSC v.1500 32 bit (Intel)] on win32\n"
        }
    ],
    "PyCQA/pydocstyle": [
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 189,
            "title": "Allow special handling of __init__ methods",
            "labels": [],
            "description": "When rendering documentation using [Sphinx autodoc](http://www.sphinx-doc.org/en/stable/ext/autodoc.html), the `__init__` method is handled in a special way. The way it is handled depends on the value of [`autoclass_content`](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#confval-autoclass_content).\n\nConsider the following simple class:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nIf `autoclass_content` is set to `both`, this seems very legitimate. However, `pep257` complains about this:\n\n```\n$ pep257 spam.py \nspam.py:17 in public method `__init__`:\n        D400: First line should end with a period (not ':')\nspam.py:17 in public method `__init__`:\n        D205: 1 blank line required between summary line and description (found 0)\n```\n\nInstead, `autoclass_content` can be set to `class` and everything can be moved into the class docstring.\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    Args:\n        bar: the bar to handle using foo.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        ...\n```\n\nBut this will trigger the following warning:\n\n```\nspam.py:20 in public method `__init__`:\n        D102: Missing docstring in public method\n```\n\nAnd the last variant:\n\n``` py\nclass Foo:\n    def __init__(self, bar):\n        \"\"\"\n        A class for handling all sorts of foos and bars.\n\n        Because foos and bars are complicated enough.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\ntriggers this:\n\n```\n$ pep257 spam.py \nspam.py:9 in public class `Foo`:\n        D101: Missing docstring in public class\n```\n\nAs a workaround I've applied this:\n\n``` py\nclass Foo:\n    \"\"\"\n    A class for handling all sorts of foos and bars.\n\n    Because foos and bars are complicated enough.\n\n    \"\"\"\n\n    def __init__(self, bar):\n        \"\"\"\n        Initialize the foo.\n\n        Args:\n            bar: the bar to handle using foo.\n\n        \"\"\"\n```\n\nBut I think that's simply very ugly.\n\nI think `__init__` should not be treated as a magic or public method, but as a separate use case.\n\nAdditionally I think it makes sense to add a rule to forbid a docstring on `__init__` methods. This makes sense when using the `class` value for `autoclass_content`, which is the default.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 274,
            "title": "Automatic inheritance of docstrings",
            "labels": [],
            "description": "I am using [custom_inherit](https://github.com/meowklaski/custom_inherit) package to automatically inherit docstrings. It would be great if pydocstyle could somehow detect that and not issue a D102 error on such methods.\r\n\r\nI think this could be done by some simple heuristic and configuration:\r\n* allowing to specify a list of decorators, which if they are applied to a method make D102 not be made\r\n* allow to list name of a base class/metaclass used, and if it is used, D102 is not made\r\n\r\nThis might be simpler than #185 and would require only a basic check without really do dynamic analysis of the code."
        },
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 252,
            "title": "Include documentation and tests in source distribution",
            "labels": [],
            "description": "This will make the source distribution on PyPI (e.g.: [pydocstyle-2.0.0.zip](https://pypi.python.org/packages/b0/33/52e2fa5662fbb2a8bc9bdfe31327cd58c2f856b31851b73fc5baf86a2a14/pydocstyle-2.0.0.zip#md5=2be57712e2743d23949bafed957d8c86)) complete and stand-alone.\r\n\r\nAlso, this would be very useful for distribution packages of pydocstyle since one could run the tests against the currently installed version of pydocstyle while building the package.\r\n\r\nIn addition, one could also build and include the documentation if desired.\r\n\r\nFor a wider perspective, see [my Fedora review request for pydocstyle](https://bugzilla.redhat.com/show_bug.cgi?id=1409654)."
        },
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 229,
            "title": "Add check for 79 character line length",
            "labels": [],
            "description": "This is a pull request from #228 \r\n\r\nThis is really a PEP8 conformance, and even then this isn't checking strict conformance (72 character doc strings), but I thought maybe 79 character length strings wouldn't be to controversial."
        },
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 282,
            "title": "Update index.rst documentation",
            "labels": [],
            "description": "Update documentation"
        },
        {
            "repo_url": "https://github.com/PyCQA/pydocstyle",
            "id": 117,
            "title": "Command line argument to specify config file",
            "labels": [
                "Hacktoberfest",
                "Minor (New Feature)"
            ],
            "description": "It would be nice to be able to select a config file via a command argument. A feature like this exists for pep8 so something similar would be nice.\n"
        }
    ],
    "PyCQA/pyflakes": [
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 370,
            "title": "Detect broken string interpolation and formatting",
            "labels": [],
            "description": "Verify simple cases, such as: `\"%s: %s\" % (foo, bar, baz)` and `\"{foo}: {bar}\".format(foo=\"foo\", baaar=\"baz\")`. \r\n\r\nThis is done by asking Python to do the formatting, filling in the arguments with dummy objects.\r\n\r\nThe testing for `.format` string is skipped for Python3 but should be rather easy to add; I want to get an idea of whether you like the current approach first.\r\n\r\nResolves #148 "
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 175,
            "title": "False positive undefined name after del in branch",
            "labels": [
                "help wanted",
                "bug"
            ],
            "description": "\n*Original report by [dimaqq](https://launchpad.net/~dimaqq) (@dimaqq?) on [Launchpad](https://bugs.launchpad.net/bugs/1308508):*\n\n------------------------------------\n\nConsider this test code:\n\n```python\ndef foo():\n    bar = 1\n    if 0:\n        del bar\n    else:\n        del bar\n```\n\npyflakes reports test.py:6: undefined name 'bar', that is 2nd `del bar` is considered in error.\n\nunderstandably it is impossible to analyse all code paths in general case, so how about tagging `bar` as `uncertain if label is present` and allowing to `del` it?\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 249,
            "title": "global/local syntax errors not caught",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1590549):*\n\n------------------------------------\n\nThis is perhaps a bit obscure, but here's a class of syntax errors that aren't caught by pyflakes\n\n```\n$ cat test.py\ndef test(x):\n    global x\n$ pyflakes test.py\n$ python test.py\n  File \"test.py\", line 2\n    global x\nSyntaxError: name 'x' is parameter and global\n```\n\nI'm unsure what the full set of possible errors are here. One would need to check the Python source. I know there are some others relating to the Python 3 \"nonlocal\" keyword as well.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 267,
            "title": "finds mangled globals and freevars undefined/unused",
            "labels": [
                "help wanted",
                "bug"
            ],
            "description": "\n*Original report by [tagrain](https://launchpad.net/~tagrain) on [Launchpad](https://bugs.launchpad.net/bugs/1675153):*\n\n------------------------------------\n\n*Please describe how you installed Flake8*\n\nExample:\n\n```\npython3 -m venv ~/.virtualenvs/flake8\nworkon flake8\npip install -U pip setuptools wheel\npip install flake8 flake8-commas\n```\n\n*Please provide the exact, unmodified output of `flake8 --bug-report`*\n\nnah\n\n*Please describe the problem or feature*\nflake8 thinks that mangled globals or freevars are undefined in:\n\n```python\ndef _Ham__spam(value):\n     value + ' yes mangling really works like this'\n\nclass Ham:\n     def foo(self, value):\n        return __spam(value)\n```\n\n*If this is a bug report, please explain with examples (and example code) what you expected to happen and what actually happened.*\n\nI expected __spam to be considered defined, because it is.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 222,
            "title": "--exclude flag to the command line",
            "labels": [],
            "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1481052):*\n\n------------------------------------\n\nI know that pyflakes doesn't want to add support for excluding errors inside of scripts, but would you be open to adding the --exclude flag to the pyflakes command to exclude files? My situation is this. I want to run pyflakes automatically in the test suite (on Travis CI). However, there are some files that should be ignored (e.g., a compat.py file with a bunch of Python 2/3 compatibility importat that pyflakes gives a bunch of unused import and undefined name warnings for, and a bundled library that uses * imports, but which I'd rather just leave alone).  I tried using extended globbing in bash, but it seems it's not so easy to mix multiple !() globs, even with globstar enabled. Anyway, I couldn't figure out how to do it.\n\nI know I can use flake8, but it seems that flake8 --select=F doesn't actually include all pyflakes errors (like syntax errors).  I also kind of want to avoid flake8 just to reduce the temptation to test for pep8 errors. \n\nWould it be OK to add --exclude, like flake8 and pep8, which excludes files or directories, to the flake8 command? The --exclude flag in flake8/pep8 accepts a comma separate list of values, which seems kind of dumb to me (it makes more sense to just accept files from the command line, like \"pyflakes --exclude compat.py stuff/\", which could then be globbed), but I'm OK with keeping it that way if cross-compatibility is a concern.\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 137,
            "title": "Missing import warnings when importing fully-qualified modules",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "*Original report by [gward](https://launchpad.net/~gward) (@gward?) on [Launchpad](https://bugs.launchpad.net/bugs/1421013):*\r\n\r\n------------------------------------\r\n\r\nImporting modules using fully-qualified paths appears to confuse pyflakes. Example 1:\r\n\r\n```\r\n$ cat pyflakes-missed-unused-import.py\r\nimport somepackage.mod1\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-unused-import.py\r\n```\r\n\r\nExpected output: an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n\r\nExample 2:\r\n\r\n```\r\n$ cat pyflakes-missed-missing-import.py\r\nimport somepackage.mod2\r\n\r\ndef do_something():\r\n    somepackage.mod1.do_something()\r\n\r\n$ pyflakes pyflakes-missed-missing-import.py\r\n```\r\n\r\nExpected output: a \"missing import\" error about somepackage.mod1 *and* an \"unused import\" warning about somepackage.mod2.\r\n\r\nActual output: no errors or warnings.\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 110,
            "title": "inconsistent redefinition complaint, despite 'del'",
            "labels": [
                "help wanted",
                "bug"
            ],
            "description": "\n*Original report by [warner](https://launchpad.net/~warner) (@warner?) on [Launchpad](https://bugs.launchpad.net/bugs/1461208):*\n\n------------------------------------\n\nWith the new pyflakes-0.9.0, and python-2.7.10, the following program:\n\n```python\nif 1:\n    name = 1   # line 2\n    del name\n    [ name for name in [] ]  # line 4\n\nother = 1  # line 6\ndel other\n[ other for other in [] ]  # line 8\n```\n\nreports:\n\n /tmp/pf.py:4: list comprehension redefines 'name' from line 2\n\nI see two problems:\n\n* the 'del name' on line 3 should probably prevent the warning. (this sample\n  is a stripped-down version of a larger file, in which I added the 'del\n  name' to hush an earlier pyflakes complaint)\n\n* the same pattern on lines 6+8 was not reported, the only difference being\n  that it occurred at the top-level scope and not in a function scope.\n\nthanks!\n -Brian\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pyflakes",
            "id": 153,
            "title": "[Feature] Add hosted docs",
            "labels": [],
            "description": "\n*Original report by [icordasc](https://launchpad.net/~icordasc) (@sigmavirus24?) on [Launchpad](https://bugs.launchpad.net/bugs/1113692):*\n\n------------------------------------\n\nGiven that pyflakes now has an API, it might be worthwhile to add documentation somewhere and since you're already hosting the source on GitHub, ReadTheDocs is an option.\n"
        }
    ],
    "PyCQA/pylint": [
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2436,
            "title": "False positive E1130 invalid-unary-operand-type for Numpy array",
            "labels": [
                "astroid",
                "bug"
            ],
            "description": "Pylint emits a false positive E1130 invalid-unary-operand-type error for Numpy arrays:\r\n```\r\nimport numpy as np\r\na = np.array([1, 2])\r\nb = -a\r\n```\r\nActually, in this case, it emits two:\r\n```\r\n$ pylint test.py  -E\r\n************* Module test\r\ntest.py:3:4: E1130: bad operand type for unary -: recarray (invalid-unary-operand-type)\r\ntest.py:3:4: E1130: bad operand type for unary -: list (invalid-unary-operand-type)\r\n```\r\n\r\nThis is not just for np.array, I get a similar false positive for np.atleast_1d, which also returns Numpy arrays. But np.array is super common in scientific Python projects.\r\n\r\n```\r\n$ pylint --version\r\npylint 2.2.0\r\nastroid 2.0.4\r\nPython 3.6.0 | packaged by conda-forge | (default, Feb 10 2017, 07:08:35) \r\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]\r\n```\r\n\r\nThis issue was already mentioned in #1472 and #1497 , but @PCManticore you suggested to split out a new issue with a simple test case that doesn't involve flow control in https://github.com/PyCQA/pylint/issues/1472#issuecomment-355814591 , so there you have it.\r\n\r\n:-)\r\n\r\nThanks for all your work on pylint, it's a huge help!"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2416,
            "title": "unsubscriptable-object error reported incorrectly",
            "labels": [
                "bug"
            ],
            "description": "### Steps to reproduce\r\nRun Pylint on the following code:\r\n```python\r\nfrom typing import Generic, TypeVar\r\n\r\nT = TypeVar(\"T\")\r\n\r\nclass Test(Generic[T]):  # error is reported here\r\n    pass\r\n```\r\n\r\n### Current behavior\r\nPylint reports the following error:\r\n```E1136: Value 'Generic' is unsubscriptable (unsubscriptable-object)```\r\n\r\n### Expected behavior\r\nNo error should be reported. Python documentation for [`Generic`](https://docs.python.org/3/library/typing.html#typing.Generic) explicitly lists use cases where `Generic` is subscripted.\r\n\r\n### pylint --version output\r\n```\r\n$ pylint --version\r\npylint 2.1.1\r\nastroid 2.0.4\r\nPython 3.7.0 (default, Jun 27 2018, 14:40:03) \r\n[GCC 8.1.0]\r\n```\r\n\r\nThis issue is *not* reproducible with Python 3.6. Might be related to issue #2377, which is only reproducible with Python 3.6."
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1173,
            "title": "Disable module inspection for specific platforms",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "It is often the case that the inspection of a file does only make sense on a certain platform.\r\n\r\nMy suggestion would be\r\n```\r\n# pylint: skip-if(platform=='win32')\r\n```\r\nand for block control:\r\n```\r\n# pylint: disable-if(platform=='win32')=no-member\r\n```"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1110,
            "title": "No emit message in \"missing whitespace around operator\"",
            "labels": [
                "help wanted",
                "minor"
            ],
            "description": "### Steps to reproduce\n1. Use the following code `var = 3+0`\n2. Run `flake8 --show-source --select=E226 file.py`\n3. See the outuput: `file.py:1:6: E226 missing whitespace around arithmetic operator`\n4. Run `pylint -d invalid-name,missing-docstring file.py`\n### Current behaviour\n\nNot emit messages.\n### Expected behaviour\n\nShould we emit the message of `missing whitespace around operator`?\n### pylint --version output\n\n``` bash\npylint 1.6.4,\nastroid 1.4.8\nPython 2.7.10 (default, Oct 23 2015, 19:19:21)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 654,
            "title": "Add new checks for the new coroutines added in PEP 492 and Python 3.5",
            "labels": [
                "contributor friendly",
                "enhancement",
                "help wanted"
            ],
            "description": "Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**\r\n\r\n---\r\n\r\nWould be useful to have some of these at least:\r\n1. await accepts only an awaitable\r\n2. type error if **await** returns anything else than an iterator\r\n3. syntax error if await is used outside of an async def\r\n4. **aenter** and **aexit** must return an awaitable\r\n5. syntax error to use async with out side of async def\r\n6. error to pass an object without **anter** and **aexit** to async with\r\n\r\nSimilar to for async for.\r\n\r\n---\r\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/654\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 566,
            "title": "--class description should tell about relative/absolute class name",
            "labels": [
                "topic-pyreverse",
                "help wanted",
                "bug"
            ],
            "description": "Originally reported by: **space one (BitBucket: [spaceone](http://bitbucket.org/spaceone), GitHub: @spaceone?)**\n\n---\n\nOtherwise one have to deal with\n\n```\nTraceback (most recent call last):\n  File \"/usr/bin/pyreverse2\", line 9, in <module>\n    load_entry_point('pylint==1.4.3', 'console_scripts', 'pyreverse')()\n  File \"/usr/lib/python2.7/site-packages/pylint/__init__.py\", line 41, in run_pyreverse\n    Run(sys.argv[1:])\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 98, in __init__\n    sys.exit(self.run(args))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/main.py\", line 112, in run\n    diadefs = handler.get_diadefs(project, linker)\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 228, in get_diadefs\n    diagrams.append(generator.class_diagram(project, klass))\n  File \"/usr/lib/python2.7/site-packages/pylint/pyreverse/diadefslib.py\", line 196, in class_diagram\n    module, klass = klass.rsplit('.', 1)\nValueError: need more than 1 value to unpack\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/566\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 841,
            "title": "false redefined-outer-name when using `del`",
            "labels": [
                "minor"
            ],
            "description": "simple test code:\n\n```\npath = __file__\ndel path\ndef some_func_of_mine(path):\n    print(path)\n```\n\ntesting pylint-1.5.4 shows:\n\n```\n$ pylint test.py\nW:  3,22: Redefining name 'path' from outer scope (line 1) (redefined-outer-name)\n```\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2517,
            "title": "Building the documentation requires Internet access",
            "labels": [
                "documentation",
                "task"
            ],
            "description": "The Debian package should build the pylint documentation. The package build should be reproducible and does not have Internet access. Following command is run:\r\n\r\n```\r\nmake -C doc html\r\n```\r\n\r\nThe html target will call `pip install python-docs-theme` which will fail without Internet access.\r\n\r\nPlease either check for the presence of the python-docs-theme (or allow skipping this part)."
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1990,
            "title": "Add `isinstance` in `if` condition check as a special case",
            "labels": [
                "topic-control-flow"
            ],
            "description": "### Steps to reproduce\r\n1. Write this simple code and save it:\r\n```\r\nimport subprocess\r\n\r\ntry:\r\n    subprocess.check_call(['ls', '-']) # Deliberately made error in this line\r\nexcept Exception as err:\r\n    if isinstance(err, subprocess.CalledProcessError):\r\n        print 'Subprocess error occured. Return code:', err.returncode\r\n        # Error in above line.......................here^^^\r\n    else:\r\n        print 'An error occured:', str(err)\r\n```\r\n2. Run `pylint` on this file.\r\n3. Output of Pylint:\r\n```\r\n$ pylint pylint_test.py \r\nNo config file found, using default configuration\r\n************* Module pylint_test\r\nC:  1, 0: Missing module docstring (missing-docstring)\r\nW:  5, 7: Catching too general exception Exception (broad-except)\r\nE:  7,56: Instance of 'Exception' has no 'returncode' member (no-member)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 0.00/10 (previous run: 2.86/10, -2.86)\r\n```\r\n\r\n### Current behavior\r\nI is showing Error in line: 7 which should not be an error.\r\n\r\n### Expected behavior\r\nIt should not show Error in line-7 as I am already checking if `err` is an instance of `subprocess.CalledProcessError` which has member `returncode`.\r\n\r\n### pylint --version output\r\n```\r\nNo config file found, using default configuration\r\npylint 1.8.3, \r\nastroid 1.6.2\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609]\r\n```\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1943,
            "title": "Wrong hanging indentation with context managers",
            "labels": [
                "bug"
            ],
            "description": "###` Steps to reproduce\r\n1. Write an example code:\r\n```\r\nwith context(\r\n        f('adwa')):\r\n    print('adwad')\r\n```\r\n2. run pylint on this code\r\n\r\n### Current behavior\r\nPylint throws:\r\n```\r\nC:  2, 0: Wrong hanging indentation (remove 4 spaces).\r\n        f('adwa')):\r\n    |   ^ (bad-continuation)\r\n```\r\n### Expected behavior\r\nThere should not by any error. \r\nIn the example pylint conflicts with tools like pep8 or pycodestyle (for those this behaviour is expected).\r\nsource: https://www.python.org/dev/peps/pep-0008/#indentation\r\n### pylint --version output\r\nNo config file found, using default configuration\r\n```\r\npylint 1.8.1,\r\nastroid 1.6.1\r\nPython 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]\r\n```\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2293,
            "title": "Add configuration to promote/demote severity of messages",
            "labels": [
                "enhancement"
            ],
            "description": "<!--\r\n  Hi there! Thank you for wanting to make pylint better.\r\n\r\n  Before you submit this, make sure that this feature wasn't\r\n  already requested or if it is not already implemented in the master branch.\r\n-->\r\n\r\n### Status Quo\r\nCurrently you can disable specific messages or severity classes (error, warning, refactor, convention), so to do pylint runs of various stringency, you could do one of \r\n\r\n* `pylint -E ...`\r\n* `pylint --disable=R,C,W ....`\r\n* `pylint --disable=R,C ...`\r\n\r\nHowever, if you have a style guide that might mean one of the \"convention\" messages is a must-do, then you need to disable all the others, then you can bit-OR the exit code to fail a build on the refactor bit being set. Alternatively, parse the output (ick).\r\n\r\n### Desired feature\r\nAdd a configuration where you can map message codes/names to severity level. \r\n\r\nFor instance, if I say something like `C0303=E` or `trailing-whitespace: error`, and run pylint, even if there are no \"true\" error messages, a C0303 message would cause the exit code to have a 2 in it.\r\n\r\n### Help\r\nI'd be willing to take a stab at a patch, but I'm also not sure if it could be done in a plugin just as well? I'm having some trouble figuring out how. The docs point me towards a learning cliff: \"In general, a plugin is a module which should have a function `register`, which takes an instance of `pylint.lint.PyLinter` as input.\", but even looking at the class spec it's not immediately obvious how to hook into it. Are there docs for that I'm not finding or simple (but non-trivial) plugins for example?"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1887,
            "title": "Add the man page generation back in",
            "labels": [
                "topic-per-directory-config",
                "help wanted"
            ],
            "description": "Currently is has been stripped out to make the LongHelp classes work, but it needs to be added back in."
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1727,
            "title": "used-before-assignment (E0601) not working",
            "labels": [
                "topic-control-flow",
                "bug"
            ],
            "description": "Running pylint on this simple example does not detect that x can be used before assignment.  This is a very common programming mistake and should be caught.\r\n```\r\ndef Afunction(d):\r\n    if d:\r\n        x=1\r\n    return x\r\n```\r\n\r\n### Current behavior - Fails to detect x is used before assignment\r\n\r\n\r\n### Expected behavior: detect variable use inside logic branches. \r\n\r\n\r\n### pylint --version output: pylint-2 1.7.4\r\n\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1694,
            "title": "decorator false positive: unsubscriptable-object, no-member, unsupported-membership-test, not-an-iterable, too-many-function-args",
            "labels": [
                "enhancement",
                "bug"
            ],
            "description": "### Steps to reproduce\r\nI use simple classproperty decorator:\r\n```python\r\nclass classproperty(classmethod):\r\n\r\n    def __init__(self, fget):\r\n        if isinstance(fget, (classmethod, staticmethod)):\r\n            self.fget = lambda cls: fget.__get__(None, cls)()\r\n        else:\r\n            self.fget = fget\r\n        self.cached = {}\r\n        super(classproperty, self).__init__(self.fget)\r\n\r\n    def __get__(self, instance, cls):\r\n        if cls in self.cached:\r\n            return self.cached[cls]\r\n        value = self.cached[cls] = self.fget(cls)\r\n        return value\r\n\r\n```\r\n\r\nExample of usages:\r\n```python\r\nfrom collections import OrderedDict\r\n\r\nfrom sqlalchemy.ext.declarative import declarative_base, declared_attr\r\nfrom sqlalchemy.inspection import inspect\r\n\r\nBase = declarative_base()\r\n\r\nclass Model(Base):\r\n    __abstract__ = True\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Model, self).__init__()\r\n        self.set_attrs(**kwargs)\r\n\r\n    def set_attrs(self, **attrs):\r\n        for attr_name, attr_value in attrs.items():\r\n            if attr_name in self.fields:\r\n                setattr(self, attr_name, attr_value)\r\n\r\n    def to_dict(self):\r\n        result = {}\r\n        for attr_name in self.fields:\r\n            attr_value = getattr(self, attr_name)\r\n            if attr_value is not None:\r\n                result[attr_name] = attr_value\r\n        return result\r\n\r\n    @declared_attr\r\n    def __tablename__(cls):\r\n        # pylint: disable=no-self-argument\r\n        return plural(decapitalize(cls.__name__))\r\n\r\n    @classproperty\r\n    def columns(cls):\r\n        columns = inspect(cls).mapper.column_attrs\r\n        columns = list(sorted(columns, key=lambda column: column.key))\r\n        return columns\r\n\r\n    @classproperty\r\n    def fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.columns])\r\n        return fields\r\n\r\n    @classproperty\r\n    def primary_key_columns(cls):\r\n        columns = list(inspect(cls).mapper.primary_key)\r\n        return columns\r\n\r\n    @classproperty\r\n    def primary_key_fields(cls):\r\n        fields = OrderedDict([(column.key, getattr(cls, column.key))\r\n                              for column in cls.primary_key_columns])\r\n        return fields\r\n\r\n```\r\n\r\n### Current behavior\r\nThere are a lot of false positive errors:\r\n\r\n```bash\r\n[E1135(unsupported-membership-test), Model.set_attrs] Value 'self.fields' doesn't support membership test\r\n[E1133(not-an-iterable), Model.to_dict] Non-iterable value self.fields is used in an iterating context\r\n[E1133(not-an-iterable), Model.fields] Non-iterable value cls.columns is used in an iterating context\r\n[E1133(not-an-iterable), Model.primary_key_fields] Non-iterable value cls.primary_key_columns is used in an iterating context\r\n````\r\n\r\n### Expected behavior\r\nIf I make interface class where declare expected value the errors are not raised:\r\n```python\r\n\r\nclass iface(object):\r\n    columns = ()\r\n    fields = {}\r\n    primary_key_columns = ()\r\n    primary_key_fields = {}\r\n\r\nclass Model(Base, iface):\r\n    # ...\r\n```\r\nExpected behavior: no false-positive errors\r\n\r\n### pylint --version output\r\npylint 1.7.4, \r\nastroid 1.5.3\r\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \r\n[GCC 5.4.0 20160609]\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 458,
            "title": "unable to locally disable warning in finally clause",
            "labels": [
                "bug"
            ],
            "description": "Originally reported by: **Mike Frysinger (BitBucket: [vapier](http://bitbucket.org/vapier), GitHub: @vapier?)**\n\n---\n\nsimple code:\n\n```\n#!python\nimport os\ntry:\n    pass\nfinally:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n\nwhen running pylint (1.4.1) against this, it insists on warning:\n\n```\nW:  9, 4: Access to a protected member _exit of a client class (protected-access)\n```\n\nother positions that do work:\n- changing the \"finally:\" clause to \"except:\"\n\n```\nimport os\ntry:\n    pass\nexcept:\n    # pylint: disable=protected-access\n    os._exit(1)\n```\n- moving it up a scope level to before the \"try:\" statement\n\n```\nimport os\n# pylint: disable=protected-access\ntry:\n    pass\nexcept:\n    os._exit(1)\n```\n- making it inline\n\n```\nimport os\ntry:\n    pass\nexcept:\n    os._exit(1)  # pylint: disable=protected-access\n```\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/458\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 1581,
            "title": "unused-argument, pointless-statement, and function-redefined with recommended use of typing.overload",
            "labels": [
                "enhancement"
            ],
            "description": "### Code to reproduce\r\n```\r\n# pylint: disable=missing-docstring\r\n\r\nimport typing\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: str) -> str:\r\n    \"\"\"Return arg, concatenated with itself.\"\"\"\r\n\r\n\r\n@typing.overload\r\ndef double_with_docstring(arg: int) -> int:\r\n    \"\"\"Return twice arg.\"\"\"\r\n\r\n\r\ndef double_with_docstring(arg):\r\n    \"\"\"Return 2 * arg.\"\"\"\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: str) -> str:\r\n    ...\r\n\r\n\r\n@typing.overload\r\ndef double_with_ellipsis(arg: int) -> int:\r\n    ...\r\n\r\n\r\ndef double_with_ellipsis(arg):\r\n    return 2 * arg\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: str) -> str:\r\n    pass\r\n\r\n\r\n@typing.overload\r\ndef double_with_pass(arg: int) -> int:\r\n    pass\r\n\r\n\r\ndef double_with_pass(arg):\r\n    return 2 * arg\r\n```\r\n\r\n### Current behavior\r\n```\r\nW:  7,26: Unused argument 'arg' (unused-argument)\r\nE: 12, 0: function already defined line 7 (function-redefined)\r\nW: 12,26: Unused argument 'arg' (unused-argument)\r\nE: 16, 0: function already defined line 7 (function-redefined)\r\nW: 23, 4: Statement seems to have no effect (pointless-statement)\r\nW: 22,25: Unused argument 'arg' (unused-argument)\r\nE: 27, 0: function already defined line 22 (function-redefined)\r\nW: 28, 4: Statement seems to have no effect (pointless-statement)\r\nW: 27,25: Unused argument 'arg' (unused-argument)\r\nE: 31, 0: function already defined line 22 (function-redefined)\r\nW: 36,21: Unused argument 'arg' (unused-argument)\r\nE: 41, 0: function already defined line 36 (function-redefined)\r\nW: 41,21: Unused argument 'arg' (unused-argument)\r\nE: 45, 0: function already defined line 36 (function-redefined)\r\n```\r\n\r\n\r\n### Expected behavior\r\nThe first form, which uses docstrings (sadly only visible in the code) to describe the specific overload, should be equivalent to the version with pass, and is included for completeness.\r\n\r\nThe [mypy documentation](http://mypy.readthedocs.io/en/latest/function_overloading.html) recommends using a `pass` statement in the body of overloads, while the [typing module documentation](https://docs.python.org/3/library/typing.html#typing.overload) uses `...`.\r\n\r\nIn either case, it seems to me that the expected behavior/context of a function decorated with `typing.overload` should be that it returns None and has no side effects, and it should later be overridden.\r\n\r\nIf possible, it may be worth including a message for uses of an overloaded function before it is overridden, because that will error at runtime.\r\n\r\nThings I'm not sure about: Are full annotations required on each definition? Should there be a message for only one overloaded version? The mypy documentation annotates the actual implementation (with unions of all the relevant types), the Python documentation does not, and both appear acceptable to mypy from the testing that led me to this issue; should pylint care?\r\n\r\n\r\n### pylint --version output\r\n```\r\npylint 1.7.2,\r\nastroid 1.5.3\r\nPython 3.6.2 (default, Jul 17 2017, 16:44:45)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]\r\n```\r\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 392,
            "title": "Type inference failure",
            "labels": [
                "topic-control-flow",
                "bug"
            ],
            "description": "Originally reported by: **Thanassis Tsiodras (BitBucket: [ttsiodras](http://bitbucket.org/ttsiodras), GitHub: @ttsiodras?)**\n\n---\n\nDisappointed by typos in my code that trigger errors at runtime (related to sqlalchemy reflected types), I decided to check whether I can do something better on my own, using pylint to limit the damage. \n\nThe beginning was very promising:\n\n```\n==> db.py <==\nclass Users(object):\n    __slots__ = ['name', '_name']\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, value):\n        self._name = value\n\n    name = property(get_name, set_name, None, \"The name property\")\n\n    @staticmethod\n    def findByName(unused_name):\n        return Users(\"test user\")\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    user = Users.findByName(\"foo\")\n    user.namea = \"typo in the field name\"\n    print user.name\n    print user._name\n\ntest()\n```\n\nThis code mirrors a basic skeleton of the kind of code my code generator would create from an existing DB schema - in this case, the class Users mirrors a table that has a 'name' column. A `findByName` function would also search the DB (via SQL) and return instances of \"Users\". For this first test, it just returns one dummy instance of the class `Users`.\n\nAnd ideed, pylint caught the typo inside test()  (assigning to a non-existing field): \n\n```\nE:  6, 4: Assigning to attribute 'namea' not defined in class slots (assigning-non-slot)\n```\n\nSo moving on from a simple test, I changed the implementation of findByName to mirror the actual loop that would exist in its place, when reading output from a real SQL query:\n\n```\n==> db.py <==\nclass Users(object):\n    ....    \n    @staticmethod\n    def findByName(unused_name):\n        results = []\n        for unused in xrange(10):\n            results.append(Users(\"test user\"))\n        return results\n\n    def __init__(self, value=\"Unknown\"):\n        self._name = value\n\n==> test.py <==\nfrom db import Users\n\n\ndef test():\n    for user in Users.findByName(\"foo\"):\n        user.namea = 1\n        print user.name\n        print user._name\n\ntest()\n```\n\nPylint now fails to see the same error. It appears that the line \"results = []\" tells pylint that this is a list of \"unknown type\", and all checks go out the window after it. The fact that the list is appended with instances of Users doesn't seem to matter.\n\nThe same happens if I don't use a list, and instead just yield the instances back:\n\n```\n@staticmethod\ndef findByName(unused_name):\n    for unused in xrange(10):\n        yield Users(\"test user\")\n```\n\nIn the case of using a list, I will concede that in theory, a list can contain many types.\nA single yield point however, can't - this looks like a bug to me.\n\nSo, to conclude - Is there a way I can tell pylint that the findByName function returns a list of Users?\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/392\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 344,
            "title": "emacs binding use reserved bindings",
            "labels": [
                "help wanted",
                "bug"
            ],
            "description": "Originally reported by: **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**\n\n---\n\nHello,\nI'm forwarding http://www.logilab.org/ticket/62365 , https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=613646\n\npylint.el defines the following key bindings\n\nC-c m l         pylint\nC-c m n         next-error\nC-c m p         previous-error\n\nAccording to\nhttp://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html\nsuch sequences are reserved for the user.\n\nThis is annoying for emacs users who rely on these conventions.\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/344\n"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2143,
            "title": "Allow per-file configuration via a comment-line",
            "labels": [
                "high-effort",
                "topic-configuration",
                "minor"
            ],
            "description": "`vim` has a very powerful feature called [modelines](http://vimdoc.sourceforge.net/htmldoc/options.html#modeline) [[2](http://vim.wikia.com/wiki/Modeline_magic)]. While the full feature-set of something like vim-modelines does not make sense for a linter I think there is one interesting feature: *being able to override any setting for that one file only*.\r\n\r\npylint already allows disabling messages for one file by adding a special comment to the top of the file:\r\n\r\n    # pylint: disable=missing-docstring\r\n\r\nBut the following does not work:\r\n\r\n    # pylint: max-line-length=120\r\n\r\nIt is absolutely arguable that per-project linting settings should go into a `pylintrc` for that project. But on rare occasion you may have a good reason why a setting should be overridded for one specific file only. For example, the file was migrated from another project and don't want to completely reformat it, or a module contains a lot of long-winded statements and you want to relax the 80-column rule without completely disabling it.\r\n\r\nThere may be other situation where it may make sense to override other settings for just one file. For example when developing a kind of DSL in a module which will have names not conforming to the standard PEP8 notation. If those \"invalid\" names are localised to only one module, a \"modeline-like\" feature would allow specifying a new regex for just that one file.\r\n\r\nAll this combined would allow a more fine-grained control over the linter without completely silencing it."
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2139,
            "title": "pyreverse methods do not show parameters",
            "labels": [
                "topic-pyreverse",
                "enhancement"
            ],
            "description": "Pyreverse does not seem to include any parameters in UML class diagrams. All methods are listed with empty parameter lists.\r\n\r\n### Steps to reproduce\r\n1. Write a Python class with methods that take parameters (see code below)\r\n2. `pyreverse -o png -f ALL cow.py` (see png below)\r\n\r\n### Current behavior\r\nAll methods are shown having no parameters (empty parentheses).\r\n\r\n### Expected behavior\r\nThe `eat` and `move` methods should have `item` and `delta` parameters shown in the diagram. And `__init__` should perhaps have `position` (even though it has a default value).\r\n\r\n### pylint --version output\r\npylint 1.9.1, \r\nastroid 1.6.4\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 03:03:55) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\r\n\r\n\r\n```python3\r\n\"\"\"A Cow can speak, move, and eat.\"\"\"\r\n\r\n\r\nclass Cow(object):\r\n    \"\"\"Cows are simple animals.\r\n\r\n    Cows have 4 legs (are \"quadrupeds\") and walk,\r\n    eat grass (are \"herbivores\"), and say \"moo\".\r\n    \"\"\"\r\n\r\n    def __init__(self, position=(0, 0)):\r\n        \"\"\"Instantiate a new instance of the Cow class.\r\n\r\n        In instantiating the cow class, you may opt to provide\r\n        a starting position.\r\n        \"\"\"\r\n        self.position = position\r\n        self.stomach = []\r\n        self.respired = 0\r\n\r\n    def speak(self):\r\n        \"\"\"Cow says \"moo\".\"\"\"\r\n        return \"moo\"\r\n\r\n    def move(self, delta):\r\n        \"\"\"Cow walks on 4 legs.\"\"\"\r\n        self.position = (self.position[0] + delta[0],\r\n                         self.position[1] + delta[1])\r\n        return \"This quadruped walked to \" + str(self.position)\r\n\r\n    def eat(self, item):\r\n        \"\"\"Cow eats grass.\"\"\"\r\n        if item == \"grass\":\r\n            self.stomach.append(item)\r\n            return \"ate \" + item\r\n        else:\r\n            return \"This herbivore doesn't eat \" + item\r\n\r\n    def respire(self):\r\n        \"\"\"Cow respired.\"\"\"\r\n        self.respired += 1\r\n        return \"This cow respired through its nostrils.\"\r\n```\r\n\r\n![cow](https://user-images.githubusercontent.com/13035339/40387607-3b9aab1a-5ddb-11e8-881a-511379c4cf78.png)"
        },
        {
            "repo_url": "https://github.com/PyCQA/pylint",
            "id": 2563,
            "title": "E1101: (Flask) Method 'jinja_env' has no 'add_extension', 'filter' member (no-member)",
            "labels": [],
            "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run `pylint hello.py` (after installing flask 1.0.2), where `hello.py` is a simple flask app as below:\r\n```python\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.jinja_env.add_extension('jinja2.ext.do')\r\napp.jinja_env.filters['somefilter'] = lambda s: s\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return 'Hello, World!'\r\n```\r\n\r\n### Current behavior\r\npylint outputs the following for the file above:\r\n```shell\r\n************* Module hello\r\nhello.py:3:0: E1101: Method 'jinja_env' has no 'add_extension' member (no-member)\r\nhello.py:4:0: E1101: Method 'jinja_env' has no 'filters' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nIt should give no error because `add_extension` and `filters` are members of `Flask.jinja_env`.\r\n\r\n### pylint --version output\r\n```shell\r\npylint 2.1.1\r\nastroid 2.0.4\r\npython 3.6.6\r\n```\r\n### Check the docs below for `jinja environment`\r\n[Flask.jinja_env](http://flask.pocoo.org/docs/1.0/api/?highlight=jinja_env#flask.Flask.jinja_env)\r\n[Flask.jinja_env.filters](http://flask.pocoo.org/docs/1.0/templating/#registering-filters)\r\n[jinja2.Environment.add_extension](http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment.add_extension)\r\n* Also, `jinja_env` is a cached property. Somewhat like [this](https://github.com/pydanny/cached-property).\r\n\r\n### workaround\r\napart from disabling, if we change code as follows, pylint shows no errors.\r\n```python\r\napp.jinja_env().add_extension('jinja2.ext.do')\r\napp.jinja_env().filters['somefilter'] = lambda s: s\r\n```\r\n"
        }
    ],
    "regebro/pyroma": [],
    "rubik/radon": [
        {
            "repo_url": "https://github.com/rubik/radon",
            "id": 156,
            "title": "How does Radon cc calculate a class's complexity?",
            "labels": [],
            "description": "I can not find any documentation about how Radon cc calculates a class's complexity, then I assume from its outputs that it average a class's methods' complexities and round it to the nearest integer.\r\n\r\nThen I test Radon with this class. It has 6 methods, 5 with complexity of 1 and the other with complexity of 5. THen the average is 1.66 and Radon should report 2. In fact, it returns 1.\r\n\r\nIf I add 1 more IF statement to it, then the complexity is raised to 2 (average is 1.8). \r\n\r\nI attach here the test file.\r\n\r\nBest,\r\n[large_class.py.txt](https://github.com/rubik/radon/files/2491955/large_class.py.txt)\r\n\r\n"
        }
    ],
    "twolfson/restructuredtext-lint": [
        {
            "repo_url": "https://github.com/twolfson/restructuredtext-lint",
            "id": 23,
            "title": "Automatic error fixing",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "This may be out of scope but I'd love to see this tool to be able to automatic fix issues, this makes for many users the difference between ignoring issues and actually fixing them. I guess most issues are rather easily fixable automatically.\n"
        },
        {
            "repo_url": "https://github.com/twolfson/restructuredtext-lint",
            "id": 43,
            "title": "New check to enforce line length?",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "I would like to be able to lint my RST files for excessively long lines. Since this is likely to be controversial, the new check might best be ignored by default?\r\n\r\ni.e. something similar to the ``flake8`` code ``E501`` for maximum line length, which can be configured at the command line:\r\n\r\n```\r\n  --max-line-length=n   Maximum allowed line length for the entirety of this\r\n                        run. (Default: 79)\r\n```\r\n\r\nI would suggest using the same default line length (and double checking if this counts the new line character or not)."
        },
        {
            "repo_url": "https://github.com/twolfson/restructuredtext-lint",
            "id": 38,
            "title": "Supply directory names at command line to search",
            "labels": [
                "enhancement",
                "help wanted"
            ],
            "description": "Related Python linting tools like ``pep8``, ``flake8`` and ``pydocstyle`` will accept a mixture of filenames and directory names (e.g. ``.``, ``Tests`` or ``Tests/``). When a directory is given, they appear to recurse under it and lint any matching files (here presumably using ``*.py``).\r\n\r\nI would like to be able to run commands like ``rst-lint *.rst Scripts/ Tests/`` or just ``rsl-lint .`` and have it recurse under the given directories to find ``*.rst`` files. This pattern might be set by a new optional argument."
        }
    ],
    "myint/rstcheck": [
        {
            "repo_url": "https://github.com/myint/rstcheck",
            "id": 31,
            "title": "extended control of C/C++ validation",
            "labels": [
                "enhancement"
            ],
            "description": "Hi,\r\n\r\nThe current `c_checker()` and `cpp_checker()` uses a simple `-I. -I..` which will get you some basic tests, but in real world we're often using things like `pkg-config --cflags glib-2.0` and the likes to provide definitions and more include paths. Then a way to control `INCLUDE_FLAGS` would be required. I'm not sure how to best provide these extensions in a compatible way so we don't break sphinx, maybe using comments?\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. code-block: c\r\n  regular code block here\r\n```\r\nEventually allow these to be linked in addition to syntax check:\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. rstcheck-link: yes\r\n.. code-block: c\r\n  regular code block here\r\n```\r\n\r\nLikewise, sometimes in tutorial/documentation we split the code into multiple pieces that can't be validated at once. I could work-around that by using an external C/C++ file with include statements, however if we could add a argument to \"append to previous block\" it would be amazing, allowing things like `rstcheck-mode` with a choice of `new`, `append` and `ignore`:\r\n\r\n```\r\n.. code-block: c\r\n\r\n  void on_event(void *ctx) {\r\n   ...\r\n  }\r\n\r\nThis provides a function to callback when event happens...\r\n\r\n.. rstcheck-mode: append\r\n.. code-block: c\r\n\r\n  int main(void) {\r\n   my_lib_init();\r\n   my_lib_on_event_set(on_event, NULL);\r\n   return 0;\r\n  }\r\n```\r\n\r\n"
        },
        {
            "repo_url": "https://github.com/myint/rstcheck",
            "id": 19,
            "title": "Erronous info: Hyperlink target \"my-reference-label\" is not referenced.",
            "labels": [
                "enhancement",
                "help wanted",
                "bug"
            ],
            "description": "rstcheck reports an errnous problem on the example from http://www.sphinx-doc.org/en/1.4.8/markup/inline.html#cross-referencing-arbitrary-locations\r\n```\r\n.. _my-reference-label:\r\n\r\nSection to cross-reference\r\n--------------------------\r\n\r\nThis is the text of the section.\r\n\r\nIt refers to the section itself, see :ref:`my-reference-label`.\r\n```\r\n`index.rst:1: (INFO/1) Hyperlink target \"my-reference-label\" is not referenced.\r\n`"
        }
    ],
    "pyupio/safety": [
        {
            "repo_url": "https://github.com/pyupio/safety",
            "id": 163,
            "title": "Update pip to 18.1",
            "labels": [],
            "description": "\nThis PR updates [pip](https://pypi.org/project/pip) from **9.0.3** to **18.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 18.1\n   ```\n   =================\n\nFeatures\n--------\n\n- Allow PEP 508 URL requirements to be used as dependencies.\n\n  As a security measure, pip will raise an exception when installing packages from\n  PyPI if those packages depend on packages not also hosted on PyPI.\n  In the future, PyPI will block uploading packages with such external URL dependencies directly. (`4187 &lt;https://github.com/pypa/pip/issues/4187&gt;`_)\n- Upgrade pyparsing to 2.2.1. (`5013 &lt;https://github.com/pypa/pip/issues/5013&gt;`_)\n- Allows dist options (--abi, --python-version, --platform, --implementation) when installing with --target (`5355 &lt;https://github.com/pypa/pip/issues/5355&gt;`_)\n- Support passing ``svn+ssh`` URLs with a username to ``pip install -e``. (`5375 &lt;https://github.com/pypa/pip/issues/5375&gt;`_)\n- pip now ensures that the RECORD file is sorted when installing from a wheel file. (`5525 &lt;https://github.com/pypa/pip/issues/5525&gt;`_)\n- Add support for Python 3.7. (`5561 &lt;https://github.com/pypa/pip/issues/5561&gt;`_)\n- Malformed configuration files now show helpful error messages, instead of tracebacks. (`5798 &lt;https://github.com/pypa/pip/issues/5798&gt;`_)\n\nBug Fixes\n---------\n\n- Checkout the correct branch when doing an editable Git install. (`2037 &lt;https://github.com/pypa/pip/issues/2037&gt;`_)\n- Run self-version-check only on commands that may access the index, instead of\n  trying on every run and failing to do so due to missing options. (`5433 &lt;https://github.com/pypa/pip/issues/5433&gt;`_)\n- Allow a Git ref to be installed over an existing installation. (`5624 &lt;https://github.com/pypa/pip/issues/5624&gt;`_)\n- Show a better error message when a configuration option has an invalid value. (`5644 &lt;https://github.com/pypa/pip/issues/5644&gt;`_)\n- Always revalidate cached simple API pages instead of blindly caching them for up to 10\n  minutes. (`5670 &lt;https://github.com/pypa/pip/issues/5670&gt;`_)\n- Avoid caching self-version-check information when cache is disabled. (`5679 &lt;https://github.com/pypa/pip/issues/5679&gt;`_)\n- Avoid traceback printing on autocomplete after flags in the CLI. (`5751 &lt;https://github.com/pypa/pip/issues/5751&gt;`_)\n- Fix incorrect parsing of egg names if pip needs to guess the package name. (`5819 &lt;https://github.com/pypa/pip/issues/5819&gt;`_)\n\nVendored Libraries\n------------------\n\n- Upgrade certifi to 2018.8.24\n- Upgrade packaging to 18.0\n- Add pep517 version 0.2\n- Upgrade pytoml to 0.1.19\n- Upgrade pkg_resources to 40.4.3 (via setuptools)\n\nImproved Documentation\n----------------------\n\n- Fix &quot;Requirements Files&quot; reference in User Guide (`user_guide_fix_requirements_file_ref &lt;https://github.com/pypa/pip/issues/user_guide_fix_requirements_file_ref&gt;`_)\n   ```\n   \n  \n  \n   ### 18.0\n   ```\n   =================\n\nProcess\n-------\n\n- Switch to a Calendar based versioning scheme.\n- Formally document our deprecation process as a minimum of 6 months of deprecation\n  warnings.\n- Adopt and document NEWS fragment writing style.\n- Switch to releasing a new, non bug fix version of pip every 3 months.\n\nDeprecations and Removals\n-------------------------\n\n- Remove the legacy format from pip list. (3651, 3654)\n- Dropped support for Python 3.3. (3796)\n- Remove support for cleaning up egg fragment postfixes. (4174)\n- Remove the shim for the old get-pip.py location. (5520)\n\n  For the past 2 years, it&#39;s only been redirecting users to use the newer\n  https://bootstrap.pypa.io/get-pip.py location.\n\nFeatures\n--------\n\n- Introduce a new --prefer-binary flag, to prefer older wheels over newer source packages. (3785)\n- Improve autocompletion function on file name completion after options\n  which have ``&lt;file&gt;``, ``&lt;dir&gt;`` or ``&lt;path&gt;`` as metavar. (4842, 5125)\n- Add support for installing PEP 518 build dependencies from source. (5229)\n- Improve status message when upgrade is skipped due to only-if-needed strategy. (5319)\n\nBug Fixes\n---------\n\n- Update pip&#39;s self-check logic to not use a virtualenv specific file and honor cache-dir. (3905)\n- Remove compiled pyo files for wheel packages. (4471)\n- Speed up printing of newly installed package versions. (5127)\n- Restrict install time dependency warnings to directly-dependant packages. (5196, 5457)\n\n  Warning about the entire package set has resulted in users getting confused as\n  to why pip is printing these warnings.\n- Improve handling of PEP 518 build requirements: support environment markers and extras. (5230, 5265)\n- Remove username/password from log message when using index with basic auth. (5249)\n- Remove trailing os.sep from PATH directories to avoid false negatives. (5293)\n- Fix &quot;pip wheel pip&quot; being blocked by the &quot;don&#39;t use pip to modify itself&quot; check. (5311, 5312)\n- Disable pip&#39;s version check (and upgrade message) when installed by a different package manager. (5346)\n\n  This works better with Linux distributions where pip&#39;s upgrade message may\n  result in users running pip in a manner that modifies files that should be\n  managed by the OS&#39;s package manager.\n- Check for file existence and unlink first when clobbering existing files during a wheel install. (5366)\n- Improve error message to be more specific when no files are found as listed in as listed in PKG-INFO. (5381)\n- Always read ``pyproject.toml`` as UTF-8. This fixes Unicode handling on Windows and Python 2. (5482)\n- Fix a crash that occurs when PATH not set, while generating script location warning. (5558)\n- Disallow packages with ``pyproject.toml`` files that have an empty build-system table. (5627)\n\nVendored Libraries\n------------------\n\n- Update CacheControl to 0.12.5.\n- Update certifi to 2018.4.16.\n- Update distro to 1.3.0.\n- Update idna to 2.7.\n- Update ipaddress to 1.0.22.\n- Update pkg_resources to 39.2.0 (via setuptools).\n- Update progress to 1.4.\n- Update pytoml to 0.1.16.\n- Update requests to 2.19.1.\n- Update urllib3 to 1.23.\n\nImproved Documentation\n----------------------\n\n- Document how to use pip with a proxy server. (512, 5574)\n- Document that the output of pip show is in RFC-compliant mail header format. (5261)\n   ```\n   \n  \n  \n   ### 10.0.1\n   ```\n   ===================\n\nFeatures\n--------\n\n- Switch the default repository to the new &quot;PyPI 2.0&quot; running at\n  https://pypi.org/. (5214)\n\nBug Fixes\n---------\n\n- Fix a bug that made get-pip.py unusable on Windows without renaming. (5219)\n- Fix a TypeError when loading the cache on older versions of Python 2.7.\n  (5231)\n- Fix and improve error message when EnvironmentError occurs during\n  installation. (5237)\n- A crash when reinstalling from VCS requirements has been fixed. (5251)\n- Fix PEP 518 support when pip is installed in the user site. (5524)\n\nVendored Libraries\n------------------\n\n- Upgrade distlib to 0.2.7\n   ```\n   \n  \n  \n   ### 10.0.0\n   ```\n   ===================\n\nBug Fixes\n---------\n\n- Prevent false-positive installation warnings due to incomplete name\n  normalizaton. (5134)\n- Fix issue where installing from Git with a short SHA would fail. (5140)\n- Accept pre-release versions when checking for conflicts with pip check or pip\n  install. (5141)\n- ``ioctl(fd, termios.TIOCGWINSZ, ...)`` needs 8 bytes of data (5150)\n- Do not warn about script location when installing to the directory containing\n  sys.executable. This is the case when &#39;pip install&#39;ing without activating a\n  virtualenv. (5157)\n- Fix PEP 518 support. (5188)\n- Don&#39;t warn about script locations if ``--target`` is specified. (5203)\n   ```\n   \n  \n  \n   ### 10.0.0b2\n   ```\n   =====================\n\nBug Fixes\n---------\n\n- Fixed line endings in CA Bundle - 10.0.0b1 was inadvertently released with Windows\n  line endings. (5131)\n   ```\n   \n  \n  \n   ### 10.0.0b1\n   ```\n   =====================\n\nDeprecations and Removals\n-------------------------\n\n- Removed the deprecated ``--egg`` parameter to ``pip install``. (1749)\n- Removed support for uninstalling projects which have been installed using\n  distutils. distutils installed projects do not include metadata indicating\n  what files belong to that install and thus it is impossible to *actually*\n  uninstall them rather than just remove the metadata saying they&#39;ve been\n  installed while leaving all of the actual files behind. (2386)\n- Removed the deprecated ``--download`` option to ``pip install``. (2643)\n- Removed the deprecated --(no-)use-wheel flags to ``pip install`` and ``pip\n  wheel``. (2699)\n- Removed the deprecated ``--allow-external``, ``--allow-all-external``, and\n  ``--allow-unverified`` options. (3070)\n- Switch the default for ``pip list`` to the columns format, and deprecate the\n  legacy format. (3654, 3686)\n- Deprecate support for Python 3.3. (3796)\n- Removed the deprecated ``--default-vcs`` option. (4052)\n- Removed the ``setup.py test`` support from our sdist as it wasn&#39;t being\n  maintained as a supported means to run our tests. (4203)\n- Dropped support for Python 2.6. (4343)\n- Removed the --editable flag from pip download, as it did not make sense\n  (4362)\n- Deprecate SVN detection based on dependency links in ``pip freeze``. (4449)\n- Move all of pip&#39;s APIs into the pip._internal package, properly reflecting\n  the fact that pip does not currently have any public APIs. (4696, 4700)\n\nFeatures\n--------\n\n- Add `--progress-bar &lt;progress_bar&gt;` to ``pip download``, ``pip install`` and\n  ``pip wheel`` commands, to allow selecting a specific progress indicator or,\n  to completely suppress, (for example in a CI environment) use\n  ``--progress-bar off. (2369, 2756)\n- Add `--no-color` to `pip`. All colored output is disabled if this flag is\n  detected. (2449)\n- pip uninstall now ignores the absence of a requirement and prints a warning.\n  (3016, 4642)\n- Improved the memory and disk efficiency of the HTTP cache. (3515)\n- Support for packages specifying build dependencies in pyproject.toml (see\n  `PEP 518 &lt;https://www.python.org/dev/peps/pep-0518/&gt;`__). Packages which\n  specify one or more build dependencies this way will be built into wheels in\n  an isolated environment with those dependencies installed. (3691)\n- pip now supports environment variable expansion in requirement files using\n  only ``${VARIABLE}`` syntax on all platforms. (3728)\n- Allowed combinations of -q and -v to act sanely. Then we don&#39;t need warnings\n  mentioned in the issue. (4008)\n- Add `--exclude-editable` to ``pip freeze`` and ``pip list`` to exclude\n  editable packages from installed package list. (4015, 4016)\n- Improve the error message for the common ``pip install ./requirements.txt``\n  case. (4127)\n- Add support for the new `` url`` syntax from PEP 508. (4175)\n- Add setuptools version to the statistics sent to BigQuery. (4209)\n- Report the line which caused the hash error when using requirement files.\n  (4227)\n- Add a pip config command for managing configuration files. (4240)\n- Allow ``pip download`` to be used with a specific platform when ``--no-deps``\n  is set. (4289)\n- Support build-numbers in wheel versions and support sorting with\n  build-numbers. (4299)\n- Change pip outdated to use PackageFinder in order to do the version lookup so\n  that local mirrors in Environments that do not have Internet connections can\n  be used as the Source of Truth for latest version. (4336)\n- pip now retries on more HTTP status codes, for intermittent failures.\n  Previously, it only retried on the standard 503. Now, it also retries on 500\n  (transient failures on AWS S3), 520 and 527 (transient failures on\n  Cloudflare). (4473)\n- pip now displays where it is looking for packages, if non-default locations\n  are used. (4483)\n- Display a message to run the right command for modifying pip on Windows\n  (4490)\n- Add Man Pages for pip (4491)\n- Make uninstall command less verbose by default (4493)\n- Switch the default upgrade strategy to be &#39;only-if-needed&#39; (4500)\n- Installing from a local directory or a VCS URL now builds a wheel to install,\n  rather than running ``setup.py install``. Wheels from these sources are not\n  cached. (4501)\n- Don&#39;t log a warning when installing a dependency from Git if the name looks\n  like a commit hash. (4507)\n- pip now displays a warning when it installs scripts from a wheel outside the\n  PATH. These warnings can be suppressed using a new --no-warn-script-location\n  option. (4553)\n- Local Packages can now be referenced using forward slashes on Windows.\n  (4563)\n- pip show learnt a new Required-by field that lists currently installed\n  packages that depend on the shown package (4564)\n- The command-line autocompletion engine ``pip show`` now autocompletes\n  installed distribution names. (4749)\n- Change documentation theme to be in line with Python Documentation (4758)\n- Add auto completion of short options. (4954)\n- Run &#39;setup.py develop&#39; inside pep518 build environment. (4999)\n- pip install now prints an error message when it installs an incompatible\n  version of a dependency. (5000)\n- Added a way to distinguish between pip installed packages and those from the\n  system package manager in &#39;pip list&#39;. Specifically, &#39;pip list -v&#39; also shows\n  the installer of package if it has that meta data. (949)\n- Show install locations when list command ran with &quot;-v&quot; option. (979)\n\nBug Fixes\n---------\n\n- Allow pip to work if the ``GIT_DIR`` and ``GIT_WORK_TREE`` environment\n  variables are set. (1130)\n- Make ``pip install --force-reinstall`` not require passing ``--upgrade``.\n  (1139)\n- Return a failing exit status when `pip install`, `pip download`, or `pip\n  wheel` is called with no requirements. (2720)\n- Interactive setup.py files will no longer hang indefinitely. (2732, 4982)\n- Correctly reset the terminal if an exception occurs while a progress bar is\n  being shown. (3015)\n- &quot;Support URL-encoded characters in URL credentials.&quot; (3236)\n- Don&#39;t assume sys.__stderr__.encoding exists (3356)\n- Fix ``pip uninstall`` when ``easy-install.pth`` lacks a trailing newline.\n  (3741)\n- Keep install options in requirements.txt from leaking. (3763)\n- pip no longer passes global options from one package to later packages in the\n  same requirement file. (3830)\n- Support installing from Git refs (3876)\n- Use pkg_resources to parse the entry points file to allow names with colons.\n  (3901)\n- ``-q`` specified once correctly sets logging level to WARNING, instead of\n  CRITICAL. Use `-qqq` to have the previous behavior back. (3994)\n- Shell completion scripts now use correct executable names (e.g., ``pip3``\n  instead of ``pip``) (3997)\n- Changed vendored encodings from ``utf8`` to ``utf-8``. (4076)\n- Fixes destination directory of data_files when ``pip install --target`` is\n  used. (4092)\n- Limit the disabling of requests&#39; pyopenssl to Windows only. Fixes\n  &quot;SNIMissingWarning / InsecurePlatformWarning not fixable with pip 9.0 /\n  9.0.1&quot; (for non-Windows) (4098)\n- Support the installation of wheels with non-PEP 440 version in their\n  filenames. (4169)\n- Fall back to sys.getdefaultencoding() if locale.getpreferredencoding()\n  returns None in `pip.utils.encoding.auto_decode`. (4184)\n- Fix a bug where `SETUPTOOLS_SHIM` got called incorrectly for relative path\n  requirements by converting relative paths to absolute paths prior to calling\n  the shim. (4208)\n- Return the latest version number in search results. (4219)\n- Improve error message on permission errors (4233)\n- Fail gracefully when ``/etc/image_version`` (or another distro version file)\n  appears to exists but is not readable. (4249)\n- Avoid importing setuptools in the parent pip process, to avoid a race\n  condition when upgrading one of setuptools dependencies. (4264)\n- Fix for an incorrect ``freeze`` warning message due to a package being\n  included in multiple requirements files that were passed to ``freeze``.\n  Instead of warning incorrectly that the package is not installed, pip now\n  warns that the package was declared multiple times and lists the name of each\n  requirements file that contains the package in question. (4293)\n- Generalize help text for ``compile``/``no-compile`` flags. (4316)\n- Handle the case when ``/etc`` is not readable by the current user by using a\n  hardcoded list of possible names of release files. (4320)\n- Fixed a ``NameError`` when attempting to catch ``FileNotFoundError`` on\n  Python 2.7. (4322)\n- Ensure USER_SITE is correctly initialised. (4437)\n- Reinstalling an editable package from Git no longer assumes that the\n  ``master`` branch exists. (4448)\n- This fixes an issue where when someone who tries to use git with pip but pip\n  can&#39;t because git is not in the path environment variable. This clarifies the\n  error given to suggest to the user what might be wrong. (4461)\n- Improve handling of text output from build tools (avoid Unicode errors)\n  (4486)\n- Fix a &quot;No such file or directory&quot; error when using --prefix. (4495)\n- Allow commands to opt out of --require-venv. This allows pip help to work\n  even when the environment variable PIP_REQUIRE_VIRTUALENV is set. (4496)\n- Fix warning message on mismatched versions during installation. (4655)\n- pip now records installed files in a deterministic manner improving\n  reproducibility. (4667)\n- Fix an issue where ``pip install -e`` on a Git url would fail to update if a\n  branch or tag name is specified that happens to match the prefix of the\n  current ``HEAD`` commit hash. (4675)\n- Fix an issue where a variable assigned in a try clause was accessed in the\n  except clause, resulting in an undefined variable error in the except clause.\n  (4811)\n- Use log level `info` instead of `warning` when ignoring packages due to\n  environment markers. (4876)\n- Replaced typo mistake in subversion support. (4908)\n- Terminal size is now correctly inferred when using Python 3 on Windows.\n  (4966)\n- Abort if reading configuration causes encoding errors. (4976)\n- Add a ``--no-user`` option and use it when installing build dependencies.\n  (5085)\n\nVendored Libraries\n------------------\n\n- Upgraded appdirs to 1.4.3.\n- Upgraded CacheControl to 0.12.3.\n- Vendored certifi at 2017.7.27.1.\n- Vendored chardet at 3.0.4.\n- Upgraded colorama to 0.3.9.\n- Upgraded distlib to 0.2.6.\n- Upgraded distro to 1.2.0.\n- Vendored idna at idna==2.6.\n- Upgraded ipaddress to 1.0.18.\n- Vendored msgpack-python at 0.4.8.\n- Removed the vendored ordereddict.\n- Upgraded progress to 1.3.\n- Upgraded pyparsing to 2.2.0.\n- Upgraded pytoml to 0.1.14.\n- Upgraded requests to 2.18.4.\n- Upgraded pkg_resources (via setuptools) to 36.6.0.\n- Upgraded six to 1.11.0.\n- Vendored urllib3 at 1.22.\n- Upgraded webencodings to 0.5.1.\n\nImproved Documentation\n----------------------\n\n- Added documentation on usage of --build command line option (4262)\n-  (4358)\n- Document how to call pip from your code, including the fact that we do not\n  provide a Python API. (4743)\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pip\n  - Changelog: https://pyup.io/changelogs/pip/\n  - Homepage: https://pip.pypa.io/\n</details>\n\n"
        },
        {
            "repo_url": "https://github.com/pyupio/safety",
            "id": 94,
            "title": "Update flake8 to 3.5.0",
            "labels": [],
            "description": "\nThere's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.\nYou are currently using **3.3.0**. I have updated it to **3.5.0**\n\n\n\nThese links might come in handy:  <a href=\"https://pypi.python.org/pypi/flake8\">PyPI</a> | <a href=\"https://pyup.io/changelogs/flake8/\">Changelog</a> | <a href=\"https://gitlab.com/pycqa/flake8\">Repo</a> \n\n\n\n### Changelog\n> \n>### 3.5.0\n\n>-------------------\n\n>You can view the `3.5.0 milestone`_ on GitLab for more details.\n\n>New Dependency Information\n>~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>- Allow for PyFlakes 1.6.0 (See also `GitLab359`_)\n\n>- Start using new PyCodestyle checks for bare excepts and ambiguous identifier\n>  (See also `GitLab361`_)\n\n>Features\n>~~~~~~~~\n\n>- Print out information about configuring VCS hooks (See also `GitLab335`_)\n\n>- Allow users to develop plugins &quot;local&quot; to a repository without using\n>  setuptools. See our documentation on local plugins for more information.\n>  (See also `GitLab357`_)\n\n>Bugs Fixed\n>~~~~~~~~~~\n\n>- Catch and helpfully report ``UnicodeDecodeError``\\ s when parsing\n>  configuration files. (See also `GitLab358`_)\n\n\n>.. all links\n>.. _3.5.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/20\n\n>.. issue links\n>.. _GitLab335:\n>    https://gitlab.com/pycqa/flake8/issues/335\n>.. _GitLab357:\n>    https://gitlab.com/pycqa/flake8/issues/357\n>.. _GitLab358:\n>    https://gitlab.com/pycqa/flake8/issues/358\n>.. _GitLab359:\n>    https://gitlab.com/pycqa/flake8/issues/359\n>.. _GitLab361:\n>    https://gitlab.com/pycqa/flake8/issues/361\n\n>.. merge request links\n\n\n\n\n>### 3.4.1\n\n>-------------------\n\n>You can view the `3.4.1 milestone`_ on GitLab for more details.\n\n>- Fix minor regression when users specify only a ``--select`` list with items\n>  in the enabled/extended select list.  (See also `GitLab354`_)\n\n>.. all links\n>.. _3.4.1 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/19\n\n>.. issue links\n>.. _GitLab354:\n>    https://gitlab.com/pycqa/flake8/issues/354\n\n>.. merge request links\n\n\n\n\n>### 3.4.0\n\n>-------------------\n\n>You can view the `3.4.0 milestone`_ on GitLab for more details.\n\n>- Refine logic around ``--select`` and ``--ignore`` when combined with the\n>  default values for each. (See also `GitLab318`_)\n\n>- Handle spaces as an alternate separate for error codes, e.g.,\n>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)\n\n>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.\n>  (See also `GitLab330`_)\n\n>- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)\n\n>- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.\n>  (See also `GitLab!193`_)\n\n>- Remove unused import of ``os`` in the git hook template (See also\n>  `GitLab!194`_)\n\n>.. all links\n>.. _3.4.0 milestone:\n>    https://gitlab.com/pycqa/flake8/milestones/18\n\n>.. issue links\n>.. _GitLab318:\n>    https://gitlab.com/pycqa/flake8/issues/318\n>.. _GitLab329:\n>    https://gitlab.com/pycqa/flake8/issues/329\n>.. _GitLab330:\n>    https://gitlab.com/pycqa/flake8/issues/330\n>.. _GitLab341:\n>    https://gitlab.com/pycqa/flake8/issues/341\n\n>.. merge request links\n>.. _GitLab!193:\n>    https://gitlab.com/pycqa/flake8/merge_requests/193\n>.. _GitLab!194:\n>    https://gitlab.com/pycqa/flake8/merge_requests/194\n\n\n\n\n\n\n\n\n*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*\n\nHappy merging! \ud83e\udd16\n"
        },
        {
            "repo_url": "https://github.com/pyupio/safety",
            "id": 156,
            "title": "Update sphinx to 1.8.1",
            "labels": [],
            "description": "\nThis PR updates [Sphinx](https://pypi.org/project/Sphinx) from **1.5.5** to **1.8.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 1.8.1\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* LaTeX ``\\pagestyle`` commands have been moved to the LaTeX template. No\n  changes in PDF, except possibly if ``\\sphinxtableofcontents``, which\n  contained them, had been customized in :file:`conf.py`. (refs: 5455)\n\nBugs fixed\n----------\n\n* 5418: Incorrect default path for sphinx-build -d/doctrees files\n* 5421: autodoc emits deprecation warning for :confval:`autodoc_default_flags`\n* 5422: lambda object causes PicklingError on storing environment\n* 5417: Sphinx fails to build with syntax error in Python 2.7.5\n* 4911: add latexpdf to make.bat for non make-mode\n* 5436: Autodoc does not work with enum subclasses with properties/methods\n* 5437: autodoc: crashed on modules importing eggs\n* 5433: latex: ImportError: cannot import name &#39;DEFAULT_SETTINGS&#39;\n* 5431: autodoc: ``autofunction`` emits a warning for callable objects\n* 5457: Fix TypeError in error message when override is prohibited\n* 5453: PDF builds of &#39;howto&#39; documents have no page numbers\n* 5463: mathbase: math_role and MathDirective was disappeared in 1.8.0\n* 5454: latex: Index has disappeared from PDF for Japanese documents\n* 5432: py domain: ``:type:`` field can&#39;t process ``:term:`` references\n* 5426: py domain: TypeError has been raised for class attribute\n   ```\n   \n  \n  \n   ### 1.8.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.8.0b2\n   ```\n   * html: search box overrides to other elements if scrolled\n* i18n: warnings for translation catalogs have wrong line numbers (refs: 5321)\n* 5325: latex: cross references has been broken by multiply labeled objects\n* C++, fixes for symbol addition and lookup. Lookup should no longer break\n  in partial builds. See also 5337.\n* 5348: download reference to remote file is not displayed\n* 5282: html theme: ``pygments_style`` of theme was overrided by ``conf.py``\n  by default\n* 4379: toctree shows confusible warning when document is excluded\n* 2401: autodoc: ``:members:`` causes ``:special-members:`` not to be shown\n* autodoc: ImportError is replaced by AttributeError for deeper module\n* 2720, 4034: Incorrect links with ``:download:``, duplicate names, and\n  parallel builds\n* 5290: autodoc: failed to analyze source code in egg package\n* 5399: Sphinx crashes if unknown po file exists\n   ```\n   \n  \n  \n   ### 1.8.0b1\n   ```\n   * 5083: Fix wrong make.bat option for internationalization.\n* 5115: napoleon: add admonitions added by 4613 to the docs.\n   ```\n   \n  \n  \n   ### 1.7.10\n   ```\n   ===============================\n\nDependencies\n------------\n\nIncompatible changes\n--------------------\n\nDeprecated\n----------\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.9\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 5359: Make generated texinfo files reproducible by sorting the anchors\n\nBugs fixed\n----------\n\n* 5361: crashed on incremental build if document uses include directive\n   ```\n   \n  \n  \n   ### 1.7.8\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* The type of ``env.included`` has been changed to dict of set\n\nBugs fixed\n----------\n\n* 5320: intersphinx: crashed if invalid url given\n* 5326: manpage: crashed when invalid docname is specified as ``man_pages``\n* 5322: autodoc: ``Any`` typehint causes formatting error\n* 5327: &quot;document isn&#39;t included in any toctree&quot; warning on rebuild with\n  generated files\n* 5335: quickstart: escape sequence has been displayed with MacPorts&#39; python\n   ```\n   \n  \n  \n   ### 1.7.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5198: document not in toctree warning when including files only for parallel\n  builds\n* LaTeX: reduce &quot;Token not allowed in a PDF string&quot; hyperref warnings in latex\n  console output (refs: 5236)\n* LaTeX: suppress &quot;remreset Warning: The remreset package is obsolete&quot; in latex\n  console output with recent LaTeX (refs: 5237)\n* 5234: PDF output: usage of PAPER environment variable is broken since Sphinx\n  1.5\n* LaTeX: fix the :confval:`latex_engine` documentation regarding Latin Modern\n  font with XeLaTeX/LuaLateX (refs: 5251)\n* 5280: autodoc: Fix wrong type annotations for complex typing\n* autodoc: Optional types are wrongly rendered\n* 5291: autodoc crashed by ForwardRef types\n* 5211: autodoc: No docs generated for functools.partial functions\n* 5306: autodoc: ``getargspec()`` raises NameError for invalid typehints\n* 5298: imgmath: math_number_all causes equations to have two numbers in html\n* 5294: sphinx-quickstart blank prompts in PowerShell\n   ```\n   \n  \n  \n   ### 1.7.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 5037: LaTeX ``\\sphinxupquote{}`` breaks in Russian\n* sphinx.testing uses deprecated pytest API; ``Node.get_marker(name)``\n* 5016: crashed when recommonmark.AutoStrictify is enabled\n* 5022: latex: crashed with docutils package provided by Debian/Ubuntu\n* 5009: latex: a label for table is vanished if table does not have a caption\n* 5048: crashed with numbered toctree\n* 2410: C, render empty argument lists for macros.\n* C++, fix lookup of full template specializations with no template arguments.\n* 4667: C++, fix assertion on missing references in global scope when using\n  intersphinx. Thanks to Alan M. Carroll.\n* 5019: autodoc: crashed by Form Feed Character\n* 5032: autodoc: loses the first staticmethod parameter for old styled classes\n* 5036: quickstart: Typing Ctrl-U clears the whole of line\n* 5066: html: &quot;relations&quot; sidebar is not shown by default\n* 5091: latex: curly braces in index entries are not handled correctly\n* 5070: epub: Wrong internal href fragment links\n* 5104: apidoc: Interface of ``sphinx.apidoc:main()`` has changed\n* 4272: PDF builds of French projects have issues with XeTeX\n* 5076: napoleon raises RuntimeError with python 3.7\n* 5125: sphinx-build: Interface of ``sphinx:main()`` has changed\n* sphinx-build: ``sphinx.cmd.build.main()`` refers ``sys.argv`` instead of given\n  argument\n* 5146: autosummary: warning is emitted when the first line of docstring ends\n  with literal notation\n* autosummary: warnings of autosummary indicates wrong location (refs: 5146)\n* 5143: autodoc: crashed on inspecting dict like object which does not support\n  sorting\n* 5139: autodoc: Enum argument missing if it shares value with another\n* 4946: py domain: rtype field could not handle &quot;None&quot; as a type\n* 5176: LaTeX: indexing of terms containing `, ``!``, or ``&quot;`` fails\n* 5161: html: crashes if copying static files are failed\n* 5167: autodoc: Fix formatting type annotations for tuples with more than two\n  arguments\n* 3329: i18n: crashed by auto-symbol footnote references\n* 5158: autosummary: module summary has been broken when it starts with heading\n   ```\n   \n  \n  \n   ### 1.7.5\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4924: html search: Upper characters problem in any other languages\n* 4932: apidoc: some subpackage is ignored if sibling subpackage contains a\n  module starting with underscore\n* 4863, 4938, 4939: i18n doesn&#39;t handle node.title correctly tat used for\n  contents, topic, admonition, table and section.\n* 4913: i18n: literal blocks in bullet list are not translated\n* 4962: C++, raised TypeError on duplicate declaration.\n* 4825: C++, properly parse expr roles and give better error messages when\n  (escaped) line breaks are present.\n* C++, properly use ``desc_addname`` nodes for prefixes of names.\n* C++, parse pack expansions in function calls.\n* 4915, 4916: links on search page are broken when using dirhtml builder\n* 4969: autodoc: constructor method should not have return annotation\n* latex: deeply nested enumerated list which is beginning with non-1 causes\n  LaTeX engine crashed\n* 4978: latex: shorthandoff is not set up for Brazil locale\n* 4928: i18n: Ignore dot-directories like .git/ in LC_MESSAGES/\n* 4946: py domain: type field could not handle &quot;None&quot; as a type\n* 4979: latex: Incorrect escaping of curly braces in index entries\n* 4956: autodoc: Failed to extract document from a subclass of the class on\n  mocked module\n* 4973: latex: glossary directive adds whitespace to each item\n* 4980: latex: Explicit labels on code blocks are duplicated\n* 4919: node.asdom() crashes if toctree has :numbered: option\n* 4914: autodoc: Parsing error when using dataclasses without default values\n* 4931: autodoc: crashed when handler for autodoc-skip-member raises an error\n* 4931: autodoc: crashed when subclass of mocked class are processed by\n  napoleon module\n* 5007: sphinx-build crashes when error log contains a &quot;%&quot; character\n   ```\n   \n  \n  \n   ### 1.7.4\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4885, 4887: domains: Crashed with duplicated objects\n* 4889: latex: sphinx.writers.latex causes recusrive import\n   ```\n   \n  \n  \n   ### 1.7.3\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 4769: autodoc loses the first staticmethod parameter\n* 4790: autosummary: too wide two column tables in PDF builds\n* 4795: Latex customization via ``_templates/longtable.tex_t`` is broken\n* 4789: imgconverter: confused by convert.exe of Windows\n* 4783: On windows, Sphinx crashed when drives of srcdir and outdir are\n  different\n* 4812: autodoc ignores type annotated variables\n* 4817: wrong URLs on warning messages\n* 4784: latex: :confval:`latex_show_urls` assigns incorrect footnote numbers if\n  hyperlinks exists inside substitutions\n* 4837: latex with class memoir Error: Font command ``\\sf`` is not supported\n* 4803: latex: too slow in proportion to number of auto numbered footnotes\n* 4838: htmlhelp: The entries in .hhp file is not ordered\n* toctree directive tries to glob for URL having query_string\n* 4871: html search: Upper characters problem in German\n* 4717: latex: Compilation for German docs failed with LuaLaTeX and XeLaTeX\n* 4459: duplicated labels detector does not work well in parallel build\n* 4878: Crashed with extension which returns invalid metadata\n   ```\n   \n  \n  \n   ### 1.7.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n* 4520: apidoc: folders with an empty __init__.py are no longer excluded from\n  TOC\n\nBugs fixed\n----------\n\n* 4669: sphinx.build_main and sphinx.make_main throw NameError\n* 4685: autosummary emits meaningless warnings\n* autodoc: crashed when invalid options given\n* pydomain: always strip parenthesis if empty (refs: 1042)\n* 4689: autosummary: unexpectedly strips docstrings containing &quot;i.e.&quot;\n* 4701: viewcode: Misplaced ``&lt;div&gt;`` in viewcode html output\n* 4444: Don&#39;t require numfig to use :numref: on sections\n* 4727: Option clash for package textcomp\n* 4725: Sphinx does not work with python 3.5.0 and 3.5.1\n* 4716: Generation PDF file with TexLive on Windows, file not found error\n* 4574: vertical space before equation in latex\n* 4720: message when an image is mismatched for builder is not clear\n* 4655, 4684: Incomplete localization strings in Polish and Chinese\n* 2286: Sphinx crashes when error is happens in rendering HTML pages\n* 4688: Error to download remote images having long URL\n* 4754: sphinx/pycode/__init__.py raises AttributeError\n* 1435: qthelp builder should htmlescape keywords\n* epub: Fix docTitle elements of toc.ncx is not escaped\n* 4520: apidoc: Subpackage not in toc (introduced in 1.6.6) now fixed\n* 4767: html: search highlighting breaks mathjax equations\n   ```\n   \n  \n  \n   ### 1.7.1\n   ```\n   =====================================\n\nDeprecated\n----------\n\n* 4623: ``sphinx.build_main()`` is deprecated.\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed (Since 1.7.0)\n* 4664: ``sphinx.ext.intersphinx.debug()`` is deprecated.\n\nFor more details, see `deprecation APIs list\n&lt;http://www.sphinx-doc.org/en/master/extdev/index.htmldeprecated-apis&gt;`_\n\nBugs fixed\n----------\n\n* 4608: epub: Invalid meta tag is generated\n* 4260: autodoc: keyword only argument separator is not disappeared if it is\n  appeared at top of the argument list\n* 4622: epub: :confval:`epub_scheme` does not effect to content.opf\n* 4627: graphviz: Fit graphviz images to page\n* 4617: quickstart: PROJECT_DIR argument is required\n* 4623: sphinx.build_main no longer exists in 1.7.0\n* 4615: The argument of ``sphinx.build`` has been changed in 1.7.0\n* autosummary: The interface of ``sphinx.ext.autosummary.get_documenter()`` has\n  been changed\n* 4630: Have order on msgids in sphinx.pot deterministic\n* 4563: autosummary: Incorrect end of line punctuation detection\n* 4577: Enumerated sublists with explicit start with wrong number\n* 4641: A external link in TOC cannot contain &quot;?&quot; with ``:glob:`` option\n* C++, add missing parsing of explicit casts and typeid in expression parsing.\n* C++, add missing parsing of ``this`` in expression parsing.\n* 4655: Fix incomplete localization strings in Polish\n* 4653: Fix error reporting for parameterless ImportErrors\n* 4664: Reading objects.inv fails again\n* 4662: ``any`` refs with ``term`` targets crash when an ambiguity is\n  encountered\n   ```\n   \n  \n  \n   ### 1.7.0\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.7.0b3\n   ```\n   * 4019: inheritance_diagram AttributeError stoping make process\n* 4531: autosummary: methods are not treated as attributes\n* 4538: autodoc: ``sphinx.ext.autodoc.Options`` has been moved\n* 4539: autodoc emits warnings for partialmethods\n* 4223: doctest: failing tests reported in wrong file, at wrong line\n* i18n: message catalogs are not compiled if specific filenames are given for\n  ``sphinx-build`` as arguments (refs: 4560)\n* 4027: sphinx.ext.autosectionlabel now expects labels to be the same as they\n  are in the raw source; no smart quotes, nothig fancy.\n* 4581: apidoc: Excluded modules still included\n\n\nTesting\n--------\n   ```\n   \n  \n  \n   ### 1.7.0b2\n   ```\n   * 4415: autodoc classifies inherited classmethods as regular methods\n* 4415: autodoc classifies inherited staticmethods as regular methods\n* 4472: DOCUMENTATION_OPTIONS is not defined\n* 4491: autodoc: prefer _MockImporter over other importers in sys.meta_path\n* 4490: autodoc: type annotation is broken with python 3.7.0a4+\n* utils package is no longer installed\n* 3952: apidoc: module header is too escaped\n* 4275: Formats accepted by sphinx.util.i18n.format_date are limited\n* 4493: recommonmark raises AttributeError if AutoStructify enabled\n* 4209: intersphinx: In link title, &quot;v&quot; should be optional if target has no\n  version\n* 4230: slowdown in writing pages with sphinx 1.6\n* 4522: epub: document is not rebuilt even if config changed\n   ```\n   \n  \n  \n   ### 1.7.0b1\n   ```\n   * Add support for docutils 0.14\n* Add tests for the ``sphinx.ext.inheritance_diagram`` extension.\n   ```\n   \n  \n  \n   ### 1.6.7\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 1922: html search: Upper characters problem in French\n* 4412: Updated jQuery version from 3.1.0 to 3.2.1\n* 4438: math: math with labels with whitespace cause html error\n* 2437: make full reference for classes, aliased with &quot;alias of&quot;\n* 4434: pure numbers as link targets produce warning\n* 4477: Build fails after building specific files\n* 4449: apidoc: include &quot;empty&quot; packages that contain modules\n* 3917: citation labels are tranformed to ellipsis\n* 4501: graphviz: epub3 validation error caused if graph is not clickable\n* 4514: graphviz: workaround for wrong map ID which graphviz generates\n* 4525: autosectionlabel does not support parallel build\n* 3953: Do not raise warning when there is a working intersphinx inventory\n* 4487: math: ValueError is raised on parallel build. Thanks to jschueller.\n* 2372: autosummary: invalid signatures are shown for type annotated functions\n* 3942: html: table is not aligned to center even if ``:align: center``\n   ```\n   \n  \n  \n   ### 1.6.6\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4181: autodoc: Sort dictionary keys when possible\n* ``VerbatimHighlightColor`` is a new\n  :ref:`LaTeX &#39;sphinxsetup&#39; &lt;latexsphinxsetup&gt;` key (refs: 4285)\n* Easier customizability of LaTeX macros involved in rendering of code-blocks\n* Show traceback if conf.py raises an exception (refs: 4369)\n* Add :confval:`smartquotes` to disable smart quotes through ``conf.py``\n  (refs: 3967)\n* Add :confval:`smartquotes_action` and :confval:`smartquotes_excludes`\n  (refs: 4142, 4357)\n\nBugs fixed\n----------\n\n* 4334: sphinx-apidoc: Don&#39;t generate references to non-existing files in TOC\n* 4206: latex: reST label between paragraphs loses paragraph break\n* 4231: html: Apply fixFirefoxAnchorBug only under Firefox\n* 4221: napoleon depends on autodoc, but users need to load it manually\n* 2298: automodule fails to document a class attribute\n* 4099: C++: properly link class reference to class from inside constructor\n* 4267: PDF build broken by Unicode U+2116 NUMERO SIGN character\n* 4249: PDF output: Pygments error highlighting increases line spacing in\n  code blocks\n* 1238: Support ``:emphasize-lines:`` in PDF output\n* 4279: Sphinx crashes with pickling error when run with multiple processes and\n  remote image\n* 1421: Respect the quiet flag in sphinx-quickstart\n* 4281: Race conditions when creating output directory\n* 4315: For PDF &#39;howto&#39; documents, ``latex_toplevel_sectioning=&#39;part&#39;`` generates\n  ``\\chapter`` commands\n* 4214: Two todolist directives break sphinx-1.6.5\n* Fix links to external option docs with intersphinx (refs: 3769)\n* 4091: Private members not documented without :undoc-members:\n   ```\n   \n  \n  \n   ### 1.6.5\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 4107: Make searchtools.js compatible with pre-Sphinx1.5 templates\n* 4112: Don&#39;t override the smart_quotes setting if it was already set\n* 4125: Display reference texts of original and translated passages on\n  i18n warning message\n* 4147: Include the exception when logging PO/MO file read/write\n\nBugs fixed\n----------\n\n* 4085: Failed PDF build from image in parsed-literal using ``:align:`` option\n* 4100: Remove debug print from autodoc extension\n* 3987: Changing theme from alabaster causes HTML build to fail\n* 4096: C++, don&#39;t crash when using the wrong role type. Thanks to mitya57.\n* 4070, 4111: crashes when the warning message contains format strings (again)\n* 4108: Search word highlighting breaks SVG images\n* 3692: Unable to build HTML if writing .buildinfo failed\n* 4152: HTML writer crashes if a field list is placed on top of the document\n* 4063: Sphinx crashes when labeling directive ``.. todolist::``\n* 4134: [doc] :file:`docutils.conf` is not documented explicitly\n* 4169: Chinese language doesn&#39;t trigger Chinese search automatically\n* 1020: ext.todo todolist not linking to the page in pdflatex\n* 3965: New quickstart generates wrong SPHINXBUILD in Makefile\n* 3739: ``:module:`` option is ignored at content of pyobjects\n* 4149: Documentation: Help choosing :confval:`latex_engine`\n* 4090: [doc] :confval:`latex_additional_files` with extra LaTeX macros should\n  not use ``.tex`` extension\n* Failed to convert reST parser error to warning (refs: 4132)\n   ```\n   \n  \n  \n   ### 1.6.4\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* 3926: Add ``autodoc_warningiserror`` to suppress the behavior of ``-W``\n  option during importing target modules on autodoc\n\nBugs fixed\n----------\n\n* 3924: docname lost after dynamically parsing RST in extension\n* 3946: Typo in sphinx.sty (this was a bug with no effect in default context)\n* :pep: and :rfc: does not supports ``default-role`` directive (refs: 3960)\n* 3960: default_role = &#39;guilabel&#39; not functioning\n* Missing ``texinputs_win/Makefile`` to be used in latexpdf builder on windows.\n* 4026: nature: Fix macOS Safari scrollbar color\n* 3877: Fix for C++ multiline signatures.\n* 4006: Fix crash on parallel build\n* 3969: private instance attributes causes AttributeError\n* 4041: C++, remove extra name linking in function pointers.\n* 4038: C, add missing documentation of ``member`` role.\n* 4044: An empty multicolumn cell causes extra row height in PDF output\n* 4049: Fix typo in output of sphinx-build -h\n* 4062: hashlib.sha1() must take bytes, not unicode on Python 3\n* Avoid indent after index entries in latex (refs: 4066)\n* 4070: crashes when the warning message contains format strings\n* 4067: Return non-zero exit status when make subprocess fails\n* 4055: graphviz: the :align: option does not work for SVG output\n* 4055: graphviz: the :align: center option does not work for latex output\n* 4051: ``warn()`` function for HTML theme outputs &#39;None&#39; string\n   ```\n   \n  \n  \n   ### 1.6.3\n   ```\n   =====================================\n\nFeatures added\n--------------\n\n* latex: hint that code-block continues on next page (refs: 3764, 3792)\n\nBugs fixed\n----------\n\n* 3821: Failed to import sphinx.util.compat with docutils-0.14rc1\n* 3829: sphinx-quickstart template is incomplete regarding use of alabaster\n* 3772: &#39;str object&#39; has no attribute &#39;filename&#39;\n* Emit wrong warnings if citation label includes hyphens (refs: 3565)\n* 3858: Some warnings are not colored when using --color option\n* 3775: Remove unwanted whitespace in default template\n* 3835: sphinx.ext.imgmath fails to convert SVG images if project directory\n  name contains spaces\n* 3850: Fix color handling in make mode&#39;s help command\n* 3865: use of self.env.warn in sphinx extension fails\n* 3824: production lists apply smart quotes transform since Sphinx 1.6.1\n* latex: fix ``\\sphinxbfcode`` swallows initial space of argument\n* 3878: Quotes in auto-documented class attributes should be straight quotes\n  in PDF output\n* 3881: LaTeX figure floated to next page sometimes leaves extra vertical\n  whitespace\n* 3885: duplicated footnotes raises IndexError\n* 3873: Failure of deprecation warning mechanism of\n  ``sphinx.util.compat.Directive``\n* 3874: Bogus warnings for &quot;citation not referenced&quot; for cross-file citations\n* 3860: Don&#39;t download images when builders not supported images\n* 3860: Remote image URIs without filename break builders not supported remote\n  images\n* 3833: command line messages are translated unintentionally with ``language``\n  setting.\n* 3840: make checking ``epub_uid`` strict\n* 3851, 3706: Fix about box drawing characters for PDF output\n* 3900: autosummary could not find methods\n* 3902: Emit error if ``latex_documents`` contains non-unicode string in py2\n   ```\n   \n  \n  \n   ### 1.6.2\n   ```\n   =====================================\n\nIncompatible changes\n--------------------\n\n* 3789: Do not require typing module for python&gt;=3.5\n\nBugs fixed\n----------\n\n* 3754: HTML builder crashes if HTML theme appends own stylesheets\n* 3756: epub: Entity &#39;mdash&#39; not defined\n* 3758: Sphinx crashed if logs are emitted in conf.py\n* 3755: incorrectly warns about dedent with literalinclude\n* 3742: `RTD &lt;https://readthedocs.org/&gt;`_ PDF builds of Sphinx own docs are\n  missing an index entry in the bookmarks and table of contents. This is\n  `rtfd/readthedocs.org2857\n  &lt;https://github.com/rtfd/readthedocs.org/issues/2857&gt;`_ issue, a workaround\n  is obtained using some extra LaTeX code in Sphinx&#39;s own :file:`conf.py`\n* 3770: Build fails when a &quot;code-block&quot; has the option emphasize-lines and the\n  number indicated is higher than the number of lines\n* 3774: Incremental HTML building broken when using citations\n* 3763: got epubcheck validations error if epub_cover is set\n* 3779: &#39;ImportError&#39; in sphinx.ext.autodoc due to broken &#39;sys.meta_path&#39;.\n  Thanks to Tatiana Tereshchenko.\n* 3796: env.resolve_references() crashes when non-document node given\n* 3803: Sphinx crashes with invalid PO files\n* 3791: PDF &quot;continued on next page&quot; for long tables isn&#39;t internationalized\n* 3788: smartquotes emits warnings for unsupported languages\n* 3807: latex Makefile for ``make latexpdf`` is only for unixen\n* 3781: double hyphens in option directive are compiled as endashes\n* 3817: latex builder raises AttributeError\n   ```\n   \n  \n  \n   ### 1.6.1\n   ```\n   =====================================\n\nDependencies\n------------\n   ```\n   \n  \n  \n   ### 1.6\n   ```\n   * LDML format  support in i18n feature\n* ``sphinx.addnodes.termsep``\n* Some functions and classes in ``sphinx.util.pycompat``:\n  ``zip_longest``, ``product``, ``all``, ``any``, ``next``, ``open``,\n  ``class_types``, ``base_exception``, ``relpath``, ``StringIO``, ``BytesIO``.\n  Please use the standard library version instead;\n\nIf any deprecation warning like ``RemovedInSphinxXXXWarning`` are displayed,\nplease refer :ref:`when-deprecation-warnings-are-displayed`.\n\nFeatures added\n--------------\n   ```\n   \n  \n  \n   ### 1.6b3\n   ```\n   * 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* The ``make latexpdf`` from 1.6b1 (for GNU/Linux and Mac OS, using\n  ``latexmk``) aborted earlier in case of LaTeX errors than was the case with\n  1.5 series, due to hard-coded usage of ``--halt-on-error`` option. (refs 3695)\n* 3683: sphinx.websupport module is not provided by default\n* 3683: Failed to build document if builder.css_file.insert() is called\n* 3714: viewcode extension not taking ``highlight_code=&#39;none&#39;`` in account\n* 3698: Moving :doc: to std domain broke backwards compatibility\n* 3633: misdetect unreferenced citations\n   ```\n   \n  \n  \n   ### 1.6b2\n   ```\n   * 3662: ``builder.css_files`` is deprecated.  Please use ``add_stylesheet()``\n  API instead.\n   ```\n   \n  \n  \n   ### 1.6b1\n   ```\n   * ``sphinx.util.compat.Directive`` class is now deprecated. Please use instead\n  ``docutils.parsers.rst.Directive``\n* ``sphinx.util.compat.docutils_version`` is now deprecated\n* 2367: ``Sphinx.warn()``, ``Sphinx.info()`` and other logging methods are now\n  deprecated.  Please use ``sphinx.util.logging`` (:ref:`logging-api`) instead.\n* 3318: ``notice`` is now deprecated as LaTeX environment name and will be\n  removed at Sphinx 1.7. Extension authors please use ``sphinxadmonition``\n  instead (as Sphinx does since 1.5.)\n* ``Sphinx.status_iterator()`` and ``Sphinx.old_status_iterator()`` is now\n  deprecated.  Please use ``sphinx.util:status_iterator()`` instead.\n* ``Sphinx._directive_helper()`` is deprecated. Please use\n  ``sphinx.util.docutils.directive_helper()`` instead.\n* ``BuildEnvironment.set_warnfunc()`` is now deprecated\n* Following methods of ``BuildEnvironment`` is now deprecated.\n\n  - ``BuildEnvironment.note_toctree()``\n  - ``BuildEnvironment.get_toc_for()``\n  - ``BuildEnvironment.get_toctree_for()``\n  - ``BuildEnvironment.create_index()``\n\n  Please use ``sphinx.environment.adapters`` modules instead.\n* latex package  ``footnote`` is not loaded anymore by its bundled replacement\n  ``footnotehyper-sphinx``. The redefined macros keep the same names as in the\n  original package.\n* 3429: deprecate config setting ``latex_keep_old_macro_names``. It will be\n  removed at 1.7, and already its default value has changed from ``True`` to\n  ``False``.\n* 3221: epub2 builder is deprecated\n* 3254: ``sphinx.websupport`` is now separated into independent package;\n  ``sphinxcontrib-websupport``.  ``sphinx.websupport`` will be removed in\n  Sphinx-2.0.\n* 3628: ``sphinx_themes`` entry_point is deprecated.  Please use\n  ``sphinx.html_themes`` instead.\n   ```\n   \n  \n  \n   ### 1.5.6\n   ```\n   =====================================\n\nBugs fixed\n----------\n\n* 3614: Sphinx crashes with requests-2.5.0\n* 3618: autodoc crashes with tupled arguments\n* 3664: No space after the bullet in items of a latex list produced by Sphinx\n* 3657: EPUB builder crashes if document startswith genindex exists\n* 3588: No compact (p tag) html output in the i18n document build even when\n  :confval:`html_compact_lists` is True.\n* 3685: AttributeError when using 3rd party domains\n* 3702: LaTeX writer styles figure legends with a hard-coded ``\\small``\n* 3708: LaTeX writer allows irc scheme\n* 3717: Stop enforcing that favicon&#39;s must be .ico\n* 3731, 3732: Protect isenumclass predicate against non-class arguments\n* 3320: Warning about reference target not being found for container types\n* Misspelled ARCHIVEPREFIX in Makefile for latex build repertory\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/sphinx\n  - Changelog: https://pyup.io/changelogs/sphinx/\n  - Homepage: http://sphinx-doc.org/\n</details>\n\n"
        },
        {
            "repo_url": "https://github.com/pyupio/safety",
            "id": 164,
            "title": "Added Dockerfile and readme instructions #155",
            "labels": [],
            "description": "Referencing issue #155 I added a minimal Dockerfile and usage instructions to the Readme. Use in e.g. gitlab-ci with:\r\n\r\n```\r\nsafety:\r\n    image: safety\r\n    stage: test\r\n    script:\r\n        - export HTTPS_PROXY=\"https://${PROXY_HOST}:${PROXY_PORT}\"\r\n        - safety check -r requirements.txt --full-report\r\n```"
        },
        {
            "repo_url": "https://github.com/pyupio/safety",
            "id": 157,
            "title": "Add --proxy= command line option",
            "labels": [],
            "description": "* safety version: 1.8.4\r\n* Python version: All\r\n* Operating System: All\r\n\r\n### Description\r\n\r\nTrying to run safety within a corporate, _(paranoid),_ environment.\r\nA lot of error print out about socket timeout, etc., then error termination. \r\n\r\n### What I Did\r\n`pip install safety`  # N.B. pip.ini contains a proxy setting that allows it to work\r\n`safety check`  # Resulted in the errors above\r\n`set HTTPS_PROXY=` _the_proxy_from_pip.ini_\r\n`safety check`  # This time it worked.\r\n```\r\nNot permitted to paste from company machine!\r\n```\r\nThe underlying `requests` library has `--proxy` option that can be used to address this problem but it is not exposed by the `safety` command line.  While the work around is simple enough a lot of people who should be running `safety check` would not be happy about using it and possibly not aware - if the help for safety exposed a `--proxy=` then it should point them in the correct direction."
        }
    ],
    "myint/scspell": [
        {
            "repo_url": "https://github.com/myint/scspell",
            "id": 25,
            "title": "python2 set-dictionary issue",
            "labels": [
                "help wanted",
                "bug"
            ],
            "description": "``` console\r\ntom@computer:~/$ scspell --set-dictionary=/home/tom/Dropbox/work/data/spelling.txt\r\nTraceback (most recent call last):\r\n  File \"/home/tom/hacking/energysage/env/bin/scspell\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 899, in main\r\n    set_dictionary(args.dictionary)\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 648, in set_dictionary\r\n    config.write(f)\r\n  File \"/usr/lib/python2.7/ConfigParser.py\", line 414, in write\r\n    fp.write(\"\\n\")\r\nTypeError: write() argument 1 must be unicode, not str\r\ntom@computer:~/$ Python 2.7.13\r\ntom@computer:~/$ pip freeze | grep -i scspell\r\nscspell3k==2.1\r\n```\r\n\r\n"
        }
    ],
    "Kuniwak/vint": [
        {
            "repo_url": "https://github.com/Kuniwak/vint",
            "id": 225,
            "title": "UnicodeDecodeError with chardet 3",
            "labels": [
                "waiting for reply",
                "bug"
            ],
            "description": "The following minimal vim file will cause an error:\r\n```vim\r\nscriptencoding utf-8\r\n\" :purple_heart: \ud83d\udc9c\r\n\" set list listchars=tab:\u00bb\u00b7,trail:\u00b7,eol:\u00ac,nbsp:_,extends:\u276f,precedes:\u276e\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\u2026/Vcs/vint/.venv/bin/vint\", line 11, in <module>\r\n    load_entry_point('vim-vint', 'console_scripts', 'vint')()\r\n  File \"\u2026/Vcs/vint/vint/__init__.py\", line 11, in main\r\n    init_cli()\r\n  File \"\u2026/Vcs/vint/vint/bootstrap.py\", line 22, in init_cli\r\n    cli.start()\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 27, in start\r\n    violations = self._lint_all(env, config_dict)\r\n  File \"\u2026/Vcs/vint/vint/linting/cli.py\", line 120, in _lint_all\r\n    violations += linter.lint_file(file_path)\r\n  File \"\u2026/Vcs/vint/vint/linting/linter.py\", line 106, in lint_file\r\n    root_ast = self._parser.parse_file(path)\r\n  File \"\u2026/Vcs/vint/vint/ast/parsing.py\", line 63, in parse_file\r\n    decoded = bytes_seq.decode(encoding)\r\n  File \"\u2026/Vcs/vint/.venv/lib/python3.6/encodings/cp1254.py\", line 15, in decode\r\n    return codecs.charmap_decode(input,errors,decoding_table)\r\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x9d in position 105: character maps to <undefined>\r\n```\r\n\r\n`encoding_hint` in `parse_file` from `chardet.detect(bytes_seq)` is: `{'encoding': 'Windows-1254', 'confidence': 0.5658124254347925, 'language': 'Turkish'}`.\r\n\r\nWith chardet 2.3 it is `{'encoding': 'ISO-8859-2', 'confidence': 0.6680924803464797}`.\r\n\r\nThey seem to temporarily have disabled `ISO-8859-2` as per the README on PyPI.\r\n\r\nBut anyway, since `scriptencoding` is present, this should be used by vint directly, and `parse_file` should fall back to `utf-8` probably anyway in case of errors?!\r\n\r\n`b'scriptencoding' in bytes_seq` could be used here for starters."
        },
        {
            "repo_url": "https://github.com/Kuniwak/vint",
            "id": 127,
            "title": "Maintainer Wanted",
            "labels": [
                "help wanted"
            ],
            "description": "I have maintained the vint for half a year, but I will be busy for the next half a year.\nSo I will be not able to maintain constantly.\n\nIf you interest in the Vint, please help to make Vint better.\n- [Design diagram](https://github.com/Kuniwak/vint/wiki/Vint-design)\n##### EDIT\n\nI mean that \"I'm going to continue to maintain Vint, but now I need more help.\"\n"
        },
        {
            "repo_url": "https://github.com/Kuniwak/vint",
            "id": 182,
            "title": "#177 breaks pip install for python2",
            "labels": [
                "wontfix"
            ],
            "description": "Issuing `pip install vim-vint` results in an error: \n\n```\nComplete output from command python setup.py egg_info:\nerror in vim-vint setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers\n```\n\nUsing pip3 or specifying vim-vint=0.3.9 installs vim-vint correctly.\n\nI can't find any documentation on `~=`, which suggests that this is the culprit.\n"
        }
    ],
    "jendrikseipp/vulture": []
}
