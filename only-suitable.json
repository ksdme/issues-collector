{"amperser/proselint": [{"repo_url": "https://github.com/amperser/proselint", "id": 792, "title": "Online API", "labels": [], "description": "I am thinking of creating a standalone GUI for proselint. A simple alternative would be to simply send the text to http://proselint.com/write/ . Is there a plan to support this?"}], "vfaronov/httpolice": [], "myint/autoflake": [{"repo_url": "https://github.com/myint/autoflake", "id": 35, "title": "Don't remove imports from __init__.py", "labels": ["enhancement", "help wanted"], "description": "A typical way to set up a project is to have the modules specify `__all__` variables and then have the `__init__.py` `from .module_name import *`.  This causes autoflake to remove all of the imports.\r\n\r\nPlease consider leaving the imports in `__init__.py`."}], "hhatto/autopep8": [{"repo_url": "https://github.com/hhatto/autopep8", "id": 227, "title": "Create diff for a specific pep8 issue", "labels": [], "description": "I'm trying to use autopep8 to automate a few things. This is my workflow:\n- I want to run pep8 on a code base and list all the results.\n- Then I want the user to specify specific issues he wants fixed\n- Then autopep8 should only fix these issues.\n\nI notice with `--select` I can choose which errors autopep8 fixes, how do I specify a specific issue (I guess this is characterized by line, column, issue code) to fix ?\n\nCould you help me on how to do this ?\n\nExample:\nI have a file with the line `print( sys.path, ( 2))` This raises \n\n```\ntest.py:1:7: E201 whitespace after '('\ntest.py:1:19: E201 whitespace after '('\n```\n\nSo, I run `autopep8 test.py --select=E201 --range 1 1 --diff` but this fixes both errors.\n"}], "PyCQA/bandit": [{"repo_url": "https://github.com/PyCQA/bandit", "id": 356, "title": "New plugin to check for use of pyghmi", "labels": ["hacktoberfest", "enhancement"], "description": "**Is your feature request related to a problem? Please describe.**\r\nIPMI is known to be a non-secure protocol.  \r\n\r\nhttps://www.us-cert.gov/ncas/alerts/TA13-207A\r\n\r\n**Describe the solution you'd like**\r\nNew check plugin to detect use of pyghmi (python IPMI library).\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**Additional context**\r\nN/A\r\n"}], "myint/cppclean": [{"repo_url": "https://github.com/myint/cppclean", "id": 120, "title": "Support Windows by using `setuptools` in `setup.py` instead of `distutils`", "labels": ["help wanted"], "description": "`pip --install cppclean` is not sufficient on my Computer.\r\n\r\nI'm unable to execute `py cppclean` after that.  \r\nI have to execute `py $AbsolutePathToCppclean`\r\nI don't work much with python."}], "theandrewdavis/cpplint": [], "willkg/dennis": [{"repo_url": "https://github.com/willkg/dennis", "id": 70, "title": "merge and generalize lint rules", "labels": [], "description": "The linter is kind of a mess right now. Issues:\n1. We have \"lint rules\" and \"template lint rules\", but we should really have \"rules for id strings\" and \"rules for translated strings\". In other words, one file with all the rules in them and they're all of type `LintRule`. That'll reduce a ton of repeated code.\n2. Lint rules do goofy things to make sure they only look at strings that apply to them. For example, some lint rules only apply to strings with python-format variables. Right now, we do goofy things at the beginning to handle that. We should do something better. Maybe call the lint rule with more context so it's easier for it to figure out whether it should check things?\n3. The documentation for lint rules is split between the docs and the code and it's almost certainly out of sync. We need a better way to deal with that. Maybe document it in the code and extract it with autodoc?\n4. We should have better registration infrastructure for lint rules. Right now it's pretty hard-coded-esque and not plugin-friendly.\n"}], "jimo1001/docutils-ast-writer": [], "myint/eradicate": [], "retr0h/git-url-parse": [], "sk-/html-linter": [], "timothycrosley/isort": [{"repo_url": "https://github.com/timothycrosley/isort", "id": 454, "title": "Enhancement request: Change formatting options per section", "labels": ["enhancement"], "description": "I just found isort (how have I survived so long without it?!) and let me first say a resounding THANK YOU.\n\nI would like to request/suggest formatting options be adjustable per section (vs. always global).\n\nFor example, one might set (globally):\n`multi_line_output=3`\n`include_trailing_comma=true`\n\nThen for (only) section FUTURE, change:\n`multi_line_output=5`\n\nThen for (only) section LOCALFOLDER, add:\n`force_grid_wrap=true`\n\nand so on.\n\nEffectively allowing additions/changes to formatting options tailored for each section, vs. all formatting settings being global.\n\nIf this is already possible/available, please feel free to point me in the right direction -- but from quite a bit of documentation review and experimentation, I do not believe this is currently possible.\n"}], "myint/language-check": [{"repo_url": "https://github.com/myint/language-check", "id": 50, "title": "Upgrade to LanguageTool latest version", "labels": ["enhancement", "help wanted"], "description": "### 1. Briefly\r\n\r\nI don't understand, how I can ignore English words, if I use Russian language by default.\r\n\r\nIt feature by default, if I run LanguageTool, use:\r\n\r\n1. command line,\r\n1. [**Sublime Text LanguageTool**](https://github.com/gtarawneh/languagetool-sublime) plugin.\r\n\r\n### 2. Environment\r\n\r\n+ Windows 10 LTSB Enterprise EN,\r\n+ Python 3.6.3,\r\n+ LanguageTool 3.6,\r\n+ language-check 1.1.\r\n\r\n### 3. Argumentation\r\n\r\nI write texts in Russian, where can be many words from English. Now language-check check English words as errors.\r\n\r\n### 4. Settings\r\n\r\nMy file `SashaExample.txt`:\r\n\r\n```markdown\r\nSasha Belissimo!\r\n\r\n\u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n```\r\n\r\nMy file [**`eric_languagetool.py`**](https://github.com/Kristinita/SashaPythonista/blob/master/tests/eric_languagetool.py):\r\n\r\n```python\r\nfrom eric_config import all_txt_in_eric_room_wihtout_subfolders\r\nfrom eric_config import log\r\n\r\nimport language_check\r\nimport os\r\n\r\ntool_language = language_check.LanguageTool('ru-RU')\r\n\r\nfailure_tests = False\r\n\r\nfor filename in all_txt_in_eric_room_wihtout_subfolders:\r\n\r\n    filename_without_path = os.path.basename(filename)\r\n\r\n    log.debug(filename_without_path + \"\\n\")\r\n    file_text = open(filename_without_path).read()\r\n\r\n    error_list = tool_language.check(file_text)\r\n    print(*error_list, sep='\\n\\n')\r\n    if not error_list:\r\n        log.debug(\r\n            \"Not detect errors and typos in\" +\r\n            filename_without_path +\r\n            \"\\n\\n\")\r\n    else:\r\n        log.warning(\r\n            \"Detect error(s) or/and typo(s) in \" + filename_without_path + \"\\n\\n\")\r\n        failure_tests = True\r\n\r\nif not failure_tests:\r\n    log.notice(\"LanguageTool no detect errors and typos for all files.\")\r\n\r\nif failure_tests:\r\n    log.warning(\r\n        \"LanguageTool detect error(s) or/and typo(s). Please, review it.\")\r\n\r\n```\r\n\r\n### 5. Expected behavior\r\n\r\n**If** I run in console:\r\n\r\n```shell\r\nD:\\SashaPythonista>java -jar \"D:/Chocolatey/lib/languagetool/tools/LanguageTool-3.6/languagetool.jar\" SashaExample.txt\r\n```\r\n\r\nNo errors:\r\n\r\n![LanguageTool CLI](https://i.imgur.com/vGEXMaz.png)\r\n\r\nAlso, I can't errors, if I can use Sublime Text LanguageTool package.\r\n\r\n### 6. Actual behavior\r\n\r\nI run `eric_languagetool.py` for `SashaExample.txt`:\r\n\r\n```shell\r\nD:\\SashaPythonista>language-check --heelp\r\n'language-check' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nD:\\SashaPythonista>python \"tests/eric_languagetool.py\"\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo!  \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n```\r\n\r\nThe same in Interpreter:\r\n\r\n```python\r\n>>> import language_check\r\n>>> tool_language = language_check.LanguageTool('ru-RU')\r\n>>> file_text = u'Sasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!'\r\n>>> error_list = tool_language.check(file_text)\r\n>>> print(*error_list, sep='\\n\\n')\r\nLine 1, column 1, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n^^^^^\r\n\r\nLine 1, column 7, Rule ID: MORFOLOGIK_RULE_RU_RU\r\nMessage: \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\r\nSasha Belissimo! \u0421\u0430\u0448\u0430 \u0421\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u0430!\r\n      ^^^^^^^^^\r\n>>>\r\n```\r\n\r\nEnglish words in Russian texts check as errors.\r\n\r\n### 7. Did not help\r\n\r\nI don't find, how I can solve this problem, in:\r\n\r\n1. language-check description,\r\n1. issues of this repository.\r\n\r\nThanks."}], "lxml/lxml": [{"repo_url": "https://github.com/lxml/lxml", "id": 236, "title": "Adds a `smart_prefix` option to XPath evaluations to overcome a counter-intuitive design flaw", "labels": [], "description": "> Namespaces are one honking great idea -- let's do more of those!\r\n\r\nUsing XPath to locate elements is quiet cumbersome when it comes to documents that have a default namespace:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{'x': 'http://www.w3.org/2000/svg', None: 'http://www.tei-c.org/ns/1.0'}\r\n>>> root.xpath('./text/body')\r\n[]\r\n>>> root.xpath('./text/body', namespaces=root.nsmap)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    root.xpath('./text/body', namespaces=root.nsmap)\r\n  File \"src/lxml/lxml.etree.pyx\", line 1584, in lxml.etree._Element.xpath (src/lxml/lxml.etree.c:59349)\r\n    evaluator = XPathElementEvaluator(self, namespaces=namespaces,\r\n  File \"src/lxml/xpath.pxi\", line 261, in lxml.etree.XPathElementEvaluator.__init__ (src/lxml/lxml.etree.c:170589)\r\n  File \"src/lxml/xpath.pxi\", line 133, in lxml.etree._XPathEvaluatorBase.__init__ (src/lxml/lxml.etree.c:168702)\r\n  File \"src/lxml/xpath.pxi\", line 57, in lxml.etree._XPathContext.__init__ (src/lxml/lxml.etree.c:167658)\r\n    _BaseContext.__init__(self, namespaces, extensions, error_log, enable_regexp,\r\n  File \"src/lxml/extensions.pxi\", line 84, in lxml.etree._BaseContext.__init__ (src/lxml/lxml.etree.c:156529)\r\n    if namespaces:\r\nTypeError: empty namespace prefix is not supported in XPath\r\n```\r\n\r\nThis is a [well](http://lxml.de/xpathxslt.html) [documented](http://lxml.de/FAQ.html#xpath-and-document-traversal) [issue](http://git.net/ml/python-lxml-devel/2009-08/msg00039.html) ([also here](https://stackoverflow.com/questions/8053568/how-do-i-use-empty-namespaces-in-an-lxml-xpath-query)) and is [commonly solved](https://stackoverflow.com/questions/31177707/parsing-xml-containing-default-namespace-to-get-an-element-value-using-lxml) by manipulating the namespace mapping with an ad-hoc prefix - which loses the information what the default namespace was unless preserved - and adding that to XPath expressions. ([another hack](https://stackoverflow.com/questions/5572247/how-to-find-xml-elements-via-xpath-in-python-in-a-namespace-agnostic-way), [stdlib as well](http://www.goodmami.org/2015/11/04/python-xpath-and-default-namespaces.html) with some insights)\r\n\r\nBut this solution doesn't play well in generalising code like adapter classes where it becomes tedious and error prone because XPath expressions are not always identical (did i mention they are counter-intuitive to type?) and keeping track of namespace mappings across loosely coupled code elements introduces boilerplates. \r\n\r\nUltimately, the interplay of document namespaces and XPath expressions is everything but pythonic and rather complicated than complex, though\r\n \r\n> There should be one-- and preferably only one --obvious way to do it.\r\n\r\nThe root of this issue is caused by [a flaw](https://lists.w3.org/Archives/Public/www-dom/2002JulSep/0159.html) in the [XPath 1.0](https://www.w3.org/TR/xpath/#node-tests) specs that `libxml2` follows in its implementation:\r\n\r\n> A QName in the node test is expanded into an expanded-name using the namespace declarations from the expression context. This is the same way expansion is done for element type names in start and end-tags except that the default namespace declared with xmlns is not used: **if the QName does not have a prefix, then the namespace URI is null** (this is the same way attribute names are expanded). It is an error if the QName has a prefix for which there is no namespace declaration in the expression context.\r\n\r\nWhile [XML namespaces](https://www.w3.org/TR/REC-xml-names/#ns-decl) actually have a notion of an unaliased default namespace:\r\n\r\n> If the attribute name matches DefaultAttName, then the namespace name in the attribute value is that of the default namespace in the scope of the element to which the declaration is attached.\r\n\r\n[XPath 2.0](https://www.w3.org/TR/xpath20/#node-tests) did eventually fix this:\r\n\r\n> A QName in a name test is resolved into an expanded QName using the statically known namespaces in the expression context. It is a static error [err:XPST0081] if the QName has a prefix that does not correspond to any statically known namespace. **An unprefixed QName, when used as a name test on an axis whose principal node kind is element, has the namespace URI of the default element/type namespace in the expression context**; otherwise, it has no namespace URI.\r\n\r\nThere's no XPath 2.0 implementation with Python bindings around (well, there is one to XQuilla that returns raw strings and is far off `lxml`'s capabilities), and it is very unlikely there's one to be implemented as the extension as a whole is a lot - which probably no one needs outside the XQuery/XSLT scene. [`libxml2` didn't intend to](https://www.mail-archive.com/xml@gnome.org/msg04082.html) ten years ago, but hey, [looking for a thesis](https://diplomky.redhat.com/topic/show/190/xpath-20-support-to-libxml) to write?\r\n\r\nThus I propose to backport that bug fix from XPath 2.0 to `lxml`'s XPath interfaces with an opt-in `smart_prefix` option without considering the whole standard as  \r\n\r\n> practicality beats purity.\r\n\r\nBehind the scenes the ad-hoc prefix 'solution' described above is applied, but completely hidden from the client code.\r\n\r\nThis pull request demonstrates the design and isn't completed yet, at least these issues still need to be addressed:\r\n\r\n- documentation\r\n- predicates are handled rather hackish and i have doubts that it works with more complex predicates\r\n  - i'd appreciate test proposals for practical examples with such\r\n  - support for predicates with the `smart_prefix` option could be dropped altogether, finer-grained selection is possible with Python and probably a common usage\r\n- should this even be the default behavior with opt-out? afaict it wouldn't break any code as supplying a namespace map with a default namespace (mapped to `None`) is currently invalid \r\n  - i'd keep it out of XSLT anyway\r\n- should result elements from such queries have a property that stores the option? so later calls on `.xpath()` of these elements would behave the same if no `smart_prefix` option is provided\r\n- can `regex.h` be used directly from Cython, but that's not specific to this here\r\n\r\nbtw, this is the first time i used Cython and my C usage was long ago, i'm happy about every feedback for improvements.\r\n\r\nNow, let's have some fun:\r\n\r\n```python\r\n>>> root = etree.fromstring('<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" xmlns:x=\"http://www.w3.org/2000/svg\"><text><body><x:svg /></body></text></TEI>')\r\n>>> root.nsmap\r\n{None: 'http://www.tei-c.org/ns/1.0', 'x': 'http://www.w3.org/2000/svg'}\r\n>>> root.xpath('./text/body', namespaces=root.nsmap, smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n>>> root.xpath('./text/body', smart_prefix=True)\r\n[<Element {http://www.tei-c.org/ns/1.0}body at 0x7f8e655587c8>]\r\n```\r\n\r\n(oh, the inplace build option fails on my local machine without a helpful message. does anyone have a hint on that?)\r\n"}], "mementoweb/py-memento-client": [{"repo_url": "https://github.com/mementoweb/py-memento-client", "id": 2, "title": "More efficient timegate query option", "labels": [], "description": "Great to see this library, I was just exploring using the `get_memento_info` for Netcapsule or Reconstruct and ran into the following issue.\n\nWhile the `get_memento_info` is a great general purpose function, I think there needs to be a more optimized option that performs just the basic \"Get memento from TimeGate at specified datetime\" and nothing else. Ideally, this means having a single HTTP request to the TimeGate to get the desired info.\n\nI propose adding an extra param, `include_uri_checks`, which will default to True, but when set to False, will disable any of the following additional checks.\n\nCurrently, the `get_memento_info` also includes the following:\n- A `get_original_uri` queries the original url to determine if its a URL-R or URl-M. This is unnecessary if the user knows that a URL-R is being passed in (and potentially slow). With `include_uri_checks` disabled, this test will be skipped.\n- Redirects are enabled on the TimeGate `HEAD` request, initiating potentially many redirects. This can be disabled to ensure just one request to the TimeGate. With `include_uri_checks` disabled,\n  the value of `Location` or `Content-Location` header will be used instead.\n- Redirects are followed with a head request to the URL-M to get the `Memento-Datetime` header. This also brings additional overhead. Instead, the datetime is usually already available Link header response from the TimeGate, getting the `datetime` from the `rel=memento` entry. (As a side note, I was surprised to find that this is not required, though luckily present in most implementations -- seems like the timegate should always return the datetime in the link header, rather than force user to make another request to the URL-M)\n- With this option, automatic redirecting, eg. `http://lanl.gov` -> `http://www.lanl.gov/worldview/` is disabled, as the users browser will follow the 302 explicitly and it will be reflected to the user.\n\nFor now, I've called this property `include_uri_checks` but can be changed to something else. If better to make a separate function, that can work as well.\n\nWith this option disabled, Reconstruct and Netcapsule can use start using this API, rather than relying on the existing Memento JSON api that's only on the aggregator.\n\nI've also included a simple test file with demonstrates these changes.\n\nLet me know if there are any questions/thoughts.\n"}], "datapublica/munkres": [], "PyCQA/pycodestyle": [{"repo_url": "https://github.com/PyCQA/pycodestyle", "id": 704, "title": "Wrong or non-existent column number", "labels": [], "description": "In some occasions, pycodestyle is returning the wrong or non-existent column number. We are facing some issues on [AtomLinter/linter-flake8](https://github.com/AtomLinter/linter-flake8) due to this problem. This issue happens when using extended characters.\r\n\r\nA simple reproduction:\r\n1. Create a file named foo.py and include the content below. Notice that there is a single whitespace after the special dot character.\r\n```\r\n\u2022 \r\n```\r\n2. Execute `pycodestyle foo.py`. The output is `foo.py:1:4: W291 trailing whitespace`. The message references line 1 and column 4. There is no column 4 in the file.\r\n\r\nThis seems to be some encoding issue. It seems that the character `\u2022` is being treated as multiple characters."}], "PyCQA/pydocstyle": [{"repo_url": "https://github.com/PyCQA/pydocstyle", "id": 274, "title": "Automatic inheritance of docstrings", "labels": [], "description": "I am using [custom_inherit](https://github.com/meowklaski/custom_inherit) package to automatically inherit docstrings. It would be great if pydocstyle could somehow detect that and not issue a D102 error on such methods.\r\n\r\nI think this could be done by some simple heuristic and configuration:\r\n* allowing to specify a list of decorators, which if they are applied to a method make D102 not be made\r\n* allow to list name of a base class/metaclass used, and if it is used, D102 is not made\r\n\r\nThis might be simpler than #185 and would require only a basic check without really do dynamic analysis of the code."}], "PyCQA/pyflakes": [{"repo_url": "https://github.com/PyCQA/pyflakes", "id": 222, "title": "--exclude flag to the command line", "labels": [], "description": "\n*Original report by [asmeurer](https://launchpad.net/~asmeurer) (@asmeurer?) on [Launchpad](https://bugs.launchpad.net/bugs/1481052):*\n\n------------------------------------\n\nI know that pyflakes doesn't want to add support for excluding errors inside of scripts, but would you be open to adding the --exclude flag to the pyflakes command to exclude files? My situation is this. I want to run pyflakes automatically in the test suite (on Travis CI). However, there are some files that should be ignored (e.g., a compat.py file with a bunch of Python 2/3 compatibility importat that pyflakes gives a bunch of unused import and undefined name warnings for, and a bundled library that uses * imports, but which I'd rather just leave alone).  I tried using extended globbing in bash, but it seems it's not so easy to mix multiple !() globs, even with globstar enabled. Anyway, I couldn't figure out how to do it.\n\nI know I can use flake8, but it seems that flake8 --select=F doesn't actually include all pyflakes errors (like syntax errors).  I also kind of want to avoid flake8 just to reduce the temptation to test for pep8 errors. \n\nWould it be OK to add --exclude, like flake8 and pep8, which excludes files or directories, to the flake8 command? The --exclude flag in flake8/pep8 accepts a comma separate list of values, which seems kind of dumb to me (it makes more sense to just accept files from the command line, like \"pyflakes --exclude compat.py stuff/\", which could then be globbed), but I'm OK with keeping it that way if cross-compatibility is a concern.\n"}], "PyCQA/pylint": [{"repo_url": "https://github.com/PyCQA/pylint", "id": 2563, "title": "E1101: (Flask) Method 'jinja_env' has no 'add_extension', 'filter' member (no-member)", "labels": [], "description": "<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run `pylint hello.py` (after installing flask 1.0.2), where `hello.py` is a simple flask app as below:\r\n```python\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\napp.jinja_env.add_extension('jinja2.ext.do')\r\napp.jinja_env.filters['somefilter'] = lambda s: s\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return 'Hello, World!'\r\n```\r\n\r\n### Current behavior\r\npylint outputs the following for the file above:\r\n```shell\r\n************* Module hello\r\nhello.py:3:0: E1101: Method 'jinja_env' has no 'add_extension' member (no-member)\r\nhello.py:4:0: E1101: Method 'jinja_env' has no 'filters' member (no-member)\r\n```\r\n\r\n### Expected behavior\r\nIt should give no error because `add_extension` and `filters` are members of `Flask.jinja_env`.\r\n\r\n### pylint --version output\r\n```shell\r\npylint 2.1.1\r\nastroid 2.0.4\r\npython 3.6.6\r\n```\r\n### Check the docs below for `jinja environment`\r\n[Flask.jinja_env](http://flask.pocoo.org/docs/1.0/api/?highlight=jinja_env#flask.Flask.jinja_env)\r\n[Flask.jinja_env.filters](http://flask.pocoo.org/docs/1.0/templating/#registering-filters)\r\n[jinja2.Environment.add_extension](http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment.add_extension)\r\n* Also, `jinja_env` is a cached property. Somewhat like [this](https://github.com/pydanny/cached-property).\r\n\r\n### workaround\r\napart from disabling, if we change code as follows, pylint shows no errors.\r\n```python\r\napp.jinja_env().add_extension('jinja2.ext.do')\r\napp.jinja_env().filters['somefilter'] = lambda s: s\r\n```\r\n"}], "regebro/pyroma": [], "rubik/radon": [{"repo_url": "https://github.com/rubik/radon", "id": 156, "title": "How does Radon cc calculate a class's complexity?", "labels": [], "description": "I can not find any documentation about how Radon cc calculates a class's complexity, then I assume from its outputs that it average a class's methods' complexities and round it to the nearest integer.\r\n\r\nThen I test Radon with this class. It has 6 methods, 5 with complexity of 1 and the other with complexity of 5. THen the average is 1.66 and Radon should report 2. In fact, it returns 1.\r\n\r\nIf I add 1 more IF statement to it, then the complexity is raised to 2 (average is 1.8). \r\n\r\nI attach here the test file.\r\n\r\nBest,\r\n[large_class.py.txt](https://github.com/rubik/radon/files/2491955/large_class.py.txt)\r\n\r\n"}], "twolfson/restructuredtext-lint": [{"repo_url": "https://github.com/twolfson/restructuredtext-lint", "id": 43, "title": "New check to enforce line length?", "labels": ["enhancement", "help wanted"], "description": "I would like to be able to lint my RST files for excessively long lines. Since this is likely to be controversial, the new check might best be ignored by default?\r\n\r\ni.e. something similar to the ``flake8`` code ``E501`` for maximum line length, which can be configured at the command line:\r\n\r\n```\r\n  --max-line-length=n   Maximum allowed line length for the entirety of this\r\n                        run. (Default: 79)\r\n```\r\n\r\nI would suggest using the same default line length (and double checking if this counts the new line character or not)."}], "myint/rstcheck": [{"repo_url": "https://github.com/myint/rstcheck", "id": 31, "title": "extended control of C/C++ validation", "labels": ["enhancement"], "description": "Hi,\r\n\r\nThe current `c_checker()` and `cpp_checker()` uses a simple `-I. -I..` which will get you some basic tests, but in real world we're often using things like `pkg-config --cflags glib-2.0` and the likes to provide definitions and more include paths. Then a way to control `INCLUDE_FLAGS` would be required. I'm not sure how to best provide these extensions in a compatible way so we don't break sphinx, maybe using comments?\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. code-block: c\r\n  regular code block here\r\n```\r\nEventually allow these to be linked in addition to syntax check:\r\n\r\n```\r\n.. rstcheck-include-flags: -I.\r\n.. rstcheck-pkg-config: glib-2.0\r\n.. rstcheck-link: yes\r\n.. code-block: c\r\n  regular code block here\r\n```\r\n\r\nLikewise, sometimes in tutorial/documentation we split the code into multiple pieces that can't be validated at once. I could work-around that by using an external C/C++ file with include statements, however if we could add a argument to \"append to previous block\" it would be amazing, allowing things like `rstcheck-mode` with a choice of `new`, `append` and `ignore`:\r\n\r\n```\r\n.. code-block: c\r\n\r\n  void on_event(void *ctx) {\r\n   ...\r\n  }\r\n\r\nThis provides a function to callback when event happens...\r\n\r\n.. rstcheck-mode: append\r\n.. code-block: c\r\n\r\n  int main(void) {\r\n   my_lib_init();\r\n   my_lib_on_event_set(on_event, NULL);\r\n   return 0;\r\n  }\r\n```\r\n\r\n"}], "pyupio/safety": [{"repo_url": "https://github.com/pyupio/safety", "id": 163, "title": "Update pip to 18.1", "labels": [], "description": "\nThis PR updates [pip](https://pypi.org/project/pip) from **9.0.3** to **18.1**.\n\n\n\n<details>\n  <summary>Changelog</summary>\n  \n  \n   ### 18.1\n   ```\n   =================\n\nFeatures\n--------\n\n- Allow PEP 508 URL requirements to be used as dependencies.\n\n  As a security measure, pip will raise an exception when installing packages from\n  PyPI if those packages depend on packages not also hosted on PyPI.\n  In the future, PyPI will block uploading packages with such external URL dependencies directly. (`4187 &lt;https://github.com/pypa/pip/issues/4187&gt;`_)\n- Upgrade pyparsing to 2.2.1. (`5013 &lt;https://github.com/pypa/pip/issues/5013&gt;`_)\n- Allows dist options (--abi, --python-version, --platform, --implementation) when installing with --target (`5355 &lt;https://github.com/pypa/pip/issues/5355&gt;`_)\n- Support passing ``svn+ssh`` URLs with a username to ``pip install -e``. (`5375 &lt;https://github.com/pypa/pip/issues/5375&gt;`_)\n- pip now ensures that the RECORD file is sorted when installing from a wheel file. (`5525 &lt;https://github.com/pypa/pip/issues/5525&gt;`_)\n- Add support for Python 3.7. (`5561 &lt;https://github.com/pypa/pip/issues/5561&gt;`_)\n- Malformed configuration files now show helpful error messages, instead of tracebacks. (`5798 &lt;https://github.com/pypa/pip/issues/5798&gt;`_)\n\nBug Fixes\n---------\n\n- Checkout the correct branch when doing an editable Git install. (`2037 &lt;https://github.com/pypa/pip/issues/2037&gt;`_)\n- Run self-version-check only on commands that may access the index, instead of\n  trying on every run and failing to do so due to missing options. (`5433 &lt;https://github.com/pypa/pip/issues/5433&gt;`_)\n- Allow a Git ref to be installed over an existing installation. (`5624 &lt;https://github.com/pypa/pip/issues/5624&gt;`_)\n- Show a better error message when a configuration option has an invalid value. (`5644 &lt;https://github.com/pypa/pip/issues/5644&gt;`_)\n- Always revalidate cached simple API pages instead of blindly caching them for up to 10\n  minutes. (`5670 &lt;https://github.com/pypa/pip/issues/5670&gt;`_)\n- Avoid caching self-version-check information when cache is disabled. (`5679 &lt;https://github.com/pypa/pip/issues/5679&gt;`_)\n- Avoid traceback printing on autocomplete after flags in the CLI. (`5751 &lt;https://github.com/pypa/pip/issues/5751&gt;`_)\n- Fix incorrect parsing of egg names if pip needs to guess the package name. (`5819 &lt;https://github.com/pypa/pip/issues/5819&gt;`_)\n\nVendored Libraries\n------------------\n\n- Upgrade certifi to 2018.8.24\n- Upgrade packaging to 18.0\n- Add pep517 version 0.2\n- Upgrade pytoml to 0.1.19\n- Upgrade pkg_resources to 40.4.3 (via setuptools)\n\nImproved Documentation\n----------------------\n\n- Fix &quot;Requirements Files&quot; reference in User Guide (`user_guide_fix_requirements_file_ref &lt;https://github.com/pypa/pip/issues/user_guide_fix_requirements_file_ref&gt;`_)\n   ```\n   \n  \n  \n   ### 18.0\n   ```\n   =================\n\nProcess\n-------\n\n- Switch to a Calendar based versioning scheme.\n- Formally document our deprecation process as a minimum of 6 months of deprecation\n  warnings.\n- Adopt and document NEWS fragment writing style.\n- Switch to releasing a new, non bug fix version of pip every 3 months.\n\nDeprecations and Removals\n-------------------------\n\n- Remove the legacy format from pip list. (3651, 3654)\n- Dropped support for Python 3.3. (3796)\n- Remove support for cleaning up egg fragment postfixes. (4174)\n- Remove the shim for the old get-pip.py location. (5520)\n\n  For the past 2 years, it&#39;s only been redirecting users to use the newer\n  https://bootstrap.pypa.io/get-pip.py location.\n\nFeatures\n--------\n\n- Introduce a new --prefer-binary flag, to prefer older wheels over newer source packages. (3785)\n- Improve autocompletion function on file name completion after options\n  which have ``&lt;file&gt;``, ``&lt;dir&gt;`` or ``&lt;path&gt;`` as metavar. (4842, 5125)\n- Add support for installing PEP 518 build dependencies from source. (5229)\n- Improve status message when upgrade is skipped due to only-if-needed strategy. (5319)\n\nBug Fixes\n---------\n\n- Update pip&#39;s self-check logic to not use a virtualenv specific file and honor cache-dir. (3905)\n- Remove compiled pyo files for wheel packages. (4471)\n- Speed up printing of newly installed package versions. (5127)\n- Restrict install time dependency warnings to directly-dependant packages. (5196, 5457)\n\n  Warning about the entire package set has resulted in users getting confused as\n  to why pip is printing these warnings.\n- Improve handling of PEP 518 build requirements: support environment markers and extras. (5230, 5265)\n- Remove username/password from log message when using index with basic auth. (5249)\n- Remove trailing os.sep from PATH directories to avoid false negatives. (5293)\n- Fix &quot;pip wheel pip&quot; being blocked by the &quot;don&#39;t use pip to modify itself&quot; check. (5311, 5312)\n- Disable pip&#39;s version check (and upgrade message) when installed by a different package manager. (5346)\n\n  This works better with Linux distributions where pip&#39;s upgrade message may\n  result in users running pip in a manner that modifies files that should be\n  managed by the OS&#39;s package manager.\n- Check for file existence and unlink first when clobbering existing files during a wheel install. (5366)\n- Improve error message to be more specific when no files are found as listed in as listed in PKG-INFO. (5381)\n- Always read ``pyproject.toml`` as UTF-8. This fixes Unicode handling on Windows and Python 2. (5482)\n- Fix a crash that occurs when PATH not set, while generating script location warning. (5558)\n- Disallow packages with ``pyproject.toml`` files that have an empty build-system table. (5627)\n\nVendored Libraries\n------------------\n\n- Update CacheControl to 0.12.5.\n- Update certifi to 2018.4.16.\n- Update distro to 1.3.0.\n- Update idna to 2.7.\n- Update ipaddress to 1.0.22.\n- Update pkg_resources to 39.2.0 (via setuptools).\n- Update progress to 1.4.\n- Update pytoml to 0.1.16.\n- Update requests to 2.19.1.\n- Update urllib3 to 1.23.\n\nImproved Documentation\n----------------------\n\n- Document how to use pip with a proxy server. (512, 5574)\n- Document that the output of pip show is in RFC-compliant mail header format. (5261)\n   ```\n   \n  \n  \n   ### 10.0.1\n   ```\n   ===================\n\nFeatures\n--------\n\n- Switch the default repository to the new &quot;PyPI 2.0&quot; running at\n  https://pypi.org/. (5214)\n\nBug Fixes\n---------\n\n- Fix a bug that made get-pip.py unusable on Windows without renaming. (5219)\n- Fix a TypeError when loading the cache on older versions of Python 2.7.\n  (5231)\n- Fix and improve error message when EnvironmentError occurs during\n  installation. (5237)\n- A crash when reinstalling from VCS requirements has been fixed. (5251)\n- Fix PEP 518 support when pip is installed in the user site. (5524)\n\nVendored Libraries\n------------------\n\n- Upgrade distlib to 0.2.7\n   ```\n   \n  \n  \n   ### 10.0.0\n   ```\n   ===================\n\nBug Fixes\n---------\n\n- Prevent false-positive installation warnings due to incomplete name\n  normalizaton. (5134)\n- Fix issue where installing from Git with a short SHA would fail. (5140)\n- Accept pre-release versions when checking for conflicts with pip check or pip\n  install. (5141)\n- ``ioctl(fd, termios.TIOCGWINSZ, ...)`` needs 8 bytes of data (5150)\n- Do not warn about script location when installing to the directory containing\n  sys.executable. This is the case when &#39;pip install&#39;ing without activating a\n  virtualenv. (5157)\n- Fix PEP 518 support. (5188)\n- Don&#39;t warn about script locations if ``--target`` is specified. (5203)\n   ```\n   \n  \n  \n   ### 10.0.0b2\n   ```\n   =====================\n\nBug Fixes\n---------\n\n- Fixed line endings in CA Bundle - 10.0.0b1 was inadvertently released with Windows\n  line endings. (5131)\n   ```\n   \n  \n  \n   ### 10.0.0b1\n   ```\n   =====================\n\nDeprecations and Removals\n-------------------------\n\n- Removed the deprecated ``--egg`` parameter to ``pip install``. (1749)\n- Removed support for uninstalling projects which have been installed using\n  distutils. distutils installed projects do not include metadata indicating\n  what files belong to that install and thus it is impossible to *actually*\n  uninstall them rather than just remove the metadata saying they&#39;ve been\n  installed while leaving all of the actual files behind. (2386)\n- Removed the deprecated ``--download`` option to ``pip install``. (2643)\n- Removed the deprecated --(no-)use-wheel flags to ``pip install`` and ``pip\n  wheel``. (2699)\n- Removed the deprecated ``--allow-external``, ``--allow-all-external``, and\n  ``--allow-unverified`` options. (3070)\n- Switch the default for ``pip list`` to the columns format, and deprecate the\n  legacy format. (3654, 3686)\n- Deprecate support for Python 3.3. (3796)\n- Removed the deprecated ``--default-vcs`` option. (4052)\n- Removed the ``setup.py test`` support from our sdist as it wasn&#39;t being\n  maintained as a supported means to run our tests. (4203)\n- Dropped support for Python 2.6. (4343)\n- Removed the --editable flag from pip download, as it did not make sense\n  (4362)\n- Deprecate SVN detection based on dependency links in ``pip freeze``. (4449)\n- Move all of pip&#39;s APIs into the pip._internal package, properly reflecting\n  the fact that pip does not currently have any public APIs. (4696, 4700)\n\nFeatures\n--------\n\n- Add `--progress-bar &lt;progress_bar&gt;` to ``pip download``, ``pip install`` and\n  ``pip wheel`` commands, to allow selecting a specific progress indicator or,\n  to completely suppress, (for example in a CI environment) use\n  ``--progress-bar off. (2369, 2756)\n- Add `--no-color` to `pip`. All colored output is disabled if this flag is\n  detected. (2449)\n- pip uninstall now ignores the absence of a requirement and prints a warning.\n  (3016, 4642)\n- Improved the memory and disk efficiency of the HTTP cache. (3515)\n- Support for packages specifying build dependencies in pyproject.toml (see\n  `PEP 518 &lt;https://www.python.org/dev/peps/pep-0518/&gt;`__). Packages which\n  specify one or more build dependencies this way will be built into wheels in\n  an isolated environment with those dependencies installed. (3691)\n- pip now supports environment variable expansion in requirement files using\n  only ``${VARIABLE}`` syntax on all platforms. (3728)\n- Allowed combinations of -q and -v to act sanely. Then we don&#39;t need warnings\n  mentioned in the issue. (4008)\n- Add `--exclude-editable` to ``pip freeze`` and ``pip list`` to exclude\n  editable packages from installed package list. (4015, 4016)\n- Improve the error message for the common ``pip install ./requirements.txt``\n  case. (4127)\n- Add support for the new `` url`` syntax from PEP 508. (4175)\n- Add setuptools version to the statistics sent to BigQuery. (4209)\n- Report the line which caused the hash error when using requirement files.\n  (4227)\n- Add a pip config command for managing configuration files. (4240)\n- Allow ``pip download`` to be used with a specific platform when ``--no-deps``\n  is set. (4289)\n- Support build-numbers in wheel versions and support sorting with\n  build-numbers. (4299)\n- Change pip outdated to use PackageFinder in order to do the version lookup so\n  that local mirrors in Environments that do not have Internet connections can\n  be used as the Source of Truth for latest version. (4336)\n- pip now retries on more HTTP status codes, for intermittent failures.\n  Previously, it only retried on the standard 503. Now, it also retries on 500\n  (transient failures on AWS S3), 520 and 527 (transient failures on\n  Cloudflare). (4473)\n- pip now displays where it is looking for packages, if non-default locations\n  are used. (4483)\n- Display a message to run the right command for modifying pip on Windows\n  (4490)\n- Add Man Pages for pip (4491)\n- Make uninstall command less verbose by default (4493)\n- Switch the default upgrade strategy to be &#39;only-if-needed&#39; (4500)\n- Installing from a local directory or a VCS URL now builds a wheel to install,\n  rather than running ``setup.py install``. Wheels from these sources are not\n  cached. (4501)\n- Don&#39;t log a warning when installing a dependency from Git if the name looks\n  like a commit hash. (4507)\n- pip now displays a warning when it installs scripts from a wheel outside the\n  PATH. These warnings can be suppressed using a new --no-warn-script-location\n  option. (4553)\n- Local Packages can now be referenced using forward slashes on Windows.\n  (4563)\n- pip show learnt a new Required-by field that lists currently installed\n  packages that depend on the shown package (4564)\n- The command-line autocompletion engine ``pip show`` now autocompletes\n  installed distribution names. (4749)\n- Change documentation theme to be in line with Python Documentation (4758)\n- Add auto completion of short options. (4954)\n- Run &#39;setup.py develop&#39; inside pep518 build environment. (4999)\n- pip install now prints an error message when it installs an incompatible\n  version of a dependency. (5000)\n- Added a way to distinguish between pip installed packages and those from the\n  system package manager in &#39;pip list&#39;. Specifically, &#39;pip list -v&#39; also shows\n  the installer of package if it has that meta data. (949)\n- Show install locations when list command ran with &quot;-v&quot; option. (979)\n\nBug Fixes\n---------\n\n- Allow pip to work if the ``GIT_DIR`` and ``GIT_WORK_TREE`` environment\n  variables are set. (1130)\n- Make ``pip install --force-reinstall`` not require passing ``--upgrade``.\n  (1139)\n- Return a failing exit status when `pip install`, `pip download`, or `pip\n  wheel` is called with no requirements. (2720)\n- Interactive setup.py files will no longer hang indefinitely. (2732, 4982)\n- Correctly reset the terminal if an exception occurs while a progress bar is\n  being shown. (3015)\n- &quot;Support URL-encoded characters in URL credentials.&quot; (3236)\n- Don&#39;t assume sys.__stderr__.encoding exists (3356)\n- Fix ``pip uninstall`` when ``easy-install.pth`` lacks a trailing newline.\n  (3741)\n- Keep install options in requirements.txt from leaking. (3763)\n- pip no longer passes global options from one package to later packages in the\n  same requirement file. (3830)\n- Support installing from Git refs (3876)\n- Use pkg_resources to parse the entry points file to allow names with colons.\n  (3901)\n- ``-q`` specified once correctly sets logging level to WARNING, instead of\n  CRITICAL. Use `-qqq` to have the previous behavior back. (3994)\n- Shell completion scripts now use correct executable names (e.g., ``pip3``\n  instead of ``pip``) (3997)\n- Changed vendored encodings from ``utf8`` to ``utf-8``. (4076)\n- Fixes destination directory of data_files when ``pip install --target`` is\n  used. (4092)\n- Limit the disabling of requests&#39; pyopenssl to Windows only. Fixes\n  &quot;SNIMissingWarning / InsecurePlatformWarning not fixable with pip 9.0 /\n  9.0.1&quot; (for non-Windows) (4098)\n- Support the installation of wheels with non-PEP 440 version in their\n  filenames. (4169)\n- Fall back to sys.getdefaultencoding() if locale.getpreferredencoding()\n  returns None in `pip.utils.encoding.auto_decode`. (4184)\n- Fix a bug where `SETUPTOOLS_SHIM` got called incorrectly for relative path\n  requirements by converting relative paths to absolute paths prior to calling\n  the shim. (4208)\n- Return the latest version number in search results. (4219)\n- Improve error message on permission errors (4233)\n- Fail gracefully when ``/etc/image_version`` (or another distro version file)\n  appears to exists but is not readable. (4249)\n- Avoid importing setuptools in the parent pip process, to avoid a race\n  condition when upgrading one of setuptools dependencies. (4264)\n- Fix for an incorrect ``freeze`` warning message due to a package being\n  included in multiple requirements files that were passed to ``freeze``.\n  Instead of warning incorrectly that the package is not installed, pip now\n  warns that the package was declared multiple times and lists the name of each\n  requirements file that contains the package in question. (4293)\n- Generalize help text for ``compile``/``no-compile`` flags. (4316)\n- Handle the case when ``/etc`` is not readable by the current user by using a\n  hardcoded list of possible names of release files. (4320)\n- Fixed a ``NameError`` when attempting to catch ``FileNotFoundError`` on\n  Python 2.7. (4322)\n- Ensure USER_SITE is correctly initialised. (4437)\n- Reinstalling an editable package from Git no longer assumes that the\n  ``master`` branch exists. (4448)\n- This fixes an issue where when someone who tries to use git with pip but pip\n  can&#39;t because git is not in the path environment variable. This clarifies the\n  error given to suggest to the user what might be wrong. (4461)\n- Improve handling of text output from build tools (avoid Unicode errors)\n  (4486)\n- Fix a &quot;No such file or directory&quot; error when using --prefix. (4495)\n- Allow commands to opt out of --require-venv. This allows pip help to work\n  even when the environment variable PIP_REQUIRE_VIRTUALENV is set. (4496)\n- Fix warning message on mismatched versions during installation. (4655)\n- pip now records installed files in a deterministic manner improving\n  reproducibility. (4667)\n- Fix an issue where ``pip install -e`` on a Git url would fail to update if a\n  branch or tag name is specified that happens to match the prefix of the\n  current ``HEAD`` commit hash. (4675)\n- Fix an issue where a variable assigned in a try clause was accessed in the\n  except clause, resulting in an undefined variable error in the except clause.\n  (4811)\n- Use log level `info` instead of `warning` when ignoring packages due to\n  environment markers. (4876)\n- Replaced typo mistake in subversion support. (4908)\n- Terminal size is now correctly inferred when using Python 3 on Windows.\n  (4966)\n- Abort if reading configuration causes encoding errors. (4976)\n- Add a ``--no-user`` option and use it when installing build dependencies.\n  (5085)\n\nVendored Libraries\n------------------\n\n- Upgraded appdirs to 1.4.3.\n- Upgraded CacheControl to 0.12.3.\n- Vendored certifi at 2017.7.27.1.\n- Vendored chardet at 3.0.4.\n- Upgraded colorama to 0.3.9.\n- Upgraded distlib to 0.2.6.\n- Upgraded distro to 1.2.0.\n- Vendored idna at idna==2.6.\n- Upgraded ipaddress to 1.0.18.\n- Vendored msgpack-python at 0.4.8.\n- Removed the vendored ordereddict.\n- Upgraded progress to 1.3.\n- Upgraded pyparsing to 2.2.0.\n- Upgraded pytoml to 0.1.14.\n- Upgraded requests to 2.18.4.\n- Upgraded pkg_resources (via setuptools) to 36.6.0.\n- Upgraded six to 1.11.0.\n- Vendored urllib3 at 1.22.\n- Upgraded webencodings to 0.5.1.\n\nImproved Documentation\n----------------------\n\n- Added documentation on usage of --build command line option (4262)\n-  (4358)\n- Document how to call pip from your code, including the fact that we do not\n  provide a Python API. (4743)\n   ```\n   \n  \n</details>\n\n\n \n\n<details>\n  <summary>Links</summary>\n  \n  - PyPI: https://pypi.org/project/pip\n  - Changelog: https://pyup.io/changelogs/pip/\n  - Homepage: https://pip.pypa.io/\n</details>\n\n"}], "myint/scspell": [{"repo_url": "https://github.com/myint/scspell", "id": 25, "title": "python2 set-dictionary issue", "labels": ["help wanted", "bug"], "description": "``` console\r\ntom@computer:~/$ scspell --set-dictionary=/home/tom/Dropbox/work/data/spelling.txt\r\nTraceback (most recent call last):\r\n  File \"/home/tom/hacking/energysage/env/bin/scspell\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 899, in main\r\n    set_dictionary(args.dictionary)\r\n  File \"/home/tom/hacking/energysage/env/local/lib/python2.7/site-packages/scspell/__init__.py\", line 648, in set_dictionary\r\n    config.write(f)\r\n  File \"/usr/lib/python2.7/ConfigParser.py\", line 414, in write\r\n    fp.write(\"\\n\")\r\nTypeError: write() argument 1 must be unicode, not str\r\ntom@computer:~/$ Python 2.7.13\r\ntom@computer:~/$ pip freeze | grep -i scspell\r\nscspell3k==2.1\r\n```\r\n\r\n"}], "Kuniwak/vint": [{"repo_url": "https://github.com/Kuniwak/vint", "id": 182, "title": "#177 breaks pip install for python2", "labels": ["wontfix"], "description": "Issuing `pip install vim-vint` results in an error: \n\n```\nComplete output from command python setup.py egg_info:\nerror in vim-vint setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers\n```\n\nUsing pip3 or specifying vim-vint=0.3.9 installs vim-vint correctly.\n\nI can't find any documentation on `~=`, which suggests that this is the culprit.\n"}], "jendrikseipp/vulture": []}